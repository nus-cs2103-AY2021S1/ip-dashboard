[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 10,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String FILE_DIRECTORY \u003d \"data/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String FILE_NAME \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            storage \u003d new Storage(FILE_DIRECTORY, FILE_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            List\u003cTask\u003e taskList \u003d storage.generateTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            tasks \u003d new TaskList(storage.generateTaskList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            ui.showError(e.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                if (!fullCommand.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 52
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Contains methods for processing user input, converting it to a {@link Command}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * that can be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Converts user input into a {@link Command} that can be executed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @param input String input entered by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @return {@link Command} that can be executed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws DukeException When no integer input is provided after \"done\" or \"delete\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws DukeException When no description is provided for a task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws DukeException When there is no date flagged by \"/by\" for a deadline, or \"/at\" for an event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws DukeException When the date input for a deadline or event does not follow YYYY-MM-DD format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws DukeException When unsupported input is entered."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            //Splits input into parts by spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            String[] inputByParts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            //Runs through the list of acceptable commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            } else if (inputByParts[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(inputByParts[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            } else if (inputByParts[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(inputByParts[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new MarkDoneCommand(taskNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            } else if (inputByParts[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String toFind \u003d inputByParts[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new FindCommand(toFind);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String taskType \u003d inputByParts[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                validateTaskType(taskType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String description \u003d inputByParts[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return parseNewTaskInput(taskType, description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.NO_DESCRIPTION_PROVIDED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.INVALID_NUMBER_INPUT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static Command parseNewTaskInput(String taskType, String description) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new TodoCommand(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String[] deadlineDetails \u003d description.split(\"/by\", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String deadlineDesc \u003d deadlineDetails[0].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                LocalDate deadlineTime \u003d LocalDate.parse(deadlineDetails[1].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new DeadlineCommand(deadlineDesc, deadlineTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String[] eventDetails \u003d description.split(\"/at\", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String eventDesc \u003d eventDetails[0].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                LocalDate eventTime \u003d LocalDate.parse(eventDetails[1].trim());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new EventCommand(eventDesc, eventTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.NO_TIMEFRAME_PROVIDED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.INVALID_TIMEFRAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static void validateTaskType(String taskType) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!(taskType.equals(\"todo\") || taskType.equals(\"deadline\") || taskType.equals(\"event\"))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DukeException(taskType, DukeException.ExceptionType.UNEXPECTED_INPUT_IN_FILE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 87
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String line \u003d \"//\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private String directoryName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private File databaseFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private FileWriter fw;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Storage(String directoryName, String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.directoryName \u003d directoryName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        //Create directory if it does not exist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        File directory \u003d new File(directoryName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        boolean directoryIsCreated \u003d directory.mkdirs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        //Create path to file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        databaseFile \u003d new File(directoryName + fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public List\u003cTask\u003e generateTaskList() throws DukeException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        List\u003cTask\u003e tempTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        //Create file if it does not yet exist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        boolean fileIsCreated \u003d databaseFile.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        //Read contents of file and transfer into list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Scanner s \u003d new Scanner(databaseFile);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            String nextstr \u003d s.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            Task next \u003d generateTaskFromFile(nextstr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            tempTaskList.add(next);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return tempTaskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveTaskList(TaskList tl) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        fw \u003d new FileWriter(directoryName + fileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        fw.write(tl.formatForSave());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        fw.flush();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void finalise() throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Task generateTaskFromFile(String nextLine) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String[] taskCharacteristics \u003d nextLine.split(line);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        boolean isDone \u003d taskCharacteristics[1].equals(\"1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String type \u003d taskCharacteristics[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String desc \u003d taskCharacteristics[2];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case (\"T\"):"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return new Todo(desc);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case (\"D\"):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return new Deadline(desc, LocalDate.parse(taskCharacteristics[3]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case (\"E\"):"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return new Event(desc, LocalDate.parse(taskCharacteristics[3]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DukeException(type,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    DukeException.ExceptionType.UNEXPECTED_INPUT_IN_FILE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 81
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        StringBuilder res \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            res.append(i)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    .append(taskList.get(i - 1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (i !\u003d taskList.size()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                res.append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return res.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String formatForSave() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        StringBuilder res \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            res.append(t.getSaveFormat());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            res.append(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return res.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        taskList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Task getTask(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DukeException(DukeException.ExceptionType.REQUESTED_NONEXISTENT_ITEM);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public TaskList findTasks(String phrase) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        List\u003cTask\u003e searchResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (task.getDescription().contains(phrase)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                searchResult.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new TaskList(searchResult);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 71
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String TASK_LIST_NUMBER \u003d \"\\nNow you have %d tasks in the list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String TASK_REMOVED \u003d \"Noted. I\u0027ve removed this task: \\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_READ \u003d \"Here are the tasks in your list: \\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_ADDED \u003d \"Got it. I\u0027ve added this task: \\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_COMPLETED \u003d \"Nice! I\u0027ve marked this task as complete. \\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String ERROR \u003d \"Whoops! There was an error. \\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String FAREWELL \u003d \"Bye. Hope to see you again soon.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String DASH \u003d (\"\\u2500\").repeat(5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String GREETING \u003d \"Hello! I\u0027m Duke \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(GREETING);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void displayTaskAdd(Task t, int numberOfItems) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(TASK_ADDED + t.toString() + String.format("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                TASK_LIST_NUMBER, numberOfItems"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void displayTaskComplete(Task t) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(TASK_COMPLETED + t.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void displayTaskDelete(Task t, int numberOfItems) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(TASK_REMOVED + t.toString() + String.format("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                TASK_LIST_NUMBER, numberOfItems"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void listTasks(TaskList tl) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(TASK_READ + tl);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(ERROR + message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        printMessage(FAREWELL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private void printMessage(String message) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        System.out.println(DASH + \"\\n\" + message + \"\\n\" + DASH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String rawInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return rawInput.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 75
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 15
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final LocalDate deadlineTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final String deadlineDesc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public DeadlineCommand(String deadlineDesc, LocalDate deadlineTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.deadlineDesc \u003d deadlineDesc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Deadline newTask \u003d new Deadline(deadlineDesc, deadlineTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.displayTaskAdd(newTask, tasks.getCount());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Task deletedTask \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.displayTaskDelete(deletedTask, tasks.getCount());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 26
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final LocalDate eventTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final String eventDesc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public EventCommand(String eventDesc, LocalDate eventTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.eventDesc \u003d eventDesc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Event newTask \u003d new Event(eventDesc, eventTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.displayTaskAdd(newTask, tasks.getCount());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        storage.saveTaskList(tasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        storage.finalise();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return obj \u003d\u003d this || obj instanceof ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 25
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private String toFind;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public FindCommand(String toFind) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.toFind \u003d toFind;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.listTasks("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                tasks.findTasks(toFind));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.listTasks(tasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 18
    }
  },
  {
    "path": "src/main/java/duke/command/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class MarkDoneCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public MarkDoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Task completedTask \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        completedTask.markDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.displayTaskComplete(completedTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 27
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Todo newTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ui.displayTaskAdd(newTask, tasks.getCount());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class DukeException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    //for exceptions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String delete_task_number_missing \u003d \"Please enter a valid duke.task number\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_INDEX_OUT_OF_BOUNDS \u003d \"That task does not exist.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_NUMBER_FORMAT \u003d \"Please enter the task number in numerals.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_NO_DESCRIPTION \u003d \"Invalid, there is missing information.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_INVALID_TYPE \u003d \"Invalid, not an accepted task type.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String TASK_INVALID_DATE \u003d \"Invalid date. Please enter the date in YYYY-MM-DD format.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ExceptionType type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public enum ExceptionType {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        UNEXPECTED_INPUT_IN_FILE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        NO_DESCRIPTION_PROVIDED,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        INVALID_NUMBER_INPUT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        NO_TIMEFRAME_PROVIDED,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        INVALID_TIMEFRAME,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        REQUESTED_NONEXISTENT_ITEM,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public DukeException(ExceptionType type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public DukeException(String word, ExceptionType type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case INVALID_TIMEFRAME:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return TASK_INVALID_DATE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case INVALID_NUMBER_INPUT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return TASK_NUMBER_FORMAT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case NO_TIMEFRAME_PROVIDED:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return \"This task requires a date. Please follow the following format: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    + \"\\ndeadline [description] /by [date]\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    + \"\\nOR:\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    + \"\\nevent [description] /at [date]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case NO_DESCRIPTION_PROVIDED:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return TASK_NO_DESCRIPTION;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case UNEXPECTED_INPUT_IN_FILE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return TASK_INVALID_TYPE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case REQUESTED_NONEXISTENT_ITEM:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return TASK_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return \"There is an error. Try again.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Deadline(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        super(description, \"D\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String getSaveFormat() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return super.getSaveFormat() + Storage.line + deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "               + String.format(\" (by: %s)\", deadline.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        super(description, \"E\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String getSaveFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return super.getSaveFormat() + Storage.line + date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + String.format(\" (at: %s)\", date.format("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 27
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String tick \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String cross \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private String taskMarker \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    protected Task(String description, String taskMarker) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.taskMarker \u003d taskMarker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String status \u003d isDone ? tick : cross;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return boxFormat(taskMarker) + boxFormat(status) + \" \" + description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String getSaveFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        int isDoneInt \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return taskMarker + Storage.line + isDoneInt"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + Storage.line + description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    protected String boxFormat(String symbol) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return String.format(\"[%s]\", symbol);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        super(description, \"T\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 9
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void parse_byeCommand() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Command expected \u003d new ExitCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Command actual \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void parse_unsupportedWord_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Throwable exception \u003d assertThrows(DukeException.class, () -\u003e Parser.parse(\"dodobird\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(\"Invalid, not an accepted task type.\", exception.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 24
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void displayTaskAdd_todo() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        //Set output stream to capture displayed text"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        System.setOut(new PrintStream(outputStream));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String testTodoText \u003d \"This is a test todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Todo testTodo \u003d new Todo(testTodoText);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        new Ui().displayTaskAdd(testTodo, 3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String expected \u003d \"─────\" + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + testTodo.toString()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + \"\\nNow you have 3 tasks in the list\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + \"─────\" + \"\\r\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expected, outputStream.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 29
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "nothing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "todo event"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "deadline event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "deadline homework /by 7pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "event meeting /at will confirm later"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "REM javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 5,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 2,
      "-": 36
    }
  }
]
