[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 2,
      "-": 24
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "T | 0 | homework"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "D | 0 | return book | Apr 12 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "E | 0 | project meeting | Jan 01 2020"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 3
    }
  },
  {
    "path": "src/main/java/duke/CommandAgent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** An agent to process incoming command and return the feedback */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class CommandAgent {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public CommandAgent(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        CommandAgent.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static int listSize() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return taskList.getSize();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Handles the command taken from user input, execute it"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * and save the updated task list data to hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param c The command parsed from user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param ui The user interface where response is sent to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param storage The data storage handler."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void handleCommand(Command c, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String response \u003d executeCommand(c);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ui.showResponse(response);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Takes in the command and execute it based on the request from the command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param command The command parsed from user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String response for the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String executeCommand(Command command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int taskId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            switch (command.sendRequest()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"end\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                response +\u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"create\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                List\u003cString\u003e taskInfo \u003d command.getContent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                Task newTask \u003d createTask(taskInfo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                taskList \u003d taskList.addTask(newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                response +\u003d generateCreateResponse();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"retrieval\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                response +\u003d generateRetrievalResponse();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                List\u003cString\u003e updateList \u003d command.getContent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                taskId \u003d Integer.parseInt(updateList.get(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                taskList \u003d taskList.markAsDone(taskId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                response +\u003d generateUpdateResponse(taskId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                List\u003cString\u003e deleteList \u003d command.getContent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                taskId \u003d Integer.parseInt(deleteList.get(0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                Task deletedTask \u003d taskList.getTaskById(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                taskList \u003d taskList.deleteTask(taskId);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                response +\u003d generateDeleteResponse(deletedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"search\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                List\u003cString\u003e keywordList \u003d command.getContent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                response +\u003d generateSearchResponse(keywordList.get(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (DateTimeParseException | DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            response +\u003d e.getMessage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates different types of tasks based on the identifier stored in the taskInfo."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The Parser has ensured no erroneous keyword will be sent to agent."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param taskInfo A list of String containing all the relevant information for the task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A correct type of Task object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DateTimeParseException If any schedule cannot be parsed by the LocalDate formatter."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the a task with the same name is already stored in the list or"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * the identifier is none of \"E\", \"D\" or \"T\"."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Task createTask(List\u003cString\u003e taskInfo) throws DateTimeParseException, DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String identifier \u003d taskInfo.get(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String name \u003d taskInfo.get(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!taskList.findTasksByKeyword(name).equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! This task has already been stored in the list!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            String schedule;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            switch (identifier) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                schedule \u003d taskInfo.get(2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                LocalDate eventTime \u003d LocalDate.parse(schedule);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new Event(name, false, eventTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                schedule \u003d taskInfo.get(2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                LocalDate deadlineTime \u003d LocalDate.parse(schedule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new Deadline(name, false, deadlineTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new Todo(name, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! This type of task cannot be created by me!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Generates the response for a task creation."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String suggesting the completion of task creation."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String generateCreateResponse() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int taskId \u003d taskList.getSize();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Task currentTask \u003d taskList.getTaskById(taskId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String result \u003d \"Got it. I\u0027ve added this task:\\n  \";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        result +\u003d currentTask;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        result +\u003d String.format(\"\\nNow you have %d tasks in the list.\", taskId);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Generates the response for an update of task status."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param taskId The displayed id in the taskList."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String suggesting the completion of task update."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String generateUpdateResponse(int taskId) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Task currentTask \u003d taskList.getTaskById(taskId);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n  \" + currentTask;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Generates the response for a retrieval of tasks information."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String showing all the task information."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String generateRetrievalResponse() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String result \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        result +\u003d taskList.printTasks();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Generates the response for a delete of task from the task list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param deletedTask The delete task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String suggesting the task has been deleted."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String generateDeleteResponse(Task deletedTask) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String result \u003d \"Noted. I\u0027ve removed this task:\\n  \";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        result +\u003d deletedTask;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        result +\u003d String.format(\"\\nNow you have %d tasks in the list.\", listSize());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Generates the response for the searching of all the tasks containing the specified keyword."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param keyword The keyword which must be present in the desired task name."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String showing the response to the user with all the tasks desired."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String generateSearchResponse(String keyword) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String result \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        result +\u003d taskList.findTasksByKeyword(keyword);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 183
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** Driver class for duke.Duke chat bot called \"Jarvis\" */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final CommandAgent agent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Constructs an instance for Duke class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Takes in a file path to initialize storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Initializes a command agent and a user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param filePath The path of task list data stored in the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        agent \u003d new CommandAgent(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Runs the program by taking in the command, handling them, storing data to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * hard disk, and returning to users appropriate response."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * The running will terminate when an ExitCommand is called."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                agent.handleCommand(c, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Executes the \"Jarvis\" bot to run by loading the task list stored in \u003ckbd\u003edata/duke.txt\u003c/kbd\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param args The main() function arguments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 58,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A exception class DukeException to handle the exceptions in chat bot */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A Parser object to parse the user input */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Reads in user input and identify the correct type of duke.command for the input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param userInput A String from user\u0027s input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A Command to be processed by the agent."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the command construction involves error or"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * the DateTime parsing involves error."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String commandWord \u003d words[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String content \u003d words.length \u003d\u003d 1 ? \"\" : Parser.generateContent(words);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new DoneCommand(content);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new DeleteCommand(content);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new TodoCommand(content);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new DeadlineCommand(content);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new EventCommand(content);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                return new FindCommand(content);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (DukeException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Generates content for the input without the command word."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param words User input parsed into an array of string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String representing the parts of the user input without the command word."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public static String generateContent(String[] words) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(words[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (int i \u003d 2; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            result.append(\" \").append(words[i]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 69
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** Storage class to manage the saving of TaskList into hard disk */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Path folderPath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String currentRelativePath \u003d Paths.get(\".\").toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.filePath \u003d Paths.get(currentRelativePath, filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.folderPath \u003d Paths.get(currentRelativePath, \"data\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Loads the TaskList that is stored in \u003ckbd\u003edata/duke.text\u003c/kbd\u003e file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Handles the cases where either file or folder is not created."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A TaskList to be used by the program."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If there are I/O exceptions occurred when reading the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        TaskList taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            createPath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            List\u003cString\u003e tasksInFile \u003d Files.readAllLines(filePath, Charset.defaultCharset());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            taskList \u003d this.loadTaskList(tasksInFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I/O Error\" + Arrays.toString(e.getStackTrace()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates the directory and/or file if they have not been created yet."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws IOException If folderPath or filePath are parsed wrongly."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void createPath() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (Files.notExists(folderPath)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Files.createDirectory(folderPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (Files.notExists(filePath)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Files.createFile(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns a loaded TaskList for program data storage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * An empty TaskList is return if content in file is empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param tasksInFile The list of tasks stored in the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A TaskList based on the tasks recorded in the file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TaskList loadTaskList(List\u003cString\u003e tasksInFile) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cTask\u003e tasksLoaded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (String s : tasksInFile) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            String[] taskContentArr \u003d s.split(\" [|] \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            String taskSchedule;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            boolean taskIsDone \u003d taskContentArr[1].equals(\"1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            switch(taskContentArr[0]) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case (\"T\"):"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                tasksLoaded.add(new Todo(taskContentArr[2], taskIsDone));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case (\"D\"):"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                taskSchedule \u003d taskContentArr[3];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                LocalDate deadlineTime \u003d LocalDate.parse(taskSchedule, formatter);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                tasksLoaded.add(new Deadline(taskContentArr[2], taskIsDone, deadlineTime));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            case (\"E\"):"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                taskSchedule \u003d taskContentArr[3];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                LocalDate eventTime \u003d LocalDate.parse(taskSchedule, formatter);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                tasksLoaded.add(new Event(taskContentArr[2], taskIsDone, eventTime));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new TaskList(tasksLoaded);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Stores a Task List in a predetermined filePath."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param taskList The taskList object to be saved."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void save(TaskList taskList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            List\u003cString\u003e formattedTasks \u003d taskList.formatTaskList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Files.write(this.filePath, formattedTasks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 116
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** User interface of the chat bot */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Prints welcome message in the chat bot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Jarvis\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                + \"What can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Prints a separating line."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Reads in a command input from user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A string representation of the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Prints the error message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param errorMessage The error message generated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Prints the loading error."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        System.out.println(\"OOPS!!! I\u0027m sorry, the file is not loaded correctly, please check its location\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns a response to the user if no error occurs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param response The response representing the result of the command execution."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void showResponse(String response) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 61
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which sends request to add task to list */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String sendRequest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"create\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 9
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** Represents an executable command */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    protected String content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.content \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sends a request to the command agent."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String representing the request content."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public abstract String sendRequest();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Checks if the command is an ExitCommand by reviewing its content."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A boolean value, 1 if it is an ExitCommand, 0 otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this.getContent().get(0).equals(\"bye\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns the content of the command; content differ for each type of command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * No content for the general Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A list of String containing relevant content from the command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public List\u003cString\u003e getContent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(this.content);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which adds a deadline to the taskList */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a DeadlineCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param content The task information supplied by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the content has missing name or schedule or the format does not contain /by."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public DeadlineCommand(String content) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!content.contains(\"/by\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The information contains invalid delimiter\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            String[] contentParts \u003d content.split(\" /by \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (contentParts[0].equals(\"\") || contentParts[1].equals(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The information of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                this.name \u003d contentParts[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                this.schedule \u003d contentParts[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public List\u003cString\u003e getContent() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(\"D\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(this.name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(this.schedule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.CommandAgent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which sends request to mark a task in list as done */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a DeleteCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param content The task information supplied by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the content has no input or improper input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public DeleteCommand(String content) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter a value\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else if (!(Character.isDigit(content.charAt(0)))) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter a numerical value\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else if (Integer.parseInt(content) \u003e CommandAgent.listSize() | Integer.parseInt(content) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter a valid index\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String sendRequest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"delete\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.CommandAgent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which sends request to mark a task in list as done */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a DoneCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param content The task information supplied by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the content has no input or improper input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public DoneCommand(String content) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter a value\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else if (!(Character.isDigit(content.charAt(0)))) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter a numerical value\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else if (Integer.parseInt(content) \u003e CommandAgent.listSize() | Integer.parseInt(content) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter a valid index\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String sendRequest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"update\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 31
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which adds an event to the taskList */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a EventCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param content The task information supplied by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the content has missing name or schedule or the format does not contain /at."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public EventCommand(String content) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (!content.contains(\"/at\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The information contains invalid delimiter\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            String[] contentParts \u003d content.split(\" /at \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (contentParts[0].equals(\"\") || contentParts[1].equals(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! The information of a event cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                this.name \u003d contentParts[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                this.schedule \u003d contentParts[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public List\u003cString\u003e getContent() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(\"E\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(this.name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(this.schedule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which sends request to terminate the bot */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.content \u003d \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String sendRequest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"end\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 13
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which find a task via a keyword */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a FindCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param content The keyword supplied by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If no keyword is supplied or more than 1 keyword is supplied."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public FindCommand(String content) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (content.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Please enter some keyword for me to find\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            String[] contentParts \u003d content.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            if (contentParts.length \u003e 1 | contentParts[0].equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please enter one keyword at a time\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                this.keyword \u003d contentParts[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String sendRequest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"search\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public List\u003cString\u003e getContent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(this.keyword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which sends request to show list */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String sendRequest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"retrieval\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 9
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** A subclass of Command which adds a todo to the taskList */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class TodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Creates a TodoCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param content The task information supplied by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the content is missing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TodoCommand(String content) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (content.equals(\"\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The name of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            this.name \u003d content;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public List\u003cString\u003e getContent() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(\"T\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        contentList.add(this.name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return contentList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** Represents an deadline task */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final LocalDate schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Deadline(String name, boolean isDone, LocalDate schedule) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns a string representation of the Deadline task\u0027s schedule in the pattern \"MMM d yyyy\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The string representation of the schedule."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String getSchedule() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this.schedule.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Deadline complete() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new Deadline(this.getName(), true, this.schedule);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int isDoneSignal \u003d this.isDoneTask() ? 1 : 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"D | \" + isDoneSignal + \" | \" + name + \" | \" + this.getSchedule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String taskString \u003d super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"[D]\" + taskString + \" (by: \" + this.getSchedule() + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** Represents an event task */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final LocalDate schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Event(String name, boolean isDone, LocalDate schedule) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Returns a string representation of the Event task\u0027s schedule in the pattern \"MMM d yyyy\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The string representation of the schedule."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String getSchedule() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this.schedule.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Event complete() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new Event(this.getName(), true, this.schedule);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int isDoneSignal \u003d this.isDoneTask() ? 1 : 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"E | \" + isDoneSignal + \" | \" + name + \" | \" + this.getSchedule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String taskString \u003d super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"[E]\" + taskString + \" (at: \" + this.getSchedule() + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** Task is a class for each task specified from the user commands */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Gets the name of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String showing the name of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Gets the status of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A boolean indicating if the task is done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public boolean isDoneTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Marks the status of the task as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A new Task object with the status updated to \"done\"."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public abstract Task complete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Formats the task for data output display in the duke.txt file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A string to represent the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public abstract String format();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Displays the task object as a string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The status of the task followed by the name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String checkbox \u003d \"[\" + (this.isDoneTask() ? \"\\u2713\" : \"\\u2718\") + \"]\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return checkbox + \" \" + this.getName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 60
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** TaskList stores a list of tasks and the corresponding operations on it */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Gets the number of elements in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The number of elements in the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Gets the task in the list by its id."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param taskId The displayed id in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return The Task associated with id."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Task getTaskById(int taskId) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int index \u003d taskId - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Adds a new task to the list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param newTask The new task to be added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A new TaskList containing all the old tasks and the new task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TaskList addTask(Task newTask) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cTask\u003e newTaskList \u003d this.tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        newTaskList.add(newTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new TaskList(newTaskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Deletes a task in the list via its taskId."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param taskId The displayed id in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A new TaskList containing all the update tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TaskList deleteTask(int taskId) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int index \u003d taskId - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cTask\u003e newTaskList \u003d this.tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        newTaskList.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new TaskList(newTaskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Sets a task with input id in the list as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param taskId The displayed id in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A new TaskList containing all the update tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @throws DukeException If the task is already done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public TaskList markAsDone(int taskId) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Task currentTask \u003d this.getTaskById(taskId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        if (currentTask.isDone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! This task is already done!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            Task doneTask \u003d currentTask.complete();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            int index \u003d taskId - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            List\u003cTask\u003e newTaskList \u003d this.tasks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            newTaskList.set(index, doneTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            return new TaskList(newTaskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Prints all the tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String shows all tasks in a formatted way."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String printTasks() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String result \u003d IntStream.range(0, this.getSize())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .mapToObj((id) -\u003e String.format(\"\\n%d.%s\", id + 1, tasks.get(id)))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .reduce((a, b) -\u003e a + b)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Formats the tasks in task list to the style specified in level-7."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A list of string, each representing a formatted task in the task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public List\u003cString\u003e formatTaskList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        List\u003cString\u003e formattedTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        for (Task t: this.tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "            formattedTaskList.add(t.format());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return formattedTaskList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * Finds all the tasks containing the keyword"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @param keyword The keyword which must be present in the desired task name."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     * @return A String including all the tasks found whose name containing the keyword."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String findTasksByKeyword(String keyword) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return IntStream.range(0, this.getSize())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .mapToObj((id) -\u003e String.format(\"\\n%d.%s\", id + 1, tasks.get(id)))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .filter((s) -\u003e s.contains(keyword))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .reduce((a, b) -\u003e a + b)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "                .orElse(\"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 127
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "/** Represents a todo task */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Todo(String name, boolean isDone) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public Todo complete() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return new Todo(this.getName(), true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        int isDoneSignal \u003d this.isDoneTask() ? 1 : 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"T | \" + isDoneSignal + \" | \" + name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        String taskString \u003d super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        return \"[T]\" + taskString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 25
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline1\", false, schedule);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"[D][✘] deadline1 (by: Aug 20 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void getScheduleTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline1\", false, schedule);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"Aug 20 2020\", deadline.getSchedule());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void completeTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Deadline nonCompletedDeadline \u003d new Deadline(\"deadline1\", false, schedule);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Deadline completedDeadline \u003d new Deadline(\"deadline1\", true, schedule);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(completedDeadline.toString(), nonCompletedDeadline.complete().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void formatTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadline1\", false, schedule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"D | 0 | deadline1 | Aug 20 2020\", deadline.format());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 38
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Event event \u003d new Event(\"event1\", false, schedule);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"[E][✘] event1 (at: Aug 20 2020)\", event.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void getScheduleTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Event event \u003d new Event(\"event1\", false, schedule);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"Aug 20 2020\", event.getSchedule());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void completeTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Event nonCompletedEvent \u003d new Event(\"event1\", false, schedule);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Event completedEvent \u003d new Event(\"event1\", true, schedule);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(completedEvent.toString(), nonCompletedEvent.complete().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void formatTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Event event \u003d new Event(\"event1\", false, schedule);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"E | 0 | event1 | Aug 20 2020\", event.format());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 38
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Todo todo \u003d new Todo(\"todo1\", false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"[T][✘] todo1\", todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void completeTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Todo nonCompletedTodo \u003d new Todo(\"todo1\", false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Todo completedTodo \u003d new Todo(\"todo1\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(completedTodo.toString(), nonCompletedTodo.complete().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    public void formatTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        Todo todo \u003d new Todo(\"todo1\", false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "        assertEquals(\"T | 0 | todo1\", todo.format());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 27
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "D | 1 | return book | Apr 12 2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "E | 1 | project meeting | Jan 11 2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "T | 1 | borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "D | 0 | do homework | Jan 1 1998"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deadline return book /by 2020-04-12"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "event project meeting /at 2020-01-11"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "deadline do homework /by 1998-01-01"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "bad call"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "find homework"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "find book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "if exist ACTUAL.TXT del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 5,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "if"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "  )"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 8,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\CommandAgent.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\DukeException.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Parser.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Storage.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Ui.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\AddCommand.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\Command.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\DeadlineCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\DeleteCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\DoneCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\EventCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\ExitCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\FindCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\ListCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\TodoCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Deadline.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Event.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Task.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\TaskList.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Criss-Wang"
        },
        "content": "C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Todo.java"
      }
    ],
    "authorContributionMap": {
      "Criss-Wang": 21
    }
  }
]
