[
  {
    "path": "src/main/java/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalDate dueDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalTime dueTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadlines(String description, LocalDate dueDate, LocalTime dueTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueTime \u003d dueTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadlines(String description, LocalDate dueDate, LocalTime dueTime, boolean bool) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description, bool);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.dueTime \u003d dueTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadlines markDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Deadlines(this.description, this.dueDate, this.dueTime, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"E, d MMM yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedDate \u003d this.dueDate.format(myDateFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedTime \u003dthis.dueTime.format(myTimeFormat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[D][\\u2713] \" + this.description + \"(by:\" + formattedDate + \", \" +  formattedTime + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[D][\\u2718] \" + this.description + \"(by:\" + formattedDate + \", \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 39
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        List\u003cTask\u003e savedTasks \u003d getSavedTasks();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Have to resolve a case when the directory can\u0027t be found which returns savedTasks as null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        processInput(scanner, savedTasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void processInput(Scanner scanner, List\u003cTask\u003e saved) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d saved;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (saved !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"Hi! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            while (isNotTerminateCommand(currInput)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    if (isListCommand(currInput)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //List out all tasks\u0027 description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(readList(storedTasks));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (isDoneCommand(currInput)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        verifyDoneCommand(currInput, storedTasks.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        String[] parts \u003d currInput.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        storedTasks.set(index, storedTasks.get(index).markDone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(\"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + \"  \" + storedTasks.get(index).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (isDeleteCommand(currInput)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        verifyDeleteCommand(currInput, storedTasks.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        String[] parts \u003d currInput.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve removed this task:\" + \"\\n\" + \"  \" + storedTasks.get(index)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                                + \"\\n\" + \"Now you have \" + (storedTasks.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        storedTasks.remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //Save the task list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //handle task commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        addTasks(currInput, storedTasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(\"Got it. I\u0027ve added this task:\" + \"\\n\" + \"  \" + storedTasks.get(storedTasks.size() - 1)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                                + \"\\n\" + \"Now you have \" + storedTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //Save the task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    System.out.println(e + \"\\n\" + \"Please enter a valid command\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //Should continue to run the program as it is"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    System.out.println(e + \"\\n\" + \"Please enter a valid input\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //Should continue to run the program as it is"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Saves whatever changes made to the tasks"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            saveTasks(storedTasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     public static boolean isDeleteCommand(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         return parts[0].equals(\"delete\") \u0026\u0026 parts.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyDeleteCommand(String input, int numOfTasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            boolean result \u003d index \u003e -1 \u0026\u0026 index \u003c numOfTasks;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (!result) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Number is invalid!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException((\"Please input number after the delete command!\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static boolean isDoneCommand(String input) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return parts[0].equals(\"done\") \u0026\u0026 parts.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyDoneCommand(String input, int numOfTasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            boolean result \u003d index \u003e -1 \u0026\u0026 index \u003c numOfTasks;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (result) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Number is invalid!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException((\"Please input number after the done command!\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static boolean isListCommand(String input) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.equals(\"list\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static boolean isNotTerminateCommand(String input) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return !input.equals(\"bye\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void addTasks(String input, List\u003cTask\u003e tasks) throws InvalidInputException, InvalidCommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Verify the todo command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                verifyTodo(input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                tasks.add(new Task(parts[1]));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Verify the deadline command"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                verifyDeadline(input);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] split \u003d parts[1].split(\"/by\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Should be of format yyyy-mm-dd x:x"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalDate date \u003d getDate(split[1]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalTime time \u003d getTime(split[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                tasks.add(new Deadlines(split[0], date, time));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Verify the event command"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                verifyEvent(input);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] split \u003d parts[1].split(\"/at\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalDate date \u003d getDate(split[1]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                LocalTime time \u003d getTime(split[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                tasks.add(new Events(split[0], date, time));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidInputException(\"Sorry, I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyTodo(String input) throws InvalidCommandException{"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (parts.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry, the description of a todo cannot be empty :(\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyDeadline(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (input.contains(\" /by \")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (input.charAt(8) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] parts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (parts[1].startsWith(\"/by\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    throw new InvalidCommandException(\"Sorry, missing deadline description :(\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    String[] split \u003d parts[1].split(\"/by\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    if (split.length \u003c\u003d 1 || split[1].isBlank()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing deadline time :(\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (split[0].isBlank()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing deadline description :(\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Sorry please leave a space after the deadline command!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry, missing /by keyword, make sure to leave a space before \" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    \"and after the /by keyword!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyEvent(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (input.contains(\" /at \")) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (input.charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] parts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (parts[1].startsWith(\"/at\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    throw new InvalidCommandException(\"Sorry, missing event description :(\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    String[] split \u003d parts[1].split(\"/at\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    if (split.length \u003c\u003d 1 || split[1].isBlank()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing event time :(\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (split[0].isBlank()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing event description :(\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Sorry please leave a space after the event command!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry, missing /at keyword, make sure to leave a space before \" +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    \"and after the /at keyword!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static List\u003cTask\u003e getSavedTasks() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Path path \u003d Paths.get(home, \"ip\", \"src\", \"main\", \"java\", \"Data\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        boolean directoryExists \u003d Files.exists(path);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //checks for the directory"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (directoryExists) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            List\u003cTask\u003e tasks\u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                File file1 \u003d new File(home + \"/ip/src/main/java/Data/Duke.txt\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                File file2 \u003d new File(home + \"/ip/src/main/java/Data/Duke2.txt\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                File toBeRead;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Checks which file is to be read"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (file1.exists()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    toBeRead \u003d file1;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else if (file2.exists()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    toBeRead \u003d file2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //if no file create a new empty file"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    Path newFile \u003d Files.createFile(Path.of(home + \"/ip/src/main/java/Data/Duke.txt\"));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    toBeRead \u003d new File(String.valueOf(newFile));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                Scanner savedTasks \u003d new Scanner(toBeRead);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Prints out the tasks"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (savedTasks.hasNext()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //If there\u0027s saved tasks, print and add to list"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    while (savedTasks.hasNext()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        String nextLine \u003d savedTasks.nextLine();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        Task task \u003d convertToTask(nextLine);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        tasks.add(task);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(nextLine);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    System.out.println(\"That\u0027s the end of your current tasks!\" + \"\\n\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //No saved tasks"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    System.out.println(\"You currently have no tasks\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                System.out.println(\"Error, file not found!\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Throw exception?"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Throw exception?"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"Sorry the directory does not exists\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Directory exception"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    //Saves the tasks into a new file after termination(\"bye\" command) and deletes the old file"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void saveTasks(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Path path \u003d Paths.get(home, \"ip\", \"src\", \"main\", \"java\", \"Data\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        boolean directoryExists \u003d Files.exists(path);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (directoryExists) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            File file1 \u003d new File(home + \"/ip/src/main/java/Data/Duke.txt\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (file1.exists()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //creates a new empty file"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    Path newFile \u003d Files.createFile(Path.of(home + \"/ip/src/main/java/Data/Duke2.txt\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(home + \"/ip/src/main/java/Data/Duke2.txt\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //deletes the old file"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    Files.delete(Paths.get(home + \"/ip/src/main/java/Data/Duke.txt\"));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        Task task \u003d list.get(i);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        bw.write((i + 1) + \".\" + task.toString());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //Writes task on a new line"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    bw.close();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //creates a new empty file"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    Path newFile \u003d Files.createFile(Path.of(home + \"/ip/src/main/java/Data/Duke.txt\"));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(home + \"/ip/src/main/java/Data/Duke.txt\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    //deletes the old file"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    Files.delete(Paths.get(home + \"/ip/src/main/java/Data/Duke2.txt\"));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        Task task \u003d list.get(i);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        bw.write((i + 1) + \".\" + task.toString());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //Writes the task on a new line"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        bw.newLine();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    bw.close();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Throw exception?"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"Sorry directory changed!\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Directory exception"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static String readList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String listOfTasks \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Task currTask \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                listOfTasks +\u003d \"\\n\" + i + \".\" + currTask.toString();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"Currently no tasks in you list\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    //Converts each line in file to task"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static Task convertToTask(String line) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (line.startsWith(\"[T]\", 2)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Is a todo task"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (line.contains(\"[✘]\")) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Task(parts[1]);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Task(parts[1]).markDone();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else if (line.startsWith(\"[E]\", 2)) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Is a event task"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] split \u003d parts[1].split(\"\\\\(at:\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String desc \u003d split[0];"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String timeInfo \u003d split[1].split(\"\\\\)\")[0];"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (line.contains(\"[✘]\")) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] dateTime \u003d timeInfo.trim().split(\", \");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String date \u003d dateTime[1];"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String time \u003d dateTime[2];"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Events(desc, LocalDate.parse(date, myDateFormat), LocalTime.parse(time, myTimeFormat));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] dateTime \u003d timeInfo.trim().split(\", \");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String date \u003d dateTime[1];"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String time \u003d dateTime[2];"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Events(desc, LocalDate.parse(date, myDateFormat), LocalTime.parse(time, myTimeFormat));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            //Is a deadline task"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d line.split(\" \", 2);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] split \u003d parts[1].split(\"\\\\(by:\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String desc \u003d split[0];"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String timeInfo \u003d split[1].split(\"\\\\)\")[0];"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (line.contains(\"[✘]\")) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] dateTime \u003d timeInfo.trim().split(\", \");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String date \u003d dateTime[1];"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String time \u003d dateTime[2];"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Deadlines(desc, LocalDate.parse(date, myDateFormat), LocalTime.parse(time, myTimeFormat));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] dateTime \u003d timeInfo.trim().split(\", \");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String date \u003d dateTime[1];"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String time \u003d dateTime[2];"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                return new Deadlines(desc, LocalDate.parse(date, myDateFormat), LocalTime.parse(time, myTimeFormat)).markDone();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static LocalDate getDate(String string) throws InvalidCommandException{"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Currently only accepts date in yyyy-mm-dd format"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Removing the whitespace before and after the string"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String timeDate \u003d string.trim();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d timeDate.split(\" \", 2);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String date \u003d parts[0].trim();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(LocalDate.parse(date));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return LocalDate.parse(date);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (DateTimeParseException e ) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Please give your date in yyyy-mm-dd format!\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static LocalTime getTime(String string) throws InvalidCommandException {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Currently only accepts time in x:x format"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        //Removing the whitespace before and after the string"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String timeDate \u003d string.trim();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d timeDate.split(\" \", 2);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String date \u003d parts[1].trim();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(LocalTime.parse(date));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return LocalTime.parse(date);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Please give your time in hh:mm format!\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jzwoo": 420,
      "-": 6
    }
  },
  {
    "path": "src/main/java/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Events(String description, LocalDate startDate, LocalTime startTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Events(String description, LocalDate startDate, LocalTime startTime, boolean bool) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description, bool);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Events markDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Events(this.description, this.startDate, this.startTime, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myDateFormat \u003d DateTimeFormatter.ofPattern(\"E, d MMM yyyy\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        DateTimeFormatter myTimeFormat \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedDate \u003d this.startDate.format(myDateFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String formattedTime \u003dthis.startTime.format(myTimeFormat);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[E][\\u2713] \" + this.description + \"(at:\" + formattedDate + \", \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[E][\\u2718] \" + this.description + \"(at:\" + formattedDate + \", \" + formattedTime + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 39
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class InvalidCommandException extends Throwable {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.errorMessage \u003d message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 12
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class InvalidInputException extends Throwable {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.errorMessage \u003d message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 12
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        isComplete \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected Task(String description, boolean bool) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        isComplete \u003d bool;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task markDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[T][\\u2713] \" + this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[T][\\u2718] \" + this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 27
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 10
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "if"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "  )"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 7,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/InvalidCommandException.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/InvalidInputException.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Events.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Deadlines.java"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 6
    }
  }
]
