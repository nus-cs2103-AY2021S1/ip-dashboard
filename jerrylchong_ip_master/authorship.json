[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 2,
      "-": 24
    }
  },
  {
    "path": "data/list.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo this"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Runs the Duke chat bot"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ui.say(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 40,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.DueInCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.InvalidDateTimeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.MissingTaskException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.MissingTimeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.OutOfBoundsException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.TypeMismatchException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.WrongDateTimeFormatException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.WrongDueInFormatException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command parseDone(String input) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String pattern \u003d \"(done\\\\s)(.+)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String number \u003d input.substring(5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                int index \u003d parseInt(number) - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"done\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new TypeMismatchException(\"done\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleToDo(String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(todo\\\\s)(.+)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String task \u003d input.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new ToDoCommand(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new EmptyDescriptionException(\"todo\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String basePattern \u003d \"(deadline\\\\s)(.+)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String almostCompletePattern \u003d \"(deadline\\\\s)(.+)\\\\s(/by\\\\s)(.+)\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String datePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)\\\\s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String timePattern \u003d \"(\\\\d\\\\d)(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String completePattern \u003d \"(deadline\\\\s)(.+)\\\\s(/by\\\\s)\" + datePattern + timePattern;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String missingTaskPattern \u003d \"(deadline\\\\s)(/by)((\\\\s(.*))*)\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(basePattern)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                if (input.trim().matches(almostCompletePattern)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    if (input.trim().matches(completePattern)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        String task \u003d input.replaceAll(completePattern, \"$2\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        LocalDateTime dateTime \u003d extractDateTime(input, completePattern);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        return new DeadlineCommand(task, dateTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        throw (new WrongDateTimeFormatException());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.trim().matches(missingTaskPattern)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    throw (new MissingTaskException());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    throw (new MissingTimeException(\"by\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"deadline\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String basePattern \u003d \"(event\\\\s)(.+)\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String almostCompletePattern \u003d \"(event\\\\s)(.+)\\\\s(/at\\\\s)(.+)\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String datePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)\\\\s\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String timePattern \u003d \"(\\\\d\\\\d)(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String completePattern \u003d \"(event\\\\s)(.+)\\\\s(/at\\\\s)\" + datePattern + timePattern;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String missingTaskPattern \u003d \"(event\\\\s)(/at)((\\\\s(.*))*)\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(basePattern)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                if (input.trim().matches(almostCompletePattern)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    if (input.trim().matches(completePattern)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        String task \u003d input.replaceAll(completePattern, \"$2\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        LocalDateTime dateTime \u003d extractDateTime(input, completePattern);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        return new EventCommand(task, dateTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        throw (new WrongDateTimeFormatException());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.trim().matches(missingTaskPattern)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    throw (new MissingTaskException());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    throw (new MissingTimeException(\"at\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"event\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command delete(String input) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String pattern \u003d \"(delete\\\\s)(.+)\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String number \u003d input.substring(7);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                int index \u003d parseInt(number) - 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"delete\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new TypeMismatchException(\"delete\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new OutOfBoundsException());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the LocalDateTime extracted from the input String."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param completePattern Regex pattern that follows the command format."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return LocalDateTime of specified dateTime."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws InvalidDateTimeException If dateTime in input is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static LocalDateTime extractDateTime(String input, String completePattern) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String date \u003d input.replaceAll(completePattern, \"$4\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String hours \u003d input.replaceAll(completePattern, \"$5\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String minutes \u003d input.replaceAll(completePattern, \"$6\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String time \u003d hours + \":\" + minutes;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return LocalDateTime.parse(date + \"T\" + time);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new InvalidDateTimeException());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleDueIn(String input) throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String basePattern \u003d \"(due in\\\\s)(.+)\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String hourPattern \u003d \"(due in\\\\s)(\\\\d+)\\\\s(hours)\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String dayPattern \u003d \"(due in\\\\s)(\\\\d+)\\\\s(days)\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(basePattern)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                if (input.trim().matches(hourPattern)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    long time \u003d parseInt(input.replaceAll(hourPattern, \"$2\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    return new DueInCommand(time, true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.trim().matches(dayPattern)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    long time \u003d parseInt(input.replaceAll(dayPattern, \"$2\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    return new DueInCommand(time, false);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    throw (new WrongDueInFormatException());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"due in\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new TypeMismatchException(\"due in\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new OutOfBoundsException());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleFind(String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(find\\\\s)(.+)\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String keyword \u003d input.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new EmptyDescriptionException(\"find\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns a command to respond to the user input."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Command responding to the input."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If user input is not recognized as a command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().equals(\"help\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().equals(\"list\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return parseDone(input);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleToDo(input);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleDeadline(input);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleEvent(input);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return delete(input);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"due in\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleDueIn(input);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleFind(input);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new UnknownCommandException());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 224
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.LoadingErrorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.StorageIOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private void createTask(String s) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task next;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (s.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                next \u003d new ToDo(s.substring(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (s.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String datePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)\\\\s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String timePattern \u003d \"(\\\\d\\\\d)(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String pattern \u003d \"(deadline\\\\s)(.+)\\\\s(/by\\\\s)\" + datePattern + timePattern;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d s.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                LocalDateTime dateTime \u003d Parser.extractDateTime(s, pattern);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                next \u003d new Deadline(task, dateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String datePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)\\\\s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String timePattern \u003d \"(\\\\d\\\\d)(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String pattern \u003d \"(event\\\\s)(.+)\\\\s(/at\\\\s)(.+)\" + datePattern + timePattern;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d s.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                LocalDateTime dateTime \u003d Parser.extractDateTime(s, pattern);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                next \u003d new Event(task, dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(next);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns an arraylist which has been filled with tasks from the saved file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Arraylist of tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If saved file does not exist."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Scanner listScanner \u003d new Scanner(f);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            while (listScanner.hasNext()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String command \u003d listScanner.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    createTask(command.substring(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    list.get(index).setDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    createTask(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new LoadingErrorException(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Saves the tasks in the TaskList to a text file that can be loaded by the Storage class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList to be saved."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If save file path does not exist."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        File parent_directory \u003d saveFile.getParentFile();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (null !\u003d parent_directory) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            parent_directory.mkdirs();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String data \u003d tasks.extractListData();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fw.write(data);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new StorageIOException(e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 106
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the contents of the ArrayList in a String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Contents of the ArrayList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If ArrayList is empty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String listContents() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (list.size() \u003e 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String text \u003d \"Here is your list:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text \u003d text + \"\\n\" + i + \".\" + list.get(i - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new EmptyListException());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds the specified task to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param task The task description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param dateTime The date and time of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param type The task type."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void add(String task, LocalDateTime dateTime, TaskType type) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task nextDeadline \u003d new Deadline(task, dateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(nextDeadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task nextEvent \u003d new Event(task, dateTime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(nextEvent);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task nextToDo \u003d new ToDo(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(nextToDo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Deletes the specified task from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return The description of the deleted task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If there is no task with the given index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.remove(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return task.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(new OutOfBoundsException());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Marks the specified task as done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param index The index of the task to be marked."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return The description of the marked task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If there is no task with the given index."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String done(int index) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.get(index).setDone();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return list.get(index).toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new OutOfBoundsException());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the tasks in the list in a format readable by the Storage when it is loading the save file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Tasks in a Storage readable format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String extractListData() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int len \u003d list.size();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (len \u003e 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String text \u003d list.get(0).toCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text \u003d text + \"\\n\" + t.toCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns a list of tasks due in the given number of hours from current time."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param hours Given number of hours."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return A list of tasks due."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String extractDueTasksHours(long hours) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String text \u003d \"These tasks are due in \" + hours + \" hour(s):\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (t.compareTime(LocalDateTime.now(), hours)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text +\u003d \"\\n\" + i + \". \" + t;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        text +\u003d \"\\nCount: \" + i;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns a list of tasks due in the given number of days from current time."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param days Given number of days."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return A list of tasks due."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String extractDueTasksDays(long days) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String text \u003d \"These tasks are due in \" + days + \" day(s):\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (t.compareTime(LocalDateTime.now(), days * 24)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text +\u003d \"\\n\" + i + \". \" + t;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        text +\u003d \"\\nCount: \" + i;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String findMatches(String keyword) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String text \u003d \"These tasks contains the keyword: \" + keyword;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (t.find(keyword)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text +\u003d \"\\n\" + i + \". \" + t;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        text +\u003d \"\\nCount: \" + i;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 169
    }
  },
  {
    "path": "src/main/java/duke/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static final String BORDER \u003d \"_____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints the given String with borders above and below it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param s The given String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void say(String s) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(BORDER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(BORDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints a loading error."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(\"Unable to load tasks.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints the welcome text."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█████████████████████████████████████████████████████████████\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░░░░░░░░░░░░░███░░░░░░░░░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░███\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄░░█░░▄▀▄▀▄▀▄▀▄▀░░███\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀░░░░░░▄▀░░███░░▄▀░░░░░░░░░░░░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░███\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀░░██░░▄▀░░███░░▄▀░░█████████████░░▄▀░░█░░▄▀░░██░░▄▀░░███\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀░░░░░░▄▀░░░░█░░▄▀░░█████████████░░▄▀░░█░░▄▀░░░░░░▄▀░░░░█\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█░░█░███░█░░█░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░█████░░░█████░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀░░████░░▄▀░░█░░▄▀░░█████████████░░▄▀░░█░░▄▀░░████░░▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░░░░░░░░░░░░░░░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░█\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                        \"█████████████████████████████████████████████████████████████\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String welcome \u003d \"Hello I am\\n\" + logo + \"\\nPlease say something.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(welcome);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the user input as a String."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints Goodbye and closes the scanner."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(\"Goodbye!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 71
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Saves the TaskList into a save file and ends the Ui."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.end();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.say(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof ByeCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 36
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    abstract public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if the program should exit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Otherwise, the program should continue and returns false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return True or False."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.PastDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeadlineCommand(String task, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds a Deadline task with task and dateTime to the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws PastDateTimeException If the dateTime has already passed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws PastDateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (LocalDateTime.now().isBefore(dateTime)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks.add(task, dateTime, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.say(\"Added Deadline \u0027\" + task + \"\u0027 to your list!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new PastDateTimeException());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DeadlineCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Deletes the task with index from the TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String task \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui.say(\"Deleted this task:\\n\" + task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DeleteCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Marks the task with index in the TaskList as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String task \u003d tasks.done(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui.say(\"Marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DoneCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DueInCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DueInCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private long time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private boolean hours;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DueInCommand(long time, boolean hours) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Provides the user with a list of tasks in the TaskList that are due in time hours."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (hours) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.say(tasks.extractDueTasksHours(time));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.say(tasks.extractDueTasksDays(time));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DueInCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 37
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.PastDateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public EventCommand(String task, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds an Event task with task and dateTime to the TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws PastDateTimeException If the dateTime has already passed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws PastDateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (LocalDateTime.now().isBefore(dateTime)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks.add(task, dateTime, TaskType.EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.say(\"Added Event \u0027\" + task + \"\u0027 to your list!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new PastDateTimeException());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof EventCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 41
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui.say(tasks.findMatches(keyword));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 19
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Provides the user with a list of commands available for them."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String help \u003d \"These are the available commands:\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"bye - exits the program\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"deadline \u003cdescription\u003e /by \u003cdue date and time\u003e - \" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"adds a deadline with the given description and due date to the task list\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"delete \u003ctask number\u003e - deletes the task corresponding to the number from the task list\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"due in \u003cnumber\u003e hours - shows a list of tasks due in the given number of hours\\n\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"due in \u003cnumber\u003e days - shows a list of tasks due in the given number of days\\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"done \u003ctask number\u003e - marks the task corresponding to the number as done\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"event \u003cdescription\u003e /at \u003cdue date and time\u003e - \" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"adds an event with the given description and due date to the task list\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"find \u003ckeyword\u003e - shows a list of tasks containing the given keyword\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"help - shows this list of commands\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"list - shows the contents of the task list\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"todo \u003cdescription\u003e - adds a todo task with the given description to the task list\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui.say(help);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof HelpCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Provides the user with a list of tasks in the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String text \u003d tasks.listContents();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.say(text);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ToDoCommand(String task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds a ToDo task with task to the TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tasks.add(task, LocalDateTime.now(), TaskType.TODO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui.say(\"Added ToDo \u0027\" + task + \"\u0027 to your list!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof ToDoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 35
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException storageIOException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Error! \" + message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public EmptyDescriptionException(String taskType) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \u0027\" + taskType + \"\u0027 description cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class EmptyListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public EmptyListException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Your list is empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public InvalidDateTimeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Date/time is invalid.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/LoadingErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class LoadingErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public LoadingErrorException(String path) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! No file found at path: \" + path);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class MissingTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public MissingTaskException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! No task description provided.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class MissingTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public MissingTimeException(String byOrAt) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \u0027/\" + byOrAt + \"\u0027 date not found.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/OutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class OutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public OutOfBoundsException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Enter a valid task number.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/PastDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PastDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public PastDateTimeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Date/time has already passed.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class StorageIOException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public StorageIOException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/TypeMismatchException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TypeMismatchException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TypeMismatchException(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Integer should follow \u0027\" + command + \"\u0027 command.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Sorry, I don\u0027t understand what you just said.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class WrongDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public WrongDateTimeFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Date/time is in the wrong format.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongDueInFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class WrongDueInFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public WrongDueInFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \u0027due in\u0027 command is in the wrong format.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Deadline(String s, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minute \u003d dateTime.getMinute() \u003c 10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getMinute()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getMinute());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hour \u003d dateTime.getHour() \u003c 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getHour()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getHour());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d String.format(\"%s:%s\", hour, minute);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String month \u003d dateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int day \u003d dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int year \u003d dateTime.getYear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dueDate \u003d String.format(\"%s %d %d, %s\", month, day, year, time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[D][✓] \" + text + \" (by: \" + dueDate + \")\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[D][✗] \" + text + \" (by: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime givenDateTime, long hours) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return givenDateTime.plusHours(hours).isAfter(dateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String rawDateTime \u003d dateTime.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)T(\\\\d\\\\d):(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String date \u003d rawDateTime.replaceAll(pattern, \"$1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hours \u003d rawDateTime.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minutes \u003d rawDateTime.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String newDateTime \u003d date + \" \" + hours + minutes;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"done deadline \" + text + \" /by \" + newDateTime"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"deadline \" + text + \" /by \" + newDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Event(String s, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minute \u003d dateTime.getMinute() \u003c 10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getMinute()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getMinute());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hour \u003d dateTime.getHour() \u003c 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getHour()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getHour());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d String.format(\"%s:%s\", hour, minute);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String month \u003d dateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int day \u003d dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int year \u003d dateTime.getYear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dueDate \u003d String.format(\"%s %d %d, %s\", month, day, year, time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[E][✓] \" + text + \" (at: \" + dueDate + \")\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[E][✗] \" + text + \" (at: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime givenDateTime, long hours) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return givenDateTime.plusHours(hours).isAfter(dateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String rawDateTime \u003d dateTime.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)T(\\\\d\\\\d):(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String date \u003d rawDateTime.replaceAll(pattern, \"$1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hours \u003d rawDateTime.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minutes \u003d rawDateTime.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String newDateTime \u003d date + \" \" + hours + minutes;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"done event \" + text + \" /at \" + newDateTime"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"event \" + text + \" /at \" + newDateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    protected final String text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    protected boolean done \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Task(String text) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    abstract public String toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the task in a format readable by Storage when loading a save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return The task in a Storage readable format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    abstract public String toCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if the dateTime of the task is within the the given time frame."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Otherwise, returns false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param givenDateTime Given start date and time of the time frame."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param hours The duration of the time frame in hours."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return True or False."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    abstract public boolean compareTime(LocalDateTime givenDateTime, long hours);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean find(String keyword) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(.*)\" + keyword + \"(.*)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text.matches(pattern);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 41
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ToDo(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[T][✓] \" + text"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[T][✗] \" + text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"done todo \" + text"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"todo \" + text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime givenDateTime, long hours) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 29
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_unknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"unknown\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Sorry, I don\u0027t understand what you just said.\", e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_doneWithNoTaskIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"done \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027done\u0027 description cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_doneWithNonIntegerValue_exceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_todoWithNoDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"todo \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027todo\u0027 description cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithNoDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027deadline\u0027 description cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithNoTaskDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline /by 2020-12-12 1000\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! No task description provided.\", e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithNoDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline this\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027/by\u0027 date not found.\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithWrongDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline this /by 2020/12/12 10:00\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! Date/time is in the wrong format.\", e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithInvalidDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline this /by 2020-13-12 3300\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! Date/time is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 86
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void listContents_emptyList_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks.listContents();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Your list is empty.\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void listContents_nonEmptyList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(new ToDoStub(\"test\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            TaskList tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String expected \u003d \"Here is your list:\\n1.test\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(tasks.listContents(), expected);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 36
    }
  },
  {
    "path": "src/test/java/duke/ToDoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ToDoStub extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ToDoStub(String text) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(text);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return \"test\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime now, long hours) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 26
    }
  },
  {
    "path": "text-ui-test/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline test /by 2021-08-23 0000"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "test"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo that"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline /by 2021-08-23 0000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip /by august 23"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip /by 2019-08-23 0000"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip /by 2021-08-23 0000"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event /at 2021-08-23 0001"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest /at august 23"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest /at 2019-08-23 0001"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest /at 2021-08-23 0001"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "due in 1 hours"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "due in 366 days"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "find rest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 28
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1,
      "-": 20
    }
  }
]
