[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    toolVersion \u003d \u00278.35\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "limkoonkiat": 17
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.CommandResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a Personal Assistant Chatbot that helps a person to keep track of various tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The storage to handle saving and loading tasks. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The list of tasks. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new Duke Chatbot that saves and loads tasks from the given filepath."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath The file path to load tasks from and save tasks to."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Ui.respondError(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Generates a response to user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param input The string input from the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The command response to the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse getResponse(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return c.execute(tasks, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new CommandResponse(Ui.respondError(e), false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 44
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Thrown to indicate that the Chatbot has encountered a problem."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 10
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 31
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.CommandResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Initializes the main window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.greet(), dukeImage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        CommandResponse response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                DialogBox.getDukeDialog(response.getResponse(), dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 65
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.CommandInstruction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.command.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Deals with making sense of user inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * List of all the valid date inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final List\u003cString\u003e DATE_FORMATS \u003d Arrays.asList(\"d/M/y\", \"y-M-d\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses the input command from the user into a command that the Chatbot can understand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param fullCommand The command from the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The command that can be interpreted from the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was some problems with understanding the user\u0027s commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            String[] splitCommand \u003d fullCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            CommandInstruction instruction \u003d CommandInstruction.valueOf(splitCommand[0].toUpperCase());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            switch (instruction) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new DoneCommand(Integer.parseInt(splitCommand[1]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(splitCommand[1]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Todo todo \u003d new Todo(splitCommand[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new AddCommand(todo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String[] splitDeadline \u003d splitCommand[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Deadline deadline \u003d new Deadline(splitDeadline[0], parseDate(splitDeadline[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new AddCommand(deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String[] splitEvent \u003d splitCommand[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Event event \u003d new Event(splitEvent[0], parseDate(splitEvent[1]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new AddCommand(event);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case VIEW:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new ViewCommand(splitCommand[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return new FindCommand(splitCommand[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The task number is not valid.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description or date cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The date is not valid.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses input dates in the valid date formats of d/M/y and y-M-d into the local date format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param string The date to be parsed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return Local date format of the input date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DateTimeParseException If the input date is not of an acceptable format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static LocalDate parseDate(String string) throws DateTimeParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c DATE_FORMATS.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            String formatString \u003d DATE_FORMATS.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return LocalDate.parse(string, DateTimeFormatter.ofPattern(formatString));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (i \u003d\u003d DATE_FORMATS.size() - 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 100
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The file where tasks are loaded from and saved to. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new Storage that loads tasks from and saves tasks to the given file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath The file path of the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Loads the saved tasks from the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A list of tasks that was saved in the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with loading the saved file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String savedTask \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String[] splitTask \u003d savedTask.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                switch (splitTask[0]) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Todo todo \u003d new Todo(splitTask[2]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    if (splitTask[1] \u003d\u003d \"1\") {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        todo.markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    tasks.add(todo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Deadline deadline \u003d new Deadline(splitTask[2], Parser.parseDate(splitTask[3]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    if (splitTask[1] \u003d\u003d \"1\") {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        deadline.markAsDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Event event \u003d new Event(splitTask[2], Parser.parseDate(splitTask[3]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    if (splitTask[1] \u003d\u003d \"1\") {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        event.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! No saved tasks were found.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IllegalArgumentException | ArrayIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The previous tasks were not saved correctly.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves the tasks into the file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The list of tasks to be saved."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with saving the tasks into the file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                int isDone \u003d task.getIsDone() ? 1 : 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                switch (task.getShortForm()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    writer.write(task.getShortForm() + \" | \" + isDone + \" | \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                            + task.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    writer.write(task.getShortForm() + \" | \" + isDone + \" | \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                            + task.getDescription() + \" | \" + ((Deadline) task).getBy() + \"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    writer.write(task.getShortForm() + \" | \" + isDone + \" | \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                            + task.getDescription() + \" | \" + ((Event) task).getAt() + \"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! There were some problems with saving the tasks.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 122
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The tasks in this task list. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates an empty task list with no tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a task list with the given tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The tasks to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the number of tasks in this task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The number of tasks in this task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the task at the specified position in this task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskNumber The position of the task in this task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The task at the specified position in this task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Task getTask(int taskNumber) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets all the tasks in this task list as a list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The list of all the tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets all the tasks in this task list on the specified date as a task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param date The date of all the tasks to get."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The task list with all the tasks on the specified date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public TaskList getTaskListOnDate(LocalDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if ((task instanceof Deadline \u0026\u0026 ((Deadline) task).getBy().equals(date))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    || task instanceof Event \u0026\u0026 ((Event) task).getAt().equals(date)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                result.addTask(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets all the tasks in this task list that contains the keyword as a task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param keyword The string that the tasks you are finding should contain."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The task list with all the tasks that contain the keyword."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public TaskList getTasksWithKeyword(String keyword) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                result.addTask(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds a task to this task list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param task The task to be added to this task list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The task that was added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.tasks.get(tasks.size() - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Deletes a task from this task list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskNumber The position of the task to be deleted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The task that was deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Task deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Task removedTask \u003d this.tasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Marks the task with the specified position in this task list as done."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskNumber The position of the task to be marked as done."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void markTaskAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.tasks.get(taskNumber - 1).markAsDone();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a string representation of this task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A string representation of this task list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String numberedList \u003d \"\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            numberedList +\u003d \"\\n\\t\" + (i + 1) + \".\" + this.tasks.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return numberedList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 142
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Deals with coming up with responses to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** Divider line enclosing all responses. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String DIVIDER_LINE \u003d \"________________________________________________\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a response to the user, enclosed within two divider lines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param response The response to be printed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The response within two divider lines."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondWith(String response) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return DIVIDER_LINE + response + \"\\n\" + DIVIDER_LINE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a welcome message to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The welcome message to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return \"Hello from\\n\" + logo + respondWith(\"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an exit message to the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The exit message to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns all the tasks in the specified Task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskList The task list that contains the list of tasks to be printed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The list of tasks from the specified task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondList(TaskList taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(\"Here are the tasks in your list:\" + taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a message to the user indicating that the specified task has been added to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * specified task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param task The task that was added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskList The task list that the task was added to."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return An acknowledgement that the task has been added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondAddTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(\"Got it. I\u0027ve added this task: \\n\\t\" + task + \"\\n\" + getHowManyTasks(taskList));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a message to the user indicating that the specified task has been deleted from the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * specified task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param task The task that was deleted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskList The task list that the task was deleted from."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return An acknowledgement that the task has been removed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondDeleteTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(\"Noted. I\u0027ve removed this task: \\n\\t\" + task + \"\\n\" + getHowManyTasks(taskList));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a message to the user indicating that the specified task has been marked done."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param task The task that was marked done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return An acknowledgement that the task has been marked as done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondDoneTask(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(\"Nice! I\u0027ve marked this task as done:\\n\\t\" + task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Prints the tasks that occur on the specified date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskList The task list to get the tasks from."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param localDate The date that you want to get the tasks for."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The tasks that occur on the specified date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondViewTasks(TaskList taskList, LocalDate localDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList taskListOnDate \u003d taskList.getTaskListOnDate(localDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (taskListOnDate.getNumberOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return respondWith(\"You do not have any tasks on this date.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(\"Here are the tasks on this date:\" + taskListOnDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Prints the tasks that contain the specified keyword."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskList The task list to find the tasks in."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param keyword The string that the tasks you are finding should contain."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The tasks that contain the keyword."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondFindTasks(TaskList taskList, String keyword) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList tasksWithKeyword \u003d taskList.getTasksWithKeyword(keyword);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(\"Here are the matching tasks in your list:\" + tasksWithKeyword);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the number of tasks in the specified task list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskList The task list to get the number of tasks from."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A string indicating the number of tasks in the specified task list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String getHowManyTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int numberOfTasks \u003d taskList.getNumberOfTasks();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (numberOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return \"You do not have any tasks in your list!\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (numberOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return String.format(\"Now you have %d task in the list.\", numberOfTasks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return String.format(\"Now you have %d tasks in the list.\", numberOfTasks);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the error message of the exception."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param e The exception to get the message from."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The error message of the exception."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String respondError(Exception e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return respondWith(e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 144
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command to add a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The task to be added. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new add command with the specified task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds the task to the specified task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The task list the command is executed with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing an add command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new CommandResponse(Ui.respondAddTask(task, tasks), this.isExit());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 39
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command from the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Executes the given command with the specified tasks, ui and storage and returns a response."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The tasks the command is executed with."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing a command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public abstract CommandResponse execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Indicates if this command is an exit command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return False by default, unless this is an exit command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 36
    }
  },
  {
    "path": "src/main/java/duke/command/CommandInstruction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents commands that can be used."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public enum CommandInstruction {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    VIEW(\"view\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    FIND(\"find\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String instruction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    CommandInstruction(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.instruction \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 22
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents the response from completing a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class CommandResponse {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The response in string representation. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** Indicates if the command response is an exit response. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new command response with the specified string response and a boolean to indicate if the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * response is an exit response."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param response The string response of this command response."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param isExit Indicates if the command response is an exit command response."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse(String response, boolean isExit) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the response in string representation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The response in string representation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.response;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Indicates if the response is an exit response."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A boolean to indicate if the response is an exit response."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command to delete a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The number of the task to be deleted. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new delete command with the specified number of the task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskNumber The number of the task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Deletes the task with the task number from the specified task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The task list the command is executed with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing a delete command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Task removedTask \u003d tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new CommandResponse(Ui.respondDeleteTask(removedTask, tasks), this.isExit());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The task number is not valid.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command to mark a task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The number of the task to be marked as done. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new done command with the specified number of the task to mark as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param taskNumber The number of the task to be marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Marks the task with the task number from the specified task list as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The task list the command is executed with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing a command to mark the task as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            tasks.markTaskAsDone(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new CommandResponse(Ui.respondDoneTask(tasks.getTask(taskNumber)), this.isExit());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The task number is not valid.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command to exit the Chatbot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new exit command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Exits the Chatbot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The task list the command is executed with."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing an exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new CommandResponse(Ui.respondExit(), this.isExit());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Indicates that this command is an exit command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 42
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command to find all tasks containing a keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The keyword to find tasks with. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new find command with the specified keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param keyword The keyword to find tasks with."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Finds all the tasks containing the keyword in the specified task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The tasks the command is executed with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing a find command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new CommandResponse(Ui.respondFindTasks(tasks, keyword), this.isExit());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command to see all the tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Lists out all the tasks in the specified task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The task list the command is executed with."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing a command to list out all the tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * in the specified task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new CommandResponse(Ui.respondList(tasks), this.isExit());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 32
    }
  },
  {
    "path": "src/main/java/duke/command/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a command to see all the tasks on a certain date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The date on which you want to view the tasks for. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new view command with the specified date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param date The date on which you want to view the tasks for."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ViewCommand(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * View the tasks on the date in the specified task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param tasks The task list the command is executed with."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param storage The storage the command is executed with."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A command response that represents the result of completing a view command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DukeException If there was a problem with executing the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResponse execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new CommandResponse(Ui.respondViewTasks(tasks, Parser.parseDate(date)), this.isExit());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The date is not valid.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents tasks that need to be done before a specific date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The date by which this task must be done. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new Deadline with the specified description and specified deadline date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param description The description of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param by The date by which the task must be done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the date by which this task must be done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The date by which this task must be done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public LocalDate getBy() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a string representation of this deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A string representation of this deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents tasks that occur at a specific time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** The date at which this task occurs. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new Event with the specified description and specified event date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param at The date at which the event occurs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the date at which this task occurs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The date at which this task occurs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public LocalDate getAt() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a string representation of this event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A string representation of this event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a task to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** Description of the task. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** Marks if the task is done or not. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** Represents the type of the task. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new task with the specified description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Task(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the status icon."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * \"✓\" indicates this task is completed and \"✘\" indicates this task is not completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A string of the status icon."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * If this task is done, returns true, otherwise false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return True, if this task is done, otherwise false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the description of this task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The description of this task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the short form string representation of this task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The short form string representation of this task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String getShortForm() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return taskType.getShortForm();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a string representation of this task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A string representation of this task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return String.format(\"[%s]%s %s\", this.taskType.getShortForm(), this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 78
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents tasks that can be used."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    DEADLINE(\"D\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    EVENT(\"E\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    TODO(\"T\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String shortForm;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    TaskType(String taskType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.shortForm \u003d taskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Gets the short form string representation of the task type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return The short form string representation of the task type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String getShortForm() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this.shortForm;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents tasks without any date attached to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a new Todo with the specified description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param description The description of the todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(description, TaskType.TODO);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a string representation of this todo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return A string representation of this todo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 26
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" left \u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"What can I do for you?\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_deadlineInvalidDate_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Parser.parse(\"deadline project /by 12\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d \"☹ OOPS!!! The date is not valid.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_eventEmptyDate_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Parser.parse(\"event project /at\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d \"☹ OOPS!!! The description or date cannot be empty.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_emptyCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Parser.parse(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Parser.parse(\"hi\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidDoneCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Parser.parse(\"done q\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d \"☹ OOPS!!! The task number is not valid.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_emptyDeleteCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d \"☹ OOPS!!! The description or date cannot be empty.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 75
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Todo todo \u003d new Todo(\"Get bread\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Deadline deadline \u003d new Deadline(\"Finish project\", LocalDate.parse(\"2012-01-23\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Event event \u003d new Event(\"Birthday\", LocalDate.parse(\"2020-05-30\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addTask_addSomeTasks_taskListWithAllTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(\"\\n\\t1.[T]✘ Get bread\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"\\t2.[D]✘ Finish project (by: Jan 23 2012)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"\\t3.[E]✘ Birthday (at: May 30 2020)\", taskList.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void deleteTask_deleteOneTask_correctTaskDeleted() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.deleteTask(2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(\"\\n\\t1.[T]✘ Get bread\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"\\t2.[E]✘ Birthday (at: May 30 2020)\", taskList.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void markAsDone_markDoneOneTask_correctTaskMarkDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.markTaskAsDone(3);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(\"\\n\\t1.[T]✘ Get bread\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"\\t2.[D]✘ Finish project (by: Jan 23 2012)\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + \"\\t3.[E]✓ Birthday (at: May 30 2020)\", taskList.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void getTaskListOnDate_oneTaskOnDate_correctTaskListOnDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        TaskList newTL \u003d taskList.getTaskListOnDate(LocalDate.parse(\"2012-01-23\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(\"\\n\\t1.[D]✘ Finish project (by: Jan 23 2012)\", newTL.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 61
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "deadline return book /by 2000-06-06"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "event project meeting /at 2010-08-06"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "todo buy book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "deadline borrow book /by 2020-04-22"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "event birthday /at 2010-08-06"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "view 2010-08-06"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "find book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "deadline /by "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "deadline test /by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "event /at "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "event test /at"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "done      "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "done qqqq"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "done 80"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "delete        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "delete 45"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 27
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "REM delete saved output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "del data\\tasks.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "java -classpath ..\\bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "limkoonkiat": 6
    }
  }
]
