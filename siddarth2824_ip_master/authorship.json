[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 16,
      "-": 44
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "E | 0 | project meeting | 18 Sep 2020 4:30 PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "D | 0 | return book | 18 Sep 2020 5:30 PM"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.commands.CommandOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.parser.CommandLineInterfaceParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            this.taskManager \u003d storage.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (InvalidFilePathException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            ui.print(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (StorageOperationException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            ui.print(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    userInput \u003d \"Bye\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                CommandOutput output \u003d getCommandExecutionOutput(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                ui.print(output.getCommandOutput());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                isExit \u003d output.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                ui.print(Messages.INVALID_COMMAND_INPUT_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput getCommandExecutionOutput(String userCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Command parsedUserCommand \u003d CommandLineInterfaceParser.parse(userCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            CommandOutput commandOutput \u003d parsedUserCommand.executeCommand(taskManager, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return commandOutput;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new CommandOutput(e.getMessage(), false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 76
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            AnchorPane anchorPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            scene.getStylesheets().add(\"view/style.css\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents the user command which will add a task to the taskManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * when the command is executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Adds the specified task in the constructor to the taskManager and prints the respective message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param taskManager The taskManager that the task is being added to."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param storage The storage that the task will be saved into."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @return The output of the command execution"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws DukeException If the file path is invalid (does not end with \".txt\")."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManager, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        taskManager.addTask(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        int totalNumberOfTasks \u003d taskManager.getTotalNumberOfTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String numberOfTasks \u003d totalNumberOfTasks \u003c 2 ? \" task in the list.\" : \" tasks in the list.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String finalOutput \u003d output + \"Now you have a total of \" + String.valueOf(totalNumberOfTasks) + numberOfTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            storage.save(taskManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new CommandOutput(finalOutput, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (StorageOperationException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a user command. Different types of command should extend"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * from this abstract class and implement its own respective executeCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public abstract CommandOutput executeCommand(TaskManager taskManger, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class CommandOutput {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private String commandOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput(String commandOutput, boolean isExit) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.commandOutput \u003d commandOutput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String getCommandOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.commandOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandTypes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Command types that the user can use."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public enum CommandTypes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String patternString \u003d \"^(?)bye\\\\s*$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!Pattern.matches(patternString, input)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_COMMAND_INPUT_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String patternString \u003d \"^(?)list\\\\s*$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!Pattern.matches(patternString, input)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_COMMAND_INPUT_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content \u003d input.replaceFirst(\"^todo\", \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (content.isBlank()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_TODO_COMMAND);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            input \u003d input.replaceFirst(\"^event\", \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String[] inputArgs \u003d input.split(\"\\\\s*/at\\\\s*\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                String task \u003d inputArgs[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                if (task.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    throw new DukeException(Messages.INVALID_EVENT_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                String dateTime \u003d inputArgs[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.MISSING_DATE_AND_TIME_FOR_EVENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            input \u003d input.replaceFirst(\"^(?i)deadline\", \"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String[] inputArgs \u003d input.split(\"\\\\s*/by\\\\s*\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                String task \u003d inputArgs[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                if (task.isBlank()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    throw new DukeException(Messages.INVALID_DEADLINE_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                String dateTime \u003d inputArgs[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.MISSING_DATE_AND_TIME_FOR_DEADLINE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String patternString \u003d \"^(?i)done\\\\s+\\\\d+\\\\s*$\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!Pattern.matches(patternString, input)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_TASK_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String patternString \u003d \"^(?i)delete\\\\s+\\\\d+\\\\s*$\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!Pattern.matches(patternString, input)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_TASK_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content \u003d input.replaceFirst(\"^find\", \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (content.isBlank()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_FIND_COMMAND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    TODAY {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content \u003d input.replaceFirst(\"^today\", \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!content.isBlank()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_TODAY_COMMAND);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    UNCOMPLETED {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content \u003d input.replaceFirst(\"^uncompleted\", \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!content.isBlank()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_UNCOMPLETED_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    COMPLETED {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content \u003d input.replaceFirst(\"^completed\", \"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!content.isBlank()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_COMPLETED_COMMAND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    },"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    OVERDUE {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        public void checkInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content \u003d input.replaceFirst(\"^overdue\", \"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!content.isBlank()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_OVERDUE_COMMAND);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    };"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public abstract void checkInput(String input) throws DukeException;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 139
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents the command which will delete a particular task when it is executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManager, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Task deletedTask \u003d taskManager.getTask(taskIndex - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            taskManager.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            storage.save(taskManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String output \u003d \"Noted. I have removed the task: \\n\" + deletedTask.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new CommandOutput(output, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (StorageOperationException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(Messages.INVALID_TASK_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 37
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents the command which will mark a particular task as completed upon execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private int completedTaskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DoneCommand(int completedTaskIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.completedTaskIndex \u003d completedTaskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManger, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Task completedTask \u003d taskManger.getTask(completedTaskIndex - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            taskManger.markTaskAsDone(completedTaskIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            storage.save(taskManger);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String taskDoneMessage \u003d Messages.TASK_MARKED_AS_DONE_MESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder(taskDoneMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            stringBuilder.append(completedTask.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new CommandOutput(stringBuilder.toString(), false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (StorageOperationException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(Messages.INVALID_TASK_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents the command which will display the farewell message to the user upon execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManager, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            storage.save(taskManager);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new CommandOutput(Messages.FAREWELL_MESSAGE, true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (StorageOperationException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(Colour.convertTextToRed(e.getMessage()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManager, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d taskManager.findTasksByKeyword(keyword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new CommandOutput(Colour.convertTextToRed(Messages.NO_TASKS_UNDER_KEYWORD_MESSAGE), false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            stringBuilder.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            for (Task task : filteredTasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                stringBuilder.append(task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new CommandOutput(stringBuilder.toString(), false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/ListAllCompletedTasksCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ListAllCompletedTasksCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManger, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e completedTasks \u003d taskManger.getAllCompletedTasks();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        StringBuilder allCompletedTasksOutput \u003d new StringBuilder(\"Here are all your completed tasks:\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c completedTasks.size(); i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String taskDescriptionInListFormat \u003d String.format(\"%d) %s\\n\", (i + 1), completedTasks.get(i));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            allCompletedTasksOutput.append(taskDescriptionInListFormat);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandOutput(allCompletedTasksOutput.toString(), false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/ListAllUncompletedTasksCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ListAllUncompletedTasksCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManger, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e uncompletedTasks \u003d taskManger.getAllUncompletedTasks();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        StringBuilder allUncompletedTasksOutput \u003d new StringBuilder(\"Here are all your uncompleted tasks:\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c uncompletedTasks.size(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String taskDescriptionInListFormat \u003d String.format(\"%d) %s\\n\", (i + 1), uncompletedTasks.get(i).toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            allUncompletedTasksOutput.append((taskDescriptionInListFormat));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandOutput(allUncompletedTasksOutput.toString(), false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/ListTasksCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents the command which will list out all the tasks that are currently stored in the storage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * upon execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ListTasksCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManager, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e allTasks \u003d taskManager.getAllTasks();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        StringBuilder allTasksOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        allTasksOutput.append(\"Here are all your tasks: \\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c allTasks.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String taskDescriptionInListFormat \u003d String.format(\"%d) %s\\n\", i + 1, allTasks.get(i).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            allTasksOutput.append(taskDescriptionInListFormat);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String completedTasks \u003d taskManager.getNumberOfCompletedTasks()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + (taskManager.isPluralCompletedTasks() ? \" tasks\" : \" task\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String uncompletedTasks \u003d taskManager.getNumberOfUncompletedTasks()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + (taskManager.isPluralUncompletedTasks() ? \" tasks.\" : \" task\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        allTasksOutput.append(\"You have completed \" + completedTasks + \" and have yet to complete \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + uncompletedTasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandOutput(allTasksOutput.toString(), false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 33
    }
  },
  {
    "path": "src/main/java/duke/commands/OverdueCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class OverdueCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final LocalDate TODAY \u003d LocalDate.now();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManger, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e overdueTasks \u003d taskManger.getAllTasksBeforeQueryDate(TODAY);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        StringBuilder allOverdueTasks \u003d new StringBuilder(\"Here are yopur overdue tasks:\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c overdueTasks.size(); i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String taskDescriptionInListFormat \u003d String.format(\"%d) %s\\n\", (i + 1), overdueTasks.get(i));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            allOverdueTasks.append(taskDescriptionInListFormat);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandOutput(allOverdueTasks.toString(), false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/TodayTasksCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class TodayTasksCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final LocalDate TODAY \u003d LocalDate.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public CommandOutput executeCommand(TaskManager taskManager, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e tasksForToday \u003d taskManager.findTasksByDate(TODAY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        StringBuilder tasksForTodayoutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        tasksForTodayoutput.append(\"Here are your tasks for today:\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksForToday.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String taskDescription \u003d String.format(\"%d) %s\\n\", (i + 1), tasksForToday.get(i).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            tasksForTodayoutput.append(taskDescription);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String completedTasks \u003d this.getNumberOfCompletedTasks(tasksForToday)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + (this.isPluralCompletedTasks(tasksForToday) ? \" tasks\" : \" task\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String uncompletedTasks \u003d this.getNumberOfUncompletedTasks(tasksForToday)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + (this.isPluralUncompletedTasks(tasksForToday) ? \" tasks.\" : \" task\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        tasksForTodayoutput.append(\"You have completed \" + completedTasks + \" and have yet to complete \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + uncompletedTasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new CommandOutput(tasksForTodayoutput.toString(), false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private int getNumberOfCompletedTasks(List\u003cTask\u003e tasksForToday) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        int numOfCompletedTasks \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (Task task : tasksForToday) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (task.getIsDone()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                numOfCompletedTasks++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return numOfCompletedTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private int getNumberOfUncompletedTasks(List\u003cTask\u003e tasksForToday) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        int numOfUncompletedTasks \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (Task task : tasksForToday) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!task.getIsDone()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                numOfUncompletedTasks++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return numOfUncompletedTasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private boolean isPluralCompletedTasks(List\u003cTask\u003e tasksForToday) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.getNumberOfCompletedTasks(tasksForToday) \u003e 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private boolean isPluralUncompletedTasks(List\u003cTask\u003e tasksForToday) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.getNumberOfUncompletedTasks(tasksForToday) \u003e 2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 60
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return Colour.convertTextToRed(this.getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class InvalidFilePathException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public InvalidFilePathException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(\"Invalid file path! Please make sure that the file path ends with a .txt\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class InvalidTaskIndexException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public InvalidTaskIndexException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/StorageOperationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/CommandLineInterfaceParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.DukeDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a parser which will parse user input into its respective commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class CommandLineInterfaceParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String[] words \u003d userInput.toLowerCase().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            CommandTypes commandType \u003d CommandTypes.valueOf(words[0].toUpperCase());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            commandType.checkInput(userInput.toLowerCase());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newListTasksCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newExitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                content \u003d userInput.replaceFirst(\"^(?i)todo\", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                AddCommand addTask \u003d new AddCommand(new Todo(trimmedContent));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return addTask;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                userInput \u003d userInput.replaceFirst(\"^(?i)deadline\", \"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newAddTaskCommand(CommandTypes.DEADLINE, userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                userInput \u003d userInput.replaceFirst(\"^(?i)event\", \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newAddTaskCommand(CommandTypes.EVENT, userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                int completedTaskIndex \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newDoneCommand(completedTaskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                int deletedTaskIndex \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newDeleteCommand(deletedTaskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                content \u003d userInput.replaceFirst(\"^(?i)find\", \"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newFindCommand(content);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case TODAY:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newTodayTasksCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case UNCOMPLETED:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "               return newListAllUncompletedTasksCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case COMPLETED:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newListAllCompletedTasksCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            case OVERDUE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return newOverdueCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(Messages.INVALID_COMMAND_INPUT_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(Messages.INVALID_COMMAND_INPUT_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static ListTasksCommand newListTasksCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new ListTasksCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static ExitCommand newExitCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static DoneCommand newDoneCommand(int completedTaskIndex) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            DoneCommand doneCommand \u003d new DoneCommand(completedTaskIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return doneCommand;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(Messages.INVALID_TASK_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static DeleteCommand newDeleteCommand(int deletedTaskIndex) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            DeleteCommand deleteCommand \u003d new DeleteCommand(deletedTaskIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return deleteCommand;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(Messages.INVALID_TASK_INDEX_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static AddCommand newAddTaskCommand(CommandTypes taskType, String userInputContent) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String trimmedContent \u003d userInputContent.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new AddCommand(new Todo(trimmedContent));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String[] userInputEventArgs \u003d userInputContent.split(\"\\\\s*/at\\\\s*\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String content \u003d userInputEventArgs[0].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String eventDateTime \u003d userInputEventArgs[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            DukeDateTime eventDukeDateTime \u003d DateTimeParser.parseDateTime(eventDateTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            AddCommand addEvent \u003d new AddCommand(new Event(content, eventDukeDateTime));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return addEvent;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String[] userInputDeadlineArgs \u003d userInputContent.split(\"\\\\s*/by\\\\s*\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            content \u003d userInputDeadlineArgs[0].trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String deadlineDateTime \u003d userInputDeadlineArgs[1];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            DukeDateTime deadlineDukeDateTime \u003d DateTimeParser.parseDateTime(deadlineDateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            AddCommand addDeadline \u003d new AddCommand(new Deadline(content, deadlineDukeDateTime));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return addDeadline;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new DukeException(Messages.INVALID_COMMAND_INPUT_MESSAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static FindCommand newFindCommand(String keyword) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String trimmedKeyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        FindCommand newFindCommand \u003d new FindCommand(trimmedKeyword);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return newFindCommand;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static TodayTasksCommand newTodayTasksCommand() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new TodayTasksCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static ListAllUncompletedTasksCommand newListAllUncompletedTasksCommand() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new ListAllUncompletedTasksCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static ListAllCompletedTasksCommand newListAllCompletedTasksCommand() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new ListAllCompletedTasksCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static OverdueCommand newOverdueCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new OverdueCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 138
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.DukeDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a parser which will parse the valid datetime format that the user has inputted into a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * {@link DukeDateTime} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String[] DATE_TIME_PATTERNS_WITHOUT_TIME \u003d {\"d/M/yyyy\", \"d MMM yyyy\", \"d MMMM yyyy\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \"d-M-yyyy\", \"yyyy-M-d\", \"MM d yyyy\", \"MMM d yyyy\", \"MMMM d yyyy\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String[] DATE_TIME_PATTERNS_WITH_TIME \u003d {\"d/M/yyyy H:mm\", \"d/M/yyyy h:mm a\", \"d/M/yyyy Hmm\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \"d MMM yyyy H:mm\", \"d MMM yyyy h:mm a\", \"d MMM yyyy Hmm\", \"d MMMM yyyy H:mm\", \"d MMMM yyyy h:mm a\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \"d MMMM yyyy Hmm\", \"d-M-yyyy H:mm\", \"d-M-yyyy h:mm a\", \"d-M-yyyy Hmm\", \"yyyy-M-d H:mm\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \"yyyy-M-d h:mm a\", \"yyyy-M-d Hmm\", \"d/M/yyyy ha\", \"d/M/yyyy h:mma\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Parses the input into a {@link DukeDateTime} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param input The date and/or time input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @return The DukeDateTime object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @throws DukeException If the user did not input in the accepted format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static DukeDateTime parseDateTime(String input) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        int index \u003d patternsWithTime(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(input,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    DateTimeFormatter.ofPattern(DATE_TIME_PATTERNS_WITH_TIME[index]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new DukeDateTime(dateTime, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            index \u003d patternsWithoutTime(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (index !\u003d -1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(input,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                        DateTimeFormatter.ofPattern(DATE_TIME_PATTERNS_WITHOUT_TIME[index]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                LocalDateTime dateTime \u003d date.atStartOfDay();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return new DukeDateTime(dateTime, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                throw new DukeException(\"Invalid Date and Time!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static int patternsWithTime(String input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c DATE_TIME_PATTERNS_WITH_TIME.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                LocalDateTime.parse(input, DateTimeFormatter.ofPattern(DATE_TIME_PATTERNS_WITH_TIME[i]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static int patternsWithoutTime(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c DATE_TIME_PATTERNS_WITHOUT_TIME.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                LocalDateTime.parse(input, DateTimeFormatter.ofPattern(DATE_TIME_PATTERNS_WITHOUT_TIME[i]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 74
    }
  },
  {
    "path": "src/main/java/duke/storage/DataTranslator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.DukeDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a translator which will encode the tasks in {@link TaskManager} object into the valid format to write"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * into {@link Storage} object and decode the information from {@link Storage} into the valid format to store in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * {@link TaskManager} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DataTranslator {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final Ui formatter \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Decodes a list of Strings into a TaskManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param lines The list of Strings"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @return The taskManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static TaskManager decode(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Task task \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            String[] parsedLine \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            DukeDateTime dukeDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                switch (parsedLine[0]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    task \u003d new Todo(parsedLine[2]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    dukeDateTime \u003d DateTimeParser.parseDateTime(parsedLine[3]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    task \u003d new Deadline(parsedLine[2], dukeDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    dukeDateTime \u003d DateTimeParser.parseDateTime(parsedLine[3]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    task \u003d new Event(parsedLine[2], dukeDateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                formatter.print(Colour.convertTextToRed(e.getMessage()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (parsedLine[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                assert task !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                task.markTaskAsDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            taskManager.addTask(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Encodes a {@link TaskManager} into a list of Strings to be saved into a file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param taskManager The {@link TaskManager}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @return The list of strings"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static List\u003cString\u003e encode(TaskManager taskManager) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskManager.getTasks();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            data.add(task.toDataFileFormat());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 82
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.StorageOperationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents the database of the system which will handle the reading and writing to update the items stored in the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * database."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Storage() throws InvalidFilePathException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Storage(String filepath) throws InvalidFilePathException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.path \u003d Paths.get(filepath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new InvalidFilePathException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static boolean isValidPath(Path filepath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return filepath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public TaskManager load() throws StorageOperationException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return new TaskManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return DataTranslator.decode(Files.readAllLines(path));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new AssertionError(\"A non-existent file scenario has been handled earlier.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void save(TaskManager taskManger) throws StorageOperationException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            List\u003cString\u003e encodedData \u003d DataTranslator.encode(taskManger);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Files.write(path, encodedData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a task which needs to be done before a specific date/time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Deadline extends Task implements TimeBased {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final DukeDateTime dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Deadline(String content, DukeDateTime dateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Deadline(String content, DukeDateTime dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(content, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DukeDateTime getDukeDateTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        LocalDateTime taskDateTime \u003d this.dateTime.getDateTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return taskDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        LocalDateTime taskLocalDateTime \u003d this.getDateTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        LocalDate taskDate \u003d taskLocalDateTime.toLocalDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return taskDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toDataFileFormat() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, content, dateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 51
    }
  },
  {
    "path": "src/main/java/duke/task/DukeDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a wrapper class over {@link LocalDateTime} such that some objects may not contain time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DukeDateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private boolean hasTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Creates a DukeDateTime object with the inputted datetime and also a boolean value to indicate whether it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * contains time or not."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param dateTime The LocalDateTime involved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * @param hasTime True if the object contains time and false if it does not contain time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DukeDateTime(LocalDateTime dateTime, boolean hasTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.hasTime \u003d hasTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return hasTime"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                ? dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                : dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a task that starts at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Event extends Task implements TimeBased {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final DukeDateTime dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Event(String content, DukeDateTime dateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Event(String content, DukeDateTime dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(content, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DukeDateTime getDukeDateTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        LocalDateTime taskDateTime \u003d this.dateTime.getDateTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return taskDateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        LocalDateTime taskLocalDateTime \u003d this.getDateTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        LocalDate taskDate \u003d taskLocalDateTime.toLocalDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return taskDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toDataFileFormat() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, content, dateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object contains a content and a boolean which indicates whether the task has"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * been completed or not."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    protected String content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Task(String content) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Task(String content, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toDataFileFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return String.format(\"? | %d | %s\", isDone ? 1 : 0, this.content);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void markTaskAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.content;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"] \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        stringBuilder.append(getStatusIcon());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        stringBuilder.append(this.content);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 48
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a list of tasks. A \u003ccode\u003eTaskManager\u003c/code\u003e object will be able to carry out certain functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * with regards to the list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        tasks.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.tasks.get(taskIndex);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public int getTotalNumberOfTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public int getNumberOfCompletedTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        int completedTasks \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (tasks.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                completedTasks++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return completedTasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public int getNumberOfUncompletedTasks() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        int uncompletedTasks \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!tasks.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                uncompletedTasks++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return uncompletedTasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean isPluralCompletedTasks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return getNumberOfCompletedTasks() \u003e 2;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public boolean isPluralUncompletedTasks() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return getNumberOfUncompletedTasks() \u003e 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public List\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public List\u003cTask\u003e getAllUncompletedTasks() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e uncompletedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (!tasks.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                uncompletedTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return uncompletedTasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public List\u003cTask\u003e getAllCompletedTasks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e completedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (tasks.get(i).getIsDone()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                completedTasks.add(tasks.get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return completedTasks;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public List\u003cTask\u003e getAllTasksBeforeQueryDate(LocalDate queryDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e tasksBeforeQueryDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (task instanceof TimeBased) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                TimeBased timeBasedTask \u003d (TimeBased) task;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                LocalDate taskLocalDate \u003d timeBasedTask.getDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                if (queryDate.isAfter(taskLocalDate)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    tasksBeforeQueryDate.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return tasksBeforeQueryDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public List\u003cTask\u003e findTasksByKeyword(String keyword) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (task.getContent().contains(keyword)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public List\u003cTask\u003e findTasksByDate(LocalDate queryDate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        List\u003cTask\u003e tasksForQueryDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            if (task instanceof TimeBased) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                TimeBased timeBasedTask \u003d (TimeBased) task;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                LocalDate taskLocalDate \u003d timeBasedTask.getDate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                if (queryDate.isEqual(taskLocalDate)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                    tasksForQueryDate.add(task);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return tasksForQueryDate;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void markTaskAsDone(int taskIndex) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Task updatedTask \u003d tasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        updatedTask.markTaskAsDone();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        tasks.set(taskIndex - 1, updatedTask);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 131
    }
  },
  {
    "path": "src/main/java/duke/task/TimeBased.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @author dianneloh9-reused"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    Inspiration from how she created an interface to have tasks that have datetime to implement."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public interface TimeBased {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public DukeDateTime getDukeDateTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public LocalDateTime getDateTime();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public LocalDate getDate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Represents a task without any date/time attached to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Todo(String content) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public Todo(String content, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        super(content, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toDataFileFormat() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, content);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 26
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Rectangle clip \u003d new Rectangle(displayPicture.getFitWidth(), displayPicture.getFitHeight());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        clip.setArcHeight(150);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        clip.setArcWidth(150);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 62
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.commands.CommandOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.parser.CommandLineInterfaceParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.beans.binding.BooleanBinding;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final CommandLineInterfaceParser parser \u003d new CommandLineInterfaceParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        BooleanBinding isUserInputEmpty \u003d new BooleanBinding() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                super.bind(userInput.textProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            protected boolean computeValue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                return userInput.getText().isEmpty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        sendButton.disableProperty().bind(isUserInputEmpty);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DialogBox.getDukeDialog(Messages.WELCOME_MESSAGE, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        CommandOutput executionOutput \u003d duke.getCommandExecutionOutput(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String response \u003d executionOutput.getCommandOutput();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        if (executionOutput.isExit()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 77
    }
  },
  {
    "path": "src/main/java/duke/utils/Colour.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * The Colour class is used to wrap a string with colours."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Colour {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @SuppressWarnings(\"checkstyle:MethodName\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static String convertTextToGreen(String element) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return \"\\033[0;32m\" + element + \"\\033[0m\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @SuppressWarnings(\"checkstyle:MethodName\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static String convertTextToRed(String element) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        return \"\\033[0;31m\" + element + \"\\033[0m\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 16
    }
  },
  {
    "path": "src/main/java/duke/utils/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke\\nHow may I be of assistance?\\n\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String FAREWELL_MESSAGE \u003d \"Bye. Hope my service has been satisfactory.\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "           + \"Hope to see you again soon.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_COMMAND_INPUT_MESSAGE \u003d \"OOPS!!!! You have inputted an invalid command.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The only commands I know are:\\n\" + \"1) Todo \u003ctask description\u003e\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"2) Deadline \u003ctask description\u003e /by \u003cdatetime\u003e\\n\" + \"3) Event \u003ctask description\u003e /at \u003cdatetime\u003e\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_TASK_INDEX_ERROR_MESSAGE \u003d \"Invalid task index! Please choose another index.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_TODO_COMMAND \u003d \"OOPS!!! The description of a todo cannot be empty!\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\ntodo \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_DEADLINE_COMMAND \u003d \"OOPS!!! The description of a deadline cannot be empty.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\ndeadline \u003ctask description\u003e /by \u003cdatetime\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_EVENT_COMMAND \u003d \"OOPS!!! The description of an event cannot be empty.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\nevent \u003ctask description\u003e /at \u003cdatetime\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_FIND_COMMAND \u003d \"OOPS!!! You are missing a keyword.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\nfind \u003ckeyword\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_TODAY_COMMAND \u003d \"OOPS!!! Invalid Today Command.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\ntoday\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_UNCOMPLETED_COMMAND \u003d \"OOPS!!! Invalid Uncompleted Command. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\nuncompleted\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_COMPLETED_COMMAND \u003d \"OOPS!! Invalid Completed Command. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\ncompleted\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String INVALID_OVERDUE_COMMAND \u003d \"OOPS!! Invalid Overdue Command. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"The correct command is:\\noverdue\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MISSING_DATE_AND_TIME_FOR_DEADLINE \u003d \"OOPS!!! Missing date/time.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Correct command is:\\ndeadline \u003ctask description\u003e /by \u003cdatetime\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String MISSING_DATE_AND_TIME_FOR_EVENT \u003d \"OOPS!!! Missing date/time.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"Correct command is:\\nevent \u003ctask description\u003e /at \u003cdatetime\u003e\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String TASK_MARKED_AS_DONE_MESSAGE \u003d \"Good job on completing this task!\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"I have marked this task as done: \\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public static final String NO_TASKS_UNDER_KEYWORD_MESSAGE \u003d \"I am sorry but there are no tasks \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            + \"under the keyword you have inputted.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 40
    }
  },
  {
    "path": "src/main/java/duke/utils/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final int DIVIDER_LENGTH \u003d 80;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private static final int LEFT_PADDING \u003d 7;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void printLeftPadding() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c LEFT_PADDING; i++) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            System.out.print(\u0027 \u0027);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void printDivider() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (int i \u003d 0; i \u003c DIVIDER_LENGTH - 1; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            System.out.print(\"_\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.out.print(\"_\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void print(String dukeOutputMessage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        printLeftPadding();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String[] lines \u003d dukeOutputMessage.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            printLeftPadding();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            System.out.println(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        printLeftPadding();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        printDivider();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 36
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cfx:root fx:id\u003d\"dialogField\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@style.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" styleClass\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"556.0\" prefWidth\u003d\"387.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 19
    }
  },
  {
    "path": "src/tests/java/duke/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String line \u003d \"_\".repeat(80) + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String leftPadding \u003d \" \".repeat(7);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void testExecuteCommandTest() throws InvalidFilePathException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(\"Read book\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(testTodo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        addCommand.executeCommand(taskManager, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedTextOutput \u003d leftPadding + line"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"Got it. I\u0027ve added this task:\\n \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + Colour.Green(testTodo.toString()) + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"Now you have a total of 1 task in the list.\" + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + line;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedTextOutput, outContent.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 53
    }
  },
  {
    "path": "src/tests/java/duke/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String line \u003d \"_\".repeat(80) + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String leftPadding \u003d \" \".repeat(7);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void executeCommand_validTaskIndex_success() throws InvalidFilePathException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(\"Test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        taskManager.addTask(testTodo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DeleteCommand deleteCommandTest \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        deleteCommandTest.executeCommand(taskManager, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d leftPadding + line"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"Noted. I have removed the task: \" + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + Colour.Red(testTodo.toString()) + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + line;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 53
    }
  },
  {
    "path": "src/tests/java/duke/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String line \u003d \"_\".repeat(80) + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String leftPadding \u003d \" \".repeat(7);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void executeCommand_validTaskIndex_success() throws InvalidFilePathException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(\"Test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        taskManager.addTask(testTodo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DoneCommand doneCommandTest \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        doneCommandTest.executeCommand(taskManager, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d leftPadding + line"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"Good job on completing this task! I have marked this task as done: \" + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + Colour.Green(testTodo.toString()) + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + line;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 53
    }
  },
  {
    "path": "src/tests/java/duke/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String line \u003d \"_\".repeat(80) + \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String leftPadding \u003d \" \".repeat(7);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void testExecuteCommand() throws InvalidFilePathException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d leftPadding + line"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"Bye. Hope my service has been satisfactory. Hope to see you again soon.\" + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + line;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ExitCommand exitTest \u003d new ExitCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        exitTest.executeCommand(taskManager, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 44
    }
  },
  {
    "path": "src/tests/java/duke/commands/ListTaskCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.exceptions.InvalidFilePathException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Colour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import duke.utils.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class ListTaskCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String line \u003d \"_\".repeat(80) + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String leftPadding \u003d \" \".repeat(7);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void testExecuteCommand() throws InvalidFilePathException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(\"Test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        taskManager.addTask(testTodo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ListTasksCommand testListTasksCommand \u003d new ListTasksCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        testListTasksCommand.executeCommand(taskManager, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d leftPadding + line"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"Here are all your tasks: \" + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"1) [T][\\u2718] Test\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"You have completed \" + Colour.Green(\"0 task\") + \" and have yet to complete \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + Colour.Red(\"1 task\") + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + line;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 54
    }
  },
  {
    "path": "src/tests/java/duke/parser/CommandLineInterfaceParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class CommandLineInterfaceParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 4
    }
  },
  {
    "path": "src/tests/java/duke/parser/DateTimeParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DateTimeParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 4
    }
  },
  {
    "path": "src/tests/java/duke/storage/DataTranslatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DataTranslatorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 4
    }
  },
  {
    "path": "src/tests/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 4
    }
  },
  {
    "path": "src/tests/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toDataFileFormat_notDone(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskDescription, dateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"D | 0 | \" + taskDescription + \" | 24 Oct 2020 4:00 PM\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testDeadline.toDataFileFormat());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toDataFileFormat_done(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskDescription, dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        testDeadline.markTaskAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"D | 1 | \" + taskDescription + \" | 24 Oct 2020 4:00 PM\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testDeadline.toDataFileFormat());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toString_notDone(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskDescription, dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"[D][\\u2718] \" + taskDescription + \" (by: 24 Oct 2020 4:00 PM)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testDeadline.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toString_done(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(taskDescription, dateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        testDeadline.markTaskAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"[D][\\u2713] \" + taskDescription + \" (by: 24 Oct 2020 4:00 PM)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testDeadline.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 64
    }
  },
  {
    "path": "src/tests/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toDataFileFormat_notDone(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Event testEvent \u003d new Event(taskDescription, dateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"E | 0 | \" + taskDescription + \" | 24 Oct 2020 4:00 PM\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testEvent.toDataFileFormat());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toDataFileFormat_done(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Event testEvent \u003d new Event(taskDescription, dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        testEvent.markTaskAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"E | 1 | \" + taskDescription + \" | 24 Oct 2020 4:00 PM\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testEvent.toDataFileFormat());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toString_notDone(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Event testEvent \u003d new Event(taskDescription, dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"[E][\\u2718] \" + taskDescription + \" (at: 24 Oct 2020 4:00 PM)\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testEvent.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toString_done(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        DukeDateTime dateTime \u003d new DukeDateTime(LocalDateTime.parse(\"2020-10-24T16:00\"), true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Event testEvent \u003d new Event(taskDescription, dateTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        testEvent.markTaskAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"[E][\\u2713] \" + taskDescription + \" (at: 24 Oct 2020 4:00 PM)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testEvent.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 64
    }
  },
  {
    "path": "src/tests/java/duke/task/TaskManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class TaskManagerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 4
    }
  },
  {
    "path": "src/tests/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toDataFileFormat_notDone(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"T | 0 | \" + taskDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testTodo.toDataFileFormat());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toDataFileFormat_done(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        testTodo.markTaskAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"T | 1 | \" + taskDescription;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testTodo.toDataFileFormat());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toString_notDone(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"[T][\\u2718] \" + taskDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testTodo.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void test_toString_done(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String taskDescription \u003d \"Test\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Todo testTodo \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        testTodo.markTaskAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d \"[T][\\u2713] \" + taskDescription;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, testTodo.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 60
    }
  },
  {
    "path": "src/tests/java/duke/utils/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String line \u003d \"_\".repeat(80) + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    private final String leftPadding \u003d \" \".repeat(7);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void testPrintPadding(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ui.printLeftPadding();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(leftPadding, outContent.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void testPrintLine(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ui.printDivider();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(line, outContent.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    public void testPrint(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        ui.print(\"Test\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        String expectedOutput \u003d leftPadding + line"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + \"Test\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "                + leftPadding + line;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 52
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Hello! I\u0027m Erica "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       How may I be of assistance?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Got it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u001b[0;32m[T][✘] read book\u001b[0m"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Now you have a total of 1 duke.task in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Got it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u001b[0;32m[D][✘] return book (by: 6 Sep)\u001b[0m"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Now you have a total of 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Got it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "        \u001b[0;32m[E][✘] meeting (at: mon 2-4 pm)\u001b[0m"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Now you have a total of 3 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Good job on completing this duke.task! I have marked this duke.task as done:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;32m[T][✓] read book\u001b[0m"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Here are all your tasks: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       1) [T][✓] read book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       2) [D][✘] return book (by: 6 Sep)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       3) [E][✘] meeting (at: mon 2-4 pm)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       You have completed \u001b[0;32m1 task\u001b[0m and have yet to complete \u001b[0;31m2 tasks.\u001b[0m"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mOOPS!!!! I\u0027m sorry, but I don\u0027t know what that means\u001b[0m"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mOOPS!!! The description of a todo cannot be empty\u001b[0m"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mOOPS!!! The description of a deadline cannot be empty.\u001b[0m"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mOOPS!!! The description of an event cannot be empty.\u001b[0m"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mOOPS!!! Missing deadline date/time\u001b[0m"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mOOPS!!! Missing deadline date/time\u001b[0m"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mInvalid duke.task index! Please choose another index.\u001b[0m"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       \u001b[0;31mInvalid duke.task index! Please choose another index.\u001b[0m"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       Bye. Hope my service has been satisfactory.Hope to see you again soon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "       ______________________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 57
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "deadline return book /by 6 Sep"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "event meeting /at mon 2-4 pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "blah"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "deadline do something"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "event meeting"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 14
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "REM run the program, feed duke.duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 3,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "# run the program, feed duke.duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siddarth2824"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "siddarth2824": 6,
      "-": 35
    }
  }
]
