[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "xnmng": 16
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run the bye command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the bye command, causing Duke to stop running."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.goodbye();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 28
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 7
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "// partial solution copied from iP"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the deadline command, causing add a task of type Deadline to the taskList,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * provided that the command input is valid."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param description String describing the Deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param dateBy String indicating the deadline of the Deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param isDone Boolean indicating if the Deadline task is done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public Deadline(String description, String dateBy, boolean isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        super(description.trim(), isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] dateAndTime \u003d dateBy.trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] date \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String time \u003d String.format(\"%04d\", Integer.parseInt(dateAndTime[1]));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String day \u003d date[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String month \u003d date[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String year \u003d date[2];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.date \u003d LocalDate.of(Integer.parseInt(year), Integer.parseInt(month), Integer.parseInt(day));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String hour \u003d time.substring(0, 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String minute \u003d time.substring(2, 4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (Integer.parseInt(hour) \u003c\u003d 23 \u0026\u0026 Integer.parseInt(minute) \u003c\u003d 59) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            this.time \u003d LocalTime.of(Integer.parseInt(hour), Integer.parseInt(minute));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            this.time \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String formattedTime \u003d String.format(\"%02d\", time.getHour()) + String.format(\"%02d\", time.getMinute());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"  [D]\" + super.toString() + \" (By: \" + date.getDayOfMonth() + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + date.getMonth().toString().toLowerCase() + \" \" + date.getYear()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + (time \u003d\u003d null ? \")\" : \" \" + formattedTime + \" hrs)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 50
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run the deadline command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final String COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the deadline command, causing add a task of type Deadline to the taskList,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * provided that the command input is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingDescriptionException If the deadline command is missing a description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingTagException If the deadline command is missing a \"/by\" tag."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingDateTimeException If the deadline command is missing a valid Date and Time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] commandArgs \u003d COMMAND.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (commandArgs.length \u003d\u003d 1 || commandArgs[1].equals(\"/by\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingDescriptionException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (commandArgs.length \u003d\u003d 2 || !commandArgs[2].equals(\"/by\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingTagException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (commandArgs.length !\u003d 5) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingDateTimeException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            String subCommand \u003d COMMAND.substring(9);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            String[] subCommandArgs \u003d subCommand.split(\"/by\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            Deadline d \u003d new Deadline(subCommandArgs[0], subCommandArgs[1], false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            taskList.addTask(d);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            storage.write(taskList.TASKS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.createDeadlineSuccessMessage(d, taskList.TASKS.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 58
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run the delete command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final String COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the delete command, causing Duke to delete a numbered task from the taskList,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * provided that the number provided is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingNumberFromCommandException If the delete command is missing a number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws InvalidNumberFromDoneCommandException If the delete command does not have a valid task number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] commandArgs \u003d COMMAND.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (commandArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingNumberFromCommandException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            int taskLength \u003d taskList.TASKS.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(commandArgs[1]) - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            if (taskNumber \u003c 0 || taskNumber \u003e taskLength) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                throw new InvalidNumberFromDoneCommandException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                Task t \u003d taskList.TASKS.get(taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                taskList.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                storage.write(taskList.TASKS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                ui.deleteCommandSuccessMessage(taskNumber + 1, t);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 56
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run the done command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final String COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the done command, causing Duke to mark the numbered task as done,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * provided that the number provided with the done command is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingNumberFromCommandException If the done command is missing a number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws InvalidNumberFromDoneCommandException If the number provided with the done command is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] commandArgs \u003d COMMAND.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (commandArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingNumberFromCommandException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            int taskLength \u003d taskList.TASKS.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(commandArgs[1]) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            if (taskNumber \u003c 0 || taskNumber \u003e taskLength) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                throw new InvalidNumberFromDoneCommandException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                Task t \u003d taskList.TASKS.get(taskNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                taskList.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                storage.write(taskList.TASKS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                ui.doneCommandSuccessMessage(taskNumber + 1, t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 55
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    private final Storage STORAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    private final TaskList TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    private final Ui UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        UI \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        STORAGE \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        TASKS \u003d new TaskList(STORAGE.loadTasks());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // empty constructor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        UI \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        STORAGE \u003d new Storage(\"src/main/java/tasks.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        TASKS \u003d new TaskList(STORAGE.loadTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        UI.printGreetingMessage(STORAGE.createResult);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                String fullCommand \u003d UI.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                Command c \u003d Parser.interpret(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                c.execute(TASKS, UI, STORAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                UI.showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                UI.showErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                UI.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // copied from javaFx tutorial"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        // the argument to the constructor is the file path (relative) where Duke will read and write tasks given to it"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        new Duke(\"src/main/java/tasks.txt\").run();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "xnmng": 59
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the Exception message of a DukeException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class DukeException extends Throwable {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "// partial solution copied from iP"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        super(description.trim(), isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] dateAndTime \u003d at.trim().split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] date \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String time \u003d String.format(\"%04d\", Integer.parseInt(dateAndTime[1]));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String day \u003d date[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String month \u003d date[1];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String year \u003d date[2];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.date \u003d LocalDate.of(Integer.parseInt(year), Integer.parseInt(month), Integer.parseInt(day));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String hour \u003d time.substring(0, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String minute \u003d time.substring(2, 4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (Integer.parseInt(hour) \u003c\u003d 23 \u0026\u0026 Integer.parseInt(minute) \u003c\u003d 59) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            this.time \u003d LocalTime.of(Integer.parseInt(hour), Integer.parseInt(minute));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            this.time \u003d LocalTime.of(23, 59);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String formattedTime \u003d String.format(\"%02d\", time.getHour()) + String.format(\"%02d\", time.getMinute());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"  [E]\" + super.toString() + \" (At: \" + date.getDayOfMonth() + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + date.getMonth().toString().toLowerCase() + \" \" + date.getYear() + (time \u003d\u003d null ? \")\" : \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + formattedTime + \" hrs)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 41
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run the event command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final String COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public EventCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the event command, causing add a task of type Event to the taskList,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * provided that the command input is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingDescriptionException If the event command is missing a description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingTagException If the event command is missing a \"/at\" tag."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingDateTimeException If the event command is missing a valid Date and Time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] commandArgs \u003d COMMAND.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (commandArgs.length \u003d\u003d 1 || commandArgs[1].equals(\"/at\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingDescriptionException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (commandArgs.length \u003d\u003d 2 || !commandArgs[2].equals(\"/at\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingTagException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (commandArgs.length !\u003d 5) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingDateTimeException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            String subCommand \u003d COMMAND.substring(9);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            String[] subCommandArgs \u003d subCommand.split(\"/at\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            Event e \u003d new Event(subCommandArgs[0], subCommandArgs[1], false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            taskList.addTask(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            storage.write(taskList.TASKS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.createEventSuccessMessage(e, taskList.TASKS.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 57
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final String command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (command.trim().length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingDescriptionException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String query \u003d command.substring(4).trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        for (Task t : taskList.TASKS) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            if (t.description.matches(\"(.*)\" + query + \"(.*)\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                tasks.add(t);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.findResultMessage(tasks, query);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 30
    }
  },
  {
    "path": "src/main/java/InvalidNumberFromDoneCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the InvalidNumberFromDoneCommandException message of a InvalidNumberFromDoneCommandException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class InvalidNumberFromDoneCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Custom message of a InvalidNumberFromDoneCommandException, reminding the user to type in a valid number"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * for a done command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"     ☹ OOPS!!! The done command must be followed by a valid task number. :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 14
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run the list command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the list command, causing Duke to print the tasks it is currently tracking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.printTasks(taskList.TASKS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 28
    }
  },
  {
    "path": "src/main/java/MissingDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the MissingDateTimeException message of a MissingDateTimeException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class MissingDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Custom message of a MissingDateTimeException, reminding the user to type in a valid Date and Time format as"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * described by this message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"     ☹ OOPS!!! The command you keyed in needs to have a timing!\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + \"     The timing should be typed in after the tag, in the format \\\"DD/MM/YYYY\\\" HHMM!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 15
    }
  },
  {
    "path": "src/main/java/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the MissingDescriptionException message of a MissingDescriptionException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Custom message of a MissingDescriptionException, reminding the user to type in a valid description with their"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"     ☹ OOPS!!! Your command needs to have a description. :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 14
    }
  },
  {
    "path": "src/main/java/MissingInfoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the MissingInfoException message of a MissingInfoException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class MissingInfoException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Custom message of a MissingInfoException, reminding the user to type in a valid description with their"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"     ☹ OOPS!!! Your command needs to be followed by a description. :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 14
    }
  },
  {
    "path": "src/main/java/MissingNumberFromCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the MissingNumberFromCommandException message of a MissingNumberFromCommandException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class MissingNumberFromCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Custom message of a MissingNumberFromCommandException, reminding the user to type in a valid number with their"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"     ☹ OOPS!!! Please type in the done command followed by a valid task number. :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 14
    }
  },
  {
    "path": "src/main/java/MissingTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the MissingTagException message of a MissingTagException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class MissingTagException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Custom message of a MissingTagException, reminding the user to type in a valid tag with their event/deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"     ☹ OOPS!!! Your command needs to be followed by a valid tag. :-(\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + \"     For the event command, this tag is /at\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + \"     For the deadline command, this tag is /by\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 16
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static Command interpret(String userCommand) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String[] commandArgs \u003d userCommand.split(\" \");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        switch (commandArgs[0]) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"b\"):"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"bye\") :"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"l\"):"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"list\") :"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"done\") :"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new DoneCommand(userCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"del\"):"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"delete\") :"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new DeleteCommand(userCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"e\"):"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"event\") :"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new EventCommand(userCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case(\"d\"):"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"deadline\") :"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new DeadlineCommand(userCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"t\"):"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"todo\") :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new ToDoCommand(userCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"f\"):"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        case (\"find\") :"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new FindCommand(userCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return new UnknownCommand(userCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 36
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final File TASKFILE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected String createResult \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.TASKFILE \u003d new File(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            if (TASKFILE.createNewFile()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                // if a tasks.txt file does not exist, we create a file so that we can read from it in the future"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                this.createResult \u003d \"     Duke has noticed that you do not have a text file to store your tasks!\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        + \"     As such, Duke has created an empty file, ready to store your tasks!\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        + \"     This text file can be found at: \" + TASKFILE.getAbsolutePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                this.createResult \u003d \"     Duke has noticed that you have a text file to store your tasks!\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        + \"     Duke is currently reading the file from: \" + TASKFILE.getAbsolutePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // writes the list of tasks into the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void write(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            // create a FileWriter object used by Duke to write to the taskFile"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            FileWriter writeTaskFile \u003d new FileWriter(this.TASKFILE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                if (task instanceof Event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    String day \u003d ((Event) task).date.getDayOfMonth() + \"/\" + ((Event) task).date.getMonthValue() + \"/\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                            + ((Event)task).date.getYear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    String time \u003d String.format(\"%02d\", ((Event) task).time.getHour())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                            + String.format(\"%02d\", ((Event) task).time.getMinute());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    writeTaskFile.write(\"event\" + \" \" + task.description + \" \" + \"/by\" + \" \" + day + \" \" + time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                            + \" \" + task.isDone + System.lineSeparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    String day \u003d ((Deadline) task).date.getDayOfMonth() + \"/\" + ((Deadline) task).date.getMonthValue()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                            + \"/\" + ((Deadline) task).date.getYear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    String time \u003d String.format(\"%02d\", ((Deadline) task).time.getHour())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                            + String.format(\"%02d\", ((Deadline) task).time.getMinute());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    writeTaskFile.write(\"deadline\" + \" \" + task.description + \" \" + \"/by\" + \" \" + day + \" \" + time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                            + \" \" + task.isDone + System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                } else if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    writeTaskFile.write(\"todo\" + \" \" + task.description + \" \" + task.isDone"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                            + System.lineSeparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            writeTaskFile.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // reads the file contents into the provided list of tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void read(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Path filePath \u003d Paths.get(TASKFILE.getAbsolutePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            List\u003cString\u003e taskList \u003d Files.readAllLines(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            if (taskList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                for (String task : taskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    String[] params \u003d task.split(\" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    switch (params[0]) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    case (\"event\"):"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        tasks.add(new Event(params[1], params[3] + \" \" + params[4],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                                Boolean.parseBoolean(params[5])));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    case (\"deadline\"):"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        tasks.add(new Deadline(params[1], params[3] + \" \" + params[4],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                                Boolean.parseBoolean(params[5])));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    case (\"todo\"):"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        tasks.add(new ToDo(params[1], Boolean.parseBoolean(params[2])));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // loads the file contents and returns them in a list format"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        read(resultList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 109
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "// partial solution template copied from Extension: A-Classes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assert description.trim() !\u003d \"\" : \"The description of a task cannot be empty!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 25
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final ArrayList\u003cTask\u003e TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.TASKS \u003d tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     this function takes in the input from the user and adds it to the list of tasks Duke is tracking"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     helper function"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.TASKS.add(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // this function deletes the task per requested by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Task t \u003d this.TASKS.get(taskNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.TASKS.remove(taskNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"       \" + t.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // this function prints the task that is completed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void markAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Task t \u003d this.TASKS.get(taskNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xnmng": 34
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "// partial solution copied from iP"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        super(description.trim(), isDone);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return \"  [T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 12
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run the todo command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class ToDoCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public final String COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public ToDoCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the todo command, causing add a task of type todo to the taskList,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * provided that the command input is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @throws MissingDescriptionException If the todo command is missing a description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String description \u003d COMMAND.substring(4).trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            throw new MissingDescriptionException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ToDo t \u003d new ToDo(description, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            taskList.addTask(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            storage.write(taskList.TASKS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.createToDoSuccessMessage(t, taskList.TASKS.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 48
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // this field is used when output requires a horizontal line"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public static final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // this function greets the user when Duke is started"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void printGreetingMessage(String createResult) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        String logo \u003d \"      ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + \"     |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + \"     | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + \"     | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Hello! I\u0027m Duke and I was designed by Xuan Ming!\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(createResult);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // this function says bye to the user when Duke receives the input \"bye\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void printGoodbyeMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     calling this function will cause Duke to echo what the user inputs to Duke"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     this method is only used in Level-1 of iP"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void echo(String s) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    // this method prompts the user for a command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Give me a command! \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void printUnknownCommandMessage(String command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what \\\"\" + command + \"\\\" means :-(\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void createToDoSuccessMessage(ToDo t, int numOfTasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     \" + t.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Now you have \" + numOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void printTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"     Currently, you have no tasks!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            assert tasks.size() \u003e 0 : \"Tasks should be greater than 0!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"     These are your tasks:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    System.out.println(\"     \" + counter + \". \" + ((Deadline) task).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    System.out.println(\"     \" + counter + \". \" + ((Event) task).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                } else if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    System.out.println(\"     \" + counter + \". \" + ((ToDo) task).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void doneCommandSuccessMessage(int taskNumber, Task t) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (t instanceof Event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"       \" + taskNumber + \". \" + ((Event) t).toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"       \" + taskNumber + \". \" + ((Deadline) t).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (t instanceof ToDo) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"       \" + taskNumber + \". \" + ((ToDo) t).toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void createDeadlineSuccessMessage(Deadline d, int numOfTasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     \" + d.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Now you have \" + numOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void createEventSuccessMessage(Event e, int numOfTasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     \" + e.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Now you have \" + numOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void showErrorMessage(String message) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     \" + message);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void deleteCommandSuccessMessage(int taskNumber, Task t) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        System.out.println(\"     Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (t instanceof Event) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"       \" + taskNumber + \". \" + ((Event) t).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"       \" + taskNumber + \". \" + ((Deadline) t).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else if (t instanceof ToDo) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"       \" + taskNumber + \". \" + ((ToDo) t).toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void findResultMessage(ArrayList\u003cTask\u003e results, String query) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        if (results.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"     ☹ OOPS!!! I\u0027m sorry, but I didn\u0027t find anything that matches \\\"\" + query"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                    + \"\\\" :-(\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            System.out.println(\"     Here\u0027s what i found: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            for (Task t : results) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                System.out.println(counter + \".\" + t.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xnmng"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 131
    }
  },
  {
    "path": "src/main/java/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to run any other unspecified command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * The type of a command is defined as the first word in the command string."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class UnknownCommand implements Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected final String COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public UnknownCommand(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.COMMAND \u003d command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Executes the unknown command, causing Duke to echo whatever command the user inputs as it is not a valid command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param taskList Used by Duke to keep track of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param ui Responsible for printing to console after execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @param storage Stores tasks in a text format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.printUnknownCommandMessage(COMMAND);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns true if a bye command is called."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Returns False otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * @return boolean indicating whether Duke is to stop running."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 38
    }
  },
  {
    "path": "src/main/java/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": " * Class to hold the UnknownCommandException message of a UnknownCommandException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public UnknownCommandException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        this.command \u003d s;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 15
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public DukeException testEventMethod(String command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            new EventCommand(command).execute(null, null, null);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return e;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return new DukeException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public DukeException testDeadlineMethod(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            new DeadlineCommand(command).execute(null, null, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return e;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return new DukeException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public DukeException testToDoMethod(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            new ToDoCommand(command).execute(null, null, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "            return e;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        return new DukeException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void ParserTest1(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"/at\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"/by\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"123\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"abc\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"bye\") instanceof ByeCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"event\") instanceof EventCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"deadline\") instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(Parser.interpret(\"todo\") instanceof ToDoCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void EventTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testEventMethod(\"event\") instanceof MissingDescriptionException);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testEventMethod(\"event /at\") instanceof MissingDescriptionException);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testEventMethod(\"event e /at\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testEventMethod(\"event at\") instanceof MissingTagException);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testEventMethod(\"event e /at 12/12/2020\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testEventMethod(\"event e /at\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testEventMethod(\"event e /at 1230\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void DeadlineTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testDeadlineMethod(\"deadline\") instanceof MissingDescriptionException);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testDeadlineMethod(\"deadline /by\") instanceof MissingDescriptionException);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testDeadlineMethod(\"deadline d /by\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testDeadlineMethod(\"deadline by\") instanceof MissingTagException);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testDeadlineMethod(\"deadline d /by 12/12/2020\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testDeadlineMethod(\"deadline d /by\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testDeadlineMethod(\"deadline d /by 1230\") instanceof MissingDateTimeException);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void ToDoTest() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertTrue(testToDoMethod(\"todo\") instanceof MissingDescriptionException);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 75
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xnmng": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xnmng"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done a"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xnmng"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xnmng"
        },
        "content": "event 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xnmng"
        },
        "content": "event a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xnmng"
        },
        "content": "event 1 /at"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "event a /at"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xnmng"
        },
        "content": "event 1 /at 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xnmng"
        },
        "content": "event a /at a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xnmng"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xnmng"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xnmng"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xnmng"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xnmng"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xnmng"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xnmng"
        },
        "content": "deadline a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xnmng"
        },
        "content": "deadline 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xnmng"
        },
        "content": "deadline a /by"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xnmng"
        },
        "content": "deadline a /by a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xnmng"
        },
        "content": "deadline 1 /by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xnmng"
        },
        "content": "deadline 1 /by 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xnmng"
        },
        "content": "todo"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xnmng"
        },
        "content": "todo a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xnmng"
        },
        "content": "abc"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xnmng"
        },
        "content": "123"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xnmng"
        },
        "content": "hi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xnmng"
        },
        "content": "list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xnmng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "xnmng": 37
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xnmng"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003cinput.txt \u003eACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xnmng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xnmng"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "xnmng": 3
    }
  }
]
