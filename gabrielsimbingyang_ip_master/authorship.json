[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "mainClassName \u003d \u0027Duke.java\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "test {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 18
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 1 |  b"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  a"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "D | 0 |  a | 2019-02-02"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  b"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  event keeping"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "T | 0 |  book keeping"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 9
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 84
    }
  },
  {
    "path": "src/main/java/Bot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Bot {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *Prints the greeting when created"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Bot() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    printer.greeting();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Printer printer \u003d new Printer(); //ui"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Storage storage \u003d new Storage(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  TaskList taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Checks for the next line as inputted by the user. Parses the message through parser.getDetails("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * message) which returns an array of size 3 containing the type of message, detail and the date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Date will be null if the message is not of Deadline or Event. The function will then carry out"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * the corresponding action depending on the type of message by interacting with the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * taskListing object. The function will also pass the storage and printer object so that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * taskList can save the data into duke.txt after completion and also print the corresponding"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * message. Catches undefined and wrong messages exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Type of commands supported are [bye, list, done, todo, event, deadline, delete, find]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void serve() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] parsedInfo \u003d parser.getDetails(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String command \u003d parsedInfo[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String commandDetail \u003d parsedInfo[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String dateInfo \u003d parsedInfo[2];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"bye\"):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            printer.farewell();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"list\"):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            taskList.printReturns();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"done\"):"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            taskList.doneListings(Integer.valueOf(commandDetail), printer, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"todo\"):"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (commandDetail \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "              throw new NoDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "              taskList.addListings(parsedInfo, printer, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"deadline\"):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (commandDetail \u003d\u003d null || dateInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "              throw new NoDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "              taskList.addListings(parsedInfo, printer, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"event\"):"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            if (commandDetail \u003d\u003d null || dateInfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "              throw new NoDescriptionException(\"event\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "              taskList.addListings(parsedInfo, printer, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"delete\"):"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            Integer number \u003d Integer.valueOf(parsedInfo[1]) - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            taskList.deleteListing(number, printer, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case (\"find\"):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            taskList.find(commandDetail);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            throw new UndefinedException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      } catch (NoDescriptionException e) { //incomplete messages"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        printer.noDescriptionMessage(e.s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      } catch (UndefinedException e) { //unknown commands"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        printer.undefinedExceptionMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 86
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Deadline extends Listing {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private LocalDate deadLine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a new Deadline object by passing s as the Listing message and parsing deadline to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * LocalDate."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param s        detail of the listing"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param deadline in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Deadline(String s, String deadLine) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    super(s);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.deadLine \u003d LocalDate.parse(deadLine);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a new Deadline object using an extra string parameter doneness. Used when creating"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *    * Event objects are loading from storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param doneness can be 0 or 1 and which gets passed to checkDoness that converts \\ it to a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *                 boolean"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param s        detail of the listing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param deadline in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Deadline(String doneness, String s, String time) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    super(s);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    checkDoneness(doneness);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.deadLine \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Returns a string array of size 4 containing a code, doneness, detail and time to be saved by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Storage.java. The code will always be \"D\" for \"Deadline\" and doneness wil be 1 or 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * corresponding to the object boolean value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String[] toArray() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d new String[4];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[0] \u003d \"D\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    if (this.isDone) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      details[1] \u003d \"1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      details[1] \u003d \"0\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[2] \u003d this.title;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[3] \u003d this.deadLine.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return details;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Returns this object in string format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return \"[D]\" + super.doneness() + this.title + \" (by:\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        deadLine.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 62
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void main(String[] args) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Bot bot \u003d new Bot();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    bot.serve();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Event extends Listing {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  String deadLine;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a new Event object by passing s as the Listing message and deadline as the deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Note that deadline is not in a strict localDate format"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param s        detail of the listing"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param deadline deadline of the listing in any form of a string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Event(String s, String deadLine) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    super(s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a new Event object using an extra string parameter doneness. Used when creating Event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * objects are loading from storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param doneness can be 0 or 1 and which gets passed to checkDoness that converts \\ it to a"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *                 boolean"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param s        detail of the listing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param deadline in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Event(String doneness, String s, String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    super(s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    checkDoneness(doneness);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.deadLine \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Returns a string array of size 4 containing a code, doneness, detail and time to be saved by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Storage.java. The code will always be \"D\" for \"Deadline\" and doneness wil be 1 or 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * corresponding to the object boolean value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String[] toArray() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d new String[4];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[0] \u003d \"E\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    if (this.isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      details[1] \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      details[1] \u003d \"0\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[2] \u003d this.title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[3] \u003d this.deadLine;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return details;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Returns this object in string format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return \"[E]\" + super.doneness() + \" \" + this.title + \"(at:\" + this.deadLine + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 57
    }
  },
  {
    "path": "src/main/java/Listing.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Listing {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  String title;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Boolean isDone \u003d false;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Listing(String s) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.title \u003d s;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void complete() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    isDone \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String doneness() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    if (isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      return \"[✓]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      return \"[✗]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void checkDoneness(String s) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    if (s.equals(\"1\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      this.isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String[] toArray() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return new String[2];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return this.title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 37
    }
  },
  {
    "path": "src/main/java/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class NoDescriptionException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public NoDescriptionException(String s) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.s \u003d s;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  String s;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 8
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Parser() { //parser object"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /***"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Returns a string array containing the command type, command details and date details. If there"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * are no details then the array slot is left as null. Reads the raw input from the user as"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * a string and split the based on whitespace"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param String input from the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @return a size 3 string array containing command type, command detail and date detail"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String[] getDetails(String s) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] rawData \u003d s.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] extractedDetails \u003d extractDetails(rawData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return extractedDetails;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Returns a size 3 array containing command type, command detail and command date. Any array"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * slots that have no inputs are left as null. The original raw input is split and processed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * depending on the command type. The command types available are todo, deadline, event, done and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * delete"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param string array of the raw user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @return a size 3 array containing command type, command detail and date detail."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   **/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String[] extractDetails(String[] details) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String type \u003d details[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] s \u003d new String[3];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String s1 \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String s2 \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    int counter \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    switch (type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case \"todo\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        if (details.length \u003d\u003d 1) { //empty todo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          s[1] \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        } else { // form a single string of detail"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          for (int i \u003d 1; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s1 \u003d s1 + \" \" + details[i];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          s[1] \u003d s1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case \"deadline\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (; counter \u003c details.length; counter++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          if (details[counter].equals(\"/by\")) { //base case for task details"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s[1] \u003d s1;  //enter detail into extracted details array"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          s1 \u003d s1 + \" \" + details[counter]; //build a string of task details"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (counter++; counter \u003c details.length; counter++) {//build a string of time detail"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          if (counter \u003d\u003d details.length - 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s2 \u003d s2 + details[counter];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s2 \u003d s2 + details[counter] + \" \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s[2] \u003d s2; //enter time detail into extracted detail array"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case \"event\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (; counter \u003c details.length; counter++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          if (details[counter].equals(\"/at\")) { //base case for task details"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s[1] \u003d s1; // enter detail into final array"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          s1 \u003d s1 + details[counter] + \" \"; //build string of detail"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (counter++; counter \u003c details.length; counter++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          if (counter \u003d\u003d details.length - 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s2 \u003d s2 + details[counter];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            s2 \u003d s2 + details[counter] + \" \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s[2] \u003d s2; //enter time detail into final array"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case (\"done\"):"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s[1] \u003d details[1]; //expected to be an int"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case (\"delete\"):"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s[1] \u003d details[1]; //expected to be an int"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case (\"bye\"):"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case (\"find\"):"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        s[1] \u003d details[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    s[0] \u003d type;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return s;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 97
    }
  },
  {
    "path": "src/main/java/Printer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private String GREETING \u003d \"     Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      \"     What can I do for you?\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private String GOODBYE \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private String GOT_IT \u003d \"     Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private String WHITE_SPACE_SEVEN \u003d \"       \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Printer() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the greeting message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void greeting() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String s \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    s \u003d LINE + \"\\n\" + GREETING + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(s);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the farewell message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void farewell() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String s \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    s \u003d LINE + \"\\n\" + GOODBYE + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(s);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the listing size message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void printListing(Listing l, int size) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String s \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    s \u003d LINE + \"\\n\" + GOT_IT + \"\\n\" + WHITE_SPACE_SEVEN + l.toString() +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        \"\\n\" + \"     Now you have \" + size + \" tasks in the list.\" + \"\\n\" + LINE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(s);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the undefinedExceptionMessage message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void undefinedExceptionMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        .println(LINE + \"\\n\" + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the noExceptionMessage message"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void noDescriptionMessage(String s) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        .println(LINE + \"\\n\" + \"     ☹ OOPS!!! The description of a \" + s + \" cannot be empty.\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the delete message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void deleteMessage(int size, String listing) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(LINE + \"\\n\" + \"     Noted. I\u0027ve removed this task: \\n\" + WHITE_SPACE_SEVEN +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        listing + \"\\n\" + \"     Now you have \" + size + \" tasks in the list.\\n\" + LINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the done message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void doneMessage(String s) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(LINE + \"\\n\" + \"     Nice! I\u0027ve marked this task as done: \\n\" + \"     \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        + s + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 77
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class Storage { //deals with loading task and saving task in file"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  private File file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a new Storage object. Storage is initialised with filepath passed from Bot.java."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Filepath is assigned to this.filePath. Storage checks if there is a file named duke.txt (from"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * the file path) that exists. If it does, the file is assigned to this.file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param filePath file path of duke.txt (or other file name as determined by creator)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public Storage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      File myFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      boolean exists \u003d myFile.exists();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      if (!exists) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        myFile.createNewFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.file \u003d myFile;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(\"new duke.txt created\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      } else if (exists) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        this.file \u003d myFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(\"file exists\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        throw new IOException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a new ArrayList\u003cListing\u003e. If this.file contains a non-empty file, the lines are parsed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * and split using a Scanners to return a string array of size 3 containing the code, isDone,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * details and timedetail if applicable (or left null if none is available). The corresponding"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Listing is then created and added to the Arraylist which is then returned. If file is empty"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * then an empty ArrayList is returned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public ArrayList\u003cListing\u003e load() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    ArrayList\u003cListing\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      Scanner sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] details \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        switch (details[0]) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case \"T\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            list.add(new ToDo(details[1], details[2]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case \"D\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            list.add(new Deadline(details[1], details[2], details[3]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          case \"E\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            list.add(new Event(details[1], details[2], details[3]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      System.out.println(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return list;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Takes in an ArrayList\u003cListing\u003e and loops through the list, writing the details of each listing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * separated by a \" | \" into this.file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param ArrayList\u003cListing\u003e list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void save(ArrayList\u003cListing\u003e list) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      for (Listing listing : list) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String[] details \u003d listing.toArray();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          s \u003d s + details[i];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          if (i \u003d\u003d details.length - 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "          s \u003d s + \" | \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        fileWriter.write(s + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      fileWriter.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      System.out.println(e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 100
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public ArrayList\u003cListing\u003e list;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Takes in a new Arraylist\u003cListing\u003e and initialises list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public TaskList(ArrayList\u003cListing\u003e l) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    this.list \u003d l;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the toString() value of each listing in the list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  protected void printReturns() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(\"     Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      String s \u003d \"     \" + (i + 1) + \".\" + list.get(i).toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      System.out.println(s);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Modifies the done boolean in the listing objects inside the list. Print the correct message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * through printer * and updates storage through the storage input * @param num used to find the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * listing * @param Printer  to print the object message * @param  Sttorage to update Duke.txt"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void doneListings(Integer value, Printer printer, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    Listing item \u003d list.get(value - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    item.complete();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    printer.doneMessage(item.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    storage.save(list);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Deletes the listing object from the list . Print the correct message through printer and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * updates storage through the storage input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param num     used to find the listing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param printer to print the object message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param storage to update Duke.txt"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void deleteListing(Integer num, Printer printer, Storage storage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    printer.deleteMessage(list.size() - 1, list.get(num).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    list.remove((int) num);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    storage.save(list);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Adds the listing object to the list . Print the correct message through printer and updates"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * storage through the storage input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param details used to provide the details to the listing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param printer to print the object message"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param storage to update Duke.txt"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void addListings(String[] details, Printer printer, Storage storage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    int size \u003d list.size() + 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String taskInfo \u003d details[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String dateInfo \u003d details[2];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    switch (details[0]) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case (\"todo\"):"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        ToDo todo \u003d new ToDo(taskInfo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        list.add(todo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        printer.printListing(todo, size);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case (\"deadline\"):"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Deadline deadline \u003d new Deadline(taskInfo, dateInfo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        printer.printListing(deadline, size);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      case (\"event\"):"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        Event event \u003d new Event(taskInfo, dateInfo);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        list.add(event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        printer.printListing(event, size);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    storage.save(list);// \u003c----- change this"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Takes in a string and loops the list for the message (inside listing.title) using"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * String.get(message) then prints out the corresponding messages."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param message the message requested by the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void find(String message) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(\"     Here are the matching tasks and their corresponding order!:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      Listing listing \u003d list.get(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      if (list.get(i).title.contains(message)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "        System.out.println(\"     \" + (i + 1) + \".\" + listing.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 103
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class ToDo extends Listing {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a ToDo object by passing the string s as the Todo message"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public ToDo(String s) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    super(s);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Creates a ToDo object by passing a string doneness which gets converted to a boolean and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * assigned to this.isDone. String s gets passed as the message detail"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param doneness a string of either 1 or 0 that gets converted to boolean"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * @param s        the message detail"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public ToDo(String doneness, String s) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    super(s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    checkDoneness(doneness);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Summarises the details of the ToDo object into a size 3 string array containing a code \"T\" that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * represents ToDO, isDone boolean in the form of a string and the detail message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String[] toArray() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d new String[3];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[0] \u003d \"T\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    if (this.isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      details[1] \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      details[1] \u003d \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    details[2] \u003d this.title;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return details;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   * Prints the ToDo object in string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "   */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    return \"[T]\" + super.doneness() + this.title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 45
    }
  },
  {
    "path": "src/main/java/UndefinedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class UndefinedException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public UndefinedException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 6
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 14
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "public class ParserTest { //parser tests"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void parserGetDetails_validTodoInput_trueReturned() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d parser.getDetails(\"todo event\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] answers \u003d {\"todo\", \" event\", null};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      assertEquals(answers[i], details[i]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void parserGetDetails_validDeadLineInput_trueReturned() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d parser.getDetails(\"deadline event /by 2012-02-2\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] answers \u003d {\"deadline\", \" event\", \"2012-02-2\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      assertEquals(answers[i], details[i]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  public void parserExtractDetails_validDeadLineInput_trueReturned() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] details \u003d parser.extractDetails(new String[]{\"deadline\", \"event\", \"/by\", \"2012-02-2\"});"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    String[] answers \u003d {\"deadline\", \" event\", \"2012-02-2\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    for (int i \u003d 0; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "      assertEquals(answers[i], details[i]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "  }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielsimbingyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielsimbingyang": 39
    }
  }
]
