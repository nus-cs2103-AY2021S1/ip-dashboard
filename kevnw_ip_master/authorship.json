[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 15,
      "-": 45
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "kevnw": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "kevnw": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "kevnw": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "kevnw": 11
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "[D][V] kiss kimberlyn on 2020-05-05"
      }
    ],
    "authorContributionMap": {
      "kevnw": 1
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            scene.getStylesheets().add(\"/view/main.css\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 32
    }
  },
  {
    "path": "src/main/java/duke/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    FIND"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 12
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Represents an {@code Deadline} object. Inherits from {@code Task} object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDate deadline) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, isDone, deadline);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"[D]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 18
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.DukeErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidEventException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidTodoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Main class for the Duke application"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    // Scanner to read input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Scanner readSc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    // Scanner to give input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Scanner inputSc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    // List of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    // Ui object to print out displays"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    // Storage object to handle saving to file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    // TaskList object to handle insertion, deletion, etc of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private TaskList tl;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    // Parser object to process inputs and commands"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * A constructor to initialize Duke Chatbot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        inputSc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        tl \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Method to parse data.txt file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void putExistingTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            storage.readFile(readSc, tl, ui, tasks, \"data/duke.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (FileNotFoundException | NullPointerException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            System.out.println(\"Folder data not found! \" + e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Get the suitable response from Duke Chatbot"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return interact(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * A method to handle the logic of Duke Chatbot and interact with users"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String interact(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] splitted \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Commands command;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            command \u003d parser.processCommand(splitted);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (DukeErrorException ex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return ex.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (command.equals(Commands.BYE)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            storage.writeFile(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return ui.sayFarewell();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (command.equals(Commands.LIST)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return ui.printList(tasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (command.equals(Commands.DONE)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return tl.makeDone(tasks, Integer.parseInt(splitted[1]) - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | DukeErrorException ex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return ex.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (command.equals(Commands.DELETE)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return tl.deleteTask(tasks, Integer.parseInt(splitted[1]) - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | DukeErrorException ex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return ex.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (command.equals(Commands.DEADLINE)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return tl.addDeadline(ui, tasks, splitted[1], true, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | InvalidDeadlineException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return ex + \". ☹ Task deadline must be specified.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (command.equals(Commands.TODO)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return tl.addTodo(ui, tasks, splitted[1], true, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | InvalidTodoException ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return ex + \". ☹ The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (command.equals(Commands.EVENT)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return tl.addEvent(ui, tasks, splitted[1], true, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | InvalidEventException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return ex + \". ☹ The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return ui.printList(tl.findTask(tasks, splitted[1]));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 111,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Represents an {@code Event} object. Inherits from {@code Task} object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Event(String description, boolean isDone, LocalDate time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, isDone, time);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"[E]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 18
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.DukeErrorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.UnknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Represents parser class to parse user commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Method to verify the command is valid or not"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param commandString user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return a {@code Command} object representing user actions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static Commands processInput(String commandString) throws UnknownCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Commands cmd \u003d Commands.valueOf(commandString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!cmd.equals(Commands.BYE)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 !cmd.equals(Commands.EVENT)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 !cmd.equals(Commands.DEADLINE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 !cmd.equals(Commands.DONE)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 !cmd.equals(Commands.LIST)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 !cmd.equals(Commands.TODO)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 !cmd.equals(Commands.DELETE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                \u0026\u0026 !cmd.equals((Commands.FIND))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Main method to call to parse user commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param splitted user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return a {@code Command} object representing user actions"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static Commands processCommand(String[] splitted) throws DukeErrorException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Commands command \u003d processInput(splitted[0].toUpperCase());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (IllegalArgumentException | UnknownCommandException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        throw new DukeErrorException(\"Invalid Input Format!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 49
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidTodoException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Write the content of the list into a file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void writeFile(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            StringBuilder replacementText \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            createFile(\"data/duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                if (list.get(i) instanceof Todo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    replacementText.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    replacementText.append(list.get(i).toString() + \" on \" + list.get(i).getDate() + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            appendToFile(\"data/duke.txt\", replacementText.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            System.out.println(\"Folder data not found! \" + e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Adds a string to a file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param filePath The file path (destination)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param textToAppend The content of the file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void appendToFile(String filePath, String textToAppend) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Create a new file to the filepath"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param filePath The file path (destination)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void createFile(String filePath) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        File dataFolder \u003d new File(\"data\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!dataFolder.isDirectory()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            dataFolder.mkdir();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Read data from a file and put it inside the list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param readSc Scanner object to read the file content"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param tl TaskList object to add the tasks inside the file to the list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param ui Ui object to print user display"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param filePath The file path (destination)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String readFile(Scanner readSc, TaskList tl, Ui ui, ArrayList\u003cTask\u003e list, String filePath)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throws FileNotFoundException, NullPointerException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        readSc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        while (readSc.hasNextLine()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            String curr \u003d readSc.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            switch (curr.charAt(1)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    if (curr.charAt(4) \u003d\u003d \u0027X\u0027) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        tl.addTodo(ui, list, curr.split(\" \", 2)[1], false, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        tl.addTodo(ui, list, curr.split(\" \", 2)[1], false, true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                } catch (InvalidTodoException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    return e.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    if (curr.charAt(4) \u003d\u003d \u0027X\u0027) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        tl.addDeadline(ui, list, curr.split(\" \", 2)[1], false, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        tl.addDeadline(ui, list, curr.split(\" \", 2)[1], false, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                } catch (InvalidDeadlineException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    return e.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    if (curr.charAt(4) \u003d\u003d \u0027X\u0027) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        tl.addEvent(ui, list, curr.split(\" \", 2)[1], false, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                        tl.addEvent(ui, list, curr.split(\" \", 2)[1], false, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                } catch (InvalidEventException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    return e.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return \"Unknown task\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 120
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs and initializes the attributes of a new Task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone The status of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param date The date related to the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Task (String description, boolean isDone, LocalDate date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Constructs and initializes the attributes of a new Task object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone The status of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Task (String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Make a task to be completed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @return A new task object with the same description and date but is completed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Task completeTask() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (this instanceof Deadline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new Deadline(this.description, true, this.date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else if (this instanceof Event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new Event(this.description, true, this.date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return new Todo(this.description, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getDateDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return (this.date !\u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                ? \" on \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + date.getMonth()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + date.getDayOfMonth()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + date.getYear()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                : \" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return (isDone ? \"[V]\" : \"[X]\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 71
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.DukeErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidEventException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidTodoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Represents a {@code Tasklist} object to store tasks in memory"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Read input from String and add new Deadline object to the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param ui Ui object to print user display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param str The string input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isNew Boolean value that indicates the task is new or not"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone Boolean value that indicates the state of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String addDeadline(Ui ui, ArrayList\u003cTask\u003e list, String str, boolean isNew, boolean isDone)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            deadline \u003d str.split(\"/by\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            deadline \u003d str.split(\"on\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (deadline.length \u003e 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new InvalidDeadlineException(\"☹ Task deadline must be written after `/by`.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (deadline[0].equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new InvalidDeadlineException(\"☹ Task description must be specified.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (deadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new InvalidDeadlineException(\"☹ Task deadline must be specified.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String description \u003d deadline[0].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Deadline curr \u003d new Deadline(description, isDone, LocalDate.parse(deadline[1].trim()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            list.add(curr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (isNew) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return ui.describeTask(list, curr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return \"Invalid Date format! Must be (yyyy-mm-dd).\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Read input from String and add new Event object to the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param ui Ui object to print user display"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param str The string input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isNew Boolean value that indicates the task is new or not"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone Boolean value that indicates the state of the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String addEvent(Ui ui, ArrayList\u003cTask\u003e list, String str, boolean isNew, boolean isDone)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throws InvalidEventException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String[] event;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            event \u003d str.split(\"/at\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            event \u003d str.split(\"on\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (event.length \u003e 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new InvalidEventException(\"☹ Event time must be written after `/at`.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (event[0].equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new InvalidEventException(\"☹ Event description must be specified.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (event.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new InvalidEventException(\"☹ Event time must be specified.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String description \u003d event[0].trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Event curr \u003d new Event(description, isDone, LocalDate.parse(event[1].trim()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            list.add(curr);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (isNew) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                return ui.describeTask(list, curr);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return \"Invalid Date format! Must be (yyyy-mm-dd).\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Read input from String and add new Todo object to the list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param ui Ui object to print user display"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param str The string input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isNew Boolean value that indicates the task is new or not"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param isDone Boolean value that indicates the state of the task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String addTodo(Ui ui, ArrayList\u003cTask\u003e list, String str, boolean isNew, boolean isDone)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throws InvalidTodoException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String description \u003d str.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new InvalidTodoException(\"☹ Todo description must be specified.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Todo curr \u003d new Todo(description, isDone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        list.add(curr);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            return ui.describeTask(list, curr);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Deletes a task from the list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param index The index of the target object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String deleteTask(ArrayList\u003cTask\u003e list, int index) throws DukeErrorException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new DukeErrorException(\"Operation: delete \" + (index + 1) + \" fails ☹.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Task deleted \u003d list.remove(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return Ui.printDeleted(deleted, list);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Make the target task to be completed"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param index The index of the target object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String makeDone(ArrayList\u003cTask\u003e list, int index) throws DukeErrorException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        if (index \u003e\u003d list.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            throw new DukeErrorException(\"Operation: done \" + (index + 1) + \" fails ☹.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        list.set(index, list.get(index).completeTask());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return Ui.printDone(list, index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Finds Task objects that contains the keyword"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param query The query keyword"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @reutn A list of task that fulfills the query keyword"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(ArrayList\u003cTask\u003e list, String query) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ArrayList\u003cTask\u003e suitableTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        list.forEach(x -\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            if (x.getDescription().contains(query)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                suitableTasks.add(x);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return suitableTasks;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 157
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Represents an {@code Todo} object. Inherits from {@code Task} object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 16
    }
  },
  {
    "path": "src/main/java/exception/DukeErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DukeErrorException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public DukeErrorException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"Invalid use of Duke Chatbot: \" + super.getMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 13
    }
  },
  {
    "path": "src/main/java/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class InvalidDeadlineException extends DukeErrorException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public InvalidDeadlineException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return super.getMessage() + \"\\n     Usage: deadline \u003cdeadline description\u003e /by \u003cdeadline date\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 13
    }
  },
  {
    "path": "src/main/java/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class InvalidEventException extends DukeErrorException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public InvalidEventException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return super.getMessage() + \"\\n     Usage: event \u003cevent description\u003e /at \u003cevent date\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 13
    }
  },
  {
    "path": "src/main/java/exception/InvalidTodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class InvalidTodoException extends DukeErrorException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public InvalidTodoException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return super.getMessage() + \"\\n     Usage: todo \u003ctodo description\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 13
    }
  },
  {
    "path": "src/main/java/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 9
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Text response \u003d new Text(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        response.setFont(new Font(13));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        dialog.setLineSpacing(1.15);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        dialog.setTranslateX(-5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.RIGHT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 49));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        db.setTranslateX(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        db.dialog.setStyle(\"-fx-background-radius: 0px 10px 10px 10px\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        db.dialog.setTranslateX(5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        db.dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 75
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        this.duke.putExistingTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 56
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": " * Represents the text ui interface"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Build chat line separator"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static String buildChatSeparator() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \"____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Show farewell message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static String sayFarewell() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \" Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Show added task and size of list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param curr The newly added task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String describeTask(ArrayList\u003cTask\u003e list, Task curr) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \" Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" \" + curr.toString() + curr.getDateDescription()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"\\n Now you have \" + (list.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                ? list.size() + \" task\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                : list.size() + \" tasks\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Print all task inside the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String printList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        output.append(\" Here are the tasks in your list: \\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            output.append(\" \" + i + \". \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    + list.get(i - 1).toString()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    + list.get(i - 1).getDateDescription()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Show response when a task is deleted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param deleted The deleted task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static String printDeleted(Task deleted, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \" Noted. I\u0027ve removed this task:  \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + deleted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"\\n Now you have \" + (list.size() \u003c\u003d 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    ? list.size() + \" task\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    : list.size() + \" tasks\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Show response when a task is done"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param list The task list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * @param index The index of the element inside the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public static String printDone(ArrayList\u003cTask\u003e list, int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return \" Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \" \" + list.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     * Show introduction of the Duke chatbot"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public String introduceDuke() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String introduction \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        output.append(introduction);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 101
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kevnw": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "               prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kevnw": 22
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import duke.Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.DukeErrorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void unknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"TEST\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Commands cmd \u003d Parser.processInput(input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof IllegalArgumentException);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parseInput_invalidInputFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"test\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            Commands cmd \u003d Parser.processCommand(input.split(\" \", 2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof DukeErrorException);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 30
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidEventException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import exception.InvalidTodoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevnw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevnw"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void addDeadline_missingDate_exceptionThrown() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"deadline finish level 6 /by\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            new TaskList().addDeadline(ui, list, input.split(\" \", 2)[1], true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof InvalidDeadlineException);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void addDeadline_wrongDateSeparator_exceptionThrown() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"deadline finish level 6 /at\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            new TaskList().addDeadline(ui, list, input.split(\" \", 2)[1], true, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof InvalidDeadlineException);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void addDeadline_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"deadline finish level 6 /at 19/08/2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            new TaskList().addDeadline(ui, list, input.split(\" \", 2)[1], true, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof InvalidDeadlineException);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void addEvent_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"event my birthday /at 25/08/2020\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            new TaskList().addEvent(ui, list, input.split(\" \", 2)[1], true, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof InvalidEventException);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void addEvent_wrongDateSeparator_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"event finish level 6 /by 2020-08-25\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            new TaskList().addEvent(ui, list, input.split(\" \", 2)[1], true, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof InvalidEventException);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void addEvent_missingDate_exceptionThrown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"event TEST /at\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            new TaskList().addEvent(ui, list, input.split(\" \", 2)[1], true, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof InvalidEventException);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevnw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    public void parseTodo_missingDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        String input \u003d \"todo\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            new TaskList().addTodo(ui, list,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevnw"
        },
        "content": "                    input.split(\" \", 2)[0], false, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevnw"
        },
        "content": "            assertTrue(ex instanceof InvalidTodoException);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevnw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevnw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevnw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevnw": 86
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevnw"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevnw"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevnw"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevnw"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevnw"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevnw"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevnw"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevnw"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "kevnw": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevnw"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Main.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevnw"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "kevnw": 2,
      "-": 19
    }
  }
]
