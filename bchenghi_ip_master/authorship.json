[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"}"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"test {"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    useJUnitPlatform()"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"}"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.0\u0027"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.0\u0027"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"}"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"checkstyle {"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"}"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"application {"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"}"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"}"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"repositories {"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"    mavenCentral()"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":47}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"T | 0 | description"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"D | 0 | description | 2012-02-12 | 16:00"}],"authorContributionMap":{"bchenghi":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"https://bchenghi.github.io/ip/"},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"## About"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"```"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":" ____        _        "},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"|  _ \\ _   _| | _____ "},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"| | | | | | | |/ / _ \\"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"| |_| | |_| |   \u003c  __/"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"|____/ \\__,_|_|\\_\\___|"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"Hello! I\u0027m Duke, your friendly task manager."},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"How can I help you today?"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"```"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"## Screenshot"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"![alt text](https://github.com/bchenghi/ip/blob/master/docs/Ui.png?raw\u003dtrue)"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"## Download"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"Download the jar file from releases."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"### Stores your tasks "},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"Duke allows you to store tasks and search for them in the future."},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"### Multiple task types"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"Choose from Todo, Deadline and Event task types."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"### Undo and Redo"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"Duke has undo and redo features to correct mistakes easily."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"### Done or not done"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"Duke displays a tick or cross to easily notify the user if the task was done or not."},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"### Search for your tasks"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"Duke allow searching for multiple keywords, making searching for tasks easy."},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"### `todo` - Adds a Todo task"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"Will add a Todo task to Duke."},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"Example of usage: "},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"`todo buy groceries`"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"`Got it! I\u0027ve added this task:`\\"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"`[T][X] buy groceries`\\"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"`Now you have 1 tasks in your list.`"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"### `deadline` - Adds a Deadline task"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"Will add a Deadline task with a date and time to Duke."},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"Example of usage: "},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"`deadline do assignment /by 22/12/2020 1600`"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"`Got it! I\u0027ve added this task:`\\"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"`[D][X] do assignment (by: Dec 22 2020 16:00)`\\"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"`Now you have 1 tasks in your list.`"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"### `event` - Adds a Event task"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"Will add a Event task with a date and time to Duke."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"`event attend Mary\u0027s Birthday /at 8/12/2020 1200`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":"`Got it! I\u0027ve added this task:`\\"},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":"`[E][X] attend Mary\u0027s Birthday (at: Dec 8 2020 12:00)`\\"},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"`Now you have 2 tasks in your list.`"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"### `list` - Lists all tasks in Duke"},{"lineNumber":80,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":81,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":82,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":83,"author":{"gitId":"bchenghi"},"content":"`Here are the tasks in your list:`\\"},{"lineNumber":84,"author":{"gitId":"bchenghi"},"content":"`1. [D][X] do assignment (by: Dec 22 2020 16:00)`\\"},{"lineNumber":85,"author":{"gitId":"bchenghi"},"content":"`2. [E][X] attend Mary\u0027s Birthday (at: Dec 8 2020 12:00)`"},{"lineNumber":86,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":87,"author":{"gitId":"bchenghi"},"content":"### `delete` - Deletes a task in Duke"},{"lineNumber":88,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":89,"author":{"gitId":"bchenghi"},"content":"Deletes the task at the given index. Index can be seen from `list`."},{"lineNumber":90,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":91,"author":{"gitId":"bchenghi"},"content":"Example of usage: "},{"lineNumber":92,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":93,"author":{"gitId":"bchenghi"},"content":"`delete 1`"},{"lineNumber":94,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":95,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":96,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":97,"author":{"gitId":"bchenghi"},"content":"`Noted. I\u0027ve removed this task.`\\"},{"lineNumber":98,"author":{"gitId":"bchenghi"},"content":"`[D][X] do assignment (by: Dec 22 2020 16:00)`\\"},{"lineNumber":99,"author":{"gitId":"bchenghi"},"content":"`Now you have 1 tasks in your list`"},{"lineNumber":100,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":101,"author":{"gitId":"bchenghi"},"content":"### `find` - Finds all tasks in Duke with the matching keywords"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"bchenghi"},"content":"Finds all tasks that contain the keywords specified."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"bchenghi"},"content":"`find assignment CS2100`"},{"lineNumber":108,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":109,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":110,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":111,"author":{"gitId":"bchenghi"},"content":"`Here are the tasks with \"assignment\", \"CS2100\" in your list:`\\"},{"lineNumber":112,"author":{"gitId":"bchenghi"},"content":"`1. [D][X] do CS2100 assignment 1 (by: Dec 22 2020 16:00)`\\"},{"lineNumber":113,"author":{"gitId":"bchenghi"},"content":"`2. [D][X] do CS2100 assignment 2 (by: Jan 21 2020 11:00)`"},{"lineNumber":114,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":115,"author":{"gitId":"bchenghi"},"content":"### `done` - Sets a task as done"},{"lineNumber":116,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":117,"author":{"gitId":"bchenghi"},"content":"Sets the task at the given index as done."},{"lineNumber":118,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":119,"author":{"gitId":"bchenghi"},"content":"Example of usage:"},{"lineNumber":120,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":121,"author":{"gitId":"bchenghi"},"content":"`done 2`"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"bchenghi"},"content":"`Nice! I\u0027ve marked this task as done:`\\"},{"lineNumber":126,"author":{"gitId":"bchenghi"},"content":"`[T][✓] get groceries`"},{"lineNumber":127,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":128,"author":{"gitId":"bchenghi"},"content":"### `undo` - Undoes most recent command"},{"lineNumber":129,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":130,"author":{"gitId":"bchenghi"},"content":"Undoes the most recent command since opening Duke."},{"lineNumber":131,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":132,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":133,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":134,"author":{"gitId":"bchenghi"},"content":"`Successfully undid task!`\\"},{"lineNumber":135,"author":{"gitId":"bchenghi"},"content":"or\\"},{"lineNumber":136,"author":{"gitId":"bchenghi"},"content":"`Oops! No more tasks to undo.`"},{"lineNumber":137,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":138,"author":{"gitId":"bchenghi"},"content":"### `redo` - Redoes the most recent undone command"},{"lineNumber":139,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":140,"author":{"gitId":"bchenghi"},"content":"Redoes the most recent undone command since opening Duke."},{"lineNumber":141,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":142,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":143,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":144,"author":{"gitId":"bchenghi"},"content":"`Successfully redid task!`\\"},{"lineNumber":145,"author":{"gitId":"bchenghi"},"content":"or\\"},{"lineNumber":146,"author":{"gitId":"bchenghi"},"content":"`Oops! No more tasks to redo.`"},{"lineNumber":147,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":148,"author":{"gitId":"bchenghi"},"content":"### `date` - Lists all event and deadline tasks with the date"},{"lineNumber":149,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":150,"author":{"gitId":"bchenghi"},"content":"Lists all events that happen on the date and deadline tasks that is due on the date"},{"lineNumber":151,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":152,"author":{"gitId":"bchenghi"},"content":"`date 12/2/2020`"},{"lineNumber":153,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":154,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":155,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":156,"author":{"gitId":"bchenghi"},"content":"`There are no tasks with the date: 2020-02-12`\\"},{"lineNumber":157,"author":{"gitId":"bchenghi"},"content":"or\\"},{"lineNumber":158,"author":{"gitId":"bchenghi"},"content":"`Here are the tasks with the date: 2020-02-12`\\"},{"lineNumber":159,"author":{"gitId":"bchenghi"},"content":"`1. [D][X] do CS2100 assignment 1 (by: Feb 12 2020 16:00)`"},{"lineNumber":160,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":161,"author":{"gitId":"bchenghi"},"content":"### `dateAndTime` - Lists all event and deadline tasks with the date and time"},{"lineNumber":162,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":163,"author":{"gitId":"bchenghi"},"content":"Lists all event and deadline tasks with the specified date and time."},{"lineNumber":164,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":165,"author":{"gitId":"bchenghi"},"content":"`dateAndTime 21/2/2020 1600`"},{"lineNumber":166,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":167,"author":{"gitId":"bchenghi"},"content":"Expected outcome:"},{"lineNumber":168,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":169,"author":{"gitId":"bchenghi"},"content":"`There are no tasks with the date: 2020-02-12 and time: 16:00`\\"},{"lineNumber":170,"author":{"gitId":"bchenghi"},"content":"or\\"},{"lineNumber":171,"author":{"gitId":"bchenghi"},"content":"`Here are the tasks with the date: 2020-02-12 and time: 16:00`\\"},{"lineNumber":172,"author":{"gitId":"bchenghi"},"content":"`1. [D][X] do CS2100 assignment 1 (by: Feb 12 2020 16:00)`"},{"lineNumber":173,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":174,"author":{"gitId":"bchenghi"},"content":"### `bye` - Exits Duke"}],"authorContributionMap":{"-":22,"bchenghi":152}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"@rem"},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"@rem"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"@rem"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"@rem"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"@rem limitations under the License."},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"@rem"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"@rem ##########################################################################"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"@rem"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"@rem ##########################################################################"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"@rem Find java.exe"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"echo."},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"echo."},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"echo location of your Java installation."},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"goto fail"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":":findJavaFromJavaHome"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"echo."},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"echo."},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"echo location of your Java installation."},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"goto fail"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":":init"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":":win9xME_args"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":"@rem Slurp the command line arguments."},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":80,"author":{"gitId":"bchenghi"},"content":"set _SKIP\u003d2"},{"lineNumber":81,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":82,"author":{"gitId":"bchenghi"},"content":":win9xME_args_slurp"},{"lineNumber":83,"author":{"gitId":"bchenghi"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":84,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":85,"author":{"gitId":"bchenghi"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":86,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":87,"author":{"gitId":"bchenghi"},"content":":execute"},{"lineNumber":88,"author":{"gitId":"bchenghi"},"content":"@rem Setup the command line"},{"lineNumber":89,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":90,"author":{"gitId":"bchenghi"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":91,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":92,"author":{"gitId":"bchenghi"},"content":"@rem Execute Gradle"},{"lineNumber":93,"author":{"gitId":"bchenghi"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":94,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":95,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":96,"author":{"gitId":"bchenghi"},"content":":end"},{"lineNumber":97,"author":{"gitId":"bchenghi"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":98,"author":{"gitId":"bchenghi"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":99,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":100,"author":{"gitId":"bchenghi"},"content":":fail"},{"lineNumber":101,"author":{"gitId":"bchenghi"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":102,"author":{"gitId":"bchenghi"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":103,"author":{"gitId":"bchenghi"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":104,"author":{"gitId":"bchenghi"},"content":"exit /b 1"},{"lineNumber":105,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":106,"author":{"gitId":"bchenghi"},"content":":mainEnd"},{"lineNumber":107,"author":{"gitId":"bchenghi"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":108,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":109,"author":{"gitId":"bchenghi"},"content":":omega"}],"authorContributionMap":{"bchenghi":109}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.command.CommandResult;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * Task types used in Duke."},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    public enum TaskType {"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"        TODO(\"todo\"),"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"        EVENT(\"event\"),"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"        DEADLINE(\"deadline\");"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        public final String name;"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"        private TaskType(String name) {"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"            this.name \u003d name;"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"    private Ui ui;"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    private TaskList tasks;"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    private StateManager stateManager;"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"     * Initializes a Duke object."},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"     * @param pathName The path for the storage file."},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"    public Duke(String pathName) {"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"        ui \u003d new Ui();"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"            stateManager \u003d new StateManager(pathName);"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"            tasks \u003d new TaskList(stateManager.getListOfTasks());"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"     * Takes the input argument, executes a command based on the input, and returns a command result object"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"     * @param input The string input from user"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object from the execution of a command"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"    public CommandResult getResponse(String input) {"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"            CommandResult output \u003d c.execute(tasks, stateManager);"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"            return output;"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(e.getMessage());"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"    public String getWelcomeMessage() {"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"        return ui.getWelcomeMessage();"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"bchenghi":66}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    private Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    public Main() {}"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"            stage.getIcons().add(new Image(Main.class.getResource(\"/images/DukeLogo.png\").toExternalForm()));"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().printOpeningMessage();"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":34}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"public class AddCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    private Task taskToAdd;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     * Initializes an AddCommand with the task to be added as the input."},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     * @param taskToAdd The task to be added."},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    public AddCommand(Task taskToAdd) {"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"        this.taskToAdd \u003d taskToAdd;"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"     * Adds the taskToAdd to the TaskList and updates the Storage."},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"     * @param tasks The TaskList."},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager The Storage."},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object for ui"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If storage could not be updated."},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList tasks, StateManager stateManager) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"        assert tasks !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        tasks.addTask(taskToAdd);"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"        stateManager.updateState(tasks);"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"        return new CommandResult(\"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"                + taskToAdd.toString() + \"\\n\""},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"                + \"Now you have \" + tasks.numberOfTasks() + \" tasks in the list.\");"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":38}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"     * A method to execute the command."},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"     * @param tasks   The TaskList used by Duke."},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager The Storage used by Duke."},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object containing information for ui"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If a DukeException occurs during execution by child classes."},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    public abstract CommandResult execute(TaskList tasks, StateManager stateManager) throws DukeException;"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"     * Returns whether the command object is the ExitCommand."},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"     * @return A boolean of whether the command is an ExitCommand and default set to false."},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"    public boolean isExitCommand() {"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":27}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"public class CommandResult {"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"    private String feedbackToUser;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"     * Creates a CommandResult object, with the output for the user as the argument"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"     * @param feedbackToUser The message for the user"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"        this.feedbackToUser \u003d feedbackToUser;"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     * The command result object will be from the ExitCommand"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    public void setIsExit() {"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"        isExit \u003d true;"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"     * Checks if the command result was returned from an ExitCommand"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * @return A boolean whether this was from an ExitCommand"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"    public boolean isExit() {"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"        return isExit;"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"     * Gets the string for user to see from the execution of a command"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"     * @return The string for the user to see"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"        assert feedbackToUser !\u003d null;"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        return feedbackToUser;"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":41}},{"path":"src/main/java/duke/command/DateAndTimeListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"public class DateAndTimeListCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    private LocalDate localDate;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    private LocalTime localTime;"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     * Initializes the command with the LocalDate and LocalTime to find in TaskList."},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"     * @param localDate The LocalDate to match with tasks in the TaskLise."},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"     * @param localTime The LocalTime to match with tasks in the TaskList."},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    public DateAndTimeListCommand(LocalDate localDate, LocalTime localTime) {"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"        this.localDate \u003d localDate;"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"        this.localTime \u003d localTime;"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"     * Searches for tasks that have the same date and time as localDate and localTime"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"     * and prints them in the Ui."},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"     * @param taskList The TaskList used by Duke."},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager  The Storage used by Duke."},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"        assert taskList !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"        int numberOfTasksFound \u003d 0;"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"        stringBuilder.append(\"Here are the tasks with the date: \""},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"                + localDate.toString() + \" and time: \" + localTime.toString() + \"\\n\");"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c taskList.numberOfTasks(); i++) {"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"            Task currentTask \u003d taskList.getTask(i);"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"            if (currentTask instanceof Deadline) {"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"                Deadline deadline \u003d (Deadline) currentTask;"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"                if (deadline.getLocalDate().equals(localDate)"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"                        \u0026\u0026 deadline.getLocalTime().equals(localTime)) {"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"                    stringBuilder.append((i + 1) + \". \" + deadline.toString() + \"\\n\");"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"                    numberOfTasksFound++;"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"            } else if (currentTask instanceof Event) {"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"                Event event \u003d (Event) currentTask;"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"                if (event.getLocalDate().equals(localDate)"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"                        \u0026\u0026 event.getLocalTime().equals(localTime)) {"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"                    stringBuilder.append((i + 1) + \". \" + event.toString() + \"\\n\");"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"                    numberOfTasksFound++;"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"        if (numberOfTasksFound \u003e 0) {"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(stringBuilder.toString());"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(\"There are no tasks with the date: \""},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"                    + localDate.toString()"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"                    + \" and time: \" + localTime.toString());"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":74}},{"path":"src/main/java/duke/command/DateListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"public class DateListCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    private LocalDate localDate;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     * Initializes the command with the LocalDate to match with the tasks in TaskList."},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"     * @param localDate"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"    public DateListCommand(LocalDate localDate) {"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"        this.localDate \u003d localDate;"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * Searches for tasks that have the same date and time as localDate"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * and prints them in the Ui."},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     * @param taskList The TaskList used by Duke."},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager  The Storage used by Duke."},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object for ui"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"        assert taskList !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"        int numberOfTasksFound \u003d 0;"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        stringBuilder.append(\"Here are the tasks with the date: \" + localDate.toString() + \"\\n\");"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c taskList.numberOfTasks(); i++) {"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"            Task currentTask \u003d taskList.getTask(i);"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"            if (currentTask instanceof Deadline) {"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"                Deadline deadline \u003d (Deadline) currentTask;"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"                if (deadline.getLocalDate().equals(localDate)) {"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"                    stringBuilder.append((i + 1) + \". \" + deadline.toString() + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"                    numberOfTasksFound++;"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"                }"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"            } else if (currentTask instanceof Event) {"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"                Event event \u003d (Event) currentTask;"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"                if (event.getLocalDate().equals(localDate)) {"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"                    stringBuilder.append((i + 1) + \". \" + event.toString() + \"\\n\");"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"                    numberOfTasksFound++;"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"        if (numberOfTasksFound \u003e 0) {"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(stringBuilder.toString());"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(\"There are no tasks with the date: \""},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"                    + localDate.toString());"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":65}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    private int indexOfTask;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    private Task taskDeleted;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     * Initializes the command with the index of the task to delete."},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     * @param indexOfTask The index of the task to delete."},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    public DeleteCommand(int indexOfTask) {"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"        this.indexOfTask \u003d indexOfTask;"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"     * Deletes the task in the TaskList, prints a message in the Ui, and updates the Storage."},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"     * @param taskList The TaskList used by Duke."},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager  The Storage used by Duke."},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object for ui"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If fail to delete or to update storage."},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        assert taskList !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"            Task taskToDelete \u003d taskList.getTask(indexOfTask);"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"            taskDeleted \u003d taskToDelete;"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"            taskList.deleteTask(indexOfTask);"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"            stateManager.updateState(taskList);"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"            CommandResult commandResult \u003d new CommandResult(\"Noted. I\u0027ve removed this task.\\n\""},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"                    + taskToDelete.toString() + \"\\n\""},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"                    + \"Now you have \" + taskList.numberOfTasks() + \" tasks in the list.\");"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"            return commandResult;"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! Sorry, I couldn\u0027t find the task.\");"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":47}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    private int indexOfTask;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"     * Initializes the command with the index of task to set as done."},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * @param indexOfTask Index of the task to set as done."},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    public DoneCommand(int indexOfTask) {"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"        this.indexOfTask \u003d indexOfTask;"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"     * Sets the task at the indexOfTask in the TaskList as done, prints a message in the Ui"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"     * and updates the Storage."},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"     * @param taskList The TaskList used by Duke."},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager  The Storage used by Duke."},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object for ui"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If unable to find the task or update the storage."},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"        assert taskList !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        Task taskToSetDone \u003d taskList.getTask(indexOfTask);"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"        taskList.setTaskDone(indexOfTask);"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"        stateManager.updateState(taskList);"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"        return new CommandResult(\"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"                + taskToSetDone.toString());"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":38}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"public class ExitCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    private static String EXIT_MESSAGE \u003d \"Goodbye! Hope to see you again soon!\";"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"     * Prints exit message on the Ui."},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     * @param taskList The TaskList used by Duke."},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager  The Storage used by Duke."},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object for ui"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) {"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"        assert taskList !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"        CommandResult commandResult \u003d new CommandResult(EXIT_MESSAGE);"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        commandResult.setIsExit();"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"        return commandResult;"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * Returns true since this is a ExitCommand."},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     * @return true."},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    public boolean isExitCommand() {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        return true;"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":35}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    private String[] keyWords;"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     * Initializes a command with the keyword to search for in the TaskList as input."},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     * @param keyWords The keyword to find for in the list of tasks."},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    public FindCommand(String... keyWords) {"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        this.keyWords \u003d keyWords;"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * Prints all tasks in the TaskList that contain the keyWord."},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     * @param taskList The TaskList used by Duke."},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager  The Storage used by Duke."},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object for ui"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"        assert taskList !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"        if (taskList.numberOfTasks() \u003e 0) {"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"            //ArrayList\u003cTask\u003e tasksWithKeyWord \u003d taskList.find(keyWords);"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"            ArrayList\u003cTask\u003e tasksWithKeyWord \u003d taskList.findTasks(task -\u003e {"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"                    boolean hasKeyWords \u003d true;"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"                    for (int j \u003d 0; j \u003c keyWords.length; j++) {"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"                        if (!task.toString().contains(keyWords[j])) {"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"                            hasKeyWords \u003d false;"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"                            break;"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"                        }"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"                    }"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"                    return hasKeyWords;"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"                }"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"            );"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"            if (tasksWithKeyWord.size() \u003e 0) {"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"                StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"                stringBuilder.append(createOpeningMessage());"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"                for (int i \u003d 0; i \u003c tasksWithKeyWord.size(); i++) {"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"                    Task currentTask \u003d tasksWithKeyWord.get(i);"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"                    stringBuilder.append((i + 1) + \". \" + currentTask.toString() + \"\\n\");"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"                return new CommandResult(stringBuilder.toString());"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"            } else {"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"                return new CommandResult(\"Sorry! No tasks with \\\"\""},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"                        + keyWordString() + \"\\\" in your list.\");"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(\"There are no tasks yet!\");"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"    private String createOpeningMessage() {"},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"        stringBuilder.append(\"Here are the tasks with \\\"\");"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"        stringBuilder.append(keyWordString());"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"        stringBuilder.append(\"\\\" in your list:\\n\");"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"        return stringBuilder.toString();"},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":"    private String keyWordString() {"},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c keyWords.length - 1; i++) {"},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"            stringBuilder.append(keyWords[i] + \"\\\", \\\"\");"},{"lineNumber":80,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"bchenghi"},"content":"        stringBuilder.append(keyWords[keyWords.length - 1]);"},{"lineNumber":82,"author":{"gitId":"bchenghi"},"content":"        return stringBuilder.toString();"},{"lineNumber":83,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":85,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":85}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"     * Formats all tasks in the TaskList into a message form, and prints the"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"     * list in the Ui."},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * @param taskList The TaskList used by Duke."},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     * @param stateManager  The Storage used by Duke."},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     * @return CommandResult object for ui"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        assert taskList !\u003d null \u0026\u0026 stateManager !\u003d null;"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"        if (taskList.numberOfTasks() \u003e 0) {"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"            stringBuilder.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"            for (int i \u003d 0; i \u003c taskList.numberOfTasks(); i++) {"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"                Task currentTask \u003d taskList.getTask(i);"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"                stringBuilder.append((i + 1) + \". \" + currentTask.toString() + \"\\n\");"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(stringBuilder.toString());"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"            return new CommandResult(\"There are no tasks yet!\");"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":36}},{"path":"src/main/java/duke/command/RedoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public class RedoCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"        TaskList newTaskList \u003d stateManager.redo();"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"        taskList.updateTaskList(newTaskList);"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"        return new CommandResult(\"Successfully redid task!\");"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":14}},{"path":"src/main/java/duke/command/UndoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public class UndoCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    public UndoCommand() {}"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    public CommandResult execute(TaskList taskList, StateManager stateManager) throws DukeException {"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"        TaskList newTaskList \u003d stateManager.undo();"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"        taskList.updateTaskList(newTaskList);"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"        return new CommandResult(\"Successfully undid task!\");"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":17}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"     * Initializes a DukeException object of the String input as its error message."},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"     * @param errorMessage The error message for the exception."},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"        super(errorMessage);"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":12}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import static java.lang.Integer.parseInt;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import duke.Duke;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import duke.command.AddCommand;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"import duke.command.Command;"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"import duke.command.DateAndTimeListCommand;"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"import duke.command.DateListCommand;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"import duke.command.DoneCommand;"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"import duke.command.ExitCommand;"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"import duke.command.FindCommand;"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"import duke.command.ListCommand;"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"import duke.command.RedoCommand;"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"import duke.command.UndoCommand;"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"import duke.task.Deadline;"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"import duke.task.Event;"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"import duke.task.ToDo;"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"public class Parser {"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"     * Parses the command from CLI and returns a corresponding Command object."},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"     * @param command"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"     * @return A command object corresponding to the input command string."},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If unknown command or error in command."},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"    public static Command parse(String command) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        return parseAndReturnCommand(command);"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"    static boolean stringIsInt(String string) {"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"            parseInt(string);"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"            return true;"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"            return false;"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"    static Command parseAndReturnCommand(String string) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"        String[] splitString \u003d string.split(\"\\\\s+\");"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"        if (string.equals(\"bye\")) {"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"            return new ExitCommand();"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"        } else if (string.equals(\"list\")) {"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"            return new ListCommand();"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"        } else if (splitString.length \u003d\u003d 2"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"                \u0026\u0026 splitString[0].equals(\"done\") \u0026\u0026 stringIsInt(splitString[1])) {"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"            int index \u003d parseInt(splitString[1]);"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"            return new DoneCommand(index - 1);"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"        } else if (splitString.length \u003d\u003d 2"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"                \u0026\u0026 splitString[0].equals(\"delete\") \u0026\u0026 stringIsInt(splitString[1])) {"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"            int index \u003d parseInt(splitString[1]);"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"            return new DeleteCommand(index - 1);"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"        } else if (splitString.length \u003d\u003d 2 \u0026\u0026 splitString[0].equals(\"date\")) {"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"            LocalDate date \u003d parseDateStringToLocalDate(splitString[1]);"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"            return new DateListCommand(date);"},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"        } else if (splitString.length \u003d\u003d 3 \u0026\u0026 splitString[0].equals(\"dateAndTime\")) {"},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"            LocalDate date \u003d parseDateStringToLocalDate(splitString[1]);"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"            LocalTime time \u003d parseTimeStringToLocalTime(splitString[2]);"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"            return new DateAndTimeListCommand(date, time);"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"        } else if (splitString[0].equals(Duke.TaskType.TODO.name)"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"                || splitString[0].equals(Duke.TaskType.DEADLINE.name)"},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"                || splitString[0].equals(Duke.TaskType.EVENT.name)) {"},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":"            return createAddCommand(splitString);"},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":"        } else if (splitString[0].equals(\"find\") \u0026\u0026 splitString.length \u003e\u003d 2) {"},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"            return createFindCommand(splitString);"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":"        } else if (string.equals(\"undo\")) {"},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"            return new UndoCommand();"},{"lineNumber":80,"author":{"gitId":"bchenghi"},"content":"        } else if (string.equals(\"redo\")) {"},{"lineNumber":81,"author":{"gitId":"bchenghi"},"content":"            return new RedoCommand();"},{"lineNumber":82,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! I\u0027m sorry, I don\u0027t know what that means.\");"},{"lineNumber":84,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":87,"author":{"gitId":"bchenghi"},"content":"    static AddCommand createAddCommand(String[] stringArray) throws DukeException {"},{"lineNumber":88,"author":{"gitId":"bchenghi"},"content":"        Task taskToAdd \u003d null;"},{"lineNumber":89,"author":{"gitId":"bchenghi"},"content":"        if (stringArray[0].equals(Duke.TaskType.TODO.name)) {"},{"lineNumber":90,"author":{"gitId":"bchenghi"},"content":"            taskToAdd \u003d createTodoTask(stringArray);"},{"lineNumber":91,"author":{"gitId":"bchenghi"},"content":"        } else if (stringArray[0].equals(Duke.TaskType.DEADLINE.name)) {"},{"lineNumber":92,"author":{"gitId":"bchenghi"},"content":"            taskToAdd \u003d createDeadlineTask(stringArray);"},{"lineNumber":93,"author":{"gitId":"bchenghi"},"content":"        } else if (stringArray[0].equals(Duke.TaskType.EVENT.name)) {"},{"lineNumber":94,"author":{"gitId":"bchenghi"},"content":"            taskToAdd \u003d createEventTask(stringArray);"},{"lineNumber":95,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"bchenghi"},"content":"        return new AddCommand(taskToAdd);"},{"lineNumber":97,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":99,"author":{"gitId":"bchenghi"},"content":"    static ToDo createTodoTask(String[] stringArray) throws DukeException {"},{"lineNumber":100,"author":{"gitId":"bchenghi"},"content":"        if (stringArray.length \u003d\u003d 1) {"},{"lineNumber":101,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! A todo task needs a description.\");"},{"lineNumber":102,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":103,"author":{"gitId":"bchenghi"},"content":"            String description \u003d stringArrayToString(stringArray,"},{"lineNumber":104,"author":{"gitId":"bchenghi"},"content":"                    1, stringArray.length);"},{"lineNumber":105,"author":{"gitId":"bchenghi"},"content":"            ToDo todoTask \u003d new ToDo(description);"},{"lineNumber":106,"author":{"gitId":"bchenghi"},"content":"            return todoTask;"},{"lineNumber":107,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":110,"author":{"gitId":"bchenghi"},"content":"    static Deadline createDeadlineTask(String[] stringArray) throws DukeException {"},{"lineNumber":111,"author":{"gitId":"bchenghi"},"content":"        int indexOfBy \u003d -1;"},{"lineNumber":112,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c stringArray.length; i++) {"},{"lineNumber":113,"author":{"gitId":"bchenghi"},"content":"            if (stringArray[i].equals(\"/by\")) {"},{"lineNumber":114,"author":{"gitId":"bchenghi"},"content":"                indexOfBy \u003d i;"},{"lineNumber":115,"author":{"gitId":"bchenghi"},"content":"                break;"},{"lineNumber":116,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"bchenghi"},"content":"        if (indexOfBy \u003d\u003d 1 || stringArray.length \u003d\u003d 1) {"},{"lineNumber":119,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! A deadline task needs a description\");"},{"lineNumber":120,"author":{"gitId":"bchenghi"},"content":"        } else if (indexOfBy \u003d\u003d stringArray.length - 1 || indexOfBy \u003d\u003d -1) {"},{"lineNumber":121,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! A deadline task needs a deadline date and time\");"},{"lineNumber":122,"author":{"gitId":"bchenghi"},"content":"        } else if (stringArray.length \u003c indexOfBy + 3) {"},{"lineNumber":123,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! Date or time is missing from deadline\");"},{"lineNumber":124,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":125,"author":{"gitId":"bchenghi"},"content":"            String dateString \u003d stringArray[indexOfBy + 1];"},{"lineNumber":126,"author":{"gitId":"bchenghi"},"content":"            String timeString \u003d stringArray[indexOfBy + 2];"},{"lineNumber":127,"author":{"gitId":"bchenghi"},"content":"            String description \u003d stringArrayToString(stringArray, 1, indexOfBy);"},{"lineNumber":128,"author":{"gitId":"bchenghi"},"content":"            LocalDate localDate \u003d parseDateStringToLocalDate(dateString);"},{"lineNumber":129,"author":{"gitId":"bchenghi"},"content":"            LocalTime localTime \u003d parseTimeStringToLocalTime(timeString);"},{"lineNumber":130,"author":{"gitId":"bchenghi"},"content":"            Deadline deadline \u003d new Deadline(description, localDate, localTime);"},{"lineNumber":131,"author":{"gitId":"bchenghi"},"content":"            return deadline;"},{"lineNumber":132,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":135,"author":{"gitId":"bchenghi"},"content":"    // Takes input as a string array, then adds a new event to list, then prints the message"},{"lineNumber":136,"author":{"gitId":"bchenghi"},"content":"    static Event createEventTask(String[] stringArray) throws DukeException {"},{"lineNumber":137,"author":{"gitId":"bchenghi"},"content":"        int indexOfAt \u003d -1;"},{"lineNumber":138,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c stringArray.length; i++) {"},{"lineNumber":139,"author":{"gitId":"bchenghi"},"content":"            if (stringArray[i].equals(\"/at\")) {"},{"lineNumber":140,"author":{"gitId":"bchenghi"},"content":"                indexOfAt \u003d i;"},{"lineNumber":141,"author":{"gitId":"bchenghi"},"content":"                break;"},{"lineNumber":142,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"bchenghi"},"content":"        if (indexOfAt \u003d\u003d 1 || stringArray.length \u003d\u003d 1) {"},{"lineNumber":145,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! An event task needs a description\");"},{"lineNumber":146,"author":{"gitId":"bchenghi"},"content":"        } else if (indexOfAt \u003d\u003d stringArray.length - 1 || indexOfAt \u003d\u003d -1) {"},{"lineNumber":147,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! An event task needs a date and time\");"},{"lineNumber":148,"author":{"gitId":"bchenghi"},"content":"        } else if (stringArray.length \u003c indexOfAt + 3) {"},{"lineNumber":149,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! Date or time is missing from event\");"},{"lineNumber":150,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":151,"author":{"gitId":"bchenghi"},"content":"            String dateString \u003d stringArray[indexOfAt + 1];"},{"lineNumber":152,"author":{"gitId":"bchenghi"},"content":"            String timeString \u003d stringArray[indexOfAt + 2];"},{"lineNumber":153,"author":{"gitId":"bchenghi"},"content":"            String description \u003d stringArrayToString(stringArray, 1, indexOfAt);"},{"lineNumber":154,"author":{"gitId":"bchenghi"},"content":"            LocalDate localDate \u003d parseDateStringToLocalDate(dateString);"},{"lineNumber":155,"author":{"gitId":"bchenghi"},"content":"            LocalTime localTime \u003d parseTimeStringToLocalTime(timeString);"},{"lineNumber":156,"author":{"gitId":"bchenghi"},"content":"            Event event \u003d new Event(description, localDate, localTime);"},{"lineNumber":157,"author":{"gitId":"bchenghi"},"content":"            return event;"},{"lineNumber":158,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":161,"author":{"gitId":"bchenghi"},"content":"    static FindCommand createFindCommand(String[] stringArray) throws DukeException {"},{"lineNumber":162,"author":{"gitId":"bchenghi"},"content":"        int lengthOfStringArray \u003d stringArray.length;"},{"lineNumber":163,"author":{"gitId":"bchenghi"},"content":"        String[] keyWords \u003d new String[lengthOfStringArray - 1];"},{"lineNumber":164,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c lengthOfStringArray - 1; i++) {"},{"lineNumber":165,"author":{"gitId":"bchenghi"},"content":"            keyWords[i] \u003d stringArray[i + 1];"},{"lineNumber":166,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"bchenghi"},"content":"        return new FindCommand(keyWords);"},{"lineNumber":168,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"bchenghi"},"content":"    // ---------------------------- Methods for date and time ---------------------------"},{"lineNumber":170,"author":{"gitId":"bchenghi"},"content":"    // Assumes input to be dd/mm/yyyy, returns in yyyy-mm-dd format"},{"lineNumber":171,"author":{"gitId":"bchenghi"},"content":"    static LocalDate parseDateStringToLocalDate(String dateString) throws DukeException {"},{"lineNumber":172,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":173,"author":{"gitId":"bchenghi"},"content":"            String[] stringArray \u003d dateString.split(\"/\");"},{"lineNumber":174,"author":{"gitId":"bchenghi"},"content":"            String day \u003d stringArray[0];"},{"lineNumber":175,"author":{"gitId":"bchenghi"},"content":"            String month \u003d stringArray[1];"},{"lineNumber":176,"author":{"gitId":"bchenghi"},"content":"            String year \u003d stringArray[2];"},{"lineNumber":177,"author":{"gitId":"bchenghi"},"content":"            while (day.length() \u003c 2) {"},{"lineNumber":178,"author":{"gitId":"bchenghi"},"content":"                day \u003d \"0\" + day;"},{"lineNumber":179,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":180,"author":{"gitId":"bchenghi"},"content":"            while (month.length() \u003c 2) {"},{"lineNumber":181,"author":{"gitId":"bchenghi"},"content":"                month \u003d \"0\" + month;"},{"lineNumber":182,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"bchenghi"},"content":"            String editedDateString \u003d day + \"/\" + month + \"/\" + year;"},{"lineNumber":184,"author":{"gitId":"bchenghi"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":185,"author":{"gitId":"bchenghi"},"content":"            LocalDate localDate \u003d LocalDate.parse(editedDateString, formatter);"},{"lineNumber":186,"author":{"gitId":"bchenghi"},"content":"            return localDate;"},{"lineNumber":187,"author":{"gitId":"bchenghi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":188,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Date: \" + dateString + \" is not formatted correctly\\n\""},{"lineNumber":189,"author":{"gitId":"bchenghi"},"content":"                    + \"Please use dd/mm/yyyy format.\");"},{"lineNumber":190,"author":{"gitId":"bchenghi"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":191,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Date: \" + dateString + \" is not formatted correctly\\n\""},{"lineNumber":192,"author":{"gitId":"bchenghi"},"content":"                    + \"Please use dd/mm/yyyy format.\");"},{"lineNumber":193,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":196,"author":{"gitId":"bchenghi"},"content":"    static LocalTime parseTimeStringToLocalTime(String timeString) throws DukeException {"},{"lineNumber":197,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":198,"author":{"gitId":"bchenghi"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"kkmm\");"},{"lineNumber":199,"author":{"gitId":"bchenghi"},"content":"            LocalTime localTime \u003d LocalTime.parse(timeString, formatter);"},{"lineNumber":200,"author":{"gitId":"bchenghi"},"content":"            return localTime;"},{"lineNumber":201,"author":{"gitId":"bchenghi"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":202,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Time: \" + timeString + \" is not formatted correctly.\\n\""},{"lineNumber":203,"author":{"gitId":"bchenghi"},"content":"                    + \"Please use HHMM format.\");"},{"lineNumber":204,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":207,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":208,"author":{"gitId":"bchenghi"},"content":"    // ----------------------------------------------------------------------------------"},{"lineNumber":209,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":210,"author":{"gitId":"bchenghi"},"content":"    static String stringArrayToString(String[] arr, int startIndex, int endIndex) {"},{"lineNumber":211,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":212,"author":{"gitId":"bchenghi"},"content":"            if (endIndex \u003e startIndex) {"},{"lineNumber":213,"author":{"gitId":"bchenghi"},"content":"                StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":214,"author":{"gitId":"bchenghi"},"content":"                for (int i \u003d startIndex; i \u003c endIndex - 1; i++) {"},{"lineNumber":215,"author":{"gitId":"bchenghi"},"content":"                    stringBuilder.append(arr[i] + \" \");"},{"lineNumber":216,"author":{"gitId":"bchenghi"},"content":"                }"},{"lineNumber":217,"author":{"gitId":"bchenghi"},"content":"                stringBuilder.append(arr[endIndex - 1]);"},{"lineNumber":218,"author":{"gitId":"bchenghi"},"content":"                return stringBuilder.toString();"},{"lineNumber":219,"author":{"gitId":"bchenghi"},"content":"            } else {"},{"lineNumber":220,"author":{"gitId":"bchenghi"},"content":"                return null;"},{"lineNumber":221,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":222,"author":{"gitId":"bchenghi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":223,"author":{"gitId":"bchenghi"},"content":"            return null;"},{"lineNumber":224,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":226}},{"path":"src/main/java/duke/storage/State.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public class State {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    private final ArrayList\u003cTask\u003e listOfTasks;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    public State(ArrayList\u003cTask\u003e listOfTasks) {"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"        this.listOfTasks \u003d listOfTasks;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     * Returns the list of tasks from the state"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     * @return A list of tasks from the state"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() {"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"        return listOfTasks;"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":22}},{"path":"src/main/java/duke/storage/StateList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public class StateList {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    private ArrayList\u003cState\u003e listOfStates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    private int pointer;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"     * Creates a new StateList object with starting state"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * @param state The starting state"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    public StateList(State state) {"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"        listOfStates.add(state);"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"        pointer \u003d 0;"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"     * Shifts the pointer to a previous state"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If unable to undo"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    public void undoState() throws DukeException {"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"        if (!canUndo()) {"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! No more tasks to undo.\");"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"        } else if (canUndo()) {"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"            pointer--;"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"What is going on\");"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     * Shifts the pointer to a future state"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If unable to redo"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"    public void redoState() throws DukeException {"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"        if (!canRedo()) {"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Oops! No more tasks to redo!\");"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"        } else if (canRedo()) {"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"            pointer++;"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"What is going on\");"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"    private boolean canRedo() {"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"        return pointer \u003c listOfStates.size() - 1;"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"    private boolean canUndo() {"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"        return pointer \u003e 0 \u0026\u0026 listOfStates.size() \u003e 0;"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"     * Adds a new state at the pointer. All states after the pointer is deleted."},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"     * @param updatedState The new State to add to the list of states"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"    public void newState(State updatedState) {"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"        if (pointer + 1 \u003c listOfStates.size()) {"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"            listOfStates.subList(pointer + 1, listOfStates.size()).clear();"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"        listOfStates.add(updatedState);"},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"        pointer++;"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"     * Returns the current State where the pointer is."},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":"     * @return The current State"},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"    public State getState() {"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":"        return listOfStates.get(pointer);"},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":80}},{"path":"src/main/java/duke/storage/StateManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"public class StateManager {"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    private StateList stateList;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * A new StateManager object with Storage and StateList"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     * @param storagePath The path of data file for Storage"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If Storage could not be loaded"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    public StateManager(String storagePath) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"        storage \u003d new Storage(storagePath);"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        State currentState \u003d new State(storage.loadTasks());"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"        stateList \u003d new StateList(currentState);"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     * Returns a list of tasks from storage"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     * @return A list of tasks from storage"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If Storage could not load the list"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    public ArrayList\u003cTask\u003e getListOfTasks() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        return storage.loadTasks();"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     * Update the state manager with a new state after an action is done"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"     * @param taskList new TaskList to update the state manager with"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If storage does not load after updating"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"    public void updateState(TaskList taskList) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"        storage.updateStorage(taskList);"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"        State currentState \u003d new State(storage.loadTasks());"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"        stateList.newState(currentState);"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"     * Returns a new Tasklist after undoing"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"     * @return An updated TaskList"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If unable to undo or storage cannot be loaded after updating"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"    public TaskList undo() throws DukeException {"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"        stateList.undoState();"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"        State newState \u003d stateList.getState();"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"        TaskList newTaskList \u003d new TaskList(newState.getListOfTasks());"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"        storage.updateStorage(newTaskList);"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"        return new TaskList(storage.loadTasks());"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"     * Returns a TaskList after redoing"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"     * @return An updated TaskList"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If unable to redo or cannot load storage"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"    public TaskList redo() throws DukeException {"},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"        stateList.redoState();"},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"        State newState \u003d stateList.getState();"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"        TaskList newTaskList \u003d new TaskList(newState.getListOfTasks());"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"        storage.updateStorage(newTaskList);"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"        return new TaskList(storage.loadTasks());"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":74}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import java.io.FileInputStream;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"import duke.task.ToDo;"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    private static String savedTaskPath;"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"     * Initializes Storage with the input path as the location for the storage file."},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * @param path The path to store the storage file."},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    public Storage(String path) {"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"        savedTaskPath \u003d path;"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"     * Returns an ArrayList of tasks from the storage file."},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     * @return The ArrayList of tasks from the storage file."},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If the storage file cannot be read, found or created if not created yet."},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"        return getTaskListFromFile();"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"    Task createTaskFromFile(String[] strArray) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"            boolean done \u003d strArray[1].equals(\"1\") ? true : false;"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"            String description \u003d strArray[2];"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"            Task task;"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"            if (strArray[0].equals(\"T\")) {"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"                task \u003d new ToDo(description);"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"            } else if (strArray[0].equals(\"D\")) {"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"                String date \u003d strArray[3];"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"                String time \u003d strArray[4];"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"                LocalDate localDate \u003d LocalDate.parse(date);"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"                LocalTime localTime \u003d LocalTime.parse(time);"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"                task \u003d new Deadline(description, localDate, localTime);"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"            } else if (strArray[0].equals(\"E\")) {"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"                String date \u003d strArray[3];"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"                String time \u003d strArray[4];"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"                LocalDate localDate \u003d LocalDate.parse(date);"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"                LocalTime localTime \u003d LocalTime.parse(time);"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"                task \u003d new Event(description, localDate, localTime);"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"            } else {"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"                throw new DukeException(\"Saved file task type cannot be understood.\");"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"            if (done) {"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"                task.markAsDone();"},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"            return task;"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Saved file text format error\");"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":"    ArrayList\u003cTask\u003e getTaskListFromFile() throws DukeException {"},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":"            if (fileExists(savedTaskPath)) {"},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"                File file \u003d new File(savedTaskPath);"},{"lineNumber":80,"author":{"gitId":"bchenghi"},"content":"                InputStream inputStream \u003d new FileInputStream(file);"},{"lineNumber":81,"author":{"gitId":"bchenghi"},"content":"                return getTaskListFromStream(inputStream);"},{"lineNumber":82,"author":{"gitId":"bchenghi"},"content":"            } else {"},{"lineNumber":83,"author":{"gitId":"bchenghi"},"content":"                createFile();"},{"lineNumber":84,"author":{"gitId":"bchenghi"},"content":"                return new ArrayList\u003cTask\u003e();"},{"lineNumber":85,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"bchenghi"},"content":"        } catch (IOException e) {"},{"lineNumber":87,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":88,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":89,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":90,"author":{"gitId":"bchenghi"},"content":"            // fix input file?"},{"lineNumber":91,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":94,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":95,"author":{"gitId":"bchenghi"},"content":"    ArrayList\u003cTask\u003e getTaskListFromStream(InputStream inputStream) throws DukeException {"},{"lineNumber":96,"author":{"gitId":"bchenghi"},"content":"        try (BufferedReader br \u003d new BufferedReader(new InputStreamReader(inputStream))) {"},{"lineNumber":97,"author":{"gitId":"bchenghi"},"content":"            ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitId":"bchenghi"},"content":"            String line;"},{"lineNumber":99,"author":{"gitId":"bchenghi"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":100,"author":{"gitId":"bchenghi"},"content":"                String[] strArray \u003d line.split(\" \\\\| \");"},{"lineNumber":101,"author":{"gitId":"bchenghi"},"content":"                Task task \u003d createTaskFromFile(strArray);"},{"lineNumber":102,"author":{"gitId":"bchenghi"},"content":"                taskList.add(task);"},{"lineNumber":103,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"bchenghi"},"content":"            return taskList;"},{"lineNumber":105,"author":{"gitId":"bchenghi"},"content":"        } catch (IOException e) {"},{"lineNumber":106,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":107,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":110,"author":{"gitId":"bchenghi"},"content":"    boolean fileExists(String path) throws DukeException {"},{"lineNumber":111,"author":{"gitId":"bchenghi"},"content":"        String[] pathStringArray \u003d path.split(\"/\");"},{"lineNumber":112,"author":{"gitId":"bchenghi"},"content":"        StringBuilder currentPath \u003d new StringBuilder();"},{"lineNumber":113,"author":{"gitId":"bchenghi"},"content":"        boolean directoryNotFound \u003d false;"},{"lineNumber":114,"author":{"gitId":"bchenghi"},"content":"        File fileInDirectory \u003d null;"},{"lineNumber":115,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c pathStringArray.length; i++) {"},{"lineNumber":116,"author":{"gitId":"bchenghi"},"content":"            if (i \u003d\u003d 0) {"},{"lineNumber":117,"author":{"gitId":"bchenghi"},"content":"                currentPath.append(pathStringArray[i]);"},{"lineNumber":118,"author":{"gitId":"bchenghi"},"content":"            } else {"},{"lineNumber":119,"author":{"gitId":"bchenghi"},"content":"                currentPath.append(\"/\" + pathStringArray[i]);"},{"lineNumber":120,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"bchenghi"},"content":"            fileInDirectory \u003d new File(currentPath.toString());"},{"lineNumber":122,"author":{"gitId":"bchenghi"},"content":"            if (!fileInDirectory.exists()) {"},{"lineNumber":123,"author":{"gitId":"bchenghi"},"content":"                directoryNotFound \u003d true;"},{"lineNumber":124,"author":{"gitId":"bchenghi"},"content":"                break;"},{"lineNumber":125,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":128,"author":{"gitId":"bchenghi"},"content":"        if (directoryNotFound) {"},{"lineNumber":129,"author":{"gitId":"bchenghi"},"content":"            return false;"},{"lineNumber":130,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":131,"author":{"gitId":"bchenghi"},"content":"            return true;"},{"lineNumber":132,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":135,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"bchenghi"},"content":"     * Updates the storage with tasks from taskList"},{"lineNumber":137,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"bchenghi"},"content":"     * @param tasks The TaskList to update to storage with"},{"lineNumber":139,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If it could not update the storage file"},{"lineNumber":140,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"bchenghi"},"content":"    public void updateStorage(TaskList tasks) throws DukeException {"},{"lineNumber":142,"author":{"gitId":"bchenghi"},"content":"        assert tasks !\u003d null;"},{"lineNumber":143,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":144,"author":{"gitId":"bchenghi"},"content":"            FileWriter fw \u003d new FileWriter(savedTaskPath);"},{"lineNumber":145,"author":{"gitId":"bchenghi"},"content":"            String textForUpdate \u003d convertTaskListToSaveFormat(tasks);"},{"lineNumber":146,"author":{"gitId":"bchenghi"},"content":"            fw.write(textForUpdate);"},{"lineNumber":147,"author":{"gitId":"bchenghi"},"content":"            fw.close();"},{"lineNumber":148,"author":{"gitId":"bchenghi"},"content":"        } catch (IOException e) {"},{"lineNumber":149,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Could not write to file\");"},{"lineNumber":150,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":153,"author":{"gitId":"bchenghi"},"content":"    void createFile() throws DukeException {"},{"lineNumber":154,"author":{"gitId":"bchenghi"},"content":"        File newFile \u003d new File(savedTaskPath);"},{"lineNumber":155,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":156,"author":{"gitId":"bchenghi"},"content":"            String[] pathStringArray \u003d savedTaskPath.split(\"/\");"},{"lineNumber":157,"author":{"gitId":"bchenghi"},"content":"            StringBuilder currentPath \u003d new StringBuilder();"},{"lineNumber":158,"author":{"gitId":"bchenghi"},"content":"            newFile.getParentFile().mkdirs();"},{"lineNumber":159,"author":{"gitId":"bchenghi"},"content":"            if (newFile.createNewFile()) {"},{"lineNumber":160,"author":{"gitId":"bchenghi"},"content":"                // successfully created new file"},{"lineNumber":161,"author":{"gitId":"bchenghi"},"content":"            } else {"},{"lineNumber":162,"author":{"gitId":"bchenghi"},"content":"                throw new DukeException(\"Could not create a save file at \" + newFile.getAbsolutePath());"},{"lineNumber":163,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"bchenghi"},"content":"        } catch (IOException e) {"},{"lineNumber":165,"author":{"gitId":"bchenghi"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":166,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Could not create a save file at \" + newFile.getAbsolutePath());"},{"lineNumber":167,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":170,"author":{"gitId":"bchenghi"},"content":"    String convertTaskListToSaveFormat(TaskList taskList) throws DukeException {"},{"lineNumber":171,"author":{"gitId":"bchenghi"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":172,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c taskList.numberOfTasks(); i++) {"},{"lineNumber":173,"author":{"gitId":"bchenghi"},"content":"            Task task \u003d taskList.getTask(i);"},{"lineNumber":174,"author":{"gitId":"bchenghi"},"content":"            String saveTaskString \u003d convertTaskToSaveFormat(task);"},{"lineNumber":175,"author":{"gitId":"bchenghi"},"content":"            stringBuilder.append(saveTaskString + \"\\n\");"},{"lineNumber":176,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":178,"author":{"gitId":"bchenghi"},"content":"        return stringBuilder.toString();"},{"lineNumber":179,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":181,"author":{"gitId":"bchenghi"},"content":"    String convertTaskToSaveFormat(Task task) throws DukeException {"},{"lineNumber":182,"author":{"gitId":"bchenghi"},"content":"        String taskType;"},{"lineNumber":183,"author":{"gitId":"bchenghi"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":184,"author":{"gitId":"bchenghi"},"content":"        int taskDone \u003d task.isDone() ? 1 : 0;"},{"lineNumber":185,"author":{"gitId":"bchenghi"},"content":"        String resultString;"},{"lineNumber":186,"author":{"gitId":"bchenghi"},"content":"        if (task instanceof ToDo) {"},{"lineNumber":187,"author":{"gitId":"bchenghi"},"content":"            taskType \u003d \"T\";"},{"lineNumber":188,"author":{"gitId":"bchenghi"},"content":"            resultString \u003d taskType + \" | \" + taskDone + \" | \" + description;"},{"lineNumber":189,"author":{"gitId":"bchenghi"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":190,"author":{"gitId":"bchenghi"},"content":"            Deadline deadline \u003d (Deadline) task;"},{"lineNumber":191,"author":{"gitId":"bchenghi"},"content":"            taskType \u003d \"D\";"},{"lineNumber":192,"author":{"gitId":"bchenghi"},"content":"            String date \u003d deadline.getLocalDate().toString();"},{"lineNumber":193,"author":{"gitId":"bchenghi"},"content":"            String time \u003d deadline.getLocalTime().toString();"},{"lineNumber":194,"author":{"gitId":"bchenghi"},"content":"            resultString \u003d taskType + \" | \" + taskDone + \" | \" + description + \" | \" + date + \" | \" + time;"},{"lineNumber":195,"author":{"gitId":"bchenghi"},"content":"        } else if (task instanceof Event) {"},{"lineNumber":196,"author":{"gitId":"bchenghi"},"content":"            Event event \u003d (Event) task;"},{"lineNumber":197,"author":{"gitId":"bchenghi"},"content":"            taskType \u003d \"E\";"},{"lineNumber":198,"author":{"gitId":"bchenghi"},"content":"            String date \u003d event.getLocalDate().toString();"},{"lineNumber":199,"author":{"gitId":"bchenghi"},"content":"            String time \u003d event.getLocalTime().toString();"},{"lineNumber":200,"author":{"gitId":"bchenghi"},"content":"            resultString \u003d taskType + \" | \" + taskDone + \" | \" + description + \" | \" + date + \" | \" + time;"},{"lineNumber":201,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":202,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"Unable to save task, unknown task type\");"},{"lineNumber":203,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":205,"author":{"gitId":"bchenghi"},"content":"        return resultString;"},{"lineNumber":206,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":208,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":208}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    protected LocalDate date;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    protected LocalTime time;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    protected String by;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     * Initializes the Deadline with a description, LocalDate and LocalTime as its deadline."},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     * @param description The description of the deadline."},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     * @param date The date of the deadline."},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     * @param time The time of the deadline."},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    public Deadline(String description, LocalDate date, LocalTime time) {"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        this.date \u003d date;"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"        this.time \u003d time;"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"        this.by \u003d convertDateAndTimeToString();"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * Returns deadline date and time as a String."},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     * @return The deadline date and time as a String."},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    public String getBy() {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        return by;"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"    // Date time format is dd/MM/yyyy tttt"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"    String convertDateAndTimeToString() {"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        String str \u003d date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" \" + time;"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"        return str;"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"     * Returns the LocalDate of the deadline."},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"     * @return The LocalDate of the deadline."},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"    public LocalDate getLocalDate() {"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"        return date;"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"     * Returns the LocalTime of the deadline."},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"     * @return The LocalTime of the deadline."},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"    public LocalTime getLocalTime() {"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"        return time;"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":65}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    protected LocalDate date;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    protected LocalTime time;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    protected String at;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     * Initializes an event task with its description, LocalDate and LocalTime for"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     * the date and time of event."},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"     * @param description The description of the event."},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"     * @param date The date of the event."},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     * @param time The time of the event."},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    public Event(String description, LocalDate date, LocalTime time) {"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"        this.time \u003d time;"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"        this.at \u003d convertDateAndTimeToString();"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     * Returns the date and time of the event."},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"     * @return The date and time of the event."},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"    public String getAt() {"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"        return at;"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"    String convertDateAndTimeToString() {"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"        String str \u003d date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" \" + time;"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"        return str;"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"     * Returns the date of the event."},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"     * @return The date of the event."},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"    public LocalDate getLocalDate() {"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"        return date;"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"     * Returns the time of the event."},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"     * @return The time of the event."},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"    public LocalTime getLocalTime() {"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"        return time;"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":66}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"     * Initializes the Task with a description."},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"     * @param description The description of the task."},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"     * Returns a tick if done, cross if not."},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"     * @return A tick or cross String."},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    public String getStatusIcon() {"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * Returns the description of the task."},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"     * @return The description of the task."},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    public String getDescription() {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        return description;"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     * Marks the task as done."},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"    public void markAsDone() {"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        isDone \u003d true;"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"     * Returns whether the task is done."},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"     * @return A boolean whether the task is done."},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"    public boolean isDone() {"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"        return isDone;"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":56}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    /** The list of tasks */"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"     * Initializes an empty list for tasks."},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    /** Initializes the given list of tasks for the TaskList */"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasksForInit) {"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        tasks \u003d tasksForInit;"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"     * Adds a task to the list."},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"     * @param task The task to be added to the list."},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    public void addTask(Task task) {"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"        tasks.add(task);"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"     * Deletes the task at the index."},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     * @param index The index of the task to delete."},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"    public void deleteTask(int index) {"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        tasks.remove(index);"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"     * Sets the task at index as done."},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"     * @param index The index of the task in the list."},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"    public void setTaskDone(int index) {"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"        Task task \u003d tasks.get(index);"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"        task.markAsDone();"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"     * Returns the task at the input index."},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"     * @param index The index of the task in the list."},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"     * @return The Task corresponding to the index."},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"     * @throws DukeException If index is out of bounds."},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"    public Task getTask(int index) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"        if (index \u003e\u003d tasks.size() || index \u003c 0) {"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"            throw new DukeException(\"There are no tasks at index \" + (index + 1));"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"            return tasks.get(index);"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"     * Returns the number of tasks in the list."},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"     * @return The number of tasks in the list."},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"    public int numberOfTasks() {"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"        return tasks.size();"},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":"     * Returns a list of tasks that follows the condition of the predicate parameter"},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"bchenghi"},"content":"     * @param tester The predicate for the returned list\u0027s tasks to follow"},{"lineNumber":81,"author":{"gitId":"bchenghi"},"content":"     * @return A list of tasks that returns true with the predicate"},{"lineNumber":82,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":83,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"bchenghi"},"content":"    public ArrayList\u003cTask\u003e findTasks(Predicate\u003cTask\u003e tester) {"},{"lineNumber":85,"author":{"gitId":"bchenghi"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitId":"bchenghi"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":87,"author":{"gitId":"bchenghi"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":88,"author":{"gitId":"bchenghi"},"content":"            if (tester.test(task)) {"},{"lineNumber":89,"author":{"gitId":"bchenghi"},"content":"                foundTasks.add(task);"},{"lineNumber":90,"author":{"gitId":"bchenghi"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"bchenghi"},"content":"        return foundTasks;"},{"lineNumber":93,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":95,"author":{"gitId":"bchenghi"},"content":"    public void updateTaskList(TaskList newTaskList) {"},{"lineNumber":96,"author":{"gitId":"bchenghi"},"content":"        tasks \u003d newTaskList.tasks;"},{"lineNumber":97,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":98}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"     * Initializes a ToDo task with a description."},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"     * @param description The description for the task."},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    public ToDo(String description) {"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":17}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":" * An example of a custom control using FXML."},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":" * containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":" */"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    private Label dialog;"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"    private ImageView displayPicture;"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"        displayPicture.setImage(img);"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"     * Returns a DialogBox object with the input text and image"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"     * @param text The text for the DialogBox"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"     * @param img The user image for the DialogBox"},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"     * @return A DialogBox object with the text and user image"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"        DialogBox db \u003d new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"        db.displayPicture.setClip(new Circle(48, 48, 48));"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"        return db;"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"     * Returns a DialogBox for Duke and is on the left side of the chatbox."},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"     * @param text The text from Duke"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"     * @param img Duke\u0027s display picture"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"     * @return A DialogBox used by Duke"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":"        db.displayPicture.setClip(new Circle(48, 48, 48));"},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":"        db.flip();"},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"        return db;"},{"lineNumber":78,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":79}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"import duke.command.CommandResult;"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"     * Instructions to be done when initializing the MainWindow"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"     * Sets the duke object for the MainWindow controller"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"     * @param d The Duke object"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"        duke \u003d d;"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"     * Duke sends his regards in the chat."},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"    public void printOpeningMessage() {"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"                DialogBox.getDukeDialog(duke.getWelcomeMessage(), dukeImage)"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"    private void handleUserInput() {"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":"        CommandResult response \u003d duke.getResponse(input);"},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"        if (response.isExit()) {"},{"lineNumber":64,"author":{"gitId":"bchenghi"},"content":"            handleExit();"},{"lineNumber":65,"author":{"gitId":"bchenghi"},"content":"            return;"},{"lineNumber":66,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"bchenghi"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":68,"author":{"gitId":"bchenghi"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":69,"author":{"gitId":"bchenghi"},"content":"                DialogBox.getDukeDialog(response.getFeedbackToUser(), dukeImage)"},{"lineNumber":70,"author":{"gitId":"bchenghi"},"content":"        );"},{"lineNumber":71,"author":{"gitId":"bchenghi"},"content":"        userInput.clear();"},{"lineNumber":72,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":74,"author":{"gitId":"bchenghi"},"content":"    private void handleExit() {"},{"lineNumber":75,"author":{"gitId":"bchenghi"},"content":"        Platform.exit();"},{"lineNumber":76,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":77}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"    private static String INDENTATION \u003d \"    \";"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"    private static String LINE \u003d \"-------------------------------------------------------------\";"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    private static String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"        + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"        + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"        + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"    public String getWelcomeMessage() {"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"        return LOGO + \"Hello! I\u0027m Duke.\\nHow can I help you today?\";"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"     * Prints the input string on the console between two lines."},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    public void printMessage(String message) {"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"        showLine();"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"        String[] splitByNewLine \u003d message.split(\"\\\\r?\\\\n\");"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"        for (String str : splitByNewLine) {"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"            indent();"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"            System.out.println(str);"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"        showLine();"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"     * Prints the input String with exclamation marks at the front and end of"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"     * the String to signify an error message."},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"     * @param errorMessage The String of the error message to be printed."},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    public void showError(String errorMessage) {"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"        showLine();"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"        String[] splitByNewLine \u003d errorMessage.split(\"\\\\r?\\\\n\");"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"        for (String str : splitByNewLine) {"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"            indent();"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"            System.out.println(\"!!! \" + str + \" !!!\");"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"        showLine();"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"     * Prints a line in the CLI."},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"    public void showLine() {"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"        indent();"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"        System.out.println(LINE);"},{"lineNumber":56,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":58,"author":{"gitId":"bchenghi"},"content":"    void indent() {"},{"lineNumber":59,"author":{"gitId":"bchenghi"},"content":"        System.out.print(INDENTATION);"},{"lineNumber":60,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":62,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":63,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":63}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" styleClass\u003d\"label-text\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"bchenghi":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../CSS/stylesheet.css\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"            \u003ccontent\u003e"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"dialog-container\" /\u003e"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"            \u003c/content\u003e"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"bchenghi":19}},{"path":"src/test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"T | 0 | description"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"D | 0 | description | 2012-02-12 | 16:00"}],"authorContributionMap":{"bchenghi":2}},{"path":"src/test/data/invalidDuke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"some invalid text"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"more invalid text"}],"authorContributionMap":{"bchenghi":2}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":12}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"import duke.task.Deadline;"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"import duke.task.Event;"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"import duke.task.ToDo;"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"public class AddCommandTest {"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    public void addTodo() {"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"            Task todo \u003d new ToDo(\"description\");"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"            Command command \u003d new AddCommand(todo);"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"            command.execute(new TaskList(), new StateManager(\"data/duke.txt\"));"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"            fail(\"Should not have failed at adding todo task\");"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"    public void addEvent() {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"            Task event \u003d new Event(\"description\","},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"                    LocalDate.parse(\"2012-12-02\"), LocalTime.parse(\"16:00:00\"));"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"            Command command \u003d new AddCommand(event);"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"            command.execute(new TaskList(), new StateManager(\"data/duke.txt\"));"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"            fail(\"Should not have failed at adding event task\");"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"    public void addDeadline() {"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"            Task deadline \u003d new Deadline(\"description\","},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"                    LocalDate.parse(\"2012-12-02\"), LocalTime.parse(\"16:00:00\"));"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"            Command command \u003d new AddCommand(deadline);"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"            command.execute(new TaskList(), new StateManager(\"data/duke.txt\"));"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"            fail(\"Should not have failed at adding deadline task\");"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":55}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import duke.task.ToDo;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"public class DeleteCommandTest {"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    public void successfulDelete() {"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"            StateManager stateManager \u003d new StateManager(\"data/duke.txt\");"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"            Task todo \u003d new ToDo(\"description\");"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"            Command command \u003d new AddCommand(todo);"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"            command.execute(taskList, stateManager);"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"            Command deleteCommand \u003d new DeleteCommand(0);"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"            deleteCommand.execute(taskList, stateManager);"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"            fail(e.getMessage());"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    public void wrongIndex() {"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"            StateManager stateManager \u003d new StateManager(\"data/duke.txt\");"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"            Command deleteCommand \u003d new DeleteCommand(-1);"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"            deleteCommand.execute(taskList, stateManager);"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"            fail(\"Index is out of bounds and should have thrown an exception\");"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":"            return;"},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":42}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import duke.storage.StateManager;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import duke.task.ToDo;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"public class FindCommandTest {"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"    public void successfulFind() {"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"            StateManager stateManager \u003d new StateManager(\"data/duke.txt\");"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"            Task todo \u003d new ToDo(\"description\");"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"            Command command \u003d new AddCommand(todo);"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"            command.execute(taskList, stateManager);"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"            Command findCommand \u003d new FindCommand(\"description\");"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"            findCommand.execute(taskList, stateManager);"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"            fail(e.getMessage());"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":28}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"    public void incorrectParse() {"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"            Command command \u003d Parser.parse(\"some funny unknown command\");"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"            fail(\"Incorrect message in parser should have thrown exception\");"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"            return;"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"    public void correctParse() {"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"            Command command \u003d Parser.parse(\"event description /at 22/2/2012 1630\");"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"            fail(e.getMessage());"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":30}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"import duke.task.Deadline;"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"import duke.task.TaskList;"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"import duke.task.ToDo;"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"public class StorageTest {"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"    public void invalidStorageFile() {"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"            Storage storage \u003d new Storage(\"src/test/data/invalidDuke.txt\");"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"            storage.loadTasks();"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"            fail(\"Should have thrown an exception due to invalid storage text file\");"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"            return;"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"    public void validStorageFile() {"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"            Storage storage \u003d new Storage(\"src/test/data/duke.txt\");"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"            storage.loadTasks();"},{"lineNumber":34,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"bchenghi"},"content":"            fail(\"Should not have thrown an exception due to valid storage text file\");"},{"lineNumber":36,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"bchenghi"},"content":""},{"lineNumber":39,"author":{"gitId":"bchenghi"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"bchenghi"},"content":"    public void readAndWriteToFile() {"},{"lineNumber":41,"author":{"gitId":"bchenghi"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"bchenghi"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"bchenghi"},"content":"            tasks.add(new ToDo(\"description\"));"},{"lineNumber":44,"author":{"gitId":"bchenghi"},"content":"            tasks.add(new Deadline(\"description\","},{"lineNumber":45,"author":{"gitId":"bchenghi"},"content":"                        LocalDate.parse(\"2012-02-12\"), LocalTime.parse(\"16:00:00\")));"},{"lineNumber":46,"author":{"gitId":"bchenghi"},"content":"            TaskList taskList \u003d new TaskList(tasks);"},{"lineNumber":47,"author":{"gitId":"bchenghi"},"content":"            Storage storage \u003d new Storage(\"data/duke.txt\");"},{"lineNumber":48,"author":{"gitId":"bchenghi"},"content":"            storage.updateStorage(taskList);"},{"lineNumber":49,"author":{"gitId":"bchenghi"},"content":"            ArrayList\u003cTask\u003e returnedTaskList \u003d storage.loadTasks();"},{"lineNumber":50,"author":{"gitId":"bchenghi"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"bchenghi"},"content":"            fail(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"bchenghi"},"content":"            //fail(\"Should not throw exception when updating or reading from file\");"},{"lineNumber":53,"author":{"gitId":"bchenghi"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"bchenghi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"bchenghi"},"content":"}"}],"authorContributionMap":{"bchenghi":55}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"todo description"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"deadline description /by 2/1/2012 2100"},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"event description /at 22/1/2101 1400"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"event"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"event /at"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"event test description"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"event test description /at"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"event test description /at 22/1/2012"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"event test description /at 222/2/20100"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"event test description /at 22/1/2100 160"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"event test description /at 22/1/2100 1600"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"deadline"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"deadline test description"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"deadline test description /by"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"deadline test description /by 22/1/2012"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"deadline test description /by 222/2/20100"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"deadline test description /by 22/1/2100 160"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"deadline test description /by 22/1/2100 1600"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"list"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"list 1"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"done 1"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"done 2"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"done 5"},{"lineNumber":25,"author":{"gitId":"bchenghi"},"content":"date 22/1/2100"},{"lineNumber":26,"author":{"gitId":"bchenghi"},"content":"dateAndTime 22/1/2100 1600"},{"lineNumber":27,"author":{"gitId":"bchenghi"},"content":"find description"},{"lineNumber":28,"author":{"gitId":"bchenghi"},"content":"delete 1"},{"lineNumber":29,"author":{"gitId":"bchenghi"},"content":"delete 3"},{"lineNumber":30,"author":{"gitId":"bchenghi"},"content":"delete 1"},{"lineNumber":31,"author":{"gitId":"bchenghi"},"content":"delete 1"},{"lineNumber":32,"author":{"gitId":"bchenghi"},"content":"delete 1"},{"lineNumber":33,"author":{"gitId":"bchenghi"},"content":"bye"}],"authorContributionMap":{"bchenghi":33}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"java -classpath ..\\bin duke.Launcher \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"bchenghi":3}},{"path":"text-ui-test/sources.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":2,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\Launcher.java"},{"lineNumber":3,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\Main.java"},{"lineNumber":4,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\AddCommand.java"},{"lineNumber":5,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\Command.java"},{"lineNumber":6,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\CommandResult.java"},{"lineNumber":7,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\DateAndTimeListCommand.java"},{"lineNumber":8,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\DateListCommand.java"},{"lineNumber":9,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\DeleteCommand.java"},{"lineNumber":10,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\DoneCommand.java"},{"lineNumber":11,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\ExitCommand.java"},{"lineNumber":12,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\FindCommand.java"},{"lineNumber":13,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\command\\ListCommand.java"},{"lineNumber":14,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\exception\\DukeException.java"},{"lineNumber":15,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\parser\\Parser.java"},{"lineNumber":16,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\storage\\Storage.java"},{"lineNumber":17,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\task\\Deadline.java"},{"lineNumber":18,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\task\\Event.java"},{"lineNumber":19,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\task\\Task.java"},{"lineNumber":20,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\task\\TaskList.java"},{"lineNumber":21,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\task\\ToDo.java"},{"lineNumber":22,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\ui\\DialogBox.java"},{"lineNumber":23,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\ui\\MainWindow.java"},{"lineNumber":24,"author":{"gitId":"bchenghi"},"content":"C:\\Users\\Pactech\\Desktop\\ip\\src\\main\\java\\duke\\ui\\Ui.java"}],"authorContributionMap":{"bchenghi":24}}]
