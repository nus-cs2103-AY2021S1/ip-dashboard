[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "# Duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/Duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Deadline(String task, String deadline) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"[D]\" + super.toString() + \" (\" + deadline + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import Util.Constants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static void respond(Scanner scanner) throws IllegalStateException{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        DukeCommandMatcher dukeCommandMatcher \u003d new DukeCommandMatcher();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                String command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    System.out.println(Constants.DIVIDER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    String response \u003d dukeCommandMatcher.matchCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    if (Objects.equals(response, \"EXIT\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    System.out.println(Constants.DIVIDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }catch(Exception err){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    System.out.println(err);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    System.out.println(Constants.DIVIDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static void launchDuke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        System.out.println(Constants.DIVIDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        System.out.println(Constants.GREETING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        System.out.println(Constants.DIVIDER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Scanner dukeScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        respond(dukeScanner);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        launchDuke();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chuyiting": 41,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Duke/DukeCommandMatcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import Exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import Util.Constants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import Util.UtilFunction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class DukeCommandMatcher {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private static final List\u003cString\u003e commandList \u003d new ArrayList\u003c\u003e(Arrays.asList(Constants.LISTPATTERN,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                                                  Constants.EXITPATTERN, Constants.DONEPATTERN,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                                                  Constants.TODOPATTERN, Constants.DEADLINEPATTERN,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                                                                  Constants.EVENTPATTERN, Constants.DELETEPATTERN));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String matchCommand(String command) throws CommandNotFoundException, NullCommandException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            LackOfTimeException, NullCommandContentException, TaskOutOfBoundException, TaskNotSpecifyException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(Objects.equals(command, \"\")){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new NullCommandException(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //get the first command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitCommand \u003d command.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        //check if the command is in the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for(String commandPattern: commandList){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            //the command is in the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            if(UtilFunction.matchPattern(commandPattern, splitCommand[0])){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               switch(commandPattern){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               case Constants.EXITPATTERN:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   return handleExit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               case Constants.LISTPATTERN:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   return handleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               case Constants.DONEPATTERN:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   return handleDone(splitCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               case Constants.TODOPATTERN:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   return handleTodo(splitCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               case Constants.DEADLINEPATTERN:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   return handleDeadline(splitCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               case Constants.EVENTPATTERN:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   return handleEvent(splitCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               case Constants.DELETEPATTERN:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   return handleDelete(splitCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                   break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "               }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        throw new CommandNotFoundException(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleExit(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        System.out.println(\"Farewell/再見/さようなら～～\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"EXIT\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleAdd(Task task){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int numOfTask \u003d taskList.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \"   \" + task +  \u0027\\n\u0027 +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                \"Now you have \" + numOfTask + (numOfTask \u003e 1 ? \" tasks \" : \" task \") + \"in the list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"Duke.Task added\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleList(){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(taskList.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            System.out.println(\"😝You don\u0027t have any task in the schedule yet~~\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                    \"use todo/deadline/event command to create your tasks~\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        for(int i \u003d1; i\u003c taskList.size()+1; i++){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            System.out.println(i + \". \" + taskList.get(i-1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"List implemented\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleDone(String[] targetTask) throws TaskOutOfBoundException, TaskNotSpecifyException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(targetTask.length \u003c 2){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskNotSpecifyException(\"task to be done not specified\", \"DONE\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int targetTaskPos \u003d Integer.parseInt(targetTask[1]) - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(targetTaskPos \u003e\u003d this.taskList.size() ){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskOutOfBoundException(\"Target number of task out of bound\", targetTaskPos + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Task task \u003d this.taskList.get(targetTaskPos);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        task.setStatus(true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        System.out.println(\"Très bien!I have helped you marked task \" + targetTask + \" as done\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            + task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"Duke.Task \" + targetTask + \" has been done\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleTodo(String[] todoStr) throws NullCommandContentException{"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(todoStr.length \u003c 2){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new NullCommandContentException(\"Description cannot be null\", \"Todo\" );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String todoContent \u003d todoStr[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        ToDo todo \u003d new ToDo(todoContent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return handleAdd(todo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleDeadline(String[] deadlineStr) throws NullCommandContentException, LackOfTimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(deadlineStr.length \u003c 2){"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new NullCommandContentException(\"Description cannot be null\", \"Duke.Deadline\" );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String deadlineContent \u003d deadlineStr[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitDeadLineStr \u003d deadlineContent.split(\"/\", 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(splitDeadLineStr.length \u003c 2){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new LackOfTimeException(\"The time cannot be empty\", \"Duke.Deadline\" );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Deadline deadline \u003d new Deadline(splitDeadLineStr[0], splitDeadLineStr[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return handleAdd(deadline);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleEvent(String[] eventStr) throws NullCommandContentException, LackOfTimeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(eventStr.length \u003c 2){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new NullCommandContentException(\"Description cannot be null\", \"Duke.Event\" );"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String eventContent \u003d eventStr[1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        String[] splitEventStr \u003d eventContent.split(\"/\", 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(splitEventStr.length \u003c 2){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new LackOfTimeException(\"The time cannot be empty\", \"Duke.Event\" );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Event event \u003d new Event(splitEventStr[0], splitEventStr[1]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return handleAdd(event);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String handleDelete(String[] deleteStr) throws TaskNotSpecifyException, TaskOutOfBoundException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(deleteStr.length \u003c 2){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskNotSpecifyException(\"task to deletion not specified\", \"DELETE\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        int taskToDelete \u003d Integer.parseInt(deleteStr[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(taskToDelete \u003e taskList.size()  ){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            throw new TaskOutOfBoundException(\"task number out of bound\", taskToDelete);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + \"   \" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "                taskList.get(taskToDelete-1) + \"\\n\" + \"Now you have \" + (taskList.size() -1 ) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        taskList.remove(taskToDelete-1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"Duke.Task \" + (taskToDelete -1) + \" has been removed successfully\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 146
    }
  },
  {
    "path": "src/main/java/Duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    Event(String task, String duration){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"[E]\" + super.toString() + \" (\" + duration + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/Duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private Boolean status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Task(String task){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setTask(String task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public Boolean getStatus() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public void setStatus(Boolean status) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override public String toString(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"[\" + statusToIcon() + \"] \" + this.task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String statusToIcon(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(this.status){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return \"✅\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return \"❎\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 38
    }
  },
  {
    "path": "src/main/java/Duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class ToDo extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public ToDo(String task) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 12
    }
  },
  {
    "path": "src/main/java/Exceptions/CommandNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class CommandNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public CommandNotFoundException(String err){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"🙈 OOPS!!! Sorry I don\u0027t understand what that means\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 12
    }
  },
  {
    "path": "src/main/java/Exceptions/LackOfTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class LackOfTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String typeOfCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public LackOfTimeException(String err, String typeOfCommand){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.typeOfCommand \u003d typeOfCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"⚠️OOPS!!! The time/date of \" + this.typeOfCommand + \" cannot be empty\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/Exceptions/NullCommandContentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class NullCommandContentException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String typeOfCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public NullCommandContentException(String err, String typeOfCommand){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.typeOfCommand \u003d typeOfCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"💔OH NO~~ The description of \" + this.typeOfCommand + \" cannot be empty\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/Exceptions/NullCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class NullCommandException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public NullCommandException(String err){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"🙈OOPS!!! The command cannot be empty\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 13
    }
  },
  {
    "path": "src/main/java/Exceptions/TaskNotSpecifyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskNotSpecifyException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private String typeOfCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskNotSpecifyException(String err, String typeOfCommand){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.typeOfCommand \u003d typeOfCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        if(Objects.equals(typeOfCommand, \"DELETE\")){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return \"🙃Your majesty! Please specify which task you want me to delete. Thanks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        } else if(Objects.equals(typeOfCommand, \"DONE\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            return \"🙃Your majesty! Please specify which task you want me to mark as done. Thanks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"TaskNotSpecifyException being thrown\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 21
    }
  },
  {
    "path": "src/main/java/Exceptions/TaskOutOfBoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class TaskOutOfBoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public TaskOutOfBoundException(String err, int taskNum){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        super(err);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return \"😝OOPS!!! You do not have \" + taskNum + (taskNum \u003e 1 ? \" task \" : \" tasks \") + \"in the schedule.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 14
    }
  },
  {
    "path": "src/main/java/Util/Constants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String GREETING \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \"Hello/您好/こんにちは I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "            \"What can I do for you?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DIVIDER \u003d \"____________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String EXITPATTERN \u003d (\"^(b|B)(y|Y)(e|E)$\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String LISTPATTERN \u003d (\"^(l|L)(i|I)?(s|S)(t|T)?$\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DONEPATTERN \u003d (\"^(d|D)(o|O)(n|N)(e|E)$\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String TODOPATTERN \u003d (\"^(t|T)(o|O)(d|D)(o|O)$\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DEADLINEPATTERN \u003d (\"^(d|D)(e|E)(a|A)(d|D)(l|L)(i|I)(n|N)(e|E)$\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String EVENTPATTERN \u003d (\"^(e|E)(v|V)(e|E)(n|N)(t|T)$\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static final String DELETEPATTERN \u003d (\"^(d|D)(e|E)(l|L)(e|E)(t|T)(e|E)$\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 25
    }
  },
  {
    "path": "src/main/java/Util/UtilFunction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "package Util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "public class UtilFunction {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * util function used to match pattern of the string"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param patternStr the pattern you want to check"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @param string the string to check"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     * @return true if the string matches the string pattern"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    public static Boolean matchPattern(String patternStr, String string){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(patternStr);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(string);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "        return matcher.find();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "todo study CS2103T"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "TODO study CS2101"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "ls"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Util/*.java ../src/main/java/Exceptions/*.java ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyiting"
        },
        "content": "java -classpath ../bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "chuyiting": 2,
      "-": 36
    }
  }
]
