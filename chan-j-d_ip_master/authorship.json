[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Duke is a Personal Assistant Chatbot that helps a user keep track of various things."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** list of tasks to keep track of */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** storage object handling saving and editing of the save file in the hard drive */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** ui object in charge of direct interaction with the user */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Standard constructor initialising the Duke bot."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * It will attempt to search for a pre-saved save file of a previous task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If found, it loads up that task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Otherwise it creates its own which will be saved and able to be opened by future Duke bots."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage \u003d Storage.init();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        taskList \u003d storage.readStoredData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Runs the duke bot."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * It continuously queries the ui for the next user response and responds appropriately."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.startup();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Command command \u003d CommandParser.parse(ui.getCommand());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ui.outputMessage(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 57,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Represents a general Exception class of Exceptions that occur while DukeException is running."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a DukeException object with a customised error description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param description description of the type of error encountered"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(\"☹ OOPS!!! \" + description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 16
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Standard user-interface class that handles interactions between the user and the engine."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    //Constants used when formatting the bot\u0027s message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String LINE_BREAK \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String PRESPACING \u003d \"     \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Standard opening message sent */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String OPENING_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    //Scanner object used to obtain response from the System"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Standard constructor that initialises a UI object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Queries the user for the next command in the form of a string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string provided by the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Notifies the user with the given message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param message message to be sent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void outputMessage(String message) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        System.out.println(processString(message));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Message sent to user when the bot starts up."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void startup() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        outputMessage(getOpeningText());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * String formatter that customises messages to be sent to the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param string message to be sent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted message that will be sent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static String processString(String string) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return LINE_BREAK  + PRESPACING"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + string.replaceAll(\"\\n\", \u0027\\n\u0027 + PRESPACING)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + \u0027\\n\u0027 + LINE_BREAK;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Method used to obtain the opening text when the bot starts up */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String getOpeningText() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return OPENING_MESSAGE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 69
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.TaskParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that adds a new Task to the given TaskList and broadcasts the appropriate update."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Task to be added when execute is performed */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor which is not able to handle String inputs directly. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private AddCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Static factory method for creating the appropriate AddCommand from a String input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskCommand String input of the form \"add {task description}\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that adds the task to the task list when executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static AddCommand parse(String taskCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new AddCommand(TaskParser.parse(taskCommand));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds the stored task to the taskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(createAddMessage(task, taskList));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Standard String creator for the update."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param task task added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList task list that the task was added to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String createAddMessage(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return ADDED_MESSAGE + \u0027\\n\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + \"   \" + task + \u0027\\n\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + taskList.createTaskNumberCountMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 61
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Executable command that handles manipulation of Tasks between TaskList, Ui and Storage."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Sub-classes have to implement the execute command that dictates what movement is performed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Commands can also be adjusted to terminate the overall Duke program by adjusting the isExit() method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a boolean to tell the program if it should exit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return true if the program should exit after executing, false otherwise"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Executes some manipulation of Task between taskList, ui and storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 31
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class handles the parsing of Strings into the appropriate type of command objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** exit-type string indicator */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_CLOSING \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** list-type string indicator */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** done-type string indicator */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** delete-type string indicator */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the appropriate command type based on the string input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method uses the first word to determine that type of command to create."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param userInput string containing the command to be created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object corresponding to the details provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Command parse(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String firstWord \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (userInput.equals(INDICATOR_CLOSING)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return ExitCommand.create();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (userInput.equals(INDICATOR_LIST)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return ListCommand.create();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (firstWord.equals(INDICATOR_DONE)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DoneCommand.parse(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (firstWord.equals(INDICATOR_DELETE)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DeleteCommand.parse(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (firstWord.equals(INDICATOR_FIND)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return FindCommand.parse(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return AddCommand.parse(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that deletes a Task (by index) from the TaskList and broadcasts the appropriate update."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String DELETE_MESSAGE \u003d \"Noted. I\u0027ve removed this task: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Index of item to be deleted from the task list. Index starts at 1 */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private int itemIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor which is not able to handle String inputs directly. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private DeleteCommand(int itemIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.itemIndex \u003d itemIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Static factory method for creating the appropriate DeleteCommand from a String input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param command String input of the form \"delete {index}\" (index starts at 1)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that deletes the designated task when executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static DeleteCommand parse(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d command.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a task to delete!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            taskNumber \u003d Integer.parseInt(details[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Invalid number input!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes the task corresponding to the index from the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (itemIndex \u003e taskList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Not a valid command!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Task removedTask \u003d taskList.remove(itemIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(createDeleteMessage(removedTask, taskList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Standard String creator for the update."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskRemoved task that was removed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList task list where the task was deleted from"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String createDeleteMessage(Task taskRemoved, TaskList taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return DELETE_MESSAGE + \u0027\\n\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + \"   \" + taskRemoved + \u0027\\n\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + taskList.createTaskNumberCountMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 75
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that marks the designated task as complete and broadcasts the appropriate update."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is marked as done */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Index of task to be marked as complete */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor which is not able to handle String inputs directly. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private DoneCommand(int doneIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Static factory method for creating the appropriate done command from a String input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param command String input of the form \"done {index}\" (index starts at 1)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that marks the task as done when executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static DoneCommand parse(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a task to complete!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            taskNumber \u003d Integer.parseInt(details[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Invalid number input!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Marks the index of the designated task as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (doneIndex \u003e taskList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"No such task!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Task doneTask \u003d taskList.get(doneIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        doneTask.markDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(createDoneMessage(doneTask));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Standard String creator for the update."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDone task marked as done"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String createDoneMessage(Task taskDone) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return DONE_MESSAGE + \"\\n   \" + taskDone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 78
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that signals exiting the bot and broadcasts the appropriate update."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String CLOSING_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Static method that creates a generic exit command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return exit command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static ExitCommand create() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Signals exit to the bot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The bot does not perform any manipulation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(getClosingText());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Method used to create the closing message. For now it just returns the pre-determined message. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String getClosingText() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return CLOSING_MESSAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true to signal to the bot that it is time to exit."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 52
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that searches Tasks with the given string and sends the appropriate update."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when messages are found */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String FOUND_MESSAGE \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when no messages are found */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String NONE_FOUND_MESSAGE \u003d \"It seems there were no matches!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Reference string to search for */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final String searchString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor unable to parse the direct user input. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private FindCommand(String searchString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Static factory method for creating the appropriate find command from a String input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param command String input of the form \"find {search string}\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that finds the tasks containing the search string when executed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static FindCommand parse(String command) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a keyword/keyphrase to search!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new FindCommand(details[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Finds the tasks whose description contains the search string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method then broadcasts an update through the UI."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TaskList matchingTasks \u003d getMatchingTasks(searchString, taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(createFindMessage(matchingTasks));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a list of tasks all of which have their descriptions containing the search string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param searchString string to be matched"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList list of tasks to be searched"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return list of tasks which contain the string in their description"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected TaskList getMatchingTasks(String searchString, TaskList taskList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TaskList matchingList \u003d new TaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (task.getTaskDescription().contains(searchString)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                matchingList.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return matchingList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Standard String creator for the update."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList list of tasks containing the search string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected String createFindMessage(TaskList taskList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return NONE_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return FOUND_MESSAGE + \u0027\\n\u0027 + taskList.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 86
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that outputs the current state of the task list as an update."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String LIST_HEADER \u003d \"Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Static method that creates a generic list command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return list command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static ListCommand create() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Bot outputs the elements in the task list provided to the given ui."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The bot does not perform any manipulation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(LIST_HEADER + \u0027\\n\u0027 + taskList.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 36
    }
  },
  {
    "path": "src/main/java/duke/datetime/DateTimeHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class specifically meant to handle string inputs and convert them into LocalDateTime objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DateTimeHandler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String representing standard datetime format used */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String STANDARD_DATETIME_FORMAT_STRING \u003d \"dd-MM-uuuu HHmm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String representing standard time format */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String STANDARD_2400_FORMAT_STRING \u003d \"HHmm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** DateTimeFormatter object of standard datetime format */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final DateTimeFormatter STANDARD_DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            STANDARD_DATETIME_FORMAT_STRING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** DateTimeFormatter object of standard time format */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final DateTimeFormatter STANDARD_2400_FORMAT \u003d DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            STANDARD_2400_FORMAT_STRING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses a string be converted into a single LocalDateTime object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param dateTime string to be converted into LocalDateTime object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return LocalDateTime object from the details given"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return LocalDateTime.parse(dateTime, STANDARD_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(dateTime + \" is an invalid datetime format! Please use \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + STANDARD_DATETIME_FORMAT_STRING + \" (24hr)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses a string be converted into a pair of start and end timings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Besides invalid format, this method checks that the latter timing is later than the earlier timing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param eventTiming string to be converted into a pair of LocalDateTime objects"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return pair of LocalDateTime objects from the details given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Pair\u003cLocalDateTime, LocalDateTime\u003e parseEventTimings(String eventTiming) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int acceptableLength1 \u003d STANDARD_DATETIME_FORMAT_STRING.length() + 1 + STANDARD_2400_FORMAT_STRING.length();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int acceptableLength2 \u003d STANDARD_DATETIME_FORMAT_STRING.length() * 2 + 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (eventTiming.length() !\u003d acceptableLength1 \u0026\u0026 eventTiming.length() !\u003d acceptableLength2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(eventTiming + \" is not a valid event timing. Please use either\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_DATETIME_FORMAT_STRING + \" (24hr)\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_2400_FORMAT_STRING + \" (24hr)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String firstTiming \u003d eventTiming.substring(0, STANDARD_DATETIME_FORMAT_STRING.length());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String secondTiming \u003d eventTiming.substring(STANDARD_DATETIME_FORMAT_STRING.length() + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            LocalDateTime dateTime1 \u003d LocalDateTime.parse(firstTiming, STANDARD_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            LocalDateTime dateTime2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (secondTiming.length() \u003d\u003d STANDARD_DATETIME_FORMAT_STRING.length()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                dateTime2 \u003d LocalDateTime.parse(secondTiming, STANDARD_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                LocalTime time \u003d LocalTime.parse(secondTiming, STANDARD_2400_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                dateTime2 \u003d LocalDateTime.of(dateTime1.toLocalDate(), time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (dateTime2.compareTo(dateTime1) \u003c 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                throw new DukeException(\"End timing must be later than start timing!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Pair.of(dateTime1, dateTime2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(eventTiming + \" is not a valid event timing. Please use either\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_DATETIME_FORMAT_STRING + \" (24hr)\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_2400_FORMAT_STRING + \" (24hr)\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 82
    }
  },
  {
    "path": "src/main/java/duke/storage/InvalidSymbolException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Exception indicating that an invalid symbol was read from the save file by Storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class InvalidSymbolException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Constructor to customise the message attached to the exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param description message detailing the invalid symbol"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public InvalidSymbolException(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 16
    }
  },
  {
    "path": "src/main/java/duke/storage/PrintSummary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates classes that can be summarised with the getSummary() method to be stored."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Classes that implement this interface must also have a \u003ccode\u003ereconstruct(String summary)\u003c/code\u003e method that recreates the object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public interface PrintSummary {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The object must be able to be reconstructed from the summary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string representing the details of the object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 16
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class encapsulating all the methods required to read and write directly to the hard drive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Path to search for the saved file to load or update */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor to set the file path */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Initialises the Storage object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method first attempts to search for a pre-saved list in a fixed location."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If it is not found, the method will create such a directory and file to write and save future updates."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return Storage object for updating changes to the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Storage init() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String filePath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        File directory \u003d new File(filePath + \"/data\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        filePath \u003d filePath + \"/data/duke.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new Storage(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Reads the stored data in the file found in the file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * It interprets the text found in the file to recreate the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task list with items corresponding to what was found in the saved file or empty if a file was not found"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TaskList readStoredData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                String line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    taskList.add(createTask(line));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                } catch (InvalidSymbolException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    System.err.println(\"Not a valid line: \" + line);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (FileNotFoundException e1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            } catch (IOException e2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                e2.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Method recreates a task from the provided string summary of the task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskSummary string details of the task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task corresponding to the summary"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws InvalidSymbolException if the symbol read is not a valid symbol of a task type"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected Task createTask(String taskSummary) throws InvalidSymbolException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String identifier \u003d taskSummary.split(\"\\\\|\", 2)[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        switch (identifier) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case Event.SYMBOL:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Event.reconstructFromSummary(taskSummary);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case ToDo.SYMBOL:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return ToDo.reconstructFromSummary(taskSummary);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case Deadline.SYMBOL:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Deadline.reconstructFromSummary(taskSummary);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSymbolException(identifier + \" is not a valid type symbol!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Writes the new task list\u0027s details into the file at the file path."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList updated task list to be saved"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void updateFile(TaskList taskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                if (isFirst) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    isFirst \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    writer.write(task.getSummary());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    writer.write(\u0027\\n\u0027 + task.getSummary());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 120
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.datetime.DateTimeHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates Tasks with deadlines."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Object carries information of the task to be completed and the deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String separator used to separate the task description from the dateline */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SPLITTER \u003d \" /by \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Symbol representing the type of Task this is */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Deadline of the task */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new Deadline object from the full deadline description that includes the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription description of the Deadline object with both the task and the deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Deadline(String taskDescription) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(taskDescription.split(SPLITTER)[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d taskDescription.split(SPLITTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a deadline!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (details.length \u003e 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please follow the format of \\\"{task} /by {deadline}\\\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        deadline \u003d DateTimeHandler.parseDateTime(taskDescription.split(SPLITTER)[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new Deadline object by manually inputting t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param deadlineDescription description of the task only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param deadline string description of the deadline"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Deadline(String deadlineDescription, String deadline) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(deadlineDescription);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.deadline \u003d DateTimeHandler.parseDateTime(deadline);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the String representation of the object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updated from the superclass Task to include the type of task and the deadline."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string representing a Deadline task with a \"[D]\" identifier and the deadline at the back"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"[%s]%s (by: %s)\", SYMBOL, super.toString(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTimingString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adjusts the String forms of the start and end timing for output"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string of the start and end timings"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String getTimingString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(deadline);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the Deadline."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string containing type, completion status, description and timing"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"%s|%d|%s|%s\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                SYMBOL,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                (isCompleted() ? 1 : 0),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTaskDescription(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTimingString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an Deadline object corresponding to the summary given."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param summary string summary of the Deadline object to be reconstructed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return Deadline object representing the summary given"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Deadline reconstructFromSummary(String summary) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d summary.split(\"\\\\|\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length !\u003d 4) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Wrong number of details!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(details[1].equals(\"1\") || details[1].equals(\"0\"))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Invalid completion status! Ensure that it is either 0 or 1\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isDone \u003d details[1].equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(details[2], details[3]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            newDeadline.markDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 104
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.datetime.DateTimeHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates an Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Event are tasks that we have to attend at a given time slot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Symbol representing the type of Task this is */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SYMBOL \u003d \"E\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String separator used to separate the task description and the timing*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SPLITTER \u003d \" /at \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Timing of the start of event */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private LocalDateTime startTiming;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Timing of the end of event */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private LocalDateTime endTiming;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates an Event object with the given event description and timing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription full description of the event including task and timing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Event(String taskDescription) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(taskDescription.split(SPLITTER)[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d taskDescription.split(SPLITTER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a timing!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (details.length \u003e 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please follow the format of \\\"{task} /at {deadline}\\\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        processEventTimingString(taskDescription.split(SPLITTER)[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new Event object by manually setting the description and timing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param eventDescription description of the event task only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param timing string description of the timing of the event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Event(String eventDescription, String timing) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(eventDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        processEventTimingString(timing);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Processes an event timing String by assigning the pair of start and end timings to the properties."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param timing String containing the details of the start and end timing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void processEventTimingString(String timing) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Pair\u003cLocalDateTime, LocalDateTime\u003e pair \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                DateTimeHandler.parseEventTimings(timing);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        startTiming \u003d pair.first;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        endTiming \u003d pair.second;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the String representation of the object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updated from the superclass Task to include the type of Task this object is and include the timing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return returns a String representing an Event with a \"[E]\" identifier and timing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"[%s]%s (at: %s)\", SYMBOL, super.toString(), getTimingString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adjusts the String forms of the start and end timing for output"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string of the start and end timings"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String getTimingString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (startTiming.toLocalDate().equals(endTiming.toLocalDate())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(startTiming)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + \"-\" + DateTimeHandler.STANDARD_2400_FORMAT.format(endTiming.toLocalTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(startTiming) + \"-\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + DateTimeHandler.STANDARD_DATETIME_FORMAT.format(endTiming);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the Event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string containing type, completion status, description and timing"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"%s|%d|%s|%s\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                SYMBOL,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                (isCompleted() ? 1 : 0),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTaskDescription(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTimingString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an Event object corresponding to the summary given."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param summary string summary of the Event object to be reconstructed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return Event object representing the summary given"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Event reconstructFromSummary(String summary) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d summary.split(\"\\\\|\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length !\u003d 4) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Wrong number of details!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(details[1].equals(\"1\") || details[1].equals(\"0\"))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Invalid completion status! Ensure that it is either 0 or 1\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Event event \u003d new Event(details[2], details[3]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isDone \u003d details[1].equals(\"1\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            event.markDone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 119
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.PrintSummary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates a Task with a description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Task can be completed and will be mark as done. By default, it is initialised as incomplete."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public abstract class Task implements PrintSummary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * boolean flag indicating completion of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new incomplete Task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a tick or cross String depending on whether the task is completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return tick if the task is completed, a cross otherwise"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a String representation of the Task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return String representing the task, showing its status and description."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the task description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string of task description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the state of th:we Task, whether it is completed or not."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return true if the task is completed, false otherwise"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected boolean isCompleted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Marks the task as complete."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string summarising the object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract String getSummary();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 78
    }
  },
  {
    "path": "src/main/java/duke/task/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class handles parsing of strings inputs (from users) into the apporpriate task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** todo-type task indicator */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String TO_DO \u003d \"todo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** deadline-type task indicator */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** event-type task indicator */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** collections of the valid indicator strings */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final List\u003cString\u003e validTaskTypes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        validTaskTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        validTaskTypes.add(TO_DO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        validTaskTypes.add(DEADLINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        validTaskTypes.add(EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses a task description and returns the corresponding task if the description is valid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription description of the task, starting with the type as the first word"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task corresponding to the description given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Task parse(String taskDescription) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d taskDescription.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1 \u0026\u0026 validTaskTypes.contains(details[0])) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"The description of a \" + details[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Task addedTask;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        switch (details[0]) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case TO_DO:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addedTask \u003d new ToDo(details[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addedTask \u003d new Deadline(details[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addedTask \u003d new Event(details[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(details[0] + \" is not a valid type of command!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return addedTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 62
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates Tasks that are to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Object only carries information about the task to be completed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Symbol representing the type of Task this is */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a ToDo object with the given task description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription description of the task to be done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ToDo(String taskDescription) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the String representation of the object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updated from the superclass Task to include the type of Task this object is."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string representing the ToDo task with a \"[T]\" identifier"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return \"[\" + SYMBOL + \"]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the ToDo."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string containing type, completion status and description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"%s|%d|%s\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                SYMBOL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                (isCompleted() ? 1 : 0),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTaskDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a ToDo object corresponding to the summary given."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param summary string summary of the ToDo object to be reconstructed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return ToDo object representing the summary given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static ToDo reconstructFromSummary(String summary) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d summary.split(\"\\\\|\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length !\u003d 3) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Wrong number of details!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(details[1].equals(\"1\") || details[1].equals(\"0\"))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Invalid completion status! Ensure that it is either 0 or 1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isDone \u003d details[1].equals(\"1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo newToDo \u003d new ToDo(details[2]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            newToDo.markDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return newToDo;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 63
    }
  },
  {
    "path": "src/main/java/duke/util/Pair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public T first;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public U second;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Pair(T first, U second) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T first, U second) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new Pair\u003c\u003e(first, second);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"(%s, %s)\", first, second);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 22
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected List\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.get(index - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.remove(index - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.iterator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            builder.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            builder.append(count++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String createTaskNumberCountMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return \"Now you have \" + listOfTasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 53
    }
  },
  {
    "path": "src/test/java/duke/datetime/DateTimeHandlerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static duke.datetime.DateTimeHandler.parseDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static duke.datetime.DateTimeHandler.parseEventTimings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static duke.datetime.DateTimeHandler.STANDARD_DATETIME_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DateTimeHandlerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseDateTime_validStrings_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String time1 \u003d \"24-09-2000 1800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String time2 \u003d \"24-12-2020 0100\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected1 \u003d \"2000-09-24T18:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected2 \u003d \"2020-12-24T01:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        LocalDateTime localDateTime1 \u003d parseDateTime(time1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected1, localDateTime1.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected2, parseDateTime(time2).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(time1, STANDARD_DATETIME_FORMAT.format(localDateTime1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseDateTime_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"abcde\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"24-09-2020 100\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String invalidError \u003d \"is an invalid datetime format! Please use\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseDateTime(input1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseDateTime(input2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseEventTimings_validStrings_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"24-09-2000 1800-2000\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"24-09-2000 1800-26-09-2000 2000\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected1 \u003d \"(2000-09-24T18:00, 2000-09-24T20:00)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected2 \u003d \"(2000-09-24T18:00, 2000-09-26T20:00)\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected1, parseEventTimings(input1).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected2, parseEventTimings(input2).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseEventTimings_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"abcde\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"24-09-2000 180026-09-2000 2000\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input3 \u003d \"22-09-2000 1800 20-09-2000 2000\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input4 \u003d \"22-09-2000 1800-1600\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String invalidError \u003d \" is not a valid event timing. Please use either\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String endEarlierThanStartError \u003d \"End timing must be later than start timing!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(endEarlierThanStartError));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input4);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(endEarlierThanStartError));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 93
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * JUnit test class to test the Deadline class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Deadline created with valid timing strings will be successful."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createDeadline_validStrings_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /by 21-09-2020 0800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"meeting /by 23-09-2020 1000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output1 \u003d \"[D][✘] meeting (by: 21-09-2020 0800)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output2 \u003d \"[D][✓] meeting (by: 23-09-2020 1000)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(input2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        deadline2.markDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output1, new Deadline(input1).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output2, deadline2.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Deadline class correctly rejects invalid String inputs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createDeadline_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input1 \u003d \"meeting /by abcde\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Deadline(input1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\" is an invalid datetime format! Please use \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input2 \u003d \"meeting\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Deadline(input2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please specify a deadline!\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests 1. if the summary comes out in the form required and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * 2. The same Deadline can be recreated from the summary."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testSummary_standardDeadlines_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /by 21-09-2020 0800\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"carnival@park /by 23-10-2020 0800\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Deadline event1 \u003d new Deadline(input1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event1.markDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Deadline event2 \u003d new Deadline(input2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary1 \u003d event1.getSummary();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary2 \u003d event2.getSummary();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary1 \u003d \"D|1|meeting|21-09-2020 0800\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary2 \u003d \"D|0|carnival@park|23-10-2020 0800\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary1, summary1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary2, summary2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event1.toString(), Deadline.reconstructFromSummary(summary1).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event2.toString(), Deadline.reconstructFromSummary(summary2).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 72
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * JUnit test class for testing the Event class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Event created with valid timing strings will be successful."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createEvent_validStrings_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /at 21-09-2020 0800-1000\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"meeting /at 21-09-2020 0800-21-09-2020 1000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input3 \u003d \"meeting /at 21-09-2020 0800-23-09-2020 1000\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output1 \u003d \"[E][✘] meeting (at: 21-09-2020 0800-1000)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output2 \u003d \"[E][✘] meeting (at: 21-09-2020 0800-1000)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output3 \u003d \"[E][✓] meeting (at: 21-09-2020 0800-23-09-2020 1000)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Event event3 \u003d new Event(input3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event3.markDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output1, new Event(input1).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output2, new Event(input2).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output3, event3.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Event correctly rejects invalid String inputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createEvent_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input1 \u003d \"meeting /at 21-09-2020 0800-20-09-2020 0800\"; //End timing earlier than start time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Event(input1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"End timing must be later than start timing!\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input2 \u003d \"meeting /at abcde\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Event(input2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid event timing. Please use either\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input3 \u003d \"meeting /at 21-09-2020 2020- 21-09-2020 20:30\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Event(input3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid event timing. Please use either\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests 1. if the summary comes out in the form required and"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * 2. The same Event can be recreated from the summary."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testSummary_standardEvents_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /at 21-09-2020 0800 21-09-2020 1000\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"carnival@park /at 23-10-2020 0800 05-11-2020 2300\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Event event1 \u003d new Event(input1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event1.markDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Event event2 \u003d new Event(input2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary1 \u003d event1.getSummary();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary2 \u003d event2.getSummary();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary1 \u003d \"E|1|meeting|21-09-2020 0800-1000\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary2 \u003d \"E|0|carnival@park|23-10-2020 0800-05-11-2020 2300\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary1, summary1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary2, summary2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event1.toString(), Event.reconstructFromSummary(summary1).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event2.toString(), Event.reconstructFromSummary(summary2).toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 85
    }
  },
  {
    "path": "src/test/java/duke/task/TaskParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TaskParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParse_validStrings_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String toDoInput \u003d \"something\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(new ToDo(toDoInput).toString(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                TaskParser.parse(TaskParser.TO_DO + \" \" + toDoInput).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String deadlineInput \u003d \"homework /by 20-12-2020 2359\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(new Deadline(deadlineInput).toString(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                TaskParser.parse(TaskParser.DEADLINE + \" \" + deadlineInput).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String eventInput \u003d \"gaming /at 20-12-2020 2200-2359\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(new Event(eventInput).toString(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                TaskParser.parse(TaskParser.EVENT + \" \" + eventInput).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParse_invalidString_errorThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"wrong abcde /by 20-12-2020 2359\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"to do something\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            TaskParser.parse(input1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid type of command!\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            TaskParser.parse(input2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid type of command!\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 48
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the ToDo created strings will be successful."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createToDo_validStrings_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"clown around\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output1 \u003d \"[T][✘] meeting\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output2 \u003d \"[T][✓] clown around\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo toDo2 \u003d new ToDo(input2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        toDo2.markDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output1, new ToDo(input1).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output2, toDo2.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests 1. if the summary comes out in the form required and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * 2. The same ToDo can be recreated from the summary."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testSummary_standardToDos_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"attend carnival park\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo event1 \u003d new ToDo(input1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event1.markDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo event2 \u003d new ToDo(input2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary1 \u003d event1.getSummary();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary2 \u003d event2.getSummary();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary1 \u003d \"T|1|meeting\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary2 \u003d \"T|0|attend carnival park\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary1, summary1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary2, summary2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event1.toString(), ToDo.reconstructFromSummary(summary1).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event2.toString(), ToDo.reconstructFromSummary(summary2).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 62
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "-": 20
    }
  }
]
