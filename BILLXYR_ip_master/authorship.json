[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"# User Guide for Project Bill"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"This is a desktop application that is designed for users to keep track"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"of the various tasks they want to do. It is under the assumption that "},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"Users prefer typing to speaking. Thus, this application does not support"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"voice command. User can use the various functions, such as \"add\" or \"delete\""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"to help them keep track of their daily tasks. This application is optimized for use via Command Line Interface(CLI) and have"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"a beautiful Graphical User Interface(GUI). "},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"This project is modified and built from [Project Duke](https://nus-cs2103-ay1920s2.github.io/website/se-book-adapted/projectDuke/index.html)"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"and it is a very useful educational project designed to help fresh software"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"developer to horn their skills by slowing building the project and explore"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"the different software engineering principle along the way."},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"* [1. Quick Start](#1-quick-start)"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"   * [1.1 Run the project in intelliJ](#11-run-the-project-in-intellij)"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"   * [1.2 Run the project in terminal](#12-run-the-project-in-terminal)"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"* [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"   * [2.1 Find the list of command: help](#21-find-the-list-of-command-help)"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"   * [2.2 Save the task : save](#22-save-the-task--save)"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"   * [2.3 Add a general ToDo task : todo](#23-add-a-general-todo-task--todo)"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"   * [2.4 Add a Deadline task : deadline](#24-add-a-deadline-task--deadline)"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"   * [2.5 Adding an Event : event](#25-adding-an-event--event)"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"   * [2.6 Listing out all Tasks : list](#26-listing-out-all-tasks--list)"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"   * [2.7 Marking a Task as done : done](#27-marking-a-task-as-done--done)"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"   * [2.8 Delete the task : delete](#28-delete-the-task--delete)"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"   * [2.9 Find a certain task: find](#29-find-a-certain-task-find)"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"   * [2.10 Ending a session : bye](#210-ending-a-session--bye)"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"* [3. Code Summary](#3-code-summary)"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"* [4. Useful Resources](#4-useful-resources)"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"## 1. Quick Start"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"  * [1.1 Run the project in intelliJ](#11-run-the-project-in-intellij)"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"  * [1.2 Run the project in terminal](#12-run-the-project-in-terminal)"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"   "},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"   "},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"### 1.1 Run the project in intelliJ"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":41,"author":{"gitId":"-"},"content":"  "},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"  * For those new to git, please check this out on how to download the project: [Download and try the Project](#download-and-try-the-project)"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"  "},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"1. Open Intellij (if you are not in the welcome screen, click File \u003e Close Project to close the existing project dialog first)"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"2. Set up the correct JDK version, as follows:"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"   1. Click Configure \u003e Structure for New Projects and then Project Settings \u003e Project \u003e Project SDK"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":"   2. If JDK 11 is listed in the drop down, select it. If it is not, click New... and select the directory where you installed JDK 11"},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"   3. Click OK"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"  "},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"3.Import the project into Intellij as follows:"},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"   * i.  Click Open or Import."},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"   * ii. Select the project directory, and click OK"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"   * iii. If there are any further prompts, accept the defaults."},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"4.After the importing is complete, locate the src/main/java/Launcher.java file, right-click it, and choose to Run Launcher. "},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"5.if everything is set up properly, you should be able to see the GUI in a few seconds"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"6.Now you can type the command and press Enter to excute it."},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"*Tutorial on how to download the project for those new to git:*"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"#### Download and try the Project"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"1. Navigate to the [main page](https://github.com/BILLXYR/ip)"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":"2. Find the code download button. An example is shown here: "},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"![CodeDownload](./docs/images/code.png)"},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":"3. You can choose to use any of the three options"},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"4. Here i will explain more on the first option"},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":"   1. open your terminal and set up your git account"},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"   2. use this command to clone the project down to your computer: git clone https://github.com/BILLXYR/ip.git"},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":"### 1.2 Run the project in terminal"},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"1. Ensure that you have downloaded Java 11 in your computer. "},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":"2. Download the latest **Bill.jar** file from [here](https://github.com/BILLXYR/ip/releases/tag/v0.2)"},{"lineNumber":83,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":84,"author":{"gitId":"BILLXYR"},"content":"3. Navigate to any empty folder and place the downloaded file into that folder."},{"lineNumber":85,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":86,"author":{"gitId":"BILLXYR"},"content":"4. Navigate your terminal directory to the folder that contains your **Bill.jar** file"},{"lineNumber":87,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":88,"author":{"gitId":"BILLXYR"},"content":"5. Type the following command to start the application: `java -jar Bill.jar`"},{"lineNumber":89,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":90,"author":{"gitId":"BILLXYR"},"content":"6. You should expect to see a Graphical User Interface(GUI) appear in a few second"},{"lineNumber":91,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":92,"author":{"gitId":"BILLXYR"},"content":"7. You should expect to see a window as shown below: "},{"lineNumber":93,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":94,"author":{"gitId":"BILLXYR"},"content":"![GUI of BILL](./docs/Ui.png)"},{"lineNumber":95,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":96,"author":{"gitId":"BILLXYR"},"content":"8. You can enter the `help` command to find the list of commands you can use."},{"lineNumber":97,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":98,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":99,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":100,"author":{"gitId":"BILLXYR"},"content":"## 2. Features and Usage"},{"lineNumber":101,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":102,"author":{"gitId":"BILLXYR"},"content":"   * [2.1 Find the list of command: help](#21-find-the-list-of-command-help)"},{"lineNumber":103,"author":{"gitId":"BILLXYR"},"content":"   * [2.2 Save the task : save](#22-save-the-task--save)"},{"lineNumber":104,"author":{"gitId":"BILLXYR"},"content":"   * [2.3 Add a general ToDo task : todo](#23-add-a-general-todo-task--todo)"},{"lineNumber":105,"author":{"gitId":"BILLXYR"},"content":"   * [2.4 Add a Deadline task : deadline](#24-add-a-deadline-task--deadline)"},{"lineNumber":106,"author":{"gitId":"BILLXYR"},"content":"   * [2.5 Adding an Event : event](#25-adding-an-event--event)"},{"lineNumber":107,"author":{"gitId":"BILLXYR"},"content":"   * [2.6 Listing out all Tasks : list](#26-listing-out-all-tasks--list)"},{"lineNumber":108,"author":{"gitId":"BILLXYR"},"content":"   * [2.7 Marking a Task as done : done](#27-marking-a-task-as-done--done)"},{"lineNumber":109,"author":{"gitId":"BILLXYR"},"content":"   * [2.8 Delete the task : delete](#28-delete-the-task--delete)"},{"lineNumber":110,"author":{"gitId":"BILLXYR"},"content":"   * [2.9 Find a certain task: find](#29-find-a-certain-task-find)"},{"lineNumber":111,"author":{"gitId":"BILLXYR"},"content":"   * [2.10 Ending a session : bye](#210-ending-a-session--bye)"},{"lineNumber":112,"author":{"gitId":"BILLXYR"},"content":"   "},{"lineNumber":113,"author":{"gitId":"BILLXYR"},"content":"### **2.1 Find the list of command: help**"},{"lineNumber":114,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":115,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to find the list of command to use"},{"lineNumber":116,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":117,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i want to add a task but i forgot how to use that, you can use help to help you"},{"lineNumber":118,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":119,"author":{"gitId":"BILLXYR"},"content":"*Format*: `help`"},{"lineNumber":120,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":121,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `help`"},{"lineNumber":122,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":123,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":124,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":125,"author":{"gitId":"BILLXYR"},"content":"![helpCommand](./docs/images/help.png)"},{"lineNumber":126,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":127,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":128,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":129,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":130,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":131,"author":{"gitId":"BILLXYR"},"content":"###  **2.2 Save the task : save**"},{"lineNumber":132,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":133,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to save the task after they have added them."},{"lineNumber":134,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":135,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have add some tasks and i want to add them now."},{"lineNumber":136,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":137,"author":{"gitId":"BILLXYR"},"content":"*Format*: `save`"},{"lineNumber":138,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":139,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `save`"},{"lineNumber":140,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":141,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":142,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":143,"author":{"gitId":"BILLXYR"},"content":"![saveCommand](./docs/images/save.png)"},{"lineNumber":144,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":145,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":146,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":147,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":148,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":149,"author":{"gitId":"BILLXYR"},"content":"### **2.3 Add a general ToDo task : todo**"},{"lineNumber":150,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":151,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to add a ToDo task to our current list"},{"lineNumber":152,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":153,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to add an ip ToDo task into our list"},{"lineNumber":154,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":155,"author":{"gitId":"BILLXYR"},"content":"*Format*: `todo [newTask]`"},{"lineNumber":156,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":157,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `todo ip`"},{"lineNumber":158,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":159,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":160,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":161,"author":{"gitId":"BILLXYR"},"content":"![todoCommand](./docs/images/todo.png)"},{"lineNumber":162,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":163,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":164,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":165,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":166,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":167,"author":{"gitId":"BILLXYR"},"content":"### **2.4 Add a Deadline task : deadline**"},{"lineNumber":168,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":169,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to add a task with deadline to our current list"},{"lineNumber":170,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":171,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to add an ip task to our list and there is a deadline "},{"lineNumber":172,"author":{"gitId":"BILLXYR"},"content":"for this task,eg: due on 2020 August 2, 7pm"},{"lineNumber":173,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":174,"author":{"gitId":"BILLXYR"},"content":"*Format*: `deadline [newTask] /by DD/MM/YYYY HHmm`"},{"lineNumber":175,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":176,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `deadline ip /by 02/08/2020 1900`"},{"lineNumber":177,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":178,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":179,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":180,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":181,"author":{"gitId":"BILLXYR"},"content":"![deadlineCommand](./docs/images/deadline.png)"},{"lineNumber":182,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":183,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":184,"author":{"gitId":"BILLXYR"},"content":"**Note:**"},{"lineNumber":185,"author":{"gitId":"BILLXYR"},"content":"1. the date must be dd/mm/yyyy"},{"lineNumber":186,"author":{"gitId":"BILLXYR"},"content":"2. for the day and month, it must be "},{"lineNumber":187,"author":{"gitId":"BILLXYR"},"content":"two digit, for example, 2 must be written as 02 instead of just 2."},{"lineNumber":188,"author":{"gitId":"BILLXYR"},"content":"3. the time must be 4 digit, for example, 8:12am must be written as 0812 instead of 812"},{"lineNumber":189,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":190,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":191,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":192,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":193,"author":{"gitId":"BILLXYR"},"content":"### **2.5 Adding an Event : event**"},{"lineNumber":194,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":195,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to add an event to our current list."},{"lineNumber":196,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":197,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to add an event to our list and there is a specific time for it."},{"lineNumber":198,"author":{"gitId":"BILLXYR"},"content":"For example, it happens on 2020 August 2, 7pm"},{"lineNumber":199,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":200,"author":{"gitId":"BILLXYR"},"content":"*Format*: `event [newTask] /at DD/MM/YYYY HHmm`"},{"lineNumber":201,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":202,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `event assignment /at 02/08/2020 1900`"},{"lineNumber":203,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":204,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":205,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":206,"author":{"gitId":"BILLXYR"},"content":"![eventCommand](./docs/images/event.png)"},{"lineNumber":207,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":208,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":209,"author":{"gitId":"BILLXYR"},"content":"**Note:**"},{"lineNumber":210,"author":{"gitId":"BILLXYR"},"content":"1. the date must be dd/mm/yyyy"},{"lineNumber":211,"author":{"gitId":"BILLXYR"},"content":"2. for the day and month, it must be "},{"lineNumber":212,"author":{"gitId":"BILLXYR"},"content":"two digits, for example, 2 must be written as 02 instead of just 2."},{"lineNumber":213,"author":{"gitId":"BILLXYR"},"content":"3. the time must be 4 digits, for example, 8:12am must be written as 0812 instead of 812"},{"lineNumber":214,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":215,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":216,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":217,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":218,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":219,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":220,"author":{"gitId":"BILLXYR"},"content":"### **2.6 Listing out all Tasks : list**"},{"lineNumber":221,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":222,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to list out all the tasks added to the list in the order of the entry."},{"lineNumber":223,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":224,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to check all the tasks that we have added"},{"lineNumber":225,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":226,"author":{"gitId":"BILLXYR"},"content":"*Format*: `list`"},{"lineNumber":227,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":228,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `list`"},{"lineNumber":229,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":230,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":231,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":232,"author":{"gitId":"BILLXYR"},"content":"![listCommand](./docs/images/list.png)"},{"lineNumber":233,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":234,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":235,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":236,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":237,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":238,"author":{"gitId":"BILLXYR"},"content":"### **2.7 Marking a Task as done : done**"},{"lineNumber":239,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":240,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to mark certain tasks they have done."},{"lineNumber":241,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":242,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have previously add an ip task to the list and i have done it. Now, i want"},{"lineNumber":243,"author":{"gitId":"BILLXYR"},"content":"to make the task as done."},{"lineNumber":244,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":245,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":246,"author":{"gitId":"BILLXYR"},"content":"*Format*: `done [task index]`"},{"lineNumber":247,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":248,"author":{"gitId":"BILLXYR"},"content":"we first use list to find the index of the task. For example, in this case, the index "},{"lineNumber":249,"author":{"gitId":"BILLXYR"},"content":"for the ip task is taken as 2."},{"lineNumber":250,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":251,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `done 2`"},{"lineNumber":252,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":253,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":254,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":255,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":256,"author":{"gitId":"BILLXYR"},"content":"![doneCommand](./docs/images/done.png)"},{"lineNumber":257,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":258,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":259,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":260,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":261,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":262,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":263,"author":{"gitId":"BILLXYR"},"content":"### **2.8 Delete the task : delete**"},{"lineNumber":264,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":265,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to delete certain tasks."},{"lineNumber":266,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":267,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have previously add an ip task to the list. Now, i want"},{"lineNumber":268,"author":{"gitId":"BILLXYR"},"content":"to delete the task."},{"lineNumber":269,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":270,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":271,"author":{"gitId":"BILLXYR"},"content":"*Format*: `delete [task index]`"},{"lineNumber":272,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":273,"author":{"gitId":"BILLXYR"},"content":"we first use list to find the index of the task. For example, in this case, the index "},{"lineNumber":274,"author":{"gitId":"BILLXYR"},"content":"for the ip task is taken as 3."},{"lineNumber":275,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":276,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `delete 3`"},{"lineNumber":277,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":278,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":279,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":280,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":281,"author":{"gitId":"BILLXYR"},"content":"![deleteCommand](./docs/images/delete.png)"},{"lineNumber":282,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":283,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":284,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":285,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":286,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":287,"author":{"gitId":"BILLXYR"},"content":"### **2.9 Find a certain task: find**"},{"lineNumber":288,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":289,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to find a certain task from the list and look at the detail."},{"lineNumber":290,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":291,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i want to find when is my ip due."},{"lineNumber":292,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":293,"author":{"gitId":"BILLXYR"},"content":"*Format*: `find [taskName]`"},{"lineNumber":294,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":295,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `find ip`"},{"lineNumber":296,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":297,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":298,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":299,"author":{"gitId":"BILLXYR"},"content":"![findCommand](./docs/images/find.png)"},{"lineNumber":300,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":301,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":302,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":303,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":304,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":305,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":306,"author":{"gitId":"BILLXYR"},"content":"###  **2.10 Ending a session : bye**"},{"lineNumber":307,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":308,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to quit the application after they have done what they want"},{"lineNumber":309,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":310,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have done adding my task and now i want to quit the application."},{"lineNumber":311,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":312,"author":{"gitId":"BILLXYR"},"content":"*Format*: `bye`"},{"lineNumber":313,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":314,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `bye`"},{"lineNumber":315,"author":{"gitId":"BILLXYR"},"content":" "},{"lineNumber":316,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*: Your application should be closed in 1 second. "},{"lineNumber":317,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":318,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":319,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":320,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":321,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":322,"author":{"gitId":"BILLXYR"},"content":"## 3. Code Summary"},{"lineNumber":323,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":324,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":325,"author":{"gitId":"BILLXYR"},"content":"Index | Command to Use | Format, examples |"},{"lineNumber":326,"author":{"gitId":"BILLXYR"},"content":"| ------------ | ------------ | ------------- |"},{"lineNumber":327,"author":{"gitId":"BILLXYR"},"content":"1 | Find the list of command | `help`, e.g.,`help` |"},{"lineNumber":328,"author":{"gitId":"BILLXYR"},"content":"2 | Save the task | `save`, e.g.,  `save` |"},{"lineNumber":329,"author":{"gitId":"BILLXYR"},"content":"3 | Add a general ToDo task | `todo [newTask]`, e.g., `todo ip` |                 "},{"lineNumber":330,"author":{"gitId":"BILLXYR"},"content":"4 | Add a Deadline task | `deadline [newTask] /by DD/MM/YYYY HHmm`, e.g, `deadline ip /by 02/08/2020 1900` |"},{"lineNumber":331,"author":{"gitId":"BILLXYR"},"content":"5 | Adding an Event | `event [newTask] /at DD/MM/YYYY HHmm`, e.g., `event assignment /at 02/08/2020 1900` |"},{"lineNumber":332,"author":{"gitId":"BILLXYR"},"content":"6 | Listing out all Tasks | `list`, e.g., `list` |"},{"lineNumber":333,"author":{"gitId":"BILLXYR"},"content":"7 | Marking a Task as done | `done [task index]`, e.g., `done 2` |"},{"lineNumber":334,"author":{"gitId":"BILLXYR"},"content":"8 | Delete the task | `delete [task index]`, e.g, `delete 3` |"},{"lineNumber":335,"author":{"gitId":"BILLXYR"},"content":"9 | Find a certain task | `find [taskName]`, e.g., `find ip` |"},{"lineNumber":336,"author":{"gitId":"BILLXYR"},"content":"10 | Ending a session | `bye`, e.g., `bye` |"},{"lineNumber":337,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":338,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":339,"author":{"gitId":"BILLXYR"},"content":"## 4. Useful Resources"},{"lineNumber":340,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":341,"author":{"gitId":"BILLXYR"},"content":"1. [CheckStyle Tutorial](https://se-education.org/guides/tutorials/checkstyle.html)"},{"lineNumber":342,"author":{"gitId":"BILLXYR"},"content":"2. [Text UI Testing Tutorial](https://se-education.org/guides/tutorials/textUiTesting.html)"},{"lineNumber":343,"author":{"gitId":"BILLXYR"},"content":"3. [Working with Jar files Tutorial](https://se-education.org/guides/tutorials/jar.html)"},{"lineNumber":344,"author":{"gitId":"BILLXYR"},"content":"4. [Gradle Tutorial](https://se-education.org/guides/tutorials/gradle.html)"},{"lineNumber":345,"author":{"gitId":"BILLXYR"},"content":"5. [JavaFX Tutorial](https://se-education.org/guides/tutorials/javaFx.html)"},{"lineNumber":346,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"-":6,"BILLXYR":340}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":" "},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":" "},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"    "},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"    "},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"    compile \u0027org.apache.commons:commons-lang3:3.9\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":" "},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"    archiveBaseName \u003d \"Bill\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":"jar {"},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"    manifest {"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":"        attributes \"Main-Class\": \"Launcher\""},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":"    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it)}}"},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"-":43,"BILLXYR":28}},{"path":"data/bill.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | hey"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"T | ✓ | li"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | lin"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | list"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | hii"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | li"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"D | ✘ | hey  | Oct 10 2020 10:00 AM"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | liiiiiiii"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | heyy"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"T | ✘ | heyyy"}],"authorContributionMap":{"BILLXYR":10}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"# User Guide for Project Bill"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"This is a desktop application that is designed for users to keep track"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"of the various tasks they want to do. It is under the assumption that "},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"Users prefer typing to speaking. Thus, this application does not support"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"voice command. User can use the various functions, such as \"add\" or \"delete\""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"to help them keep track of their daily tasks. This application is optimized for use via Command Line Interface(CLI) and have"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"a beautiful Graphical User Interface(GUI). "},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"This project is modified and built from [Project Duke](https://nus-cs2103-ay1920s2.github.io/website/se-book-adapted/projectDuke/index.html)"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"and it is a very useful educational project designed to help fresh software"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"developer to horn their skills by slowing building the project and explore"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"the different software engineering principle along the way."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"* [1. Quick Start](#1-quick-start)"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"   * [1.1 Run the project in intelliJ](#11-run-the-project-in-intellij)"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"   * [1.2 Run the project in terminal](#12-run-the-project-in-terminal)"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"* [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"   * [2.1 Find the list of command: help](#21-find-the-list-of-command-help)"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"   * [2.2 Save the task : save](#22-save-the-task--save)"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"   * [2.3 Add a general ToDo task : todo](#23-add-a-general-todo-task--todo)"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"   * [2.4 Add a Deadline task : deadline](#24-add-a-deadline-task--deadline)"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"   * [2.5 Adding an Event : event](#25-adding-an-event--event)"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"   * [2.6 Listing out all Tasks : list](#26-listing-out-all-tasks--list)"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"   * [2.7 Marking a Task as done : done](#27-marking-a-task-as-done--done)"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"   * [2.8 Delete the task : delete](#28-delete-the-task--delete)"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"   * [2.9 Find a certain task: find](#29-find-a-certain-task-find)"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"   * [2.10 Ending a session : bye](#210-ending-a-session--bye)"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"* [3. Code Summary](#3-code-summary)"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"* [4. Useful Resources](#4-useful-resources)"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"## 1. Quick Start"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"  * [1.1 Run the project in intelliJ](#11-run-the-project-in-intellij)"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"  * [1.2 Run the project in terminal](#12-run-the-project-in-terminal)"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"   "},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"   "},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"### 1.1 Run the project in intelliJ"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"  "},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"  * For those new to git, please check this out on how to download the project: [Download and try the Project](#download-and-try-the-project)"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"  "},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"1. Open Intellij (if you are not in the welcome screen, click File \u003e Close Project to close the existing project dialog first)"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"2. Set up the correct JDK version, as follows:"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"   1. Click Configure \u003e Structure for New Projects and then Project Settings \u003e Project \u003e Project SDK"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":"   2. If JDK 11 is listed in the drop down, select it. If it is not, click New... and select the directory where you installed JDK 11"},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"   3. Click OK"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"  "},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"3.Import the project into Intellij as follows:"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"   * i.  Click Open or Import."},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"   * ii. Select the project directory, and click OK"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"   * iii. If there are any further prompts, accept the defaults."},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"4.After the importing is complete, locate the src/main/java/Launcher.java file, right-click it, and choose to Run Launcher. "},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"5.if everything is set up properly, you should be able to see the GUI in a few seconds"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"6.Now you can type the command and press Enter to excute it."},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"*Tutorial on how to download the project for those new to git:*"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"#### Download and try the Project"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"1. Navigate to the [main page](https://github.com/BILLXYR/ip)"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":"2. Find the code download button. An example is shown here: "},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"![CodeDownload](./images/code.png)"},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":"3. You can choose to use any of the three options"},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"4. Here i will explain more on the first option"},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":"   1. open your terminal and set up your git account"},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"   2. use this command to clone the project down to your computer: git clone https://github.com/BILLXYR/ip.git"},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":"### 1.2 Run the project in terminal"},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"1. Ensure that you have downloaded Java 11 in your computer. "},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":"2. Download the latest **Bill.jar** file from [here](https://github.com/BILLXYR/ip/releases/tag/v0.2)"},{"lineNumber":83,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":84,"author":{"gitId":"BILLXYR"},"content":"3. Navigate to any empty folder and place the downloaded file into that folder."},{"lineNumber":85,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":86,"author":{"gitId":"BILLXYR"},"content":"4. Navigate your terminal directory to the folder that contains your **Bill.jar** file"},{"lineNumber":87,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":88,"author":{"gitId":"BILLXYR"},"content":"5. Type the following command to start the application: `java -jar Bill.jar`"},{"lineNumber":89,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":90,"author":{"gitId":"BILLXYR"},"content":"6. You should expect to see a Graphical User Interface(GUI) appear in a few second"},{"lineNumber":91,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":92,"author":{"gitId":"BILLXYR"},"content":"7. You should expect to see a window as shown below: "},{"lineNumber":93,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":94,"author":{"gitId":"BILLXYR"},"content":"![GUI of BILL](Ui.png)"},{"lineNumber":95,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":96,"author":{"gitId":"BILLXYR"},"content":"8. You can enter the `help` command to find the list of commands you can use."},{"lineNumber":97,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":98,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":99,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":100,"author":{"gitId":"BILLXYR"},"content":"## 2. Features and Usage"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"BILLXYR"},"content":"   * [2.1 Find the list of command: help](#21-find-the-list-of-command-help)"},{"lineNumber":103,"author":{"gitId":"BILLXYR"},"content":"   * [2.2 Save the task : save](#22-save-the-task--save)"},{"lineNumber":104,"author":{"gitId":"BILLXYR"},"content":"   * [2.3 Add a general ToDo task : todo](#23-add-a-general-todo-task--todo)"},{"lineNumber":105,"author":{"gitId":"BILLXYR"},"content":"   * [2.4 Add a Deadline task : deadline](#24-add-a-deadline-task--deadline)"},{"lineNumber":106,"author":{"gitId":"BILLXYR"},"content":"   * [2.5 Adding an Event : event](#25-adding-an-event--event)"},{"lineNumber":107,"author":{"gitId":"BILLXYR"},"content":"   * [2.6 Listing out all Tasks : list](#26-listing-out-all-tasks--list)"},{"lineNumber":108,"author":{"gitId":"BILLXYR"},"content":"   * [2.7 Marking a Task as done : done](#27-marking-a-task-as-done--done)"},{"lineNumber":109,"author":{"gitId":"BILLXYR"},"content":"   * [2.8 Delete the task : delete](#28-delete-the-task--delete)"},{"lineNumber":110,"author":{"gitId":"BILLXYR"},"content":"   * [2.9 Find a certain task: find](#29-find-a-certain-task-find)"},{"lineNumber":111,"author":{"gitId":"BILLXYR"},"content":"   * [2.10 Ending a session : bye](#210-ending-a-session--bye)"},{"lineNumber":112,"author":{"gitId":"BILLXYR"},"content":"   "},{"lineNumber":113,"author":{"gitId":"BILLXYR"},"content":"### **2.1 Find the list of command: help**"},{"lineNumber":114,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":115,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to find the list of command to use"},{"lineNumber":116,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":117,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i want to add a task but i forgot how to use that, you can use help to help you"},{"lineNumber":118,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":119,"author":{"gitId":"BILLXYR"},"content":"*Format*: `help`"},{"lineNumber":120,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":121,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `help`"},{"lineNumber":122,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":123,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":124,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":125,"author":{"gitId":"BILLXYR"},"content":"![helpCommand](./images/help.png)"},{"lineNumber":126,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":127,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":128,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":129,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":130,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":131,"author":{"gitId":"BILLXYR"},"content":"###  **2.2 Save the task : save**"},{"lineNumber":132,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":133,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to save the task after they have added them."},{"lineNumber":134,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":135,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have add some tasks and i want to add them now."},{"lineNumber":136,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":137,"author":{"gitId":"BILLXYR"},"content":"*Format*: `save`"},{"lineNumber":138,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":139,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `save`"},{"lineNumber":140,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":141,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":142,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":143,"author":{"gitId":"BILLXYR"},"content":"![saveCommand](./images/save.png)"},{"lineNumber":144,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":145,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":146,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":147,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":148,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":149,"author":{"gitId":"BILLXYR"},"content":"### **2.3 Add a general ToDo task : todo**"},{"lineNumber":150,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":151,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to add a ToDo task to our current list"},{"lineNumber":152,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":153,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to add an ip ToDo task into our list"},{"lineNumber":154,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":155,"author":{"gitId":"BILLXYR"},"content":"*Format*: `todo [newTask]`"},{"lineNumber":156,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":157,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `todo ip`"},{"lineNumber":158,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":159,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":160,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":161,"author":{"gitId":"BILLXYR"},"content":"![todoCommand](./images/todo.png)"},{"lineNumber":162,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":163,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":164,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":165,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":166,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":167,"author":{"gitId":"BILLXYR"},"content":"### **2.4 Add a Deadline task : deadline**"},{"lineNumber":168,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":169,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to add a task with deadline to our current list"},{"lineNumber":170,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":171,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to add an ip task to our list and there is a deadline "},{"lineNumber":172,"author":{"gitId":"BILLXYR"},"content":"for this task,eg: due on 2020 August 2, 7pm"},{"lineNumber":173,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":174,"author":{"gitId":"BILLXYR"},"content":"*Format*: `deadline [newTask] /by DD/MM/YYYY HHmm`"},{"lineNumber":175,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":176,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `deadline ip /by 02/08/2020 1900`"},{"lineNumber":177,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":178,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":179,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":180,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":181,"author":{"gitId":"BILLXYR"},"content":"![deadlineCommand](./images/deadline.png)"},{"lineNumber":182,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":183,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":184,"author":{"gitId":"BILLXYR"},"content":"**Note:**"},{"lineNumber":185,"author":{"gitId":"BILLXYR"},"content":"1. the date must be dd/mm/yyyy"},{"lineNumber":186,"author":{"gitId":"BILLXYR"},"content":"2. for the day and month, it must be "},{"lineNumber":187,"author":{"gitId":"BILLXYR"},"content":"two digit, for example, 2 must be written as 02 instead of just 2."},{"lineNumber":188,"author":{"gitId":"BILLXYR"},"content":"3. the time must be 4 digit, for example, 8:12am must be written as 0812 instead of 812"},{"lineNumber":189,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":190,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":191,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":192,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":193,"author":{"gitId":"BILLXYR"},"content":"### **2.5 Adding an Event : event**"},{"lineNumber":194,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":195,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to add an event to our current list."},{"lineNumber":196,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":197,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to add an event to our list and there is a specific time for it."},{"lineNumber":198,"author":{"gitId":"BILLXYR"},"content":"For example, it happens on 2020 August 2, 7pm"},{"lineNumber":199,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":200,"author":{"gitId":"BILLXYR"},"content":"*Format*: `event [newTask] /at DD/MM/YYYY HHmm`"},{"lineNumber":201,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":202,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `event assignment /at 02/08/2020 1900`"},{"lineNumber":203,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":204,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":205,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":206,"author":{"gitId":"BILLXYR"},"content":"![eventCommand](./images/event.png)"},{"lineNumber":207,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":208,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":209,"author":{"gitId":"BILLXYR"},"content":"**Note:**"},{"lineNumber":210,"author":{"gitId":"BILLXYR"},"content":"1. the date must be dd/mm/yyyy"},{"lineNumber":211,"author":{"gitId":"BILLXYR"},"content":"2. for the day and month, it must be "},{"lineNumber":212,"author":{"gitId":"BILLXYR"},"content":"two digits, for example, 2 must be written as 02 instead of just 2."},{"lineNumber":213,"author":{"gitId":"BILLXYR"},"content":"3. the time must be 4 digits, for example, 8:12am must be written as 0812 instead of 812"},{"lineNumber":214,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":215,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":216,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":217,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":218,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":219,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":220,"author":{"gitId":"BILLXYR"},"content":"### **2.6 Listing out all Tasks : list**"},{"lineNumber":221,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":222,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to list out all the tasks added to the list in the order of the entry."},{"lineNumber":223,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":224,"author":{"gitId":"BILLXYR"},"content":"*Usage*: we want to check all the tasks that we have added"},{"lineNumber":225,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":226,"author":{"gitId":"BILLXYR"},"content":"*Format*: `list`"},{"lineNumber":227,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":228,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `list`"},{"lineNumber":229,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":230,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":231,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":232,"author":{"gitId":"BILLXYR"},"content":"![listCommand](./images/list.png)"},{"lineNumber":233,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":234,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":235,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":236,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":237,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":238,"author":{"gitId":"BILLXYR"},"content":"### **2.7 Marking a Task as done : done**"},{"lineNumber":239,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":240,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to mark certain tasks they have done."},{"lineNumber":241,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":242,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have previously add an ip task to the list and i have done it. Now, i want"},{"lineNumber":243,"author":{"gitId":"BILLXYR"},"content":"to make the task as done."},{"lineNumber":244,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":245,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":246,"author":{"gitId":"BILLXYR"},"content":"*Format*: `done [task index]`"},{"lineNumber":247,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":248,"author":{"gitId":"BILLXYR"},"content":"we first use list to find the index of the task. For example, in this case, the index "},{"lineNumber":249,"author":{"gitId":"BILLXYR"},"content":"for the ip task is taken as 2."},{"lineNumber":250,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":251,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `done 2`"},{"lineNumber":252,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":253,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":254,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":255,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":256,"author":{"gitId":"BILLXYR"},"content":"![doneCommand](./images/done.png)"},{"lineNumber":257,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":258,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":259,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":260,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":261,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":262,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":263,"author":{"gitId":"BILLXYR"},"content":"### **2.8 Delete the task : delete**"},{"lineNumber":264,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":265,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to delete certain tasks."},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have previously add an ip task to the list. Now, i want"},{"lineNumber":268,"author":{"gitId":"BILLXYR"},"content":"to delete the task."},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"BILLXYR"},"content":"*Format*: `delete [task index]`"},{"lineNumber":272,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":273,"author":{"gitId":"BILLXYR"},"content":"we first use list to find the index of the task. For example, in this case, the index "},{"lineNumber":274,"author":{"gitId":"BILLXYR"},"content":"for the ip task is taken as 3."},{"lineNumber":275,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":276,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `delete 3`"},{"lineNumber":277,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":278,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":279,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":280,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":281,"author":{"gitId":"BILLXYR"},"content":"![deleteCommand](./images/delete.png)"},{"lineNumber":282,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":285,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":286,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":287,"author":{"gitId":"BILLXYR"},"content":"### **2.9 Find a certain task: find**"},{"lineNumber":288,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":289,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to find a certain task from the list and look at the detail."},{"lineNumber":290,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":291,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i want to find when is my ip due."},{"lineNumber":292,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":293,"author":{"gitId":"BILLXYR"},"content":"*Format*: `find [taskName]`"},{"lineNumber":294,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":295,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `find ip`"},{"lineNumber":296,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":297,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*:"},{"lineNumber":298,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":299,"author":{"gitId":"BILLXYR"},"content":"![findCommand](./images/find.png)"},{"lineNumber":300,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":301,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":302,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":303,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":304,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":305,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":306,"author":{"gitId":"BILLXYR"},"content":"###  **2.10 Ending a session : bye**"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"BILLXYR"},"content":"This feature allows users to quit the application after they have done what they want"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"BILLXYR"},"content":"*Usage*: i have done adding my task and now i want to quit the application."},{"lineNumber":311,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":312,"author":{"gitId":"BILLXYR"},"content":"*Format*: `bye`"},{"lineNumber":313,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":314,"author":{"gitId":"BILLXYR"},"content":"*Examples*: `bye`"},{"lineNumber":315,"author":{"gitId":"-"},"content":" "},{"lineNumber":316,"author":{"gitId":"BILLXYR"},"content":"*Expected Outcome*: Your application should be closed in 1 second. "},{"lineNumber":317,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":318,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":319,"author":{"gitId":"BILLXYR"},"content":"Navigate back to the feature list: [2. Features and Usage](#2-features-and-usage)"},{"lineNumber":320,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":321,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":322,"author":{"gitId":"BILLXYR"},"content":"## 3. Code Summary"},{"lineNumber":323,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":324,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":325,"author":{"gitId":"BILLXYR"},"content":"Index | Command to Use | Format, examples |"},{"lineNumber":326,"author":{"gitId":"BILLXYR"},"content":"| ------------ | ------------ | ------------- |"},{"lineNumber":327,"author":{"gitId":"BILLXYR"},"content":"1 | Find the list of command | `help`, e.g.,`help` |"},{"lineNumber":328,"author":{"gitId":"BILLXYR"},"content":"2 | Save the task | `save`, e.g.,  `save` |"},{"lineNumber":329,"author":{"gitId":"BILLXYR"},"content":"3 | Add a general ToDo task | `todo [newTask]`, e.g., `todo ip` |                 "},{"lineNumber":330,"author":{"gitId":"BILLXYR"},"content":"4 | Add a Deadline task | `deadline [newTask] /by DD/MM/YYYY HHmm`, e.g, `deadline ip /by 02/08/2020 1900` |"},{"lineNumber":331,"author":{"gitId":"BILLXYR"},"content":"5 | Adding an Event | `event [newTask] /at DD/MM/YYYY HHmm`, e.g., `event assignment /at 02/08/2020 1900` |"},{"lineNumber":332,"author":{"gitId":"BILLXYR"},"content":"6 | Listing out all Tasks | `list`, e.g., `list` |"},{"lineNumber":333,"author":{"gitId":"BILLXYR"},"content":"7 | Marking a Task as done | `done [task index]`, e.g., `done 2` |"},{"lineNumber":334,"author":{"gitId":"BILLXYR"},"content":"8 | Delete the task | `delete [task index]`, e.g, `delete 3` |"},{"lineNumber":335,"author":{"gitId":"BILLXYR"},"content":"9 | Find a certain task | `find [taskName]`, e.g., `find ip` |"},{"lineNumber":336,"author":{"gitId":"BILLXYR"},"content":"10 | Ending a session | `bye`, e.g., `bye` |"},{"lineNumber":337,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":338,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":339,"author":{"gitId":"BILLXYR"},"content":"## 4. Useful Resources"},{"lineNumber":340,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":341,"author":{"gitId":"BILLXYR"},"content":"1. [CheckStyle Tutorial](https://se-education.org/guides/tutorials/checkstyle.html)"},{"lineNumber":342,"author":{"gitId":"BILLXYR"},"content":"2. [Text UI Testing Tutorial](https://se-education.org/guides/tutorials/textUiTesting.html)"},{"lineNumber":343,"author":{"gitId":"BILLXYR"},"content":"3. [Working with Jar files Tutorial](https://se-education.org/guides/tutorials/jar.html)"},{"lineNumber":344,"author":{"gitId":"BILLXYR"},"content":"4. [Gradle Tutorial](https://se-education.org/guides/tutorials/gradle.html)"},{"lineNumber":345,"author":{"gitId":"BILLXYR"},"content":"5. [JavaFX Tutorial](https://se-education.org/guides/tutorials/javaFx.html)"},{"lineNumber":346,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"-":18,"BILLXYR":328}},{"path":"src/main/java/Bill.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" * Represents Bill class, which is the main control for the Bill application such as the logic of Bill."},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"public class Bill {"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"    private static final String filePath \u003d \"./data/bill.txt\";"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"    private static List\u003cTask\u003e listOfContents;"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    private static Parser parse;"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"    private static boolean isEnded \u003d false;"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"     * Initialize a Bill instance."},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    Bill() throws IOException {"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"        Ui ui \u003d new Ui(filePath);"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"        ui.welcome_message();"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"        Storage storage \u003d new Storage(filePath);"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"        storage.checkFile(filePath);"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"        listOfContents \u003d storage.getListOfContents();"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"        TaskList taskList \u003d new TaskList(listOfContents);"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"        parse.initiateTaskList(taskList);"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"     * Generates a response according to the user command."},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"     * @param input User command."},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"     * @return Response string."},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"    public String getResponse(String input) {"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"            String response \u003d parse.processInput(input);"},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"            if (Parser.isEnded()) {"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"                this.isEnded \u003d true;"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"            return response;"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"        } catch (InvalidException e) {"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"            return Ui.getErrorMessage(e.getMessage());"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"     * Checks if the application window should be close by checking"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":"     * whether the users have choose to close it using bye command"},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"     * @return true if the application window can be closed, false otherwise."},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"    public static boolean isEnded() {"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"        return isEnded;"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"}"},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":""}],"authorContributionMap":{"BILLXYR":56}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents a Deadline class and consists of methods related to Deadline Task assigned."},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    protected String deadline;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     * Contructs an event object."},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"     * @param newTask Name of event."},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"     * @param deadline Time at which event happens."},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    public Deadline(String newTask, String deadline) {"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"        super(newTask);"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"     * Return the file format form for the task."},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"    public String fileFormat() {"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"        return \"D\" + \" | \" + super.fileFormat() + \" | \" + deadline;"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"     * Return the converted time form of the task."},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"    public String timeConverted() {"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"        TimeParser inputTime \u003d new TimeParser(deadline);"},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"        String outputTime \u003d inputTime.timeConverter();"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"        return \"D\" + \" | \" + super.fileFormat() + \" | \" + outputTime;"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"     * Override the toString() method to suit the need of the DEADLINE class."},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"        TimeParser inputTime \u003d new TimeParser(deadline);"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"        String outputTime \u003d inputTime.timeConverter();"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"        return \"D\" + \" | \" + super.fileFormat() + \" | \" + outputTime;"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":45}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"import javafx.geometry.Insets;"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":" * An example of a custom control using FXML."},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":" * containing text from the speaker."},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"public class DialogBox extends HBox {"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"    private Label dialog;"},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"    private ImageView displayPicture;"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"     * Constructor for DialogBox and initiate a dialogbox and load the fxml file."},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"     * @param text Input text."},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"     * @param img Image of the user or Duke."},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"            fxmlLoader.load();"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"        } catch (IOException e) {"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":"            e.printStackTrace();"},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"        dialog.setText(text);"},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"        displayPicture.setImage(img);"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"        setBackground();"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"    private void flip() {"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"        Collections.reverse(tmp);"},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"     * Adds padding."},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"    private void setBackground() {"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":"        Background dukeBackground \u003d new Background(new BackgroundFill("},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"                Color.AQUAMARINE, new CornerRadii(20), new Insets(8, 8, 8, 8)));"},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":"        this.setBackground(dukeBackground);"},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":"     * Return the user\u0027s dialog box."},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":"     * @param text User command."},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":"     * @param img User image."},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"     * @return The user\u0027s dialog box."},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":83,"author":{"gitId":"BILLXYR"},"content":"        return new DialogBox(text, img);"},{"lineNumber":84,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":86,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"BILLXYR"},"content":"     * Return the Bill\u0027s dialog box."},{"lineNumber":88,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"BILLXYR"},"content":"     * @param text Bill\u0027s response."},{"lineNumber":90,"author":{"gitId":"BILLXYR"},"content":"     * @param img Bill\u0027s image."},{"lineNumber":91,"author":{"gitId":"BILLXYR"},"content":"     * @return The Bill\u0027s dialog box."},{"lineNumber":92,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"BILLXYR"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":94,"author":{"gitId":"BILLXYR"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":95,"author":{"gitId":"BILLXYR"},"content":"        db.flip();"},{"lineNumber":96,"author":{"gitId":"BILLXYR"},"content":"        return db;"},{"lineNumber":97,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":98}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents a Event class and consists of methods related to Event Task assigned."},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    protected String duration;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     * Contructor for an event object."},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     * @param newTask Name of event."},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"     * @param duration Time at which event happens."},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    public Event(String newTask, String duration) {"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"        super(newTask);"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"        this.duration \u003d duration;"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"     * Return the file format form for the task."},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"    public String fileFormat() {"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"        return \"E\" + \" | \" + super.fileFormat() + \" | \" + duration;"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"     * Return the converted time form of the task."},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"    public String timeConverted() {"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"        TimeParser inputTime \u003d new TimeParser(duration);"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"        String outputTime \u003d inputTime.timeConverter();"},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"        return \"E\" + \" | \" + super.fileFormat() + \" | \" + outputTime;"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"     * Override the toString() method to suit the need of the EVENT class."},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"        TimeParser inputTime \u003d new TimeParser(duration);"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"        String outputTime \u003d inputTime.timeConverter();"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"        return \"E\" + \" | \" + super.fileFormat() + \" | \" + outputTime;"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"}"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":""}],"authorContributionMap":{"BILLXYR":45}},{"path":"src/main/java/InvalidDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents an InvalidDeadlineException class and handles the exceptions related"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" * to invalid deadline tasks assigned."},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"public class InvalidDeadlineException extends InvalidException {"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"     * Returns a InvalidDeadlineException."},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     * @param message Message."},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    public InvalidDeadlineException(String message) {"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":15}},{"path":"src/main/java/InvalidDeleteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents an InvalidDeleteException class and handles the exceptions related"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" * to invalid DETELE command."},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"public class InvalidDeleteException extends InvalidException {"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"     * Returns a InvalidDeleteException."},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"     * @param message Message."},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"    public InvalidDeleteException(String message) {"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":14}},{"path":"src/main/java/InvalidDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents an InvalidDoneException class and handles the exceptions related"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" * to invalid DONE command."},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"public class InvalidDoneException extends InvalidException {"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"     * Returns a InvalidDoneException."},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     * @param message Message."},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    public InvalidDoneException(String message) {"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":15}},{"path":"src/main/java/InvalidEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents an InvalidEventException class and handles the exceptions related"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" * to invalid event tasks assigned."},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"public class InvalidEventException extends InvalidException {"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"     * Returns a InvalidEventExceptio."},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     * @param message Message."},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    public InvalidEventException(String message) {"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":15}},{"path":"src/main/java/InvalidException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents an InvalidException class and handles the exceptions related"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" * to a general invalid user inputs."},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"public class InvalidException extends Exception {"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"     * Returns a InvalidException."},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     * @param message Message."},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    public InvalidException(String message) {"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":15}},{"path":"src/main/java/InvalidTodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":" * Represents an InvalidTodoException class and handles the exceptions related"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * to a invalid TODO tasks assign."},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"public class InvalidTodoException extends InvalidException {"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"     * Returns a InvalidTodoException."},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"     * @param message Message."},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"    public InvalidTodoException(String message) {"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":14}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":" * A GUI for Bill using FXML."},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    private Bill duke \u003d new Bill();"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"     * Constructor for the Main class."},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"    public Main() throws IOException {"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"     * Starts the application."},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"     * @param stage"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"    public void start(Stage stage) {"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"            stage.setScene(scene);"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"            stage.show();"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":42}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"import javafx.util.Duration;"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"    private static final double delayTime \u003d 1;"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"    private Bill duke;"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bill.png\"));"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"     * Initializes the Application."},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"     * Sets the Bill object. Showing the welcoming message to user when they first open the application."},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"     * @param d The Bill object"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"    public void setDuke(Bill d) {"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"        duke \u003d d;"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":"                DialogBox.getDukeDialog(Ui.welcome_message(), dukeImage)"},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"    private void handleUserInput() {"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":"        );"},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"        userInput.clear();"},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":"        if (Bill.isEnded()) {"},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":"            PauseTransition delay \u003d new PauseTransition((Duration.seconds(delayTime)));"},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":"            delay.setOnFinished(event -\u003e System.exit(0));"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"            delay.play();"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":68}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":" * Represents a Parser class and consists of methods to process user command."},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    private static TaskList listOfContent;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"    private static boolean isEnded \u003d false;"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     * Returns a boolean to indicate whether program should exit."},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"     * @param input user input."},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"     * @return Returns a boolean."},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    public static boolean exit(String input) {"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"        return input.equals(\"bye\");"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"     * Returns a boolean to indicate whether user want to end the application."},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"     * @return Returns a boolean. Return true is the users want to end the program and false otherwise."},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"    public static boolean isEnded() {"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"        return isEnded;"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"     * Returns the list of tasks the users have added."},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"     * @return Returns the tasks list that contains the tasks that users have added."},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"    public TaskList getListOfContent() {"},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"        return listOfContent;"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"     * initiate taskList for Parser."},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"     * @param list TaskList that manages tasks."},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"    public static void initiateTaskList(TaskList list) {"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"        listOfContent \u003d list;"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"     * Process a user\u0027s DONE command."},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"     * @param input A string that consist of user\u0027s command."},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":"     * @return The action that Bill will execute after process the command."},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"    protected static String processDoneCommand(String input) throws InvalidException {"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"        String[] isDone \u003d input.split(\" \");"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"        if (isDone.length \u003d\u003d 1) {"},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidDoneException(\"OOPS!!! please provide me with the task to be marked as done\");"},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"        if (isDone.length \u003e 2) {"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidDoneException(\"OOPS!!! I can only mark one task as done at a time\");"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":"        String lastChar \u003d isDone[isDone.length - 1];"},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"        int index \u003d Integer.parseInt(lastChar);"},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":"        if (index \u003e listOfContent.getSizeOfList()) {"},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"            int noOfTasks \u003d listOfContent.getSizeOfList();"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidException(\"There are only \" + noOfTasks"},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"                    + \" tasks in the list; Please restate the task to be mark as done\");"},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":"        if (index \u003c\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidException(\"Please choose a task to mark as done, the index start from 1\");"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":"        Task current \u003d listOfContent.getTheList().get(index - 1);"},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"        current.setTaskAsDone();"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":"        return current.timeConverted();"},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"     * Process a user\u0027s DELETE command."},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"     * @param input A string that consist of user\u0027s command."},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":"     * @return The action that Bill will execute after process the command."},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":"    protected static String processDeleteCommand(String input) throws InvalidException {"},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":"        String[] isDone \u003d input.split(\" \");"},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":"        if (isDone.length \u003d\u003d 1) {"},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidDeleteException(\"OOPS!!! please provide me with the task to be deleted\");"},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":83,"author":{"gitId":"BILLXYR"},"content":"        if (isDone.length \u003e 2) {"},{"lineNumber":84,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidDeleteException(\"OOPS!!! I can only delete one task at a time\");"},{"lineNumber":85,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":87,"author":{"gitId":"BILLXYR"},"content":"        String lastChar \u003d isDone[isDone.length - 1];"},{"lineNumber":88,"author":{"gitId":"BILLXYR"},"content":"        int index \u003d Integer.parseInt(lastChar);"},{"lineNumber":89,"author":{"gitId":"BILLXYR"},"content":"        if (index \u003e listOfContent.getSizeOfList()) {"},{"lineNumber":90,"author":{"gitId":"BILLXYR"},"content":"            int noOfTasks \u003d listOfContent.getSizeOfList();"},{"lineNumber":91,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidException(\"There are only \" + noOfTasks"},{"lineNumber":92,"author":{"gitId":"BILLXYR"},"content":"                    + \" tasks in the list; Please restate the task to be deleted\");"},{"lineNumber":93,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"BILLXYR"},"content":"        if (index \u003c\u003d 0) {"},{"lineNumber":95,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidException(\"Please choose a task to delete, the index start from 1\");"},{"lineNumber":96,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"BILLXYR"},"content":"        Task toBeRemove \u003d listOfContent.getTheList().get(index - 1);"},{"lineNumber":98,"author":{"gitId":"BILLXYR"},"content":"        int noOfTasksLeft \u003d listOfContent.getSizeOfList();"},{"lineNumber":99,"author":{"gitId":"BILLXYR"},"content":"        return listOfContent.removeTask(index - 1);"},{"lineNumber":100,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"BILLXYR"},"content":"     * Process a user\u0027s TODO command."},{"lineNumber":103,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"BILLXYR"},"content":"     * @param input A string that consist of user\u0027s command."},{"lineNumber":105,"author":{"gitId":"BILLXYR"},"content":"     * @return The action that Bill will execute after process the command."},{"lineNumber":106,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"BILLXYR"},"content":"    protected static String processTodoCommand(String input) throws InvalidException {"},{"lineNumber":108,"author":{"gitId":"BILLXYR"},"content":"        String[] isDone \u003d input.split(\" \");"},{"lineNumber":109,"author":{"gitId":"BILLXYR"},"content":"        String firstChar \u003d isDone[0];"},{"lineNumber":110,"author":{"gitId":"BILLXYR"},"content":"        if (isDone.length \u003d\u003d 1) {"},{"lineNumber":111,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidTodoException(\"OOPS!!! The description of a todo cannot be empty.\""},{"lineNumber":112,"author":{"gitId":"BILLXYR"},"content":"                    + \"please provide me with the task to be completed\");"},{"lineNumber":113,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"BILLXYR"},"content":"        ToDo newTask \u003d new ToDo(input.substring(firstChar.length() + 1));"},{"lineNumber":115,"author":{"gitId":"BILLXYR"},"content":"        listOfContent.addTask(newTask);"},{"lineNumber":116,"author":{"gitId":"BILLXYR"},"content":"        return listOfContent.addStringTask(newTask);"},{"lineNumber":117,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"BILLXYR"},"content":"     * Process a user\u0027s DEADLINE command."},{"lineNumber":120,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"BILLXYR"},"content":"     * @param input A string that consist of user\u0027s command."},{"lineNumber":122,"author":{"gitId":"BILLXYR"},"content":"     * @return The action that Bill will execute after process the command."},{"lineNumber":123,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"BILLXYR"},"content":"    protected static String processDeadlineCommand(String input) throws InvalidException {"},{"lineNumber":125,"author":{"gitId":"BILLXYR"},"content":"        String[] isDone \u003d input.split(\" \");"},{"lineNumber":126,"author":{"gitId":"BILLXYR"},"content":"        String firstChar \u003d isDone[0];"},{"lineNumber":127,"author":{"gitId":"BILLXYR"},"content":"        if (isDone.length \u003d\u003d 1) {"},{"lineNumber":128,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidDeadlineException(\"OOPS!!! The description of a task cannot be empty.\""},{"lineNumber":129,"author":{"gitId":"BILLXYR"},"content":"                    + \"please provide me with the name and duration of the task to be completed\");"},{"lineNumber":130,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"BILLXYR"},"content":"        if (input.split(\"/by\").length \u003c 2) {"},{"lineNumber":132,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidDeadlineException(\"OOPS!!! please provide me with the\""},{"lineNumber":133,"author":{"gitId":"BILLXYR"},"content":"                    + \" duration of the task to be completed\");"},{"lineNumber":134,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"BILLXYR"},"content":"            int timeLength \u003d isDone[isDone.length - 1].length();"},{"lineNumber":136,"author":{"gitId":"BILLXYR"},"content":"            int dateLength \u003d isDone[isDone.length - 2].length();"},{"lineNumber":137,"author":{"gitId":"BILLXYR"},"content":"            if (timeLength \u003c 4 || dateLength \u003c 10 ) {"},{"lineNumber":138,"author":{"gitId":"BILLXYR"},"content":"                throw new InvalidDeadlineException(\"Fail to add task :( . \""},{"lineNumber":139,"author":{"gitId":"BILLXYR"},"content":"                        + \"Please check the time and date format again. \""},{"lineNumber":140,"author":{"gitId":"BILLXYR"},"content":"                        + \"The correct format should be dd/mm/yyyy tttt. Eg: 02/08/2019 1800\");"},{"lineNumber":141,"author":{"gitId":"BILLXYR"},"content":"            } else {"},{"lineNumber":142,"author":{"gitId":"BILLXYR"},"content":"                String slashFirst \u003d String.valueOf(isDone[isDone.length - 2].charAt(2));"},{"lineNumber":143,"author":{"gitId":"BILLXYR"},"content":"                String slashSecond \u003d String.valueOf(isDone[isDone.length - 2].charAt(5));"},{"lineNumber":144,"author":{"gitId":"BILLXYR"},"content":"                if (!slashFirst.equals(\"/\") || !slashSecond.equals(\"/\")) {"},{"lineNumber":145,"author":{"gitId":"BILLXYR"},"content":"                    throw new InvalidDeadlineException(\"Fail to add task :( . \""},{"lineNumber":146,"author":{"gitId":"BILLXYR"},"content":"                            + \"Please check the time and date format again. \""},{"lineNumber":147,"author":{"gitId":"BILLXYR"},"content":"                            + \"The correct format should be dd/mm/yyyy tttt. Eg: 02/08/2019 1800\");"},{"lineNumber":148,"author":{"gitId":"BILLXYR"},"content":"                }"},{"lineNumber":149,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"BILLXYR"},"content":"        int index \u003d input.indexOf(\"/by\");"},{"lineNumber":152,"author":{"gitId":"BILLXYR"},"content":"        String task \u003d input.substring(firstChar.length() + 1, index);"},{"lineNumber":153,"author":{"gitId":"BILLXYR"},"content":"        String time \u003d input.substring(index + 4);"},{"lineNumber":154,"author":{"gitId":"BILLXYR"},"content":"        Deadline deadline \u003d new Deadline(task, time);"},{"lineNumber":155,"author":{"gitId":"BILLXYR"},"content":"        listOfContent.addTask(deadline);"},{"lineNumber":156,"author":{"gitId":"BILLXYR"},"content":"        return listOfContent.addStringTask(deadline);"},{"lineNumber":157,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"BILLXYR"},"content":"     * Process a user\u0027s EVENT command."},{"lineNumber":160,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":161,"author":{"gitId":"BILLXYR"},"content":"     * @param input A string that consist of user\u0027s command."},{"lineNumber":162,"author":{"gitId":"BILLXYR"},"content":"     * @return The action that Bill will execute after process the command."},{"lineNumber":163,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"BILLXYR"},"content":"    protected static String processEventCommand(String input) throws InvalidException {"},{"lineNumber":165,"author":{"gitId":"BILLXYR"},"content":"        String[] isDone \u003d input.split(\" \");"},{"lineNumber":166,"author":{"gitId":"BILLXYR"},"content":"        String firstChar \u003d isDone[0];"},{"lineNumber":167,"author":{"gitId":"BILLXYR"},"content":"        if (isDone.length \u003d\u003d 1) {"},{"lineNumber":168,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidEventException(\"OOPS!!! The description of a task cannot be empty.\""},{"lineNumber":169,"author":{"gitId":"BILLXYR"},"content":"                    + \"please provide me with the name and time of the task\");"},{"lineNumber":170,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"BILLXYR"},"content":"        if (input.split(\"/at\").length \u003c 2) {"},{"lineNumber":172,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidDeadlineException(\"OOPS!!! please provide me with the\""},{"lineNumber":173,"author":{"gitId":"BILLXYR"},"content":"                    + \" time of the task to be completed\");"},{"lineNumber":174,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":175,"author":{"gitId":"BILLXYR"},"content":"            int timeLength \u003d isDone[isDone.length - 1].length();"},{"lineNumber":176,"author":{"gitId":"BILLXYR"},"content":"            int dateLength \u003d isDone[isDone.length - 2].length();"},{"lineNumber":177,"author":{"gitId":"BILLXYR"},"content":"            if (timeLength \u003c 4 || dateLength \u003c 10 ) {"},{"lineNumber":178,"author":{"gitId":"BILLXYR"},"content":"                throw new InvalidEventException(\"Fail to add task :( . \""},{"lineNumber":179,"author":{"gitId":"BILLXYR"},"content":"                        + \"Please check the time and date format again. \""},{"lineNumber":180,"author":{"gitId":"BILLXYR"},"content":"                        + \"The correct format should be dd/mm/yyyy tttt. Eg: 02/08/2019 1800\");"},{"lineNumber":181,"author":{"gitId":"BILLXYR"},"content":"            } else {"},{"lineNumber":182,"author":{"gitId":"BILLXYR"},"content":"                String slashFirst \u003d String.valueOf(isDone[isDone.length - 2].charAt(2));"},{"lineNumber":183,"author":{"gitId":"BILLXYR"},"content":"                String slashSecond \u003d String.valueOf(isDone[isDone.length - 2].charAt(5));"},{"lineNumber":184,"author":{"gitId":"BILLXYR"},"content":"                if (!slashFirst.equals(\"/\") || !slashSecond.equals(\"/\")) {"},{"lineNumber":185,"author":{"gitId":"BILLXYR"},"content":"                    throw new InvalidEventException(\"Fail to add task :( . \""},{"lineNumber":186,"author":{"gitId":"BILLXYR"},"content":"                            + \"Please check the time and date format again. \""},{"lineNumber":187,"author":{"gitId":"BILLXYR"},"content":"                            + \"The correct format should be dd/mm/yyyy tttt. Eg: 02/08/2019 1800\");"},{"lineNumber":188,"author":{"gitId":"BILLXYR"},"content":"                }"},{"lineNumber":189,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":190,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"BILLXYR"},"content":"        int index \u003d input.indexOf(\"/at\");"},{"lineNumber":192,"author":{"gitId":"BILLXYR"},"content":"        String task \u003d input.substring(firstChar.length() + 1, index);"},{"lineNumber":193,"author":{"gitId":"BILLXYR"},"content":"        String duration \u003d input.substring(index + 4);"},{"lineNumber":194,"author":{"gitId":"BILLXYR"},"content":"        Task event \u003d new Event(task, duration);"},{"lineNumber":195,"author":{"gitId":"BILLXYR"},"content":"        listOfContent.addTask(event);"},{"lineNumber":196,"author":{"gitId":"BILLXYR"},"content":"        return listOfContent.addStringTask(event);"},{"lineNumber":197,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"BILLXYR"},"content":"     * Process a user\u0027s SAVE command."},{"lineNumber":200,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":201,"author":{"gitId":"BILLXYR"},"content":"     * @return The action that Bill will execute after process the command."},{"lineNumber":202,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"BILLXYR"},"content":"    protected static String processSaveCommand() {"},{"lineNumber":204,"author":{"gitId":"BILLXYR"},"content":"        String message \u003d \"The list has been save successfully! \\n\";"},{"lineNumber":205,"author":{"gitId":"BILLXYR"},"content":"        return message;"},{"lineNumber":206,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"BILLXYR"},"content":"     * Process a user\u0027s HELP command."},{"lineNumber":209,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"BILLXYR"},"content":"     * @return The action that Bill will execute after process the command."},{"lineNumber":211,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"BILLXYR"},"content":"    protected static String processHelpCommand() {"},{"lineNumber":213,"author":{"gitId":"BILLXYR"},"content":"        String toDoCommand \u003d \"Use TODO to add a new task. Format todo [taskName], Eg: todo ip \\n\";"},{"lineNumber":214,"author":{"gitId":"BILLXYR"},"content":"        String saveCommand \u003d \"\\n Use SAVE to save the tasks added. Format save, Eg: save \\n\";"},{"lineNumber":215,"author":{"gitId":"BILLXYR"},"content":"        String deleteCommand \u003d \"\\n Use DELETE a new task. Format delete [taskIndex], Eg: delete 5 \\n\";"},{"lineNumber":216,"author":{"gitId":"BILLXYR"},"content":"        String findCommand \u003d \"\\n Use FIND to find a new task. Format find [taskName], Eg: find ip \\n\";"},{"lineNumber":217,"author":{"gitId":"BILLXYR"},"content":"        String eventCommand \u003d \"\\n Use EVENT to add a new task with date and time. \""},{"lineNumber":218,"author":{"gitId":"BILLXYR"},"content":"                + \" Format event [taskName] /at dd/mm/yyyy tttt , Eg: event ip /at 02/08/2019 0800 \\n\";"},{"lineNumber":219,"author":{"gitId":"BILLXYR"},"content":"        String deadlineCommand \u003d \"\\n Use DEADLINE to add a new task with date and time. \""},{"lineNumber":220,"author":{"gitId":"BILLXYR"},"content":"                + \" Format deadline [taskName] /by dd/mm/yyyy tttt , Eg: deadline ip /at 02/08/2019 0800 \\n\";"},{"lineNumber":221,"author":{"gitId":"BILLXYR"},"content":"        String listCommand \u003d \"\\n use LIST to find the lists of task. Format: list. Eg: list \\n\";"},{"lineNumber":222,"author":{"gitId":"BILLXYR"},"content":"        String doneCommand \u003d \"\\n Use DONE to mark a task as done. Format: done [taskIndex], Eg: done 5 \\n\";"},{"lineNumber":223,"author":{"gitId":"BILLXYR"},"content":"        String byeCommand \u003d \"\\n Use BYE to exit from the application. Format: bye. Eg: bye \\n\";"},{"lineNumber":224,"author":{"gitId":"BILLXYR"},"content":"        String ending \u003d \"\\n Please use the above mentioned command, other command are not supported :( \";"},{"lineNumber":225,"author":{"gitId":"BILLXYR"},"content":"        return toDoCommand + deleteCommand"},{"lineNumber":226,"author":{"gitId":"BILLXYR"},"content":"                + findCommand + saveCommand"},{"lineNumber":227,"author":{"gitId":"BILLXYR"},"content":"                + eventCommand + deadlineCommand + listCommand + doneCommand + byeCommand + ending;"},{"lineNumber":228,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":230,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"BILLXYR"},"content":"     * Processes input and produce the require output according to the command."},{"lineNumber":232,"author":{"gitId":"BILLXYR"},"content":"     * @param input user input."},{"lineNumber":233,"author":{"gitId":"BILLXYR"},"content":"     * @return the output after receiving the command."},{"lineNumber":234,"author":{"gitId":"BILLXYR"},"content":"     * @throws InvalidException InvalidException if input is illegal."},{"lineNumber":235,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"BILLXYR"},"content":"    public static String processInput(String input) throws InvalidException {"},{"lineNumber":237,"author":{"gitId":"BILLXYR"},"content":"        String[] isDone \u003d input.split(\" \");"},{"lineNumber":238,"author":{"gitId":"BILLXYR"},"content":"        String firstChar \u003d isDone[0];"},{"lineNumber":239,"author":{"gitId":"BILLXYR"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":240,"author":{"gitId":"BILLXYR"},"content":"            Storage.write(listOfContent);"},{"lineNumber":241,"author":{"gitId":"BILLXYR"},"content":"            isEnded \u003d true;"},{"lineNumber":242,"author":{"gitId":"BILLXYR"},"content":"            return Ui.exitMessage();"},{"lineNumber":243,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"BILLXYR"},"content":"        if (input.equals(\"help\")) {"},{"lineNumber":245,"author":{"gitId":"BILLXYR"},"content":"            return processHelpCommand();"},{"lineNumber":246,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"BILLXYR"},"content":"        if (input.equals(\"save\")) {"},{"lineNumber":248,"author":{"gitId":"BILLXYR"},"content":"            Storage.write(listOfContent);"},{"lineNumber":249,"author":{"gitId":"BILLXYR"},"content":"            return processSaveCommand();"},{"lineNumber":250,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"BILLXYR"},"content":"        if (input.equals(\"list\")) {"},{"lineNumber":252,"author":{"gitId":"BILLXYR"},"content":"            return listOfContent.showAllContent();"},{"lineNumber":253,"author":{"gitId":"BILLXYR"},"content":"        } else if (firstChar.equals(\"find\")) {"},{"lineNumber":254,"author":{"gitId":"BILLXYR"},"content":"            String keyword \u003d isDone[isDone.length - 1];"},{"lineNumber":255,"author":{"gitId":"BILLXYR"},"content":"            return listOfContent.findKeyword(keyword);"},{"lineNumber":256,"author":{"gitId":"BILLXYR"},"content":"        } else if (firstChar.equals(\"done\")) {"},{"lineNumber":257,"author":{"gitId":"BILLXYR"},"content":"            return processDoneCommand(input);"},{"lineNumber":258,"author":{"gitId":"BILLXYR"},"content":"        } else if (firstChar.equals(\"delete\")) {"},{"lineNumber":259,"author":{"gitId":"BILLXYR"},"content":"            return processDeleteCommand(input);"},{"lineNumber":260,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":261,"author":{"gitId":"BILLXYR"},"content":"            if (firstChar.equals(\"todo\")) {"},{"lineNumber":262,"author":{"gitId":"BILLXYR"},"content":"                return processTodoCommand(input);"},{"lineNumber":263,"author":{"gitId":"BILLXYR"},"content":"            } else if (firstChar.equals(\"deadline\")) {"},{"lineNumber":264,"author":{"gitId":"BILLXYR"},"content":"                return processDeadlineCommand(input);"},{"lineNumber":265,"author":{"gitId":"BILLXYR"},"content":"            } else if (firstChar.equals(\"event\")) {"},{"lineNumber":266,"author":{"gitId":"BILLXYR"},"content":"                return processEventCommand(input);"},{"lineNumber":267,"author":{"gitId":"BILLXYR"},"content":"            } else {"},{"lineNumber":268,"author":{"gitId":"BILLXYR"},"content":"                throw new InvalidException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-( \\n\""},{"lineNumber":269,"author":{"gitId":"BILLXYR"},"content":"                       + \"You can you \\\"help\\\" command to find the list of command to use\");"},{"lineNumber":270,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":271,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"BILLXYR"},"content":"}"},{"lineNumber":274,"author":{"gitId":"BILLXYR"},"content":""}],"authorContributionMap":{"BILLXYR":274}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":" * Represents the Storage class. It is a class consists of methods"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":" * related to storing the list of tasks and reading the file when the"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":" * users just started it and save the file when the user quit."},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    private static String filePath;"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    private static File file;"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    private static List\u003cTask\u003e listOfContents \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"     * Constructor for Storage class."},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"     * @param filePath The file path."},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    Storage (String filePath) {"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"        this.file \u003d file;"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"     * read the content in the file name bill.txt"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"     * @param filePath The file path to be read the file."},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"    protected static String checkFile(String filePath) throws FileNotFoundException {"},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"        Path currentRelativePath \u003d Paths.get(\"\");"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"        String s \u003d currentRelativePath.toAbsolutePath().toString();"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"        java.nio.file.Path path \u003d java.nio.file.Paths.get(s, \"data\");"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"        boolean directoryExists \u003d java.nio.file.Files.exists(path);"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"        if (!directoryExists) {"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"            File dir \u003d new File(String.valueOf(path));"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":"            dir.mkdir();"},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":"        Path getFilePath \u003d Paths.get(s, \"data\", \"bill.txt\");"},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"        filePath \u003d String.valueOf(getFilePath);"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(filePath);"},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"        String message \u003d \"\\n I will open up the file now \\n\";"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"            if (!file.createNewFile()) {"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"                message \u003d message + read(file);"},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"                message \u003d message + \"The file is not exist, i will create a file for the Tasks now \\n\";"},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":"                try {"},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"                    FileWriter fileWriter \u003d new FileWriter(filePath);"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":"                    fileWriter.close();"},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"                    message \u003d message + read(file);"},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":"                } catch (IOException e) {"},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":"                    e.printStackTrace();"},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":"        } catch (IOException e) {"},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"            e.printStackTrace();"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"        message \u003d message + \"\\n remember to use \\\"save\\\" command to save the tasks you have added\";"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":"        return message;"},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":"     * read the content in the file name bill.txt"},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"     * @param file The file path to be read the file."},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":"    public static String read(File file) throws FileNotFoundException {"},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":"        if (!scanner.hasNextLine()) {"},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"            String message \u003d \"\\n There is no tasks in the list yet, please add in the tasks now \\n\";"},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":"            return message;"},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"BILLXYR"},"content":"            String msg \u003d \"\\n The Tasks are shown here: \\n\";"},{"lineNumber":84,"author":{"gitId":"BILLXYR"},"content":"            List\u003cTask\u003e listOfContent \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":85,"author":{"gitId":"BILLXYR"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":86,"author":{"gitId":"BILLXYR"},"content":"                String currentLine \u003d scanner.nextLine();"},{"lineNumber":87,"author":{"gitId":"BILLXYR"},"content":"                boolean containCross \u003d currentLine.contains(\"\\u2718\");"},{"lineNumber":88,"author":{"gitId":"BILLXYR"},"content":"                boolean containTick \u003d currentLine.contains(\"\\u2713\");"},{"lineNumber":89,"author":{"gitId":"BILLXYR"},"content":"                boolean isDone \u003d true;"},{"lineNumber":90,"author":{"gitId":"BILLXYR"},"content":"                if (containCross) {"},{"lineNumber":91,"author":{"gitId":"BILLXYR"},"content":"                    isDone \u003d false;"},{"lineNumber":92,"author":{"gitId":"BILLXYR"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"BILLXYR"},"content":"                if (containTick) {"},{"lineNumber":94,"author":{"gitId":"BILLXYR"},"content":"                    isDone \u003d true;"},{"lineNumber":95,"author":{"gitId":"BILLXYR"},"content":"                }"},{"lineNumber":96,"author":{"gitId":"BILLXYR"},"content":"                Task task \u003d new Task(currentLine, isDone);"},{"lineNumber":97,"author":{"gitId":"BILLXYR"},"content":"                listOfContent.add(task);"},{"lineNumber":98,"author":{"gitId":"BILLXYR"},"content":"                msg \u003d msg + currentLine + \"\\n\";"},{"lineNumber":99,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"BILLXYR"},"content":"            listOfContents \u003d listOfContent;"},{"lineNumber":101,"author":{"gitId":"BILLXYR"},"content":"            return msg;"},{"lineNumber":102,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":105,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"BILLXYR"},"content":"     * Returns the list of tasks that the users have stored in the file."},{"lineNumber":107,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"BILLXYR"},"content":"     * @return The list of tasks that the users have stored in the file."},{"lineNumber":109,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"BILLXYR"},"content":"    public static List\u003cTask\u003e getListOfContents() {"},{"lineNumber":111,"author":{"gitId":"BILLXYR"},"content":"        return listOfContents;"},{"lineNumber":112,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":114,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"BILLXYR"},"content":"     * Stores the updated Lists that contain the tasks to bill.txt."},{"lineNumber":116,"author":{"gitId":"BILLXYR"},"content":"     * @param listOfContent TaskList that manages tasks."},{"lineNumber":117,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"BILLXYR"},"content":"    public static void write(TaskList listOfContent) {"},{"lineNumber":119,"author":{"gitId":"BILLXYR"},"content":"        Path currentRelativePath \u003d Paths.get(\"\");"},{"lineNumber":120,"author":{"gitId":"BILLXYR"},"content":"        String s \u003d currentRelativePath.toAbsolutePath().toString();"},{"lineNumber":121,"author":{"gitId":"BILLXYR"},"content":"        Path getFilePath \u003d Paths.get(s, \"data\", \"bill.txt\");"},{"lineNumber":122,"author":{"gitId":"BILLXYR"},"content":"        filePath \u003d String.valueOf(getFilePath);"},{"lineNumber":123,"author":{"gitId":"BILLXYR"},"content":"        try {"},{"lineNumber":124,"author":{"gitId":"BILLXYR"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath, false);"},{"lineNumber":125,"author":{"gitId":"BILLXYR"},"content":"            for (Task task : listOfContent.getTheList()) {"},{"lineNumber":126,"author":{"gitId":"BILLXYR"},"content":"                fileWriter.write(task.timeConverted() + \"\\n\");"},{"lineNumber":127,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"BILLXYR"},"content":"            fileWriter.close();"},{"lineNumber":129,"author":{"gitId":"BILLXYR"},"content":"        } catch (IOException e) {"},{"lineNumber":130,"author":{"gitId":"BILLXYR"},"content":"            e.printStackTrace();"},{"lineNumber":131,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":133}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents a Task class and consists of methods to handle things that related to the Task."},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"    protected String newTask;"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"    protected boolean isImported;"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"     * Constructs a task object."},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"     * @param newTask Name of task."},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    public Task(String newTask) {"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"        this.newTask \u003d newTask;"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"        this.isImported \u003d false;"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"     * Constructs a task when the task is imported from previous saved file."},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"     * @param newTask Name of the task."},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"     * @param isDone whether the task has been mark done."},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"    protected Task(String newTask, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"        this.newTask \u003d newTask;"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"        this.isImported \u003d true;"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"     * Returns a string representing the status of the task."},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"     * @return Icon of the status of the task."},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"    public String getStatusIcon() {"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"     * Marks the task as done or completed."},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"    public void setTaskAsDone() {"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":"        if (isImported) {"},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"            this.newTask \u003d this.newTask.replace(\"\\u2718\", \"\\u2713\");"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":"            this.isDone \u003d true;"},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"     * Return the file format form for the task."},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"    public String fileFormat() {"},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":"        return this.getStatusIcon() + \" | \" + newTask;"},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":"     * Return the converted time form of the task."},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":"    public String timeConverted() {"},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":"        if (isImported) {"},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":"            return newTask;"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":"            return this.getStatusIcon() + \" | \" + newTask;"},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":"     * To check whether the task contain the keyword searched by the user"},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":"    public boolean containKeyWord(String keyword) {"},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"        return newTask.contains(keyword);"},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":"        String a \u003d String.format(\"[%s] %s\", this.getStatusIcon(), newTask);"},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"        return this.newTask;"},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":82}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" * Represents a TaskList class and consists of methods to handle things that related to the list of tasks."},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"    private List\u003cTask\u003e listOfContents;"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     * Constructor for TaskList object."},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    TaskList() {"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"        listOfContents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"     * Constructor for TaskList object that already consists a list of tasks."},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    TaskList(List\u003cTask\u003e listOfContents) {"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"        this.listOfContents \u003d listOfContents;"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"     * Adds a task to taskList."},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"     * @param task Task to be added."},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"    public void addTask (Task task) throws InvalidException {"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"        int totalTasks \u003d listOfContents.size();"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"        boolean containDuplicate \u003d false;"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"        for (int i \u003d 0; i \u003c totalTasks; i \u003d i + 1) {"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"            if (listOfContents.get(i).isImported) {"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"                if (task.toString().substring(8).equals(listOfContents.get(i).toString().substring(8))"},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"                        \u0026\u0026 task.toString().substring(0, 1).equals(listOfContents.get(i).toString().substring(0, 1))) {"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"                    containDuplicate \u003d true;"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"                    break;"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"            if (task.newTask.equals(listOfContents.get(i).newTask)) {"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"                containDuplicate \u003d true;"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"                break;"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"        if (!containDuplicate) {"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"            listOfContents.add(task);"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":"            throw new InvalidException(\"detect duplicates, the tasks is already in the list\");"},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"     * return the string form of the task added."},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"     * @param task Task to be added."},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"    public String addStringTask (Task task) {"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"        String message \u003d \"Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"        message \u003d message + task.timeConverted() + \"\\n\";"},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":"        int currentSize \u003d listOfContents.size();"},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"        message \u003d message + \"Now you have \" + currentSize + \" tasks in the list. \\n\";"},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":"        return message;"},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":"     * Prints the current task."},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":"     * @param task Task to be printed."},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"    public void showNewContent(Task task) {"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(task.toString());"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(\"Now you have \" + listOfContents.size() + \" tasks in the list.\");"},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":"     * Prints the whole taskList."},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":"    public String showAllContent() {"},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"        int noOfTasks \u003d listOfContents.size();"},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":"        String allTasks \u003d \"Here are the tasks in your list: \\n\";"},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":"        allTasks \u003d allTasks + ui.printLine() + \"\\n\";"},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":"        if (noOfTasks \u003d\u003d 0) {"},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"            String noTasks \u003d \"There is no tasks in the list, please add some tasks first \\n\";"},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":"            allTasks +\u003d noTasks;"},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"BILLXYR"},"content":"            for (int i \u003d 0; i \u003c listOfContents.size(); i \u003d i + 1) {"},{"lineNumber":84,"author":{"gitId":"BILLXYR"},"content":"                String counter \u003d i + 1 + \". \";"},{"lineNumber":85,"author":{"gitId":"BILLXYR"},"content":"                String oneTask \u003d counter + listOfContents.get(i).timeConverted();"},{"lineNumber":86,"author":{"gitId":"BILLXYR"},"content":"                allTasks \u003d allTasks + oneTask + \"\\n\";"},{"lineNumber":87,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"BILLXYR"},"content":"        return allTasks;"},{"lineNumber":90,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":92,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"BILLXYR"},"content":"     * Returns the number of task in the list."},{"lineNumber":94,"author":{"gitId":"BILLXYR"},"content":"     * @return Integer indicating number of task in list."},{"lineNumber":95,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"BILLXYR"},"content":"    public int getSizeOfList() {"},{"lineNumber":97,"author":{"gitId":"BILLXYR"},"content":"        return listOfContents.size();"},{"lineNumber":98,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":100,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":101,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"BILLXYR"},"content":"     * Returns the taskList."},{"lineNumber":103,"author":{"gitId":"BILLXYR"},"content":"     * @return TaskList."},{"lineNumber":104,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"BILLXYR"},"content":"    public List\u003cTask\u003e getTheList() {"},{"lineNumber":106,"author":{"gitId":"BILLXYR"},"content":"        return listOfContents;"},{"lineNumber":107,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":109,"author":{"gitId":"BILLXYR"},"content":"    public void setTaskAsDone(int n) {"},{"lineNumber":110,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":111,"author":{"gitId":"BILLXYR"},"content":"        assert n \u003c\u003d listOfContents.size();"},{"lineNumber":112,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":113,"author":{"gitId":"BILLXYR"},"content":"        Task task \u003d listOfContents.get(n - 1);"},{"lineNumber":114,"author":{"gitId":"BILLXYR"},"content":"        task.setTaskAsDone();"},{"lineNumber":115,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(task.toString());"},{"lineNumber":116,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":118,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"BILLXYR"},"content":"     * Deletes the nth task."},{"lineNumber":120,"author":{"gitId":"BILLXYR"},"content":"     * @param n Index of the task to be deleted."},{"lineNumber":121,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"BILLXYR"},"content":"    public String removeTask(int n) {"},{"lineNumber":123,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":124,"author":{"gitId":"BILLXYR"},"content":"        assert listOfContents.size() \u003c n : \"The number you choose is more than the total number of tasks it contains\";"},{"lineNumber":125,"author":{"gitId":"BILLXYR"},"content":"        String reply \u003d \"Noted. I\u0027ve removed this task: \\n\";"},{"lineNumber":126,"author":{"gitId":"BILLXYR"},"content":"        Task task \u003d listOfContents.get(n);"},{"lineNumber":127,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(task.toString());"},{"lineNumber":128,"author":{"gitId":"BILLXYR"},"content":"        reply \u003d reply + task.toString();"},{"lineNumber":129,"author":{"gitId":"BILLXYR"},"content":"        listOfContents.remove(n);"},{"lineNumber":130,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(\"Now you have \" + listOfContents.size() + \" tasks in the list.\");"},{"lineNumber":131,"author":{"gitId":"BILLXYR"},"content":"        int currentSize \u003d listOfContents.size();"},{"lineNumber":132,"author":{"gitId":"BILLXYR"},"content":"        reply \u003d reply + \"\\n\" + \"Now you have \" + currentSize + \" tasks in the list. \\n\";"},{"lineNumber":133,"author":{"gitId":"BILLXYR"},"content":"        return reply;"},{"lineNumber":134,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":136,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"BILLXYR"},"content":"     * find whether the keyword from the user is in the list"},{"lineNumber":138,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"BILLXYR"},"content":"    public String findKeyword(String keyword) {"},{"lineNumber":140,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":141,"author":{"gitId":"BILLXYR"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":142,"author":{"gitId":"BILLXYR"},"content":"        int noOfTasks \u003d listOfContents.size();"},{"lineNumber":143,"author":{"gitId":"BILLXYR"},"content":"        int counter \u003d 1;"},{"lineNumber":144,"author":{"gitId":"BILLXYR"},"content":"        String tasks \u003d \"Here are the possible matches: \\n\" + ui.printLine() + \"\\n\";"},{"lineNumber":145,"author":{"gitId":"BILLXYR"},"content":"        if (noOfTasks \u003d\u003d 0) {"},{"lineNumber":146,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":147,"author":{"gitId":"BILLXYR"},"content":"            String noTasks \u003d \"There is no tasks in the list, please add some tasks first \\n\";"},{"lineNumber":148,"author":{"gitId":"BILLXYR"},"content":"            tasks \u003d tasks + noTasks;"},{"lineNumber":149,"author":{"gitId":"BILLXYR"},"content":"        } else {"},{"lineNumber":150,"author":{"gitId":"BILLXYR"},"content":"            boolean isTaskFound \u003d false;"},{"lineNumber":151,"author":{"gitId":"BILLXYR"},"content":"            for (int i \u003d 0; i \u003c listOfContents.size(); i \u003d i + 1) {"},{"lineNumber":152,"author":{"gitId":"BILLXYR"},"content":"                if (listOfContents.get(i).containKeyWord(keyword)) {"},{"lineNumber":153,"author":{"gitId":"BILLXYR"},"content":"                    isTaskFound \u003d true;"},{"lineNumber":154,"author":{"gitId":"BILLXYR"},"content":"                    String oneTask \u003d counter + \". \" + listOfContents.get(i).timeConverted();"},{"lineNumber":155,"author":{"gitId":"BILLXYR"},"content":"                    tasks \u003d tasks + oneTask + \"\\n\";"},{"lineNumber":156,"author":{"gitId":"BILLXYR"},"content":"                    counter \u003d counter + 1;"},{"lineNumber":157,"author":{"gitId":"BILLXYR"},"content":"                }"},{"lineNumber":158,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":159,"author":{"gitId":"BILLXYR"},"content":"            if (!isTaskFound) {"},{"lineNumber":160,"author":{"gitId":"BILLXYR"},"content":"                tasks \u003d tasks + \"Sorry, we cannot find a tasks that match the keyword in the list :( \\n\";"},{"lineNumber":161,"author":{"gitId":"BILLXYR"},"content":"            }"},{"lineNumber":162,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"BILLXYR"},"content":"        tasks \u003d tasks + ui.printLine();"},{"lineNumber":164,"author":{"gitId":"BILLXYR"},"content":"        return tasks;"},{"lineNumber":165,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":166}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":" * Represents a Todo class and consists of methods to handle things that related to Todo Task."},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"public class ToDo extends Task {"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"     * Constructor for a todo object."},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"     * @param newTask Name of todo object."},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"    public ToDo(String newTask) {"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"        super(newTask);"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"     * Return the file format form for the task."},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    public String fileFormat() {"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"        return \"T\" + \" | \" + super.fileFormat();"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"     * Return the converted time form of the task."},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"    public String timeConverted() {"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"        return \"T\" + \" | \" + super.fileFormat();"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"     * Override the toString() method to suit the need of the TODO class."},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"        return \"T\" + \" | \" + super.fileFormat(); }"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"}"},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":""}],"authorContributionMap":{"BILLXYR":37}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":" * Represents Ui class and consists of methods to handle things that related to User Interaction."},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"    private static final String horizontal_line \u003d \"------------------------------------------\";"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"    private static final String logo \u003d \"        \\n\""},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"            + \"____       _      _        _ \\n\""},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"            + \"| __ )    (_)    | |      | | \\n\""},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"            + \"|  _ \\\\      | |    | |      | | \\n\""},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"            + \"| |_) |    | |    | |      | |  \\n\""},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"            + \"|____/   |_|   |｜  ｜| \\n\";"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    private static String filepath;"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    private Scanner scanner;"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    public Ui() {"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"    protected Ui(String filePath) {"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"        this.filepath \u003d filePath;"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"     * Returns the user input."},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"     * @return String of user input."},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"    public String getInput() {"},{"lineNumber":32,"author":{"gitId":"BILLXYR"},"content":"        return scanner.nextLine();"},{"lineNumber":33,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":35,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"BILLXYR"},"content":"     * Prints the horizontal line."},{"lineNumber":37,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"BILLXYR"},"content":"    public void printHorizontalLine() {"},{"lineNumber":39,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(horizontal_line);"},{"lineNumber":40,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"BILLXYR"},"content":"    public String printLine() {"},{"lineNumber":42,"author":{"gitId":"BILLXYR"},"content":"        return horizontal_line;"},{"lineNumber":43,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":45,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":46,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"BILLXYR"},"content":"     * Prints the welcome message"},{"lineNumber":48,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"BILLXYR"},"content":"    public static String welcome_message() {"},{"lineNumber":50,"author":{"gitId":"BILLXYR"},"content":"        String message \u003d \"Hello from Bill \\n\" + logo + \"\\n\";"},{"lineNumber":51,"author":{"gitId":"BILLXYR"},"content":"        message \u003d message + horizontal_line + \"\\n \";"},{"lineNumber":52,"author":{"gitId":"BILLXYR"},"content":"        message \u003d message + \"Hello! I\u0027m Bill \\n\" + \"What Can I do for you? \\n\";"},{"lineNumber":53,"author":{"gitId":"BILLXYR"},"content":"        message \u003d message + \"\\n ( You can find a list of command by typing \\\"help \\\" comand \\n eg: help ) \\n\";"},{"lineNumber":54,"author":{"gitId":"BILLXYR"},"content":"        message \u003d message + horizontal_line + \"\\n \";"},{"lineNumber":55,"author":{"gitId":"BILLXYR"},"content":"        Storage storage \u003d new Storage(filepath);"},{"lineNumber":56,"author":{"gitId":"BILLXYR"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"BILLXYR"},"content":"            return message + storage.checkFile(filepath);"},{"lineNumber":58,"author":{"gitId":"BILLXYR"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":59,"author":{"gitId":"BILLXYR"},"content":"            e.printStackTrace();"},{"lineNumber":60,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"BILLXYR"},"content":"        return message;"},{"lineNumber":62,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"BILLXYR"},"content":"    public static String tr() {"},{"lineNumber":64,"author":{"gitId":"BILLXYR"},"content":"        return \"hello\";"},{"lineNumber":65,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":67,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"BILLXYR"},"content":"     * Prints the exit message."},{"lineNumber":69,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"BILLXYR"},"content":"    public static void session_end() {"},{"lineNumber":71,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(horizontal_line);"},{"lineNumber":72,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":73,"author":{"gitId":"BILLXYR"},"content":"        System.out.println(horizontal_line);"},{"lineNumber":74,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"BILLXYR"},"content":"    public static String exitMessage() {"},{"lineNumber":76,"author":{"gitId":"BILLXYR"},"content":"        return horizontal_line + \"\\n\" + \"Bye. Hope to see you again soon! \\n\" + horizontal_line + \"\\n\";"},{"lineNumber":77,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":79,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"BILLXYR"},"content":"     * Returns the error message."},{"lineNumber":81,"author":{"gitId":"BILLXYR"},"content":"     * @param message Error message."},{"lineNumber":82,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"BILLXYR"},"content":"    public static String getErrorMessage(String message) {"},{"lineNumber":84,"author":{"gitId":"BILLXYR"},"content":"        return \"OOPS!!! \" + message;"},{"lineNumber":85,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":86}},{"path":"src/main/java/timeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":" * Represents a TimeParser and consists of methods related to"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":" * processs the string that represent the time and convert it to the desired form."},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"public class TimeParser {"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"    private String inputTime;"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"     * Contructor for a time parser object."},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"     * @param inputTime input time from the user."},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"    public TimeParser(String inputTime) {"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"        this.inputTime \u003d inputTime;"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"     * Return the converted time form of the task."},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"    public String timeConverter() {"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"        LocalDateTime localDateTime \u003d LocalDateTime.parse(inputTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"        return localDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\"));"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":28}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" /\u003e"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"BILLXYR":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"BILLXYR":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":" * Represents Parser Test class and consists of methods to test the Parser."},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"     * Whether the input match the expected output."},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"    void processInputParserTest() {"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"            Parser.processInput(\"hey\");"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"        } catch (InvalidException e) {"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-( \\n\""},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":"                    + \"You can you \\\"help\\\" command to find the list of command to use\", e.getMessage());"},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"BILLXYR"},"content":"     * Whether the user can exit successfully."},{"lineNumber":26,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"BILLXYR"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"BILLXYR"},"content":"    void exitParserTest() {"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"        assertTrue(Parser.exit(\"bye\"));"},{"lineNumber":30,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":31}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":" * Represents Task list Test class and consists of methods to test the Task list."},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":" */"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"public class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"     * Whether the size of the List is the same."},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"    void getSizeOfListUiTest() {"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"BILLXYR"},"content":"        assertEquals(taskList.getSizeOfList(), 0);"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"}"}],"authorContributionMap":{"BILLXYR":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"todo hi"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"todo k"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"todo h"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"todo l"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"list"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"delete 4"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"list"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"delete 4"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"list"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"deadline return book /by Sunday"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"list"}],"authorContributionMap":{"BILLXYR":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"BILLXYR"},"content":"export LC_ALL\u003den_GB.UTF-8"},{"lineNumber":16,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":18,"author":{"gitId":"BILLXYR"},"content":"if !("},{"lineNumber":19,"author":{"gitId":"BILLXYR"},"content":"find ../src/main/java -name \"*.java\" \u003e sources.txt"},{"lineNumber":20,"author":{"gitId":"BILLXYR"},"content":"javac -cp ../src -Xlint:none -d ../bin @sources.txt"},{"lineNumber":21,"author":{"gitId":"BILLXYR"},"content":""},{"lineNumber":22,"author":{"gitId":"BILLXYR"},"content":")"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":29,"author":{"gitId":"BILLXYR"},"content":"java -classpath ../bin Bill \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":36,"BILLXYR":8}},{"path":"text-ui-test/sources.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/InvalidDeadlineException.java"},{"lineNumber":2,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/InvalidEventException.java"},{"lineNumber":3,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/Event.java"},{"lineNumber":4,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/InvalidException.java"},{"lineNumber":5,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/level4.java"},{"lineNumber":6,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/Task.java"},{"lineNumber":7,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/InvalidDeleteException.java"},{"lineNumber":8,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/level3.java"},{"lineNumber":9,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/Deadline.java"},{"lineNumber":10,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/InvalidDoneException.java"},{"lineNumber":11,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/Bill.java"},{"lineNumber":12,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/ToDo.java"},{"lineNumber":13,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/InvalidTodoException.java"},{"lineNumber":14,"author":{"gitId":"BILLXYR"},"content":"../src/main/java/level2.java"}],"authorContributionMap":{"BILLXYR":14}}]
