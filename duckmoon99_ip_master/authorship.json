[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"    archiveBaseName \u003d \"duke-launcher\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"    enableAssertions \u003d true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"duckmoon99":20,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":2,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"This is duckmoon99\u0027s Duke\u0027s user guide. The Duke is a CLI task manager."},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"### Feature 1 - Create, read, update, and delete tasks"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"There are 3 types of tasks"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"- To-do tasks"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"- Deadline tasks"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"- Event tasks"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"So users can choose the appropriate task type. Each task can be marked done."},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"### Feature 2 - Find tasks"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"Find all the tasks quickly by searching keywords."},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"### Feature 3 - Friendly syntax"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"Users can quickly execute commands by simply typing the first few letters of the command, so long as there is no ambiguity. For example, if `list` is the command, typing `l` will suffice because no other commands starts with `l`."},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"For the demonstration below, the full command will be used for the sake of clarity."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"### `todo \u003cdescription\u003e` - Add to-do task"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"Adds a to-do task with the given `description`."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"Example usage: "},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"`todo 2103 ip`"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":"Noted, I have added the following task(s):"},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"[T][âœ—] 2103 ip"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"### `deadline \u003cdescription\u003e /by \u003cdate\u003e` - Add deadline task"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"Adds a deadline task with the given `description`, and deadline by `date`. Date formatted as `yyyy-mm-dd` will be recognized, and will be displayed in a more friendly manner."},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"Example usage 1:"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"`deadline 2103 ip /by next Wednesday`"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"Expected outcome 1:"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":"Noted, I have added the following task(s):"},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"[D][âœ—] 2103 ip (by: next Wednesday)"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"Example usage 2:"},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"`deadline 2103 ip /by 2020-09-20`"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"Expected outcome 2:"},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"Noted, I have added the following task(s):"},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"[D][âœ—] 2103 ip (by: Sep 20 2020)"},{"lineNumber":63,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":64,"author":{"gitId":"duckmoon99"},"content":"### `event \u003cdescription\u003e /at \u003cdate\u003e` - Add event task"},{"lineNumber":65,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":66,"author":{"gitId":"duckmoon99"},"content":"Adds an event task with the given `description`, and period at `date`. Date formatted as `yyyy-mm-dd` will be recognized, and will be displayed in a more friendly manner."},{"lineNumber":67,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":68,"author":{"gitId":"duckmoon99"},"content":"Example usage 1:"},{"lineNumber":69,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":70,"author":{"gitId":"duckmoon99"},"content":"`event 2103 ip /at next week`"},{"lineNumber":71,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":72,"author":{"gitId":"duckmoon99"},"content":"Expected outcome 1:"},{"lineNumber":73,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":74,"author":{"gitId":"duckmoon99"},"content":"Noted, I have added the following task(s):"},{"lineNumber":75,"author":{"gitId":"duckmoon99"},"content":"[E][âœ—] 2103 ip (at: next week)"},{"lineNumber":76,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":77,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":78,"author":{"gitId":"duckmoon99"},"content":"Example usage 2:"},{"lineNumber":79,"author":{"gitId":"duckmoon99"},"content":"`event 2103 ip /at 2020-09-20`"},{"lineNumber":80,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":81,"author":{"gitId":"duckmoon99"},"content":"Expected outcome 2:"},{"lineNumber":82,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":83,"author":{"gitId":"duckmoon99"},"content":"Noted, I have added the following task(s):"},{"lineNumber":84,"author":{"gitId":"duckmoon99"},"content":"[E][âœ—] 2103 ip (at: Sep 20 2020)"},{"lineNumber":85,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":86,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":87,"author":{"gitId":"duckmoon99"},"content":"### `list` - List all tasks"},{"lineNumber":88,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":89,"author":{"gitId":"duckmoon99"},"content":"Lists out all tasks."},{"lineNumber":90,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":91,"author":{"gitId":"duckmoon99"},"content":"Example usage:"},{"lineNumber":92,"author":{"gitId":"duckmoon99"},"content":"`list`"},{"lineNumber":93,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":94,"author":{"gitId":"duckmoon99"},"content":"Expected outcome:"},{"lineNumber":95,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":96,"author":{"gitId":"duckmoon99"},"content":"You currently have 3 task(s)"},{"lineNumber":97,"author":{"gitId":"duckmoon99"},"content":"1. [T][âœ—] 1035 reading"},{"lineNumber":98,"author":{"gitId":"duckmoon99"},"content":"2. [D][âœ“] 2103 ip (by: Sep 20 2020)"},{"lineNumber":99,"author":{"gitId":"duckmoon99"},"content":"3. [E][âœ—] mock exam (at: Sep 23 2020)"},{"lineNumber":100,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":101,"author":{"gitId":"duckmoon99"},"content":"### `done \u003cn\u003e` - Mark task as done"},{"lineNumber":102,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":103,"author":{"gitId":"duckmoon99"},"content":"Marks task indexed at `n` to be done."},{"lineNumber":104,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":105,"author":{"gitId":"duckmoon99"},"content":"Example usage:"},{"lineNumber":106,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":107,"author":{"gitId":"duckmoon99"},"content":"list"},{"lineNumber":108,"author":{"gitId":"duckmoon99"},"content":"done 3"},{"lineNumber":109,"author":{"gitId":"duckmoon99"},"content":"list"},{"lineNumber":110,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":111,"author":{"gitId":"duckmoon99"},"content":"Expected outcome:"},{"lineNumber":112,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":113,"author":{"gitId":"duckmoon99"},"content":"You currently have 3 task(s)"},{"lineNumber":114,"author":{"gitId":"duckmoon99"},"content":"1. [T][âœ—] 1035 reading"},{"lineNumber":115,"author":{"gitId":"duckmoon99"},"content":"2. [D][âœ“] 2103 ip (by: Sep 20 2020)"},{"lineNumber":116,"author":{"gitId":"duckmoon99"},"content":"3. [E][âœ—] mock exam (at: Sep 23 2020)"},{"lineNumber":117,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":118,"author":{"gitId":"duckmoon99"},"content":"Noted, I have marked the following task(s) as done:"},{"lineNumber":119,"author":{"gitId":"duckmoon99"},"content":"[E][âœ“] mock exam (at: Sep 23 2020)"},{"lineNumber":120,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":121,"author":{"gitId":"duckmoon99"},"content":"You currently have 3 task(s)"},{"lineNumber":122,"author":{"gitId":"duckmoon99"},"content":"1. [T][âœ—] 1035 reading"},{"lineNumber":123,"author":{"gitId":"duckmoon99"},"content":"2. [D][âœ“] 2103 ip (by: Sep 20 2020)"},{"lineNumber":124,"author":{"gitId":"duckmoon99"},"content":"3. [E][âœ“] mock exam (at: Sep 23 2020)"},{"lineNumber":125,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":126,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":127,"author":{"gitId":"duckmoon99"},"content":"### `delete \u003cn\u003e` - Delete task"},{"lineNumber":128,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":129,"author":{"gitId":"duckmoon99"},"content":"Deletes task indexed at `n`."},{"lineNumber":130,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":131,"author":{"gitId":"duckmoon99"},"content":"Example usage:"},{"lineNumber":132,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":133,"author":{"gitId":"duckmoon99"},"content":"`delete 3`"},{"lineNumber":134,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":135,"author":{"gitId":"duckmoon99"},"content":"Expected outcome:"},{"lineNumber":136,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":137,"author":{"gitId":"duckmoon99"},"content":"Noted, I have deleted the following task(s):"},{"lineNumber":138,"author":{"gitId":"duckmoon99"},"content":"[E][âœ“] mock exam (at: Sep 23 2020)"},{"lineNumber":139,"author":{"gitId":"duckmoon99"},"content":"You currently have 2 task(s)"},{"lineNumber":140,"author":{"gitId":"duckmoon99"},"content":"1. [T][âœ—] 1035 reading"},{"lineNumber":141,"author":{"gitId":"duckmoon99"},"content":"2. [D][âœ“] 2103 ip (by: Sep 20 2020)"},{"lineNumber":142,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":143,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":144,"author":{"gitId":"duckmoon99"},"content":"### `find \u003ckeyword\u003e` - Find tasks"},{"lineNumber":145,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":146,"author":{"gitId":"duckmoon99"},"content":"Finds all tasks with `keyword` in the their string form."},{"lineNumber":147,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":148,"author":{"gitId":"duckmoon99"},"content":"Example usage:"},{"lineNumber":149,"author":{"gitId":"duckmoon99"},"content":"`find 2103`"},{"lineNumber":150,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":151,"author":{"gitId":"duckmoon99"},"content":"Expected outcome:"},{"lineNumber":152,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":153,"author":{"gitId":"duckmoon99"},"content":"Noted, I have found the following 3 task(s):"},{"lineNumber":154,"author":{"gitId":"duckmoon99"},"content":"1. [T][âœ—] 2103 quiz"},{"lineNumber":155,"author":{"gitId":"duckmoon99"},"content":"2. [D][âœ“] 2103 ip (by: Sep 20 2020)"},{"lineNumber":156,"author":{"gitId":"duckmoon99"},"content":"3. [E][âœ—] 2103 tp (at: Saturday)"},{"lineNumber":157,"author":{"gitId":"duckmoon99"},"content":"```"},{"lineNumber":158,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":159,"author":{"gitId":"duckmoon99"},"content":"### `bye` - Exit Duke"},{"lineNumber":160,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":161,"author":{"gitId":"duckmoon99"},"content":"Exits Duke."},{"lineNumber":162,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":163,"author":{"gitId":"duckmoon99"},"content":"Example usage:"},{"lineNumber":164,"author":{"gitId":"duckmoon99"},"content":"`bye`"},{"lineNumber":165,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":166,"author":{"gitId":"duckmoon99"},"content":"Expected outcome: -"}],"authorContributionMap":{"duckmoon99":153,"-":13}},{"path":"src/main/java/duke/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"import java.time.format.TextStyle;"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":" * Represents a deadline task with a deadline."},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"    private LocalDate deadline;"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    private String deadlineString;"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"     * Initialises description to be desc and deadline to be deadlineParse. Will attempt to parse deadlineParse."},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"     * If it is in the format yyyy-mm-dd, it will be stored as local date, for nicer string representation later."},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"     * @param desc Description of the task."},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"     * @param deadlineParse The deadline of the task."},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"    public DeadlineTask(String desc, String deadlineParse) {"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"        super(desc);"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"            deadline \u003d LocalDate.parse(deadlineParse);"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"            deadlineString \u003d String.format(\"%s %d %d\","},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"                    deadline.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH),"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"                    deadline.getDayOfMonth(),"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"                    deadline.getYear());"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"            // Not parsable"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"            deadlineString \u003d deadlineParse;"},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"     * Creates DeadlineTask with array as input. Array size should be exactly 2. First element will be used as"},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":"     * description and second element will be used as deadline."},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"     * @param arguments The input array."},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":"     * @return A DeadlineTask."},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"    public static DeadlineTask of(String... arguments) {"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"        assert(arguments.length \u003d\u003d 2);"},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"        return new DeadlineTask(arguments[0], arguments[1]);"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadlineString + \")\";"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"    private String toSavedStringDeadline() {"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"        return deadline \u003d\u003d null ? deadlineString : deadline.toString();"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":"    public String toSavedString() {"},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"        return String.format(\"D @@ %s @@ %s @@ %s\", toSavedStringIsDone(), desc, toSavedStringDeadline());"},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"duckmoon99"},"content":"    public boolean contains(String s) {"},{"lineNumber":64,"author":{"gitId":"duckmoon99"},"content":"        return desc.contains(s) || deadlineString.contains(s);"},{"lineNumber":65,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":66}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"        assert(tmp.isEmpty() \u003d\u003d false);"},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"        return new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"        db.flip();"},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":62}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"    private static final String DEFAULT_STORAGE_LOCATION \u003d \"data/duke.txt\";"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"    private final Ui ui;"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"    private final Parser parser;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"    private boolean hasExited;"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"    private final String dest;"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    private TaskList taskList;"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"    private enum ResponsePrefix {"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"        ADD(\"Noted, I have added the following task(s):\"),"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"        DONE(\"Noted, I have marked the following task(s) as done:\"),"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"        DELETE(\"Noted, I have deleted the following task(s):\"),"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"        FIND(\"Noted, I have found the following %d task(s)\");"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"        private String string;"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"        ResponsePrefix(String string) {"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"            this.string \u003d string;"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"        @Override"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"        public String toString() {"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"            return string;"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"     * Constructor with default directory of database."},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"    public Duke() {"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"        dest \u003d DEFAULT_STORAGE_LOCATION;"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"        ui \u003d new Ui();"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"        parser \u003d new Parser();"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":"            storage \u003d new Storage(dest);"},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"            taskList \u003d storage.loadTaskList();"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":"            ui.printNicely(e.getMessage());"},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"    public boolean hasExited() {"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"        return hasExited;"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"    private void run() {"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"        assert(taskList !\u003d null);"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"        assert(storage !\u003d null);"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":"        ui.greet();"},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"        ui.listOut(taskList);"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"        while (!hasExited) {"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"                String input \u003d ui.nextLine();"},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"                switch (parser.parseInput(input)) {"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":"                case ADD:"},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"                    taskList.add(parser.parseAddedTask(input));"},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"                    ui.printNicely(ResponsePrefix.ADD.toString(), parser.parseAddedTask(input).toString());"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"                    break;"},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"                case DONE:"},{"lineNumber":63,"author":{"gitId":"duckmoon99"},"content":"                    taskList.markDone(parser.parseDoneIndex(input));"},{"lineNumber":64,"author":{"gitId":"duckmoon99"},"content":"                    ui.printNicely(ResponsePrefix.DONE.toString(),"},{"lineNumber":65,"author":{"gitId":"duckmoon99"},"content":"                            taskList.get(parser.parseDoneIndex(input)).toString());"},{"lineNumber":66,"author":{"gitId":"duckmoon99"},"content":"                    break;"},{"lineNumber":67,"author":{"gitId":"duckmoon99"},"content":"                case DELETE:"},{"lineNumber":68,"author":{"gitId":"duckmoon99"},"content":"                    ui.printNicely(ResponsePrefix.DELETE.toString(),"},{"lineNumber":69,"author":{"gitId":"duckmoon99"},"content":"                            taskList.get(parser.parseDeleteIndex(input)).toString());"},{"lineNumber":70,"author":{"gitId":"duckmoon99"},"content":"                    taskList.delete(parser.parseDeleteIndex(input));"},{"lineNumber":71,"author":{"gitId":"duckmoon99"},"content":"                    ui.listOut(taskList);"},{"lineNumber":72,"author":{"gitId":"duckmoon99"},"content":"                    break;"},{"lineNumber":73,"author":{"gitId":"duckmoon99"},"content":"                case FIND:"},{"lineNumber":74,"author":{"gitId":"duckmoon99"},"content":"                    TaskList newList \u003d taskList.find(parser.parseFindKeyword(input));"},{"lineNumber":75,"author":{"gitId":"duckmoon99"},"content":"                    ui.listOut(String.format(ResponsePrefix.FIND.toString(), newList.size()), newList);"},{"lineNumber":76,"author":{"gitId":"duckmoon99"},"content":"                    break;"},{"lineNumber":77,"author":{"gitId":"duckmoon99"},"content":"                case LIST:"},{"lineNumber":78,"author":{"gitId":"duckmoon99"},"content":"                    ui.listOut(taskList);"},{"lineNumber":79,"author":{"gitId":"duckmoon99"},"content":"                    break;"},{"lineNumber":80,"author":{"gitId":"duckmoon99"},"content":"                case BYE:"},{"lineNumber":81,"author":{"gitId":"duckmoon99"},"content":"                    ui.bye();"},{"lineNumber":82,"author":{"gitId":"duckmoon99"},"content":"                    hasExited \u003d true;"},{"lineNumber":83,"author":{"gitId":"duckmoon99"},"content":"                    return;"},{"lineNumber":84,"author":{"gitId":"duckmoon99"},"content":"                default:"},{"lineNumber":85,"author":{"gitId":"duckmoon99"},"content":"                    throw new IOException(\"Cannot be understood.\");"},{"lineNumber":86,"author":{"gitId":"duckmoon99"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"duckmoon99"},"content":"                storage.saveTaskList(taskList);"},{"lineNumber":88,"author":{"gitId":"duckmoon99"},"content":"            } catch (Exception e) {"},{"lineNumber":89,"author":{"gitId":"duckmoon99"},"content":"                ui.printNicely(e.getMessage());"},{"lineNumber":90,"author":{"gitId":"duckmoon99"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":94,"author":{"gitId":"duckmoon99"},"content":"    public static void main(String[] args) {"},{"lineNumber":95,"author":{"gitId":"duckmoon99"},"content":"        new Duke().run();"},{"lineNumber":96,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":98,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"duckmoon99"},"content":"     * Process the input and returns a response in the form of a string."},{"lineNumber":100,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"duckmoon99"},"content":"     * @param input User input"},{"lineNumber":102,"author":{"gitId":"duckmoon99"},"content":"     * @return Duke\u0027s response."},{"lineNumber":103,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"duckmoon99"},"content":"    public String processAndGetResponse(String input) {"},{"lineNumber":105,"author":{"gitId":"duckmoon99"},"content":"        StringBuilder response;"},{"lineNumber":106,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"duckmoon99"},"content":"            input \u003d input.trim();"},{"lineNumber":108,"author":{"gitId":"duckmoon99"},"content":"            switch (parser.parseInput(input)) {"},{"lineNumber":109,"author":{"gitId":"duckmoon99"},"content":"            case ADD:"},{"lineNumber":110,"author":{"gitId":"duckmoon99"},"content":"                taskList.add(parser.parseAddedTask(input));"},{"lineNumber":111,"author":{"gitId":"duckmoon99"},"content":"                response \u003d new StringBuilder(ui.generateResponse(ResponsePrefix.ADD.toString(),"},{"lineNumber":112,"author":{"gitId":"duckmoon99"},"content":"                        parser.parseAddedTask(input).toString()));"},{"lineNumber":113,"author":{"gitId":"duckmoon99"},"content":"                break;"},{"lineNumber":114,"author":{"gitId":"duckmoon99"},"content":"            case DONE:"},{"lineNumber":115,"author":{"gitId":"duckmoon99"},"content":"                taskList.markDone(parser.parseDoneIndex(input));"},{"lineNumber":116,"author":{"gitId":"duckmoon99"},"content":"                response \u003d new StringBuilder(ui.generateResponse(ResponsePrefix.DONE.toString(),"},{"lineNumber":117,"author":{"gitId":"duckmoon99"},"content":"                        taskList.get(parser.parseDoneIndex(input)).toString()));"},{"lineNumber":118,"author":{"gitId":"duckmoon99"},"content":"                break;"},{"lineNumber":119,"author":{"gitId":"duckmoon99"},"content":"            case DELETE:"},{"lineNumber":120,"author":{"gitId":"duckmoon99"},"content":"                response \u003d new StringBuilder(ui.generateResponse(ResponsePrefix.DELETE.toString(),"},{"lineNumber":121,"author":{"gitId":"duckmoon99"},"content":"                        taskList.get(parser.parseDeleteIndex(input)).toString()));"},{"lineNumber":122,"author":{"gitId":"duckmoon99"},"content":"                taskList.delete(parser.parseDeleteIndex(input));"},{"lineNumber":123,"author":{"gitId":"duckmoon99"},"content":"                response.append(ui.generateTaskListString(taskList));"},{"lineNumber":124,"author":{"gitId":"duckmoon99"},"content":"                break;"},{"lineNumber":125,"author":{"gitId":"duckmoon99"},"content":"            case FIND:"},{"lineNumber":126,"author":{"gitId":"duckmoon99"},"content":"                TaskList newList \u003d taskList.find(parser.parseFindKeyword(input));"},{"lineNumber":127,"author":{"gitId":"duckmoon99"},"content":"                response \u003d new StringBuilder(ui.generateTaskListString("},{"lineNumber":128,"author":{"gitId":"duckmoon99"},"content":"                        String.format(ResponsePrefix.FIND.toString(), newList.size()),"},{"lineNumber":129,"author":{"gitId":"duckmoon99"},"content":"                        newList));"},{"lineNumber":130,"author":{"gitId":"duckmoon99"},"content":"                break;"},{"lineNumber":131,"author":{"gitId":"duckmoon99"},"content":"            case LIST:"},{"lineNumber":132,"author":{"gitId":"duckmoon99"},"content":"                response \u003d new StringBuilder(ui.generateTaskListString(taskList));"},{"lineNumber":133,"author":{"gitId":"duckmoon99"},"content":"                break;"},{"lineNumber":134,"author":{"gitId":"duckmoon99"},"content":"            case BYE:"},{"lineNumber":135,"author":{"gitId":"duckmoon99"},"content":"                hasExited \u003d true;"},{"lineNumber":136,"author":{"gitId":"duckmoon99"},"content":"                response \u003d new StringBuilder(ui.generateResponse(\"Goodbye.\"));"},{"lineNumber":137,"author":{"gitId":"duckmoon99"},"content":"                break;"},{"lineNumber":138,"author":{"gitId":"duckmoon99"},"content":"            default:"},{"lineNumber":139,"author":{"gitId":"duckmoon99"},"content":"                throw new IOException(\"Cannot be understood.\");"},{"lineNumber":140,"author":{"gitId":"duckmoon99"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"duckmoon99"},"content":"            storage.saveTaskList(taskList);"},{"lineNumber":142,"author":{"gitId":"duckmoon99"},"content":"        } catch (Exception e) {"},{"lineNumber":143,"author":{"gitId":"duckmoon99"},"content":"            response \u003d new StringBuilder(ui.generateResponse(e.getMessage()));"},{"lineNumber":144,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"duckmoon99"},"content":"        return response.toString();"},{"lineNumber":146,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"duckmoon99":146,"-":2}},{"path":"src/main/java/duke/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"import java.time.format.TextStyle;"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"public class EventTask extends Task {"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"    private String periodString;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"    private LocalDate period;"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"     * Initialises description to be desc and period to be periodParse. Will attempt to parse deadlineParse."},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"     * If it is in the format yyyy-mm-dd, it will be stored as local date, for nicer string representation later."},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"     * @param desc Description of the task."},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"     * @param periodParse The deadline of the task."},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"    public EventTask(String desc, String periodParse) {"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"        super(desc);"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"            period \u003d LocalDate.parse(periodParse);"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"            periodString \u003d String.format(\"%s %d %d\","},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"                    period.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH),"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"                    period.getDayOfMonth(),"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"                    period.getYear());"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"        } catch (Exception e) {"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"            // Not parsable"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"            periodString \u003d periodParse;"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + periodString + \")\";"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":"    private String toSavedStringPeriod() {"},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"        return period \u003d\u003d null ? periodString : period.toString();"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"     * Creates EventTask with array as input. Array size should be exactly 2. First element will be used as description"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"     * and second element will be used as period."},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"     * @param arguments The input array."},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"     * @return An EventTask."},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"    public static EventTask of(String... arguments) {"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"        assert(arguments.length \u003d\u003d 2);"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"        return new EventTask(arguments[0], arguments[1]);"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"    public String toSavedString() {"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"        return String.format(\"E @@ %s @@ %s @@ %s\", toSavedStringIsDone(), desc, toSavedStringPeriod());"},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"    public boolean contains(String s) {"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"        return desc.contains(s) || periodString.contains(s);"},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":63}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"    /** Main function */"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":10}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"public class Main extends Application {"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"    public void start(Stage stage) {"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"            assert(ap !\u003d null);"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"            stage.setResizable(false);"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"            stage.setMinHeight(600.0);"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"            stage.setMinWidth(400.0);"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(new Duke());"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":30}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"     * Initializes the Window."},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(\"Hi! How can I help you?\", dukeImage));"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"        duke \u003d d;"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"        String response \u003d duke.processAndGetResponse(input);"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"        userInput.clear();"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"        if (duke.hasExited()) {"},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"            Platform.exit();"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":60}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.util.Map;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"import java.util.stream.Stream;"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"import javafx.util.Pair;"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":" * Parses user inputs or saved strings."},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    private Map\u003cString, ParserResult\u003e stringParserResultMap \u003d Map.of("},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"        \"bye\", ParserResult.BYE,"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"        \"list\", ParserResult.LIST,"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"        \"done\", ParserResult.DONE,"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"        \"delete\", ParserResult.DELETE,"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"        \"find\", ParserResult.FIND,"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"        \"todo\", ParserResult.ADD,"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"        \"deadline\", ParserResult.ADD,"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"        \"event\", ParserResult.ADD"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"    );"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"     * Returns the index of the task to be marked done."},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"     * @param s The input."},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"     * @return An integer index."},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"    public int parseDoneIndex(String s) {"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"        return Integer.parseInt(s.split(\" \")[1]) - 1;"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"     * Returns the index of the task to be deleted."},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"     * @param s The input."},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"     * @return An integer index."},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"    public int parseDeleteIndex(String s) {"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"        return Integer.parseInt(s.split(\" \")[1]) - 1;"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"     * Returns the keyword to be searched."},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"     * @param s The input."},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"     * @return A string keyword."},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"    public String parseFindKeyword(String s) {"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"        return s.split(\" \")[1];"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"    // Returns an array of the input string split by whitespace."},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"    private String[] inputToArray(String s) {"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"        return s.trim().split(\" +\");"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"     * Returns a task represented by the input."},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"     * @param s The input."},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"     * @return A task."},{"lineNumber":63,"author":{"gitId":"duckmoon99"},"content":"     * @throws IllegalArgumentException Unrecognizable task command."},{"lineNumber":64,"author":{"gitId":"duckmoon99"},"content":"     * @throws IndexOutOfBoundsException Task formatted wrongly."},{"lineNumber":65,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"duckmoon99"},"content":"    public Task parseAddedTask(String s) throws IndexOutOfBoundsException {"},{"lineNumber":67,"author":{"gitId":"duckmoon99"},"content":"        s \u003d s.trim();"},{"lineNumber":68,"author":{"gitId":"duckmoon99"},"content":"        String[] processedArray \u003d inputToArray(s);"},{"lineNumber":69,"author":{"gitId":"duckmoon99"},"content":"        String taskType \u003d processedArray[0].toLowerCase();"},{"lineNumber":70,"author":{"gitId":"duckmoon99"},"content":"        assert(\"todo\".startsWith(taskType) || \"deadline\".startsWith(taskType) || \"event\".startsWith(taskType));"},{"lineNumber":71,"author":{"gitId":"duckmoon99"},"content":"        Task processedTask \u003d null;"},{"lineNumber":72,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"duckmoon99"},"content":"            String[] stringsAfterType \u003d s.split(String.format(\"%s +\", processedArray[0]));"},{"lineNumber":74,"author":{"gitId":"duckmoon99"},"content":"            if (stringsAfterType.length \u003c\u003d 1) {"},{"lineNumber":75,"author":{"gitId":"duckmoon99"},"content":"                throw new IndexOutOfBoundsException(\"Task formatted incorrectly.\");"},{"lineNumber":76,"author":{"gitId":"duckmoon99"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"duckmoon99"},"content":"            String stringAfterType \u003d stringsAfterType[1];"},{"lineNumber":78,"author":{"gitId":"duckmoon99"},"content":"            String[] arguments;"},{"lineNumber":79,"author":{"gitId":"duckmoon99"},"content":"            if (\"todo\".startsWith(taskType)) {"},{"lineNumber":80,"author":{"gitId":"duckmoon99"},"content":"                processedTask \u003d ToDoTask.of(stringAfterType);"},{"lineNumber":81,"author":{"gitId":"duckmoon99"},"content":"            } else if (\"deadline\".startsWith(taskType)) {"},{"lineNumber":82,"author":{"gitId":"duckmoon99"},"content":"                arguments \u003d stringAfterType.split(\" +/by +\");"},{"lineNumber":83,"author":{"gitId":"duckmoon99"},"content":"                if (arguments.length !\u003d 2) {"},{"lineNumber":84,"author":{"gitId":"duckmoon99"},"content":"                    throw new IndexOutOfBoundsException(\"Deadline task formatted incorrectly.\");"},{"lineNumber":85,"author":{"gitId":"duckmoon99"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"duckmoon99"},"content":"                processedTask \u003d DeadlineTask.of(arguments);"},{"lineNumber":87,"author":{"gitId":"duckmoon99"},"content":"            } else if (\"event\".startsWith(taskType)) {"},{"lineNumber":88,"author":{"gitId":"duckmoon99"},"content":"                arguments \u003d stringAfterType.split(\" +/at +\");"},{"lineNumber":89,"author":{"gitId":"duckmoon99"},"content":"                if (arguments.length !\u003d 2) {"},{"lineNumber":90,"author":{"gitId":"duckmoon99"},"content":"                    throw new IndexOutOfBoundsException(\"Event task formatted incorrectly.\");"},{"lineNumber":91,"author":{"gitId":"duckmoon99"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"duckmoon99"},"content":"                processedTask \u003d EventTask.of(arguments);"},{"lineNumber":93,"author":{"gitId":"duckmoon99"},"content":"            } else {"},{"lineNumber":94,"author":{"gitId":"duckmoon99"},"content":"                assert(false);"},{"lineNumber":95,"author":{"gitId":"duckmoon99"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"duckmoon99"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":97,"author":{"gitId":"duckmoon99"},"content":"            throw e;"},{"lineNumber":98,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"duckmoon99"},"content":"        assert(processedTask !\u003d null);"},{"lineNumber":100,"author":{"gitId":"duckmoon99"},"content":"        return processedTask;"},{"lineNumber":101,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":103,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"duckmoon99"},"content":"     * Determines the type of command."},{"lineNumber":105,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"duckmoon99"},"content":"     * @param input The input."},{"lineNumber":107,"author":{"gitId":"duckmoon99"},"content":"     * @return A parserResult value."},{"lineNumber":108,"author":{"gitId":"duckmoon99"},"content":"     * @throws IllegalArgumentException Unrecognizable command."},{"lineNumber":109,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"duckmoon99"},"content":"    public ParserResult parseInput(String input) throws IllegalArgumentException {"},{"lineNumber":111,"author":{"gitId":"duckmoon99"},"content":"        input \u003d input.trim();"},{"lineNumber":112,"author":{"gitId":"duckmoon99"},"content":"        final String inputCommand \u003d inputToArray(input)[0].toLowerCase();"},{"lineNumber":113,"author":{"gitId":"duckmoon99"},"content":"        Stream\u003cString\u003e commandStream \u003d stringParserResultMap.keySet().stream();"},{"lineNumber":114,"author":{"gitId":"duckmoon99"},"content":"        Pair\u003cInteger, ParserResult\u003e countCommandPair \u003d"},{"lineNumber":115,"author":{"gitId":"duckmoon99"},"content":"            commandStream.reduce("},{"lineNumber":116,"author":{"gitId":"duckmoon99"},"content":"                new Pair\u003c\u003e(0, null),"},{"lineNumber":117,"author":{"gitId":"duckmoon99"},"content":"                (pair, command) -\u003e"},{"lineNumber":118,"author":{"gitId":"duckmoon99"},"content":"                    command.startsWith(inputCommand)"},{"lineNumber":119,"author":{"gitId":"duckmoon99"},"content":"                        ? new Pair\u003c\u003e(pair.getKey() + 1, stringParserResultMap.get(command))"},{"lineNumber":120,"author":{"gitId":"duckmoon99"},"content":"                        : pair,"},{"lineNumber":121,"author":{"gitId":"duckmoon99"},"content":"                (p1, p2) -\u003e"},{"lineNumber":122,"author":{"gitId":"duckmoon99"},"content":"                    new Pair\u003c\u003e(p1.getKey() + p2.getKey(), p1.getValue() !\u003d null ? p1.getValue() : p2.getValue()));"},{"lineNumber":123,"author":{"gitId":"duckmoon99"},"content":"        if (countCommandPair.getKey() \u003d\u003d 1) {"},{"lineNumber":124,"author":{"gitId":"duckmoon99"},"content":"            return countCommandPair.getValue();"},{"lineNumber":125,"author":{"gitId":"duckmoon99"},"content":"        } else if (countCommandPair.getKey() \u003e 1) {"},{"lineNumber":126,"author":{"gitId":"duckmoon99"},"content":"            throw new IllegalArgumentException(\"Ambiguous command.\");"},{"lineNumber":127,"author":{"gitId":"duckmoon99"},"content":"        } else {"},{"lineNumber":128,"author":{"gitId":"duckmoon99"},"content":"            throw new IllegalArgumentException(\"No matching commands.\");"},{"lineNumber":129,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":132,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"duckmoon99"},"content":"     * Parse a saved string to a task."},{"lineNumber":134,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"duckmoon99"},"content":"     * @param s The saved string."},{"lineNumber":136,"author":{"gitId":"duckmoon99"},"content":"     * @return The saved task."},{"lineNumber":137,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"duckmoon99"},"content":"    public static Task parseSavedTask(String s) {"},{"lineNumber":139,"author":{"gitId":"duckmoon99"},"content":"        String[] arg \u003d s.split(\" @@ \");"},{"lineNumber":140,"author":{"gitId":"duckmoon99"},"content":"        Task task;"},{"lineNumber":141,"author":{"gitId":"duckmoon99"},"content":"        switch (arg[0]) {"},{"lineNumber":142,"author":{"gitId":"duckmoon99"},"content":"        case \"T\":"},{"lineNumber":143,"author":{"gitId":"duckmoon99"},"content":"            task \u003d new ToDoTask(arg[2]);"},{"lineNumber":144,"author":{"gitId":"duckmoon99"},"content":"            break;"},{"lineNumber":145,"author":{"gitId":"duckmoon99"},"content":"        case \"D\":"},{"lineNumber":146,"author":{"gitId":"duckmoon99"},"content":"            task \u003d new DeadlineTask(arg[2], arg[3]);"},{"lineNumber":147,"author":{"gitId":"duckmoon99"},"content":"            break;"},{"lineNumber":148,"author":{"gitId":"duckmoon99"},"content":"        case \"E\":"},{"lineNumber":149,"author":{"gitId":"duckmoon99"},"content":"            task \u003d new EventTask(arg[2], arg[3]);"},{"lineNumber":150,"author":{"gitId":"duckmoon99"},"content":"            break;"},{"lineNumber":151,"author":{"gitId":"duckmoon99"},"content":"        default:"},{"lineNumber":152,"author":{"gitId":"duckmoon99"},"content":"            throw new IllegalArgumentException(\"Save file corrupted.\");"},{"lineNumber":153,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"duckmoon99"},"content":"        if (arg[1].equals(\"1\")) {"},{"lineNumber":155,"author":{"gitId":"duckmoon99"},"content":"            task.markDone();"},{"lineNumber":156,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"duckmoon99"},"content":"        return task;"},{"lineNumber":158,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":159}},{"path":"src/main/java/duke/ParserResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":" * Results of Parser parsing an input."},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"public enum ParserResult {"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"    LIST,"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"    DONE,"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"    DELETE,"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"    FIND,"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    ADD"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":13}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":" * Handles reading and writing from database."},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"    private String dest;"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"     * Initialise the destination of database."},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"     * @param dest"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"    public Storage(String dest) {"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"        this.dest \u003d dest;"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"     * Returns the taskList saved at destination. If file does not exist attempts to create one."},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"     * @return a taskList"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"     * @throws IOException error creating the file"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"    public TaskList loadTaskList() throws IOException {"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"            TaskList tasks \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"            File file \u003d new File(dest);"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"            new File(dest.split(\"/\")[0]).mkdir();"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"            file.createNewFile();"},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"            Scanner scanner \u003d new Scanner(file);"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"            while (scanner.hasNext()) {"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":"                tasks.add(Parser.parseSavedTask(scanner.nextLine()));"},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"            return tasks;"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"            throw new FileNotFoundException(\"Could not find file after creating.\");"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"            throw new IOException(\"Error creating file.\\n\" + e.getMessage());"},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":"     * Saves a taskList to file at destination."},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"     * @param taskList the taskList to be saved"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"     * @throws FileNotFoundException couldn\u0027t find the file at destination."},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"    public void saveTaskList(TaskList taskList) throws FileNotFoundException {"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":"            BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(dest));"},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"            for (Task task: taskList) {"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"                bufferedWriter.write(task.toSavedString());"},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"                bufferedWriter.newLine();"},{"lineNumber":63,"author":{"gitId":"duckmoon99"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"duckmoon99"},"content":"            bufferedWriter.close();"},{"lineNumber":65,"author":{"gitId":"duckmoon99"},"content":"        } catch (Exception e) {"},{"lineNumber":66,"author":{"gitId":"duckmoon99"},"content":"            throw new FileNotFoundException(\"Couldn\u0027t find file\");"},{"lineNumber":67,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":69}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":" * Represents a task. A task has a description and a state representing if it is done."},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"    protected String desc;"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"    public Task(String desc) {"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"        this.desc \u003d desc;"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"    public void markDone() {"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"        this.isDone \u003d true;"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"        return String.format(\"[%c] %s\", getDoneIcon(), desc);"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"    private char getDoneIcon() {"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"        return isDone ? \u0027\\u2713\u0027 : \u0027\\u2717\u0027;"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"    protected String toSavedStringIsDone() {"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"        return isDone ? \"1\" : \"0\";"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"    public abstract String toSavedString();"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"    public abstract boolean contains(String s);"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":34}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":" * Represents a list of tasks."},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"     * Marks the task at index as done."},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"     * @param index the index of the task to be marked done"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"     * @throws IndexOutOfBoundsException if index is incorrect"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"    public void markDone(int index) throws IndexOutOfBoundsException {"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"            get(index).markDone();"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"            throw new IndexOutOfBoundsException(\"No task with this number\");"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"     * Deletes the task at index."},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"     * @param index the index of the task to be deleted"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"     * @throws IndexOutOfBoundsException if index is incorrect"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"    public void delete(int index) throws IndexOutOfBoundsException {"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"            remove(index);"},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"            throw new IndexOutOfBoundsException(\"No task with this number\");"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"     * Returns a sublist with all the tasks that contains the keyword. Containment of keyword is determined by the task."},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"     * @param s the keyword"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"     * @return a taskList"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"    public TaskList find(String s) {"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"        TaskList newList \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {"},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"            if (get(i).contains(s)) {"},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"                newList.add(get(i));"},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":"        return newList;"},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":54}},{"path":"src/main/java/duke/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":" * Represents a to-do task."},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"public class ToDoTask extends Task {"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"    public ToDoTask(String desc) {"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"        super(desc);"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"    public String toSavedString() {"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"        return String.format(\"T @@ %s @@ %s\", toSavedStringIsDone(), desc);"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"     * Creates TodoTask with array as input. Array size should be exactly 1. First element will be used as description."},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"     * @param arguments The input array."},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"     * @return A ToDoTask."},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"    public static ToDoTask of(String... arguments) {"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"        assert (arguments.length \u003d\u003d 1);"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"        return new ToDoTask(arguments[0]);"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"    public boolean contains(String s) {"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"        return desc.contains(s);"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":37}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":" * Interacts with the user."},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    private static final String BORDER_STRING \u003d \"________________________________________\";"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"    private final Scanner sc;"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"    public Ui() {"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"     * Greets the user at the start of the program."},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"    public void greet() {"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"        printNicely(\"Hello! This is duckmoon99\u0027s Duke.\","},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"                  \"What can I do to help you today?\");"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"    public void bye() {"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"        printNicely(\"Bye. Hope to see you again soon!\");"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"     * List out the taskList the user has."},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"     * @param taskList The user\u0027s taskList."},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"    public void listOut(TaskList taskList) {"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"duckmoon99"},"content":"        toPrint.add(String.format(\"You currently have %d task(s)\", taskList.size()));"},{"lineNumber":39,"author":{"gitId":"duckmoon99"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":40,"author":{"gitId":"duckmoon99"},"content":"            toPrint.add(String.format(\"%d.%s\", i + 1, taskList.get(i)));"},{"lineNumber":41,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"duckmoon99"},"content":"        printNicelyCollection(toPrint);"},{"lineNumber":43,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":45,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"duckmoon99"},"content":"     * Lists out a taskList with a different message."},{"lineNumber":47,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"duckmoon99"},"content":"     * @param message The message explaining the context of the list."},{"lineNumber":49,"author":{"gitId":"duckmoon99"},"content":"     * @param taskList The taskList."},{"lineNumber":50,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"duckmoon99"},"content":"    public void listOut(String message, TaskList taskList) {"},{"lineNumber":52,"author":{"gitId":"duckmoon99"},"content":"        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"duckmoon99"},"content":"        toPrint.add(message);"},{"lineNumber":54,"author":{"gitId":"duckmoon99"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":55,"author":{"gitId":"duckmoon99"},"content":"            toPrint.add(String.format(\"%d.%s\", i + 1, taskList.get(i)));"},{"lineNumber":56,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"duckmoon99"},"content":"        printNicelyCollection(toPrint);"},{"lineNumber":58,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":60,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"duckmoon99"},"content":"     * Prints nicely a collection of strings."},{"lineNumber":62,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"duckmoon99"},"content":"     * @param strings The collection of strings to be printed."},{"lineNumber":64,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"duckmoon99"},"content":"    public void printNicelyCollection(Collection\u003cString\u003e strings) {"},{"lineNumber":66,"author":{"gitId":"duckmoon99"},"content":"        System.out.println(BORDER_STRING);"},{"lineNumber":67,"author":{"gitId":"duckmoon99"},"content":"        for (String s: strings) {"},{"lineNumber":68,"author":{"gitId":"duckmoon99"},"content":"            System.out.println(\"    \" + s);"},{"lineNumber":69,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"duckmoon99"},"content":"        System.out.println(BORDER_STRING);"},{"lineNumber":71,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":73,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"duckmoon99"},"content":"     * Prints nicely all the strings as one."},{"lineNumber":75,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"duckmoon99"},"content":"     * @param strings Vararg of strings to be printed."},{"lineNumber":77,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"duckmoon99"},"content":"    public void printNicely(String ...strings) {"},{"lineNumber":79,"author":{"gitId":"duckmoon99"},"content":"        printNicelyCollection(Arrays.asList(strings));"},{"lineNumber":80,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":82,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"duckmoon99"},"content":"     * Generates a string which is the concatenation of all the strings separated by new line."},{"lineNumber":84,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"duckmoon99"},"content":"     * @param strings Collection of strings."},{"lineNumber":86,"author":{"gitId":"duckmoon99"},"content":"     * @return"},{"lineNumber":87,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"duckmoon99"},"content":"    public String generateResponseCollection(Collection\u003cString\u003e strings) {"},{"lineNumber":89,"author":{"gitId":"duckmoon99"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":90,"author":{"gitId":"duckmoon99"},"content":"        for (String s: strings) {"},{"lineNumber":91,"author":{"gitId":"duckmoon99"},"content":"            stringBuilder.append(s);"},{"lineNumber":92,"author":{"gitId":"duckmoon99"},"content":"            stringBuilder.append(\u0027\\n\u0027);"},{"lineNumber":93,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"duckmoon99"},"content":"        return stringBuilder.toString();"},{"lineNumber":95,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":97,"author":{"gitId":"duckmoon99"},"content":"    public String generateResponse(String ...strings) {"},{"lineNumber":98,"author":{"gitId":"duckmoon99"},"content":"        return generateResponseCollection(Arrays.asList(strings));"},{"lineNumber":99,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":101,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"duckmoon99"},"content":"     * Generates a String representing the TaskList."},{"lineNumber":103,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"duckmoon99"},"content":"     * @param taskList The user\u0027s taskList."},{"lineNumber":105,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"duckmoon99"},"content":"    public String generateTaskListString(TaskList taskList) {"},{"lineNumber":107,"author":{"gitId":"duckmoon99"},"content":"        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitId":"duckmoon99"},"content":"        toPrint.add(String.format(\"You currently have %d task(s)\", taskList.size()));"},{"lineNumber":109,"author":{"gitId":"duckmoon99"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":110,"author":{"gitId":"duckmoon99"},"content":"            toPrint.add(String.format(\"%d. %s\", i + 1, taskList.get(i)));"},{"lineNumber":111,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"duckmoon99"},"content":"        return generateResponseCollection(toPrint);"},{"lineNumber":113,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":115,"author":{"gitId":"duckmoon99"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"duckmoon99"},"content":"     * Generates a String representing the TaskList with a message as context."},{"lineNumber":117,"author":{"gitId":"duckmoon99"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"duckmoon99"},"content":"     * @param message The message explaining the context of the list."},{"lineNumber":119,"author":{"gitId":"duckmoon99"},"content":"     * @param taskList The taskList."},{"lineNumber":120,"author":{"gitId":"duckmoon99"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"duckmoon99"},"content":"    public String generateTaskListString(String message, TaskList taskList) {"},{"lineNumber":122,"author":{"gitId":"duckmoon99"},"content":"        assert(message !\u003d null \u0026\u0026 !message.equals(\"\")); // called this function even without a special message"},{"lineNumber":123,"author":{"gitId":"duckmoon99"},"content":"        ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"},{"lineNumber":124,"author":{"gitId":"duckmoon99"},"content":"        toPrint.add(message);"},{"lineNumber":125,"author":{"gitId":"duckmoon99"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":126,"author":{"gitId":"duckmoon99"},"content":"            toPrint.add(String.format(\"%d. %s\", i + 1, taskList.get(i)));"},{"lineNumber":127,"author":{"gitId":"duckmoon99"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"duckmoon99"},"content":"        return generateResponseCollection(toPrint);"},{"lineNumber":129,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"duckmoon99"},"content":"    public String nextLine() {"},{"lineNumber":131,"author":{"gitId":"duckmoon99"},"content":"        return sc.nextLine();"},{"lineNumber":132,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":133}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" spacing\u003d\"5.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"duckmoon99":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"duckmoon99":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"import duke.Parser;"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"import duke.ParserResult;"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"    private final Parser parser \u003d new Parser();"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"    public void parseInput_recognizableList_parserResultList() {"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"        String[] tests \u003d {"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"            \"li\","},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"            \" l\","},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"            \"  lis   \","},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"            \"List \"};"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"        assertTrue(Arrays.stream(tests)"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"                .map(s -\u003e parser.parseInput(s) \u003d\u003d ParserResult.LIST)"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"                .reduce((x, y) -\u003e x \u0026\u0026 y)"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"                .get());"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"    public void parseInput_recognizableBye_parserResultBye() {"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"        String[] tests \u003d {"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"            \"b\","},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"            \" By  \","},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"            \"ByE \"};"},{"lineNumber":32,"author":{"gitId":"duckmoon99"},"content":"        assertTrue(Arrays.stream(tests)"},{"lineNumber":33,"author":{"gitId":"duckmoon99"},"content":"                .map(s -\u003e parser.parseInput(s) \u003d\u003d ParserResult.BYE)"},{"lineNumber":34,"author":{"gitId":"duckmoon99"},"content":"                .reduce((x, y) -\u003e x \u0026\u0026 y)"},{"lineNumber":35,"author":{"gitId":"duckmoon99"},"content":"                .get());"},{"lineNumber":36,"author":{"gitId":"duckmoon99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"duckmoon99"},"content":"}"}],"authorContributionMap":{"duckmoon99":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"duckmoon99"},"content":"todo omanpqcdopxpmoj"},{"lineNumber":2,"author":{"gitId":"duckmoon99"},"content":"delete 1"},{"lineNumber":3,"author":{"gitId":"duckmoon99"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"duckmoon99"},"content":"event lawwhpyctjxwqfz /at tfmxowwugx"},{"lineNumber":5,"author":{"gitId":"duckmoon99"},"content":"event ybjbyomjlvfrrul /at akujwntuqw"},{"lineNumber":6,"author":{"gitId":"duckmoon99"},"content":"todo lwbssjwdswrlmxq"},{"lineNumber":7,"author":{"gitId":"duckmoon99"},"content":"todo mvtxnwvxhhxxunz"},{"lineNumber":8,"author":{"gitId":"duckmoon99"},"content":"deadline bplugnrsvfozqid /by oleonxhvvg"},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":"todo ibgxbftdfnowuwf"},{"lineNumber":11,"author":{"gitId":"duckmoon99"},"content":"todo gawyhtvjlpoqgrq"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"delete 6"},{"lineNumber":13,"author":{"gitId":"duckmoon99"},"content":"list"},{"lineNumber":14,"author":{"gitId":"duckmoon99"},"content":"todo ybzwwfgbnwoerbp"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"deadline zndsdzdqcprvtge /by qfdhveiuhv"},{"lineNumber":16,"author":{"gitId":"duckmoon99"},"content":"deadline ascqiujaavkljun /by ugjawcyiwg"},{"lineNumber":17,"author":{"gitId":"duckmoon99"},"content":"delete 5"},{"lineNumber":18,"author":{"gitId":"duckmoon99"},"content":"list"},{"lineNumber":19,"author":{"gitId":"duckmoon99"},"content":"done 11"},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":"delete 4"},{"lineNumber":21,"author":{"gitId":"duckmoon99"},"content":"deadline plwzjygipzfuozr /by ystqvcnxdl"},{"lineNumber":22,"author":{"gitId":"duckmoon99"},"content":"done 6"},{"lineNumber":23,"author":{"gitId":"duckmoon99"},"content":"list"},{"lineNumber":24,"author":{"gitId":"duckmoon99"},"content":"delete 4"},{"lineNumber":25,"author":{"gitId":"duckmoon99"},"content":"deadline uxpmimaywzsugwf /by trtlftiqis"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":"todo nsgjwvtxsspyopy"},{"lineNumber":27,"author":{"gitId":"duckmoon99"},"content":"delete 10"},{"lineNumber":28,"author":{"gitId":"duckmoon99"},"content":"delete 13"},{"lineNumber":29,"author":{"gitId":"duckmoon99"},"content":"list"},{"lineNumber":30,"author":{"gitId":"duckmoon99"},"content":"todo zjnghbhzkwvlixr"},{"lineNumber":31,"author":{"gitId":"duckmoon99"},"content":"bye"}],"authorContributionMap":{"duckmoon99":31}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"duckmoon99"},"content":"SET JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":10,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"duckmoon99"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":15,"author":{"gitId":"duckmoon99"},"content":"    pause"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":17,"author":{"gitId":"-"},"content":")"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"duckmoon99"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":25,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":26,"author":{"gitId":"duckmoon99"},"content":""}],"authorContributionMap":{"duckmoon99":6,"-":20}}]
