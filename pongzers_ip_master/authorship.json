[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Deadline(String task, String date) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.by \u003d date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 13
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static void messagePrint(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//      Add indentation for new lines"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        msg \u003d msg.replace(\"\\n\", \"\\n    \");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        msg \u003d (\"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                + \"    \" + msg + \"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                + \"    ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        System.out.printf(msg);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static void main(String[] args) throws DukeException{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        messagePrint("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                \"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                \"What can I do for you?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                String msg \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                if (msg.equals(\"bye\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    messagePrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    //          PRINTING LIST"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (msg.equals(\"list\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String listMessage \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        listMessage +\u003d (i + 1) + \". \" + taskList.get(i).toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // If is not last object, add a new line at the end of the item"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            listMessage +\u003d \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    messagePrint(listMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    //          UPDATING STATUS OF EVENTS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (msg.matches(\"^done \\\\d+$\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    int updateTaskIndex \u003d Integer.valueOf(msg.substring(5, msg.length())) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (updateTaskIndex \u003e\u003d taskList.size() || updateTaskIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Task taskToUpdate \u003d taskList.get(updateTaskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskToUpdate.updateStatus(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.set(updateTaskIndex, taskToUpdate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String completedMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + taskList.get(updateTaskIndex).toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    messagePrint(completedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (msg.matches(\"^delete \\\\d+$\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    int updateTaskIndex \u003d Integer.valueOf(msg.substring(7, msg.length())) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (updateTaskIndex \u003e\u003d taskList.size() || updateTaskIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Task taskToUpdate \u003d taskList.get(updateTaskIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.remove(updateTaskIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String deletedMessage \u003d \"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                           \"  \" + taskToUpdate.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                \"Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    messagePrint(deletedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    //          CREATING NEW TASKS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    //              DEADLINES"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Task newTask;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (msg.matches(\"^deadline \\\\S.* /by \\\\S.*$\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        int byIndex \u003d msg.indexOf(\"/by\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String task \u003d msg.substring(9, byIndex); //Number 9 \u003d starting index of deadline string."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String date \u003d msg.substring(byIndex + 4, msg.length());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        newTask \u003d new Deadline(task, date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        //              EVENTS"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (msg.matches(\"^event \\\\S.* /at \\\\S.*$\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        int atIndex \u003d msg.indexOf(\"/at\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String task \u003d msg.substring(6, atIndex); //Number 6 \u003d starting index of event string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String date \u003d msg.substring(atIndex + 4, msg.length());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        newTask \u003d new Event(task, date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        //              TODOS"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (msg.matches(\"^todo \\\\S.*$\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String task \u003d msg.substring(5, msg.length()); //Number 5 \u003d starting index of todo string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        newTask \u003d new ToDo(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//                        Checks for empty TODO"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (msg.matches(\"^todo\\\\s*$\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.EMPTY_TASK_TODO);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//                        Checks for empty TASK for event/deadline"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if ("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            msg.matches(\"^event\\\\s/at.*$\") ||"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                    msg.matches(\"^deadline\\\\s/by.*$\") ||"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                    msg.matches(\"^event\\\\s*$\") ||"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                    msg.matches(\"^deadline\\\\s*$\"))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.EMPTY_TASK_EVENT_DEADLINE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//                        Checks for empty DATE for event/deadline"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (msg.matches(\"^event .* /at\\\\s*$\") ||"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            msg.matches(\"^deadline .* /by\\\\s*\") ||"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            msg.matches(\"^event.*\") ||"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            msg.matches(\"^deadline.*\"))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.EMPTY_DATE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        newTask \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.INVALID_INPUT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.add(newTask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String newTaskMsg \u003d String.format("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                    \"  %s\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                    \"Now you have %d tasks in the list.\", newTask.toString(), taskList.size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    messagePrint(newTaskMsg);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                messagePrint(e.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 118,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    String error;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    DukeException(DukeExceptionType errorType) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        super(errorType.toString());"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        error \u003d errorType.toString();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 12
    }
  },
  {
    "path": "src/main/java/DukeExceptionType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public enum DukeExceptionType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    EMPTY_TASK_TODO(\"☹ OOPS!!! The description of a todo cannot be empty.\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    EMPTY_TASK_EVENT_DEADLINE(\"☹ OOPS!!! The description of a event/deadline cannot be empty.\"),"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    INVALID_INPUT(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    EMPTY_DATE(\"☹ OOPS!!! The date of a event/deadline cannot be empty.\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    TASK_NOT_FOUND(\"☹ OOPS!!! The task you are trying to delete/mark as done is not found.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    DukeExceptionType(String error) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 17
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Event(String task, String date) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.at \u003d date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 13
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected Boolean completed;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Task(String task, Boolean completed) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void updateStatus(Boolean completed) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String completedMarker \u003d this.completed ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return String.format(\"[%s] %s\", completedMarker, this.task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 24
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    ToDo(String task) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "this is an error"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event return books"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event return books /at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books /by Sunday Night"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event return books /at Monday"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "pongzers": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin -encoding UTF-8 ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "pongzers": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "if ! (javac -cp ../src -Xlint:none -d ../bin -encoding UTF-8 ../src/main/java/*.java)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "pongzers": 2,
      "-": 37
    }
  }
]
