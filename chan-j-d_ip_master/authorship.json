[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"Duke is an **interactive desktop app used to keep track of tasks to be completed**. It is optimized "},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"for use through a **Command Line Interface** (CLI) while providing a minimalistic and elegant Graphical User Interface "},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"(GUI). If you can type fast and wish to keep track of tasks this way, then this might be the app for you!"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"## Quick Start"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"1. Ensure you have Java 11 or above installed in your computer."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"2. Download \"Duke.jar\" from [here](https://github.com/chan-j-d/ip/releases)."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"3. Copy the file to the desired location where you would normally access it."},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"4. Double-click the file to start the app. The GUI will look similar to the image below. Upon using it for the first "},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"time, a new folder named \"data\" will be created in the same directory in order to store task data. \u003cbr /\u003e"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"![Ui](docs/images/UiFirstOpen.png) "},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"5. Type the command in the text box and press Enter to execute the command. You can begin by trying the few commands "},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"in-order below."},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    1. \u003ccode\u003etodo some task\u003c/code\u003e: Adds a todo-task \u003ccode\u003esome task\u003c/code\u003e."},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    2. \u003ccode\u003elist\u003c/code\u003e: Lists all current task. You should see \"some task\" added in step 1."},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    3. \u003ccode\u003edone 1\u003c/code\u003e: Marks the 1st task. In this case, it is the todo-task \"some task\"."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    4. \u003ccode\u003elist\u003c/code\u003e: Lists all current task. Notice that the task is now marked as complete."},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    5. \u003ccode\u003edelete 1\u003c/code\u003e: Deletes the 1st task. "},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    6. \u003ccode\u003ebye\u003c/code\u003e: Closes the app."},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"6. Refer to the [features](https://github.com/chan-j-d/ip/tree/master/docs#features) below for more commands and the details of each command."},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"## Features "},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"Note the following about the command format:"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"- The first word of the command is always the command identifier."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"e.g. \u003ccode\u003e{identifier} {details}\u003c/code\u003e where \u003ccode\u003e{identifier}\u003c/code\u003e is a single word identifying the command type."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"- Commands are case-sensitive."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"e.g. for the command \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003eTODO\u003c/code\u003e and \u003ccode\u003etOdO\u003c/code\u003e will not be recognised."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"- Fields in curly braces such as \u003ccode\u003e{description}\u003c/code\u003e are for you to specify the input."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"- Note further command format specifications for the individual commands."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"### General commands"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"#### Listing tasks: \u003ccode\u003elist\u003c/code\u003e"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"Shows all tasks that have been added to Duke."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003elist\u003c/code\u003e"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"#### Finding tasks: \u003ccode\u003efind\u003c/code\u003e "},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"Finds tasks with description containing the given word or phrase."},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003efind {keyword or phrase}\u003c/code\u003e"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"- The search is case-sensitive. e.g. \u003ccode\u003eTASK\u003c/code\u003e will not match \u003ccode\u003etask\u003c/code\u003e."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"- The search will find exact matches of the keyword or phrase provided. e.g. \u003ccode\u003eone t\u003c/code\u003e will find"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eone time\u003c/code\u003e but not \u003ccode\u003eonetime\u003c/code\u003e or \u003ccode\u003et one\u003c/code\u003e."},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"Example:"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003efind CS2103\u003c/code\u003e finds all tasks with \u003ccode\u003eCS2103\u003c/code\u003e in its description"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"- A list of tasks will be sent by Duke. The format resembles that of the \u003ccode\u003elist\u003c/code\u003e command. "},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"#### Exiting the app: \u003ccode\u003ebye\u003c/code\u003e"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"Exits the app."},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003ebye\u003c/code\u003e"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"### Add commands"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"Below are commands that add different types of tasks and their details."},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"#### Adding ToDo-type task: \u003ccode\u003etodo\u003c/code\u003e"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"Adds a task with a description that needs to be completed."},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003etodo {description}\u003c/code\u003e"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{description}\u003c/code\u003e cannot be empty."},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"Examples:"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003etodo CS2103 Individual Project\u003c/code\u003e Adds a todo-task with description \u003ccode\u003eCS2103 Individual Project\u003c/code\u003e."},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"- A todo-task is added. The task can be seen when the \u003ccode\u003elist\u003c/code\u003e command is called."},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"It will appear with the identifier \u003ccode\u003e[T]\u003c/code\u003e for todo."},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"#### Adding Deadline-type task: \u003ccode\u003eDeadline\u003c/code\u003e"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"Adds a task with a description and a deadline."},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003edeadline {description} /by {deadline}\u003c/code\u003e"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{deadline}\u003c/code\u003e must be specified."},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{deadline}\u003c/code\u003e is of the format \u003ccode\u003eDD-MM-YYYY HHmm\u003c/code\u003e."},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"Examples:"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003edeadline Individual Project /by 18-09-2020 2359\u003c/code\u003e Adds a deadline with description"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":" \u003ccode\u003eIndividual Project\u003c/code\u003e and deadline at \u003ccode\u003e18-09-2020 2359\u003c/code\u003e."},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":" "},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"- A deadline is added. The task can be seen when the \u003ccode\u003elist\u003c/code\u003e command is called. "},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"It will appear with the identifier \u003ccode\u003e[D]\u003c/code\u003e for deadline."},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"#### Adding Event-type task: \u003ccode\u003eevent\u003c/code\u003e"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"Adds a task with a description, a start timing and an end timing."},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003eevent {description} /at {timings}\u003c/code\u003e"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{timings}\u003c/code\u003e must be specified."},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{timings}\u003c/code\u003e is of the format \u003ccode\u003eDD-MM-YYYY HHmm-DD-MM-YYYY HHmm\u003c/code\u003e **or** "},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eDD-MM-YYYY HHmm-HHmm\u003c/code\u003e if the start and end timings are on the same day."},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"- The start timing must come before the end timing."},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"Examples:"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003eevent CS2103 Lecture /at 18-09-2020 1600-1800\u003c/code\u003e Adds an event with description "},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eCS2103 Lecture\u003c/code\u003e, start timing at \u003ccode\u003e18-09-2020 1600\u003c/code\u003e and end timing at "},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003e18-09-2020 1800\u003c/code\u003e."},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003eevent Recess Week /at 19-09-2020 0000-27-09-2020 2359\u003c/code\u003e Adds an event with description "},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eRecess Week\u003c/code\u003e, start timing at \u003ccode\u003e19-09-2020 0000\u003c/code\u003e and end timing at \u003ccode\u003e27-09-2020 2359\u003c/code\u003e."},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"- An event is added. The task can be seen when the \u003ccode\u003elist\u003c/code\u003e command is called. "},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"It will appear with the identifier \u003ccode\u003e[E]\u003c/code\u003e for event."},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"#### Adding recurring tasks: \u003ccode\u003e-r\u003c/code\u003e"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"Adds a recurring task which recurs based on the specified interval. Task must be a deadline or event."},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003e{recurring task specification} -r {interval}\u003c/code\u003e"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{recurring task specification}\u003c/code\u003e must be a full command for adding either a deadline or event. "},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"e.g. \u003ccode\u003edeadline CS2103 IP /by 18-09-2020 2359 -r {interval}\u003c/code\u003e"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{interval}\u003c/code\u003e is of the form \u003ccode\u003eXO\u003c/code\u003e where"},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"    - \u003ccode\u003eO\u003c/code\u003e refers to the interval specifier. The specifier is not case-sensitive."},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eD\u003c/code\u003e for day"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eW\u003c/code\u003e for week"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eM\u003c/code\u003e for month"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eY\u003c/code\u003e for year"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"    - \u003ccode\u003eX\u003c/code\u003e refers to the multiplier"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"        - Multiplier must be a positive integer. e.g. 1, 2, ..."},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"        - Multiplier is optional. If a multiplier is not specified, it is set to 1."},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"- The recurring task only recurs when Duke is opened after the end-timing for the recurring task. "},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"The task will be pushed back by multiples of the recurring interval until the end timing exceeds the current time."},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":" It is marked as undone regardless of the original completion status."},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"Example: "},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003edeadline weekly assignment /by 17-09-2020 2359 -r W\u003c/code\u003e Adds a recurring deadline with description "},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eweekly assignment\u003c/code\u003e, first deadline at \u003ccode\u003e17-09-2020 2359\u003c/code\u003e and recurring interval of 1 week."},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003eevent project meeting /at 16-10-2020 1400-1600 -r 2D\u003c/code\u003e Adds a recurring event with description "},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eproject meeting\u003c/code\u003e, first event on \u003ccode\u003e16-10-2020\u003c/code\u003e from \u003ccode\u003e1400-1600\u003c/code\u003e and recurs every "},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"2 days."},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":"- The recurring tasks is added to the list. The recurring task can be identified by the "},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003e(Recurring: {interval})\u003c/code\u003e at the end of the task."},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":"### State-changing commands"},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":"#### Completing a task: \u003ccode\u003edone\u003c/code\u003e"},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":"Marks a task as complete."},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003edone {index}\u003c/code\u003e"},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e must be a positive integer. e.g. 1, 2, ..."},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e index refers to the number shown on the task when the \u003ccode\u003elist\u003c/code\u003e command is used."},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"Example:"},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003edone 2\u003c/code\u003e Marks the 2nd task shown by the \u003ccode\u003elist\u003c/code\u003e command as done."},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":148,"author":{"gitId":"chan-j-d"},"content":"- If the task was previously undone (denoted with the symbol ✘), then that task is now marked as done "},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":"(with the symbol ✓). "},{"lineNumber":150,"author":{"gitId":"chan-j-d"},"content":"#### Deleting a task: \u003ccode\u003edelete\u003c/code\u003e"},{"lineNumber":151,"author":{"gitId":"chan-j-d"},"content":"Deletes a task from the list."},{"lineNumber":152,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003edelete {index}\u003c/code\u003e"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e must be a positive integer. e.g. 1, 2,..."},{"lineNumber":155,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e index refers to the number shown on the task when the \u003ccode\u003elist\u003c/code\u003e command is used."},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":158,"author":{"gitId":"chan-j-d"},"content":"- The task at \u003ccode\u003e{index}\u003c/code\u003e will be removed from the list and is no longer shown when the \u003ccode\u003elist\u003c/code\u003e "},{"lineNumber":159,"author":{"gitId":"chan-j-d"},"content":"command is used."},{"lineNumber":160,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":161,"author":{"gitId":"chan-j-d"},"content":"## Command summary"},{"lineNumber":162,"author":{"gitId":"chan-j-d"},"content":"Action | Format"},{"lineNumber":163,"author":{"gitId":"chan-j-d"},"content":"---------|-----------"},{"lineNumber":164,"author":{"gitId":"chan-j-d"},"content":"**List** | \u003ccode\u003elist\u003c/code\u003e"},{"lineNumber":165,"author":{"gitId":"chan-j-d"},"content":"**Find** | \u003ccode\u003efind {keyword or phrase}\u003c/code\u003e"},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":"**Exit** | \u003ccode\u003ebye\u003c/code\u003e"},{"lineNumber":167,"author":{"gitId":"chan-j-d"},"content":"**ToDo** | \u003ccode\u003etodo {description}\u003c/code\u003e"},{"lineNumber":168,"author":{"gitId":"chan-j-d"},"content":"**Deadline** | \u003ccode\u003edeadline {description} /by {deadline}\u003c/code\u003e"},{"lineNumber":169,"author":{"gitId":"chan-j-d"},"content":"**Event** | \u003ccode\u003eevent {description} /at {timings}\u003c/code\u003e"},{"lineNumber":170,"author":{"gitId":"chan-j-d"},"content":"**Recurring Task** | \u003ccode\u003e{recurring task specification} -r {interval}\u003c/code\u003e"},{"lineNumber":171,"author":{"gitId":"chan-j-d"},"content":"**Done** | \u003ccode\u003edone {index}\u003c/code\u003e"},{"lineNumber":172,"author":{"gitId":"chan-j-d"},"content":"**Delete** | \u003ccode\u003edelete {index}\u003c/code\u003e"},{"lineNumber":173,"author":{"gitId":"chan-j-d"},"content":""}],"authorContributionMap":{"chan-j-d":173}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    archiveBaseName \u003d \"Duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":18,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"Duke is an **interactive desktop app used to keep track of tasks to be completed**. It is optimized "},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"for use through a **Command Line Interface** (CLI) while providing a minimalistic and elegant Graphical User Interface "},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"(GUI). If you can type fast and wish to keep track of tasks this way, then this might be the app for you!"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"## Quick Start"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"1. Ensure you have Java 11 or above installed in your computer."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"2. Download \"Duke.jar\" from [here](https://github.com/chan-j-d/ip/releases)."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"3. Copy the file to the desired location where you would normally access it."},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"4. Double-click the file to start the app. The GUI will look similar to the image below. Upon using it for the first "},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"time, a new folder named \"data\" will be created in the same directory in order to store task data. \u003cbr /\u003e"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"![Ui](images/UiFirstOpen.png) "},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"5. Type the command in the text box and press Enter to execute the command. You can begin by trying the few commands "},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"in-order below."},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    1. \u003ccode\u003etodo some task\u003c/code\u003e: Adds a todo-task \u003ccode\u003esome task\u003c/code\u003e."},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    2. \u003ccode\u003elist\u003c/code\u003e: Lists all current task. You should see \"some task\" added in step 1."},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    3. \u003ccode\u003edone 1\u003c/code\u003e: Marks the 1st task. In this case, it is the todo-task \"some task\"."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    4. \u003ccode\u003elist\u003c/code\u003e: Lists all current task. Notice that the task is now marked as complete."},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    5. \u003ccode\u003edelete 1\u003c/code\u003e: Deletes the 1st task. "},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    6. \u003ccode\u003ebye\u003c/code\u003e: Closes the app."},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"6. Refer to the [features](https://github.com/chan-j-d/ip/tree/master/docs#features) below for more commands and the details of each command."},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"Note the following about the command format:"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"- The first word of the command is always the command identifier."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"e.g. \u003ccode\u003e{identifier} {details}\u003c/code\u003e where \u003ccode\u003e{identifier}\u003c/code\u003e is a single word identifying the command type."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"- Commands are case-sensitive."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"e.g. for the command \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003eTODO\u003c/code\u003e and \u003ccode\u003etOdO\u003c/code\u003e will not be recognised."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"- Fields in curly braces such as \u003ccode\u003e{description}\u003c/code\u003e are for you to specify the input."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"- Note further command format specifications for the individual commands."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"### General commands"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"#### Listing tasks: \u003ccode\u003elist\u003c/code\u003e"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"Shows all tasks that have been added to Duke."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003elist\u003c/code\u003e"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"#### Finding tasks: \u003ccode\u003efind\u003c/code\u003e "},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"Finds tasks with description containing the given word or phrase."},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003efind {keyword or phrase}\u003c/code\u003e"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"- The search is case-sensitive. e.g. \u003ccode\u003eTASK\u003c/code\u003e will not match \u003ccode\u003etask\u003c/code\u003e."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"- The search will find exact matches of the keyword or phrase provided. e.g. \u003ccode\u003eone t\u003c/code\u003e will find"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eone time\u003c/code\u003e but not \u003ccode\u003eonetime\u003c/code\u003e or \u003ccode\u003et one\u003c/code\u003e."},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"Example:"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003efind CS2103\u003c/code\u003e finds all tasks with \u003ccode\u003eCS2103\u003c/code\u003e in its description"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"- A list of tasks will be sent by Duke. The format resembles that of the \u003ccode\u003elist\u003c/code\u003e command. "},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"#### Exiting the app: \u003ccode\u003ebye\u003c/code\u003e"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"Exits the app."},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003ebye\u003c/code\u003e"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"### Add commands"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"Below are commands that add different types of tasks and their details."},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"#### Adding ToDo-type task: \u003ccode\u003etodo\u003c/code\u003e"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"Adds a task with a description that needs to be completed."},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003etodo {description}\u003c/code\u003e"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{description}\u003c/code\u003e cannot be empty."},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"Examples:"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003etodo CS2103 Individual Project\u003c/code\u003e Adds a todo-task with description \u003ccode\u003eCS2103 Individual Project\u003c/code\u003e."},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"- A todo-task is added. The task can be seen when the \u003ccode\u003elist\u003c/code\u003e command is called."},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"It will appear with the identifier \u003ccode\u003e[T]\u003c/code\u003e for todo."},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"#### Adding Deadline-type task: \u003ccode\u003edeadline\u003c/code\u003e"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"Adds a task with a description and a deadline."},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003edeadline {description} /by {deadline}\u003c/code\u003e"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{deadline}\u003c/code\u003e must be specified."},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{deadline}\u003c/code\u003e is of the format \u003ccode\u003eDD-MM-YYYY HHmm\u003c/code\u003e."},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"Examples:"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003edeadline Individual Project /by 18-09-2020 2359\u003c/code\u003e Adds a deadline with description"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":" \u003ccode\u003eIndividual Project\u003c/code\u003e and deadline at \u003ccode\u003e18-09-2020 2359\u003c/code\u003e."},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":" "},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"- A deadline is added. The task can be seen when the \u003ccode\u003elist\u003c/code\u003e command is called. "},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"It will appear with the identifier \u003ccode\u003e[D]\u003c/code\u003e for deadline."},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"#### Adding Event-type task: \u003ccode\u003eevent\u003c/code\u003e"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"Adds a task with a description, a start timing and an end timing."},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003eevent {description} /at {timings}\u003c/code\u003e"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{timings}\u003c/code\u003e must be specified."},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"- The \u003ccode\u003e{timings}\u003c/code\u003e is of the format \u003ccode\u003eDD-MM-YYYY HHmm-DD-MM-YYYY HHmm\u003c/code\u003e **or** "},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eDD-MM-YYYY HHmm-HHmm\u003c/code\u003e if the start and end timings are on the same day."},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"- The start timing must come before the end timing."},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"Examples:"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003eevent CS2103 Lecture /at 18-09-2020 1600-1800\u003c/code\u003e Adds an event with description "},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eCS2103 Lecture\u003c/code\u003e, start timing at \u003ccode\u003e18-09-2020 1600\u003c/code\u003e and end timing at "},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003e18-09-2020 1800\u003c/code\u003e."},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003eevent Recess Week /at 19-09-2020 0000-27-09-2020 2359\u003c/code\u003e Adds an event with description "},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eRecess Week\u003c/code\u003e, start timing at \u003ccode\u003e19-09-2020 0000\u003c/code\u003e and end timing at \u003ccode\u003e27-09-2020 2359\u003c/code\u003e."},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"- An event is added. The task can be seen when the \u003ccode\u003elist\u003c/code\u003e command is called. "},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"It will appear with the identifier \u003ccode\u003e[E]\u003c/code\u003e for event."},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"#### Adding recurring tasks: \u003ccode\u003e-r\u003c/code\u003e"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"Adds a recurring task which recurs based on the specified interval. Task must be a deadline or event."},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003e{recurring task specification} -r {interval}\u003c/code\u003e"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{recurring task specification}\u003c/code\u003e must be a full command for adding either a deadline or event. "},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"e.g. \u003ccode\u003edeadline CS2103 IP /by 18-09-2020 2359 -r {interval}\u003c/code\u003e"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{interval}\u003c/code\u003e is of the form \u003ccode\u003eXO\u003c/code\u003e where"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"    - \u003ccode\u003eO\u003c/code\u003e refers to the interval specifier. The specifier is not case-sensitive."},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eD\u003c/code\u003e for day"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eW\u003c/code\u003e for week"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eM\u003c/code\u003e for month"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"        - \u003ccode\u003eY\u003c/code\u003e for year"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"    - \u003ccode\u003eX\u003c/code\u003e refers to the multiplier"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"        - Multiplier must be a positive integer. e.g. 1, 2, ..."},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"        - Multiplier is optional. If a multiplier is not specified, it is set to 1."},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"- The recurring task only recurs when Duke is opened after the end-timing for the recurring task. "},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"The task will be pushed back by multiples of the recurring interval until the end timing exceeds the current time."},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":" It is marked as undone regardless of the original completion status."},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"Example: "},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003edeadline weekly assignment /by 17-09-2020 2359 -r W\u003c/code\u003e Adds a recurring deadline with description "},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eweekly assignment\u003c/code\u003e, first deadline at \u003ccode\u003e17-09-2020 2359\u003c/code\u003e and recurring interval of 1 week."},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003eevent project meeting /at 16-10-2020 1400-1600 -r 2D\u003c/code\u003e Adds a recurring event with description "},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003eproject meeting\u003c/code\u003e, first event on \u003ccode\u003e16-10-2020\u003c/code\u003e from \u003ccode\u003e1400-1600\u003c/code\u003e and recurs every "},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"2 days."},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":"- The recurring tasks is added to the list. The recurring task can be identified by the "},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":"\u003ccode\u003e(Recurring: {interval})\u003c/code\u003e at the end of the task."},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":"### State-changing commands"},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":"#### Completing a task: \u003ccode\u003edone\u003c/code\u003e"},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":"Marks a task as complete."},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003edone {index}\u003c/code\u003e"},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e must be a positive integer. e.g. 1, 2, ..."},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e index refers to the number shown on the task when the \u003ccode\u003elist\u003c/code\u003e command is used."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"Example:"},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003edone 2\u003c/code\u003e Marks the 2nd task shown by the \u003ccode\u003elist\u003c/code\u003e command as done."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":150,"author":{"gitId":"chan-j-d"},"content":"- If the task was previously undone (denoted with the symbol ✘), then that task is now marked as done "},{"lineNumber":151,"author":{"gitId":"chan-j-d"},"content":"(with the symbol ✓). "},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"#### Deleting a task: \u003ccode\u003edelete\u003c/code\u003e"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"Deletes a task from the list."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":"Format: \u003ccode\u003edelete {index}\u003c/code\u003e"},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e must be a positive integer. e.g. 1, 2,..."},{"lineNumber":158,"author":{"gitId":"chan-j-d"},"content":"- \u003ccode\u003e{index}\u003c/code\u003e index refers to the number shown on the task when the \u003ccode\u003elist\u003c/code\u003e command is used."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"chan-j-d"},"content":"Outcome:"},{"lineNumber":161,"author":{"gitId":"chan-j-d"},"content":"- The task at \u003ccode\u003e{index}\u003c/code\u003e will be removed from the list and is no longer shown when the \u003ccode\u003elist\u003c/code\u003e "},{"lineNumber":162,"author":{"gitId":"chan-j-d"},"content":"command is used."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"chan-j-d"},"content":"## Command summary"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":"Action | Format"},{"lineNumber":167,"author":{"gitId":"chan-j-d"},"content":"---------|-----------"},{"lineNumber":168,"author":{"gitId":"chan-j-d"},"content":"**List** | \u003ccode\u003elist\u003c/code\u003e"},{"lineNumber":169,"author":{"gitId":"chan-j-d"},"content":"**Find** | \u003ccode\u003efind {keyword or phrase}\u003c/code\u003e"},{"lineNumber":170,"author":{"gitId":"chan-j-d"},"content":"**Exit** | \u003ccode\u003ebye\u003c/code\u003e"},{"lineNumber":171,"author":{"gitId":"chan-j-d"},"content":"**ToDo** | \u003ccode\u003etodo {description}\u003c/code\u003e"},{"lineNumber":172,"author":{"gitId":"chan-j-d"},"content":"**Deadline** | \u003ccode\u003edeadline {description} /by {deadline}\u003c/code\u003e"},{"lineNumber":173,"author":{"gitId":"chan-j-d"},"content":"**Event** | \u003ccode\u003eevent {description} /at {timings}\u003c/code\u003e"},{"lineNumber":174,"author":{"gitId":"chan-j-d"},"content":"**Recurring Task** | \u003ccode\u003e{recurring task specification} -r {interval}\u003c/code\u003e"},{"lineNumber":175,"author":{"gitId":"chan-j-d"},"content":"**Done** | \u003ccode\u003edone {index}\u003c/code\u003e"},{"lineNumber":176,"author":{"gitId":"chan-j-d"},"content":"**Delete** | \u003ccode\u003edelete {index}\u003c/code\u003e"},{"lineNumber":177,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"chan-j-d":166,"-":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.command.CommandParser;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" * Duke is a Personal Assistant Chatbot that helps a user keep track of various things."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    /** list of tasks to keep track of */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    private TaskList taskList;"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /** storage object handling saving and editing of the save file in the hard drive */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** ui object in charge of direct interaction with the user */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"     * Standard constructor initialising the Duke bot."},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"     * It will attempt to search for a pre-saved save file of a previous task list."},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"     * If found, it loads up that task list."},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * Otherwise it creates its own which will be saved and able to be opened by future Duke bots."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    public Duke() {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        storage \u003d Storage.init();"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"        taskList \u003d storage.readStoredData();"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        ui \u003d new UiDefault();"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * Creates a Duke bot with the provided ui."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     * All other settings are the same as the default constructor."},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI to be used."},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    public Duke(Ui ui) {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        storage \u003d storage.init();"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        taskList \u003d storage.readStoredData();"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        this.ui \u003d ui;"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"     * Initialises and runs the Duke chat bot. Does not require input arguments."},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * @param args Input arguments."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        duke.run();"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"     * Runs the duke bot."},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"     * It continuously queries the ui for the next user response and responds appropriately."},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"    public void run() {"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"        assert ui !\u003d null;"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        ui.startup();"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        boolean isExit \u003d false;"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        while (!isExit) {"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"            try {"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"                String userInput \u003d ui.getInput();"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"                Command command \u003d CommandParser.parse(userInput);"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"                assert command !\u003d null;"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"                command.execute(taskList, ui, storage);"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"            } catch (DukeException e) {"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"                ui.outputMessage(e.getMessage());"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"        ui.exit();"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":""}],"authorContributionMap":{"chan-j-d":84,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":" * Represents a general Exception class of Exceptions that occur while DukeException is running."},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"     * Creates a DukeException object with a customised error description."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"     * @param description description of the type of error encountered."},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    public DukeException(String description) {"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"        super(\"Oh no! \" + description);"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":17}},{"path":"src/main/java/duke/DukeGui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.gui.DialogBox;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import javafx.geometry.Insets;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.control.Button;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":" * GUI class handling the graphical aspects of the Duke chatbot."},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"public class DukeGui extends Application implements Ui {"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    /** Default padding for dialogContainer */"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    private static final double DEFAULT_PADDING \u003d 7.0;"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /** Default spacing for dialogContainer */"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private static final double DEFAULT_SPACING \u003d 7.0;"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    //@@author Jeffry Lum"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    //Reused from https://se-education.org/guides/tutorials/javaFxPart2.html with minor modifications"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // JavaFX pieces"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private VBox dialogContainer;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private TextField userInput;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Button sendButton;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Scene scene;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    // Images used for the user and the"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Duke duke;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private boolean isUpdated;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private String enteredMessage;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Starts the Duke GUI application."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param stage stage for the gui application."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void start(Stage stage) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        userInput \u003d new TextField();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        stage.setScene(scene);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        stage.show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        stage.setResizable(false);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":84,"author":{"gitId":"-"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Sets padding between the dialog container and the edge of the GUI."},{"lineNumber":86,"author":{"gitId":"-"},"content":"        dialogContainer.setPadding(new Insets(DEFAULT_PADDING));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Sets a gap between each dialog box."},{"lineNumber":88,"author":{"gitId":"-"},"content":"        dialogContainer.setSpacing(DEFAULT_SPACING);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            handleUserInput();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            handleUserInput();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //@@author"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"        duke \u003d new Duke(this);"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"        CompletableFuture.runAsync(() -\u003e duke.run());"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"     * Displays the opening message to the user."},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"    public void startup() {"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"        Platform.runLater(() -\u003e"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"                dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.OPENING_MESSAGE, dukeImage)));"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"     * Handles the user input upon receiving it."},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"     * The method registers that the use has responded and updates the GUI with the user\u0027s response."},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"    private void handleUserInput() {"},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"        String text \u003d userInput.getText();"},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"        userInput.clear();"},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":"        if (text.isBlank()) {"},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"            return;"},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":"        registerResponse(text);"},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(text, userImage));"},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"     * Displays the duke\u0027s message to the user."},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"     * @param message message to be sent."},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"    public void outputMessage(String message) {"},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":"        Platform.runLater(() -\u003e dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage)));"},{"lineNumber":148,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":150,"author":{"gitId":"chan-j-d"},"content":"    /** Used to notify the sleeping thread in getInput() to obtain user response asynchronously */"},{"lineNumber":151,"author":{"gitId":"chan-j-d"},"content":"    private synchronized void registerResponse(String enteredMessage) {"},{"lineNumber":152,"author":{"gitId":"chan-j-d"},"content":"        this.enteredMessage \u003d enteredMessage;"},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"        isUpdated \u003d true;"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"        notifyAll();"},{"lineNumber":155,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"chan-j-d"},"content":"     * Returns the user\u0027s input by waiting for the user to provide an update."},{"lineNumber":159,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"chan-j-d"},"content":"     * @return string of the user input"},{"lineNumber":161,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"chan-j-d"},"content":"    public synchronized String getInput() {"},{"lineNumber":163,"author":{"gitId":"chan-j-d"},"content":"        isUpdated \u003d false;"},{"lineNumber":164,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":165,"author":{"gitId":"chan-j-d"},"content":"            wait();"},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":167,"author":{"gitId":"chan-j-d"},"content":"            if (!isUpdated) {"},{"lineNumber":168,"author":{"gitId":"chan-j-d"},"content":"                return null;"},{"lineNumber":169,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":170,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"chan-j-d"},"content":"        return enteredMessage;"},{"lineNumber":172,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":174,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"chan-j-d"},"content":"     * Exits the app."},{"lineNumber":176,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"chan-j-d"},"content":"    public void exit() {"},{"lineNumber":178,"author":{"gitId":"chan-j-d"},"content":"        Platform.exit();"},{"lineNumber":179,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":181,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":182,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":99,"-":83}},{"path":"src/main/java/duke/InvalidSaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":" * Represents an exception that occurs when the save file being read has issues."},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"public class InvalidSaveException extends Exception {"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"     * Constructs a new \u003ccode\u003eInvalidSaveException\u003c/code\u003e with the given exception message."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"     * @param message details of the exception."},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    public InvalidSaveException(String message) {"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":17}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":" * Main driver class to initiate the chat bot gui."},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"        Application.launch(DukeGui.class, args);"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":15}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":" * Standard user-interface class that handles interactions between the user and the engine."},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"public interface Ui {"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"    /** Standard opening message sent */"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"    public static final String OPENING_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"     * Queries the user for the next command in the form of a string and returns it."},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"     * @return string provided by the user."},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    public String getInput();"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     * Notifies the user with the given message."},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"     * @param message message to be sent."},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    public void outputMessage(String message);"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * Initialises Ui."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    public void startup();"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * Exits the application and closes Duke."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    public void exit();"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":36}},{"path":"src/main/java/duke/UiDefault.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":" * Default UI class for testing Duke chat bot with terminal."},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"public class UiDefault implements Ui {"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"    //Constants used when formatting the bot\u0027s message"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"    protected static final String LINE_BREAK \u003d \"    ____________________________________________________________\\n\";"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"    protected static final String PRESPACING \u003d \"     \";"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    private Scanner scanner;"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"     * Constructs a new default UI that uses the system I/O for input and output."},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    public UiDefault() {"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"     * Sends the opening message to the output."},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    public void startup() {"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        outputMessage(Ui.OPENING_MESSAGE);"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * Queries the System input stream for the next command in the form of a string and returns it."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     * @return string provided by the user."},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    public String getInput() {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        String userInput \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        while (userInput.isBlank()) {"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"            userInput \u003d scanner.nextLine();"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        return userInput;"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"     * Notifies the System output stream with the given message."},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     * @param message message to be sent."},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    public void outputMessage(String message) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        System.out.println(processString(message));"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"     * Returns a formatted String according to the needs of the specific implementation of Ui."},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"     * @param string message to be sent."},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"     * @return formatted message that will be sent."},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    protected static String processString(String string) {"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        return LINE_BREAK + PRESPACING"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"                + string.replaceAll(\"\\n\", \u0027\\n\u0027 + PRESPACING)"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"                + \u0027\\n\u0027 + LINE_BREAK;"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    public void exit() {"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":71}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.task.TaskParser;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" * Command that adds a new Task to the given TaskList and broadcasts the appropriate update."},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"public class AddCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when a Task is added */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    protected static final String ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task: \";"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    /** Task to be added when execute is performed */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    private Task task;"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /** Private constructor which is not able to handle String inputs directly. */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private AddCommand(Task task) {"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        this.task \u003d task;"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * Returns an AddCommand made from the appropriate string put."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     * This is a static factory method which handles invalid formats as well."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * @param taskCommand String input of the form \"add {task description}\"."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @return command object that adds the task to the task list when executed."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the description of the command is invalid."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    public static AddCommand parse(String taskCommand) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        return new AddCommand(TaskParser.parse(taskCommand));"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     * Adds the stored task to the taskList."},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"     * The method also broadcasts an update through the UI and updates the storage file."},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList List of Tasks to work with."},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI element to be used."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"     * @param storage Storage element to be used."},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        taskList.add(task);"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"        ui.outputMessage(createAddMessage(task, taskList));"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"        storage.updateFile(taskList);"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     * Returns a formatted message for when a task is added."},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     * Edit this to adjust the message sent when the command is executed."},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"     * @param task task added."},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList task list that the task was added to."},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"     * @return formatted String notifying of the update."},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    private String createAddMessage(Task task, TaskList taskList) {"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        return ADDED_MESSAGE + \u0027\\n\u0027"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"                + \"   \" + task + \u0027\\n\u0027"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"                + taskList.createTaskNumberCountMessage();"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":67}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" * Executable command that handles manipulation of Tasks between TaskList, Ui and Storage."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" * Sub-classes have to implement the execute command that dictates what movement is performed."},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" * Commands can also be adjusted to terminate the overall Duke program by adjusting the isExit() method."},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"     * Returns a boolean to tell the program if it should exit."},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     * @return true if the program should exit after executing, false otherwise"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"        return false;"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"     * Executes some manipulation of Task between taskList, ui and storage."},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList List of Tasks to work with."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI element to be used."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     * @param storage Storage element to be used."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":34}},{"path":"src/main/java/duke/command/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":" * Class handles the parsing of Strings into the appropriate type of command objects."},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"public class CommandParser {"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"    /** exit-type string indicator */"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"    protected static final String INDICATOR_CLOSING \u003d \"bye\";"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"    /** list-type string indicator */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    protected static final String INDICATOR_LIST \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    /** done-type string indicator */"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    protected static final String INDICATOR_DONE \u003d \"done\";"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    /** delete-type string indicator */"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    protected static final String INDICATOR_DELETE \u003d \"delete\";"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    /** find-type string indicator */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    protected static final String INDICATOR_FIND \u003d \"find\";"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"     * Returns the appropriate command type based on the string input."},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"     * The method uses the first word to determine that type of command to create."},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"     * @param userInput string containing the command to be created."},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * @return command object corresponding to the details provided."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the user input given is invalid, with the reason provided."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    public static Command parse(String userInput) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"        String firstWord \u003d userInput.split(\" \", 2)[0];"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        switch (firstWord) {"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"        case INDICATOR_CLOSING:"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"            return ExitCommand.create();"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        case INDICATOR_LIST:"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"            return ListCommand.create();"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        case INDICATOR_DONE:"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"            return DoneCommand.parse(userInput);"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        case INDICATOR_DELETE:"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"            return DeleteCommand.parse(userInput);"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        case INDICATOR_FIND:"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            return FindCommand.parse(userInput);"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        default:"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            return AddCommand.parse(userInput);"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"}"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":""}],"authorContributionMap":{"chan-j-d":50}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" * Command that deletes a Task (by index) from the TaskList and broadcasts the appropriate update."},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when a Task is added */"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    protected static final String DELETE_MESSAGE \u003d \"Noted. I\u0027ve removed this task: \";"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** Index of item to be deleted from the task list. Index starts at 1 */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    private int itemIndex;"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    /** Private constructor which is not able to handle String inputs directly. */"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    private DeleteCommand(int itemIndex) {"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        this.itemIndex \u003d itemIndex;"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * Returns a DeleteCommand made from the appropriate string put."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * This is a static factory method which handles invalid formats as well."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     * @param command String input of the form \"delete {index}\" (index starts at 1)."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * @return command object that deletes the designated task when executed."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the command given is invalid, with the reason provided."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    public static DeleteCommand parse(String command) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d command.split(\" \");"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        if (details.length \u003d\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please specify a task to delete!\");"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        int taskNumber;"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            taskNumber \u003d Integer.parseInt(details[1]);"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Invalid number input!\");"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        return new DeleteCommand(taskNumber);"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * Deletes the task corresponding to the index from the task list."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     * The method also broadcasts an update through the UI and updates the storage file."},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList List of Tasks to work with."},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI element to be used."},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     * @param storage Storage element to be used."},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the number provided is invalid."},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        boolean isValidIndex \u003d itemIndex \u003c\u003d taskList.size() \u0026\u0026 itemIndex \u003e 0;"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        if (!isValidIndex) {"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please enter a valid number between 1 and \" + taskList.size());"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        Task removedTask \u003d taskList.remove(itemIndex);"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        ui.outputMessage(createDeleteMessage(removedTask, taskList));"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"        storage.updateFile(taskList);"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"     * Returns a formatted message for when a task is deleted."},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"     * Edit this to adjust the message sent when the command is executed."},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"     * @param taskRemoved task that was removed."},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList task list where the task was deleted from."},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"     * @return formatted String notifying of the update."},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"    private String createDeleteMessage(Task taskRemoved, TaskList taskList) {"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"        return DELETE_MESSAGE + \u0027\\n\u0027"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"                + \"   \" + taskRemoved + \u0027\\n\u0027"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"                + taskList.createTaskNumberCountMessage();"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":84}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" * Command that marks the designated task as complete and broadcasts the appropriate update."},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when a Task is marked as done */"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    protected static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done: \";"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** Index of task to be marked as complete */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    private int doneIndex;"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    /** Private constructor which is not able to handle String inputs directly. */"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    private DoneCommand(int doneIndex) {"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        this.doneIndex \u003d doneIndex;"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * Returns an DoneCommand made from the appropriate string put."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * This is a static factory method which handles invalid formats as well."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     * @param command String input of the form \"done {index}\" (index starts at 1)."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * @return command object that marks the task as done when executed."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the command given is invalid, with the reason provided."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    public static DoneCommand parse(String command) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d command.split(\" \", 2);"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        if (details.length \u003d\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please specify a task to complete!\");"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        int taskNumber;"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            taskNumber \u003d Integer.parseInt(details[1]);"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Invalid number input!\");"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        return new DoneCommand(taskNumber);"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * Marks the index of the designated task as done."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     * The method also broadcasts an update through the UI and updates the storage file."},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList List of Tasks to work with."},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI element to be used."},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     * @param storage Storage element to be used."},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the number provided is invalid."},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        if (doneIndex \u003e taskList.size()) {"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"No such item on the list!\");"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"        } else if (doneIndex \u003c\u003d 0) {"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please enter a valid number between 0 and \" + taskList.size());"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        Task doneTask \u003d taskList.get(doneIndex);"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"        if (doneTask.isCompleted()) {"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"            ui.outputMessage(createAlreadyDoneMessage());"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        doneTask.markDone();"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        ui.outputMessage(createDoneMessage(doneTask));"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        storage.updateFile(taskList);"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"     * Returns a formatted message for when a task is done."},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"     * Edit this to adjust the message sent when the command is executed."},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"     * @param taskDone task marked as done."},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"     * @return formatted String notifying of the update."},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"    private String createDoneMessage(Task taskDone) {"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"        return DONE_MESSAGE + \"\\n   \" + taskDone;"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"    private String createAlreadyDoneMessage() {"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"        return \"Task has already been marked as completed!\";"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":94}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":" * Command that signals exiting the bot and broadcasts the appropriate update."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when a Task is added */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    protected static final String CLOSING_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"     * Returns the default implementation of an ExitCommand to signal Exiting the bot."},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     * @return exit command."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    public static ExitCommand create() {"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"        return new ExitCommand();"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * Signals exit to the bot."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * The command does not perform any manipulation."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     * The method also broadcasts an update through the UI and updates the storage file."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList List of Tasks to work with."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI element to be used."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * @param storage Storage element to be used."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        ui.outputMessage(getClosingText());"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"    /** Method used to create the closing message. For now it just returns the pre-determined message. */"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    private String getClosingText() {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        return CLOSING_MESSAGE;"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"     * Returns true to signal to the bot that it is time to exit."},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"     * @return true."},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    public boolean isExit() {"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        return true;"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":55}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" * Command that searches Tasks with the given string and sends the appropriate update."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when messages are found */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    protected static final String FOUND_MESSAGE \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when no messages are found */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    protected static final String NONE_FOUND_MESSAGE \u003d \"It seems there were no matches!\";"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    /** Reference string to search for */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    private final String searchString;"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /** Private constructor unable to parse the direct user input. */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private FindCommand(String searchString) {"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        this.searchString \u003d searchString;"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * Returns an FindCommand made from the appropriate string put."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     * This is a static factory method which handles invalid formats as well."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * @param command String input of the form \"find {search string}\"."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @return command object that finds the tasks containing the search string when executed."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the command given does not provide a string to search for."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    public static FindCommand parse(String command) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d command.split(\" \", 2);"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        if (details.length \u003d\u003d 1) {"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please specify a keyword/keyphrase to search!\");"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        return new FindCommand(details[1]);"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"     * Finds the tasks whose description contains the search string."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"     * The method then broadcasts an update through the UI."},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList List of Tasks to work with."},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI element to be used."},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     * @param storage Storage element to be used."},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        TaskList matchingTasks \u003d getMatchingTasks(searchString, taskList);"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        ui.outputMessage(createFindMessage(matchingTasks));"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"     * Returns a list of tasks all of which have their descriptions containing the search string."},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"     * @param searchString string to be matched."},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList list of tasks to be searched."},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"     * @return list of tasks which contain the string in their description."},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    protected TaskList getMatchingTasks(String searchString, TaskList taskList) {"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        TaskList matchingList \u003d new TaskList();"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        taskList.stream()"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"                .filter(task -\u003e task.getTaskDescription().contains(searchString))"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"                .forEach(task -\u003e matchingList.add(task));"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        return matchingList;"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"     * Returns a formatted message for finding tasks."},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"     * Edit this to adjust the message sent when the command is executed."},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList list of tasks containing the search string."},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     * @return formatted String notifying of the update."},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"    protected String createFindMessage(TaskList taskList) {"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"            return NONE_FOUND_MESSAGE;"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"            return FOUND_MESSAGE + \u0027\\n\u0027 + taskList.toString();"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":89}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":" * Command that outputs the current state of the task list as an update."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when a Task is added */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    protected static final String LIST_HEADER \u003d \"Here are the tasks in your list: \";"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    /** Default message to be sent when no tasks are found in the list */"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    protected static final String EMPTY_LIST_MESSAGE \u003d \"You have no tasks on your list!\";"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     * Returns a standard List command."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"     * @return list command."},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    public static ListCommand create() {"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        return new ListCommand();"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * Executes the list command which outputs the elements in the task list to the given ui."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     * The command does not perform any manipulation."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList List of Tasks to work with."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @param ui UI element to be used."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * @param storage Storage element to be used."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        String message;"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"            message \u003d EMPTY_LIST_MESSAGE;"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"            message \u003d LIST_HEADER + \u0027\\n\u0027 + taskList.toString();"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        ui.outputMessage(message);"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":46}},{"path":"src/main/java/duke/datetime/DateTimeHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.datetime;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import duke.util.Pair;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" * Class specifically meant to handle string inputs and convert them into LocalDateTime objects."},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"public class DateTimeHandler {"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    /** String representing standard datetime format used */"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    public static final String STANDARD_DATETIME_FORMAT_STRING \u003d \"dd-MM-yyyy HHmm\";"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    /** String representing standard time format */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    public static final String STANDARD_2400_FORMAT_STRING \u003d \"HHmm\";"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    /** DateTimeFormatter object of standard datetime format */"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    public static final DateTimeFormatter STANDARD_DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern("},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"            STANDARD_DATETIME_FORMAT_STRING);"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /** DateTimeFormatter object of standard time format */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    public static final DateTimeFormatter STANDARD_2400_FORMAT \u003d DateTimeFormatter.ofPattern("},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"            STANDARD_2400_FORMAT_STRING);"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /** Length of standard datetime format string */"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private static final int STANDARD_DATETIME_LENGTH \u003d STANDARD_DATETIME_FORMAT_STRING.length();"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    /** Length of standard 2400 format string */"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    private static final int STANDARD_2400_LENGTH \u003d STANDARD_2400_FORMAT_STRING.length();"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * Returns a LocalDateTime object from the parsed string."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     * This method handles invalid string formats as well."},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * @param dateTime string to be converted into LocalDateTime object."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     * @return LocalDateTime object from the details given."},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the format of the datetime string is invalid."},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            return formatToLocalDateTime(dateTime);"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(dateTime + \" is an invalid datetime format! Please use \""},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"                    + STANDARD_DATETIME_FORMAT_STRING + \" (24hr)\");"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * Returns a pair of LocalDateTime objects from the parsed event timings string."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     * This method handles invalid string formats as well."},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     * Besides invalid format, this method checks that the latter timing is later than the earlier timing."},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     * Format 1: DD-MM-YYYY HHMM-HHMM"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"     * Format 2: DD-MM-YYYY HHMM-DD-MM-YYYY HHMM"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     * @param eventTiming string to be converted into a pair of LocalDateTime objects."},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"     * @return pair of LocalDateTime objects from the details given."},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the format of the event-timing string is invalid or end timing later than start."},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"    public static Pair\u003cLocalDateTime, LocalDateTime\u003e parseEventTimings(String eventTiming) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        int acceptableLength1 \u003d STANDARD_DATETIME_LENGTH + 1 + STANDARD_2400_LENGTH;"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"        int acceptableLength2 \u003d STANDARD_DATETIME_LENGTH * 2 + 1;"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"        boolean isFormat1Length \u003d eventTiming.length() \u003d\u003d acceptableLength1;"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        boolean isFormat2Length \u003d eventTiming.length() \u003d\u003d acceptableLength2;"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        if (!isFormat1Length \u0026\u0026 !isFormat2Length) {"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(getEventStringFormatError(eventTiming));"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        String firstTiming \u003d eventTiming.substring(0, STANDARD_DATETIME_LENGTH);"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        String secondTiming \u003d eventTiming.substring(STANDARD_DATETIME_LENGTH + 1);"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"            LocalDateTime dateTime1 \u003d formatToLocalDateTime(firstTiming);"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"            LocalDateTime dateTime2;"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"            if (secondTiming.length() \u003d\u003d STANDARD_DATETIME_LENGTH) {"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"                dateTime2 \u003d formatToLocalDateTime(secondTiming);;"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"            } else {"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"                LocalTime time \u003d formatToLocalTime(secondTiming);"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"                dateTime2 \u003d LocalDateTime.of(dateTime1.toLocalDate(), time);"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"            if (dateTime2.compareTo(dateTime1) \u003c 0) {"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"                throw new DukeException(\"End timing must be later than start timing!\");"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"            return Pair.of(dateTime1, dateTime2);"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(getEventStringFormatError(eventTiming));"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a formatted error message for the parseEventTimings method */"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"    private static String getEventStringFormatError(String eventTiming) {"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"        return eventTiming + \" is not a valid event timing. Please use either\\n\""},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"                + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_DATETIME_FORMAT_STRING + \" (24hr)\\n\""},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"                + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_2400_FORMAT_STRING + \" (24hr)\";"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a LocalDateTime object from the string provided */"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"    private static LocalDateTime formatToLocalDateTime(String datetimeString) throws DateTimeParseException {"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"        return LocalDateTime.parse(datetimeString, STANDARD_DATETIME_FORMAT);"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a LocalTime object from the string provided */"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"    private static LocalTime formatToLocalTime(String timeString) throws DateTimeParseException {"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"        return LocalTime.parse(timeString, STANDARD_2400_FORMAT);"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":116}},{"path":"src/main/java/duke/datetime/FastForwarder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.datetime;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.function.Function;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":" * Single Method Interface for a function that fast forwards a LocalDateTime object by a fixed amount of time."},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"public interface FastForwarder extends Function\u003cLocalDateTime, LocalDateTime\u003e {"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":10}},{"path":"src/main/java/duke/datetime/FastForwarderGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.datetime;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" * A Generator class that handles the logic of parsing strings to create the appropriate FastForwarder."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"public class FastForwarderGenerator {"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    /** Identifier for a day-unit interval */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    private static final String INTERVAL_DAILY \u003d \"D\";"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /** Identifier for a week-unit interval */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    private static final String INTERVAL_WEEKLY \u003d \"W\";"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** Identifier for a month-unit interval */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    private static final String INTERVAL_MONTHLY \u003d \"M\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    /** Identifier for a year-unit interval */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    private static final String INTERVAL_YEARLY \u003d \"Y\";"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    /** List containing all possible valid interval identifiers */"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    private static final List\u003cString\u003e VALID_INTERVAL_IDENTIFIERS \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    static {"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"        VALID_INTERVAL_IDENTIFIERS.add(INTERVAL_DAILY);"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"        VALID_INTERVAL_IDENTIFIERS.add(INTERVAL_WEEKLY);"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"        VALID_INTERVAL_IDENTIFIERS.add(INTERVAL_MONTHLY);"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        VALID_INTERVAL_IDENTIFIERS.add(INTERVAL_YEARLY);"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * Returns a FastForwarder that takes in a LocalDateTime and moves it forward by the specified amount of time."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     * Recurring details should be in the form of \u003ccode\u003eOX\u003c/code\u003e where"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     * \u003ccode\u003eO\u003c/code\u003e is the unit multiplier for the unit interval"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * \u003ccode\u003eX\u003c/code\u003e is the unit interval used for this fastforwarder. \u0027D\u0027 for day, \u0027W\u0027 for week, \u0027M\u0027 and \u0027Y\u0027."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     * @param recurringDetails details of the recurring interval"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     * @return FastForwarder that takes in a LocalDateTime and returns a new LocalDateTime that has been moved forward."},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the recurring details provided is of the wrong format or invalid."},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"    public static FastForwarder generateFastForwarder(String recurringDetails) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        int recurringIdentifierIndex \u003d recurringDetails.length() - 1;"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        int multiplier;"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        if (recurringIdentifierIndex \u003d\u003d 0) {"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"            multiplier \u003d 1;"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"            String multiplierString \u003d recurringDetails.substring(0, recurringIdentifierIndex);"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"            try {"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"                multiplier \u003d Integer.parseInt(multiplierString);"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"                throw new DukeException(multiplierString + \" is not a valid number!\");"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        if (multiplier \u003c\u003d 0) {"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please specify an integer larger than 0!\");"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        String recurringIdentifier \u003d recurringDetails.substring(recurringIdentifierIndex).toUpperCase();"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        switch (recurringIdentifier) {"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        case INTERVAL_DAILY:"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"            return localDateTime -\u003e localDateTime.plusDays(multiplier);"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        case INTERVAL_WEEKLY:"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"            return localDateTime -\u003e localDateTime.plusWeeks(multiplier);"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        case INTERVAL_MONTHLY:"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"            return localDateTime -\u003e localDateTime.plusMonths(multiplier);"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"        case INTERVAL_YEARLY:"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"            return localDateTime -\u003e localDateTime.plusYears(multiplier);"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        default:"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(getInvalidIdentifierExceptionMessage());"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"    /** Formats the invalid identifier message */"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"    private static String getInvalidIdentifierExceptionMessage() {"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"        return \"Invalid interval type!\\nPlease use one of the following: \""},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"                + String.join(\", \", VALID_INTERVAL_IDENTIFIERS);"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":81}},{"path":"src/main/java/duke/gui/CircleImage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.image.Image;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":" * A class for creating images with a circular frame."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" * The class provides a single static method that creates a circular image from an image and a specified radius."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" * To be used with JavaFX."},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"public class CircleImage {"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"     * Returns a JavaFX node of the image with a circular frame."},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"     * @param circleRadius radius of the circle."},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     * @param image image to be used to fill the circle."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     * @return circle with the provided radius and image as fill."},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    public static Circle createCircleImage(double circleRadius, Image image) {"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        Circle background \u003d new Circle(circleRadius);"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        background.setFill(new ImagePattern(image));"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"        return background;"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":28}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import javafx.geometry.Pos;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" * JavaFX node of a dialog box consisting of a picture and a text box."},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"public class DialogBox extends HBox {"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    /** default radius of user\u0027s image in the dialog box */"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    private static final double IMAGE_RADIUS \u003d 35.0;"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    /** default spacing between dialog and text box */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    private static final double SPACING \u003d 10;"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /** text to be contained in the text box */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private TextBox text;"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /** image to be used in the dialog box */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    private Circle displayPicture;"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /** constructs a dialog box from the given text, image and direction */"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private DialogBox(String text, Image image, boolean left) {"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        this.text \u003d left"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"                ? TextBox.leftwardTextBox(text)"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"                : TextBox.rightwardTextBox(text);"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"        displayPicture \u003d CircleImage.createCircleImage(IMAGE_RADIUS, image);"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"        getChildren().addAll(this.text, displayPicture);"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        setSpacing(SPACING);"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"    private void flip() {"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        ObservableList\u003cNode\u003e listOfNodes \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        FXCollections.reverse(listOfNodes);"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        this.getChildren().setAll(listOfNodes);"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * Returns a JavaFX dialog box with the user\u0027s message and a given image."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     * @param userMessage message sent by the user."},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     * @param image image of the user."},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"     * @return a javaFX node containing the user\u0027s image and the user\u0027s text."},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"    public static DialogBox getUserDialog(String userMessage, Image image) {"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"        return new DialogBox(userMessage, image, false);"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"     * Returns a JavaFX dialog box with duke\u0027s message and a given image."},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"     * @param dukeMessage message sent by duke."},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"     * @param image image of duke."},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"     * @return a javaFX node containing the duke\u0027s image and the duke\u0027s text."},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"    public static DialogBox getDukeDialog(String dukeMessage, Image image) {"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"        DialogBox box \u003d new DialogBox(dukeMessage, image, true);"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        box.flip();"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        return box;"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":73}},{"path":"src/main/java/duke/gui/TextBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import javafx.geometry.Insets;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.shape.Rectangle;"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import javafx.scene.shape.SVGPath;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":" * A JavaFX node representing a text box as is usually seen in apps like Telegram and Messenger."},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"public class TextBox extends VBox {"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    /** default radius of round corners in text box */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    private static final double CORNER_RADIUS \u003d 10;"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /** default top/bottom padding */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private static final double LABEL_PADDING_VERTICAL \u003d 5;"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /** default left-right padding */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    private static final double LABEL_PADDING_HORIZONTAL \u003d 10;"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /** SVG path for left triangle */"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    private static final String PATH_LEFT_TRIANGLE \u003d \"M0,0 L10,10 L10,0 L0,0\";"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    /** SVG path for right triangle */"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    private static final String PATH_RIGHT_TRIANGLE \u003d \"M0,0 L-10,10 L-10,0 L0,0\";"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    /** vertical gap between text box peak and circle image peak */"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    private static final double BUFFER_TOP \u003d 10;"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    /** leftward box colour */"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    private static final Color LEFTWARD_COLOR \u003d Color.SKYBLUE;"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    /** rightward box colour */"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    private static final Color RIGHTWARD_COLOR \u003d Color.LIGHTGREEN;"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     * Constructs a text box with the relevant text placed in a chat bubble."},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     * The text box can be constructed to be leftward or rightward facing."},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"     * @param text text to be placed in the text box."},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"     * @param left boolean for whether the text box should be left facing (or right otherwise)"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    private TextBox(String text, boolean left) {"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        Label textLabel \u003d new Label(text);"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        textLabel.setWrapText(true);"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        textLabel.setBackground(getDefaultBackground(left));"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        textLabel.setPadding(getDefaultPadding());"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"        //Adds a small triangle to the appropriate side to mimic a text box"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"        HBox hBox \u003d new HBox();"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        SVGPath lowerTriangle \u003d new SVGPath();"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        if (left) {"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"            lowerTriangle.setContent(PATH_LEFT_TRIANGLE);"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"            lowerTriangle.setFill(LEFTWARD_COLOR);"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"            hBox.getChildren().addAll(lowerTriangle, textLabel);"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"            lowerTriangle.setContent(PATH_RIGHT_TRIANGLE);"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"            lowerTriangle.setFill(RIGHTWARD_COLOR);"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"            hBox.getChildren().addAll(textLabel, lowerTriangle);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"        hBox.setSpacing(-1); //forces both shapes to overlap with each other"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"        Rectangle verticalGap \u003d new Rectangle(0, BUFFER_TOP);"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        getChildren().addAll(verticalGap, hBox);"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a background to fill up the text box with a colour and shape */"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"    private Background getDefaultBackground(boolean left) {"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        CornerRadii cornerRadii \u003d left"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"                ? new CornerRadii(0, CORNER_RADIUS,"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"                        CORNER_RADIUS, CORNER_RADIUS, false)"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"                : new CornerRadii(CORNER_RADIUS, 0,"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"                        CORNER_RADIUS, CORNER_RADIUS, false);"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"        BackgroundFill backgroundFill \u003d new BackgroundFill("},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"                left ? LEFTWARD_COLOR : RIGHTWARD_COLOR,"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"                cornerRadii,"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"                new Insets(0));"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"        Background textBackground \u003d new Background(backgroundFill);"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"        return textBackground;"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"    /** Returns an Insets object which represents the padding of the text in the label */"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"    private Insets getDefaultPadding() {"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"        return new Insets(LABEL_PADDING_VERTICAL, LABEL_PADDING_HORIZONTAL,"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"                LABEL_PADDING_VERTICAL, LABEL_PADDING_HORIZONTAL);"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"     * Returns a JavaFX text box node with the contained text and leftward facing."},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"     * @param text text to be contained within the text box."},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"     * @return a JavaFX node of a text box with the contained text."},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"    public static TextBox leftwardTextBox(String text) {"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"        return new TextBox(text, true);"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"     * Returns a JavaFX text box node with the contained text and rightward facing."},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"     * @param text text to be contained within the text box."},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"     * @return a JavaFX node of a text box with the contained text."},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"    public static TextBox rightwardTextBox(String text) {"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"        return new TextBox(text, false);"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":110}},{"path":"src/main/java/duke/storage/PrintSummary.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":" * Encapsulates classes that can be summarised with the getSummary() method to be stored."},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":" * Classes that implement this interface must also have a \u003ccode\u003ereconstruct(String summary)\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":" * method that recreates the object."},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"public interface PrintSummary {"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"     * Returns a summary of the object."},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"     * The object must be able to be reconstructed from the summary."},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"     * @return string representing the details of the object."},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    public String getSummary();"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":18}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"import duke.task.RecurringDeadline;"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"import duke.task.RecurringEvent;"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"import duke.task.ToDo;"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"import duke.util.TaskList;"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":" * Class encapsulating all the methods required to read and write directly to the hard drive."},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    /** Path to search for the saved file to load or update */"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    /** Private constructor to set the file path */"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    private Storage(String filePath) {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     * Initialises and returns the Storage object."},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     * The method first attempts to search for a pre-saved list in a fixed location."},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * If it is not found, the method will create such a directory and file to write and save future updates."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     * @return Storage object for updating changes to the task list."},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"    public static Storage init() {"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        String filePath \u003d System.getProperty(\"user.dir\");"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        File directory \u003d new File(filePath + \"/data\");"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        if (!directory.exists()) {"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            directory.mkdir();"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        filePath \u003d filePath + \"/data/duke.txt\";"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        return new Storage(filePath);"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     * Returns a task list of the stored data in the file found in the file path."},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     * It interprets the text found in the file to recreate the task list."},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     * @return task list with items corresponding to what was found in the saved file or empty if a file was not found."},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    public TaskList readStoredData() {"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"            Scanner scanner \u003d new Scanner(file);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"            scanner.useDelimiter(\"\\n\");"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"            scanner.tokens()"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"                    .forEach(line -\u003e {"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"                        try {"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"                            taskList.add(createTask(line));"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"                        } catch (InvalidSaveException e) {"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"                            System.err.println(\"Not a valid save line: \" + line);"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"                        }"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"                    });"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"            return taskList;"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        } catch (FileNotFoundException e1) {"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"            try {"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"                file.createNewFile();"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"            } catch (IOException e2) {"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"                e2.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"            return new TaskList();"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"     * Returns a task from the provided string summary of the task."},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"     * @param taskSummary string details of the task."},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"     * @return task corresponding to the summary."},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidSaveException if the symbol read is not a valid symbol of a task type."},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"    protected Task createTask(String taskSummary) throws InvalidSaveException {"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        String identifier \u003d taskSummary.split(Pattern.quote(Task.SYMBOL_SEPARATOR), 2)[0];"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"        switch (identifier) {"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"        case Event.SYMBOL:"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"            return Event.reconstructFromSummary(taskSummary);"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"        case ToDo.SYMBOL:"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"            return ToDo.reconstructFromSummary(taskSummary);"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"        case Deadline.SYMBOL:"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"            return Deadline.reconstructFromSummary(taskSummary);"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"        case RecurringEvent.SYMBOL:"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"            return RecurringEvent.reconstructFromSummary(taskSummary);"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"        case RecurringDeadline.SYMBOL:"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"            return RecurringDeadline.reconstructFromSummary(taskSummary);"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"        default:"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(identifier + \" is not a valid type symbol!\");"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"     * Writes the new task list\u0027s details into the file at the file path."},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"     * @param taskList updated task list to be saved."},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"    public void updateFile(TaskList taskList) {"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"            FileWriter writer \u003d new FileWriter(filePath);"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"            boolean isFirst \u003d true;"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"            for (Task task : taskList) {"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"                if (isFirst) {"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"                    isFirst \u003d false;"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"                    writer.write(task.getSummary());"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"                } else {"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"                    writer.write(\u0027\\n\u0027 + task.getSummary());"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"                }"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"            writer.close();"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"        } catch (IOException e) {"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"            e.printStackTrace();"},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":133}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.datetime.DateTimeHandler;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" * Encapsulates Tasks with deadlines."},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" * Object carries information of the task to be completed and the deadline."},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"public class Deadline extends Task {"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** String separator used to separate the task description from the dateline */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    public static final String SPLITTER \u003d \" /by \";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    /** Symbol representing the type of Task this is */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    public static final String SYMBOL \u003d \"D\";"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /** Number of separate fields in a deadline save summary */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private static final int NUM_FIELDS_SUMMARY \u003d 4;"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /** Number of separate fields required to create a deadline task */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    private static final int NUM_FIELDS_DESCRIPTION \u003d 2;"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /** Deadline of the task */"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private LocalDateTime deadline;"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * Creates a new Deadline object from the full deadline description that includes the deadline."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * @param taskDescription description of the Deadline object with both the task and the deadline."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the string provided to create the deadline is invalid."},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    public Deadline(String taskDescription) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        super(taskDescription.split(SPLITTER)[0]);"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d taskDescription.split(SPLITTER);"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        if (details.length !\u003d NUM_FIELDS_DESCRIPTION) {"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please follow the format of \\\"{task} /by {deadline}\\\"\");"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        deadline \u003d DateTimeHandler.parseDateTime(taskDescription.split(SPLITTER)[1]);"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"     * Creates a new Deadline object by manually inputting description and the deadline."},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     * @param deadlineDescription description of the task only."},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * @param deadline string description of the deadline."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the deadline provided has an invalid datetime format."},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"    protected Deadline(String deadlineDescription, String deadline) throws DukeException {"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        super(deadlineDescription);"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        this.deadline \u003d DateTimeHandler.parseDateTime(deadline);"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    /** Constructs a Deadline object directly from the description and deadline provided */"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    protected Deadline(String deadlineDescription, LocalDateTime deadlineTiming) {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        super(deadlineDescription);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        this.deadline \u003d deadlineTiming;"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"     * Returns the deadline."},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"     * @return deadline as a LocalDateTime object."},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    public LocalDateTime getDeadline() {"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        return deadline;"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"     * Returns the String representation of the object."},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     * Updated from the superclass Task to include the type of task and the deadline."},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     * @return string representing a Deadline task with a \"[D]\" identifier and the deadline at the back."},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"        return String.format(\"[%s]%s (by: %s)\", SYMBOL, super.toString(),"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"                getTimingString());"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a string of the deadline in the standard format */"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"    private String getTimingString() {"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"        return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(deadline);"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"     * Returns a summary of the Deadline."},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"     * @return string containing type, completion status, description and timing."},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"    public String getSummary() {"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"        return super.getSummary() + SYMBOL_SEPARATOR + getTimingString();"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"     * Returns an Deadline object corresponding to the summary given."},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"     * Deadline summary has to be of the form \"D|{0 or 1 representing completion}|{description}|{deadline}\"."},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"     * @param summary string summary of the Deadline object to be reconstructed."},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"     * @return Deadline object representing the summary given."},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidSaveException if the summary in the save file is invalid."},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"    public static Deadline reconstructFromSummary(String summary) throws InvalidSaveException {"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d summary.split(Pattern.quote(SYMBOL_SEPARATOR));"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"        if (details.length !\u003d NUM_FIELDS_SUMMARY) {"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Wrong number of details!\");"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"        } else if (!isValidSaveSymbol(details[1])) {"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"        boolean isDone \u003d details[1].equals(SYMBOL_DONE);"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"            Deadline newDeadline \u003d new Deadline(details[2], details[3]);"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"            if (isDone) {"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"                newDeadline.markDone();"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"            return newDeadline;"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"        } catch (DukeException e) {"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid datetime format in save!\");"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"     * Returns a \"D\" representing Deadline type."},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"     * @return string \"D\"."},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":"    public String getSymbol() {"},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"        return SYMBOL;"},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":141}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.datetime.DateTimeHandler;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import duke.util.Pair;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" * Encapsulates an Event."},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" * Event are tasks that we have to attend at a given time slot."},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"public class Event extends Task {"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** Symbol representing the type of Task this is */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    public static final String SYMBOL \u003d \"E\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    /** String separator used to separate the task description and the timing */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    public static final String SPLITTER \u003d \" /at \";"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /** Number of separate fields in a event save summary */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private static final int NUM_FIELDS_SUMMARY \u003d 4;"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /** Number of separate fields required to create a event task */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    private static final int NUM_FIELDS_DESCRIPTION \u003d 2;"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /** Timing of the start of event */"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private LocalDateTime startTiming;"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    /** Timing of the end of event */"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    private LocalDateTime endTiming;"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * Creates an Event object with the given event description and timing."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     * @param taskDescription full description of the event including task and timing."},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the format of the description is invalid."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    public Event(String taskDescription) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        super(taskDescription.split(SPLITTER)[0]);"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d taskDescription.split(SPLITTER);"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        if (details.length !\u003d NUM_FIELDS_DESCRIPTION) {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"Please follow the format of \\\"{task} /at {event timing}\\\"\");"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        processEventTimingString(taskDescription.split(SPLITTER)[1]);"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"     * Creates a new Event object by manually setting the description and timing"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * @param eventDescription description of the event task only."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     * @param timing string description of the timing of the event."},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the timing provided for the event has an invalid format."},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"    protected Event(String eventDescription, String timing) throws DukeException {"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        super(eventDescription);"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"        processEventTimingString(timing);"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    protected Event(String eventDescription, LocalDateTime startTiming, LocalDateTime endTiming) {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        super(eventDescription);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        this.startTiming \u003d startTiming;"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"        this.endTiming \u003d endTiming;"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"     * Processes an event timing String by assigning the pair of start and end timings to the properties."},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"     * @param timing String containing the details of the start and end timing."},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the timing provided for the event has an invalid format."},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"    private void processEventTimingString(String timing) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        Pair\u003cLocalDateTime, LocalDateTime\u003e pair \u003d"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"                DateTimeHandler.parseEventTimings(timing);"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"        startTiming \u003d pair.getFirst();"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"        endTiming \u003d pair.getSecond();"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"     * Returns the String representation of the object."},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"     * Updated from the superclass Task to include the type of Task this object is and include the timing."},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"     * @return returns a String representing an Event with a \"[E]\" identifier and timing."},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"        return String.format(\"[%s]%s (at: %s)\", SYMBOL, super.toString(), getTimingString());"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a string of the timings corresponding to this event */"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"    private String getTimingString() {"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"        if (startTiming.toLocalDate().equals(endTiming.toLocalDate())) {"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"            return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(startTiming)"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"                    + \"-\" + DateTimeHandler.STANDARD_2400_FORMAT.format(endTiming.toLocalTime());"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"        } else {"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"            return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(startTiming) + \"-\""},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"                    + DateTimeHandler.STANDARD_DATETIME_FORMAT.format(endTiming);"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"     * Returns a summary of the Event."},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"     * @return string containing type, completion status, description and timing."},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"    public String getSummary() {"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"        return super.getSummary() + SYMBOL_SEPARATOR + getTimingString();"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"     * Returns an Event object corresponding to the summary given."},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"     * Event summary has to be of the form \"E|{0 or 1 representing completion}|{description}|{event duration}\"."},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"     * @param summary string summary of the Event object to be reconstructed."},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"     * @return Event object representing the summary given."},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidSaveException if the summary in the save file is invalid."},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"    public static Event reconstructFromSummary(String summary) throws InvalidSaveException {"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d summary.split(Pattern.quote(SYMBOL_SEPARATOR));"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"        if (details.length !\u003d NUM_FIELDS_SUMMARY) {"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Wrong number of details!\");"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"        } else if (!isValidSaveSymbol(details[1])) {"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"            Event event \u003d new Event(details[2], details[3]);"},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"            boolean isDone \u003d details[1].equals(SYMBOL_DONE);"},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"            if (isDone) {"},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"                event.markDone();"},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"            return event;"},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":"        } catch (DukeException e) {"},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid datetime format in save!\");"},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":"     * Returns \u0027E\u0027 representing an Event type."},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":"     * @return string \"E\"."},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"    public String getSymbol() {"},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":"        return SYMBOL;"},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":148,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":"     * Returns start timing of the event."},{"lineNumber":150,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"chan-j-d"},"content":"     * @return start timing as a LocalDateTime object."},{"lineNumber":152,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"    public LocalDateTime getStartTiming() {"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"        return startTiming;"},{"lineNumber":155,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"chan-j-d"},"content":"     * Returns end timing of the event."},{"lineNumber":159,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"chan-j-d"},"content":"     * @return end timing as a LocalDateTime object."},{"lineNumber":161,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"chan-j-d"},"content":"    public LocalDateTime getEndTiming() {"},{"lineNumber":163,"author":{"gitId":"chan-j-d"},"content":"        return endTiming;"},{"lineNumber":164,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":166}},{"path":"src/main/java/duke/task/RecurringDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.datetime.FastForwarder;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import duke.datetime.FastForwarderGenerator;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" * Encapsulates a recurring deadline."},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":" * Recurring tasks assumes that the user frequently closes and reopens this app."},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":" * Upon initialization, Duke will read from the save and interpret the summaries and load them into storage."},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":" * During this process, for recurring tasks, if the end timing has passed, the task is pushed forward by the"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":" * specified interval."},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"public class RecurringDeadline extends Deadline {"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /** Symbol representing a Recurring Deadline object. */"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    public static final String SYMBOL \u003d \"R\" + Deadline.SYMBOL;"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /** Number of separate fields in a recurring deadline save summary */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    private static final int NUM_FIELDS_SUMMARY \u003d 5;"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    /** FastForwarder that controls the amount of time the deadline jumps on each reoccurrence */"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private FastForwarder fastForwarder;"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    /** Details used to create the FastForwarder object */"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    private String recurringDetails;"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     * Constructs a RecurringDeadline instance with the given description, timing and recurring details."},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     * @param deadlineDescription description of the task and the deadline."},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * @param recurringDetails string representing the length between each reoccurrence."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the description or recurring details are invalid."},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"    public RecurringDeadline(String deadlineDescription, String recurringDetails) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        super(deadlineDescription);"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        parseRecurringDetails(recurringDetails);"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    /** Constructs a RecurringDeadline instance directly from string arguments of each attribute */"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    protected RecurringDeadline(String deadlineDescription, String deadlineTiming, String recurringDetails)"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"            throws DukeException {"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        super(deadlineDescription, deadlineTiming);"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        parseRecurringDetails(recurringDetails);"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    /** Constructs a RecurringDeadline instance directly from the provided description and deadline */"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    protected RecurringDeadline(String deadlineDescription, LocalDateTime deadline, String recurringDetails) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        super(deadlineDescription, deadline);"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        this.recurringDetails \u003d recurringDetails.toUpperCase();"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    /** Parses the recurring details into a FastForwarder and saves it in the instance */"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    private void parseRecurringDetails(String recurringDetails) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        this.recurringDetails \u003d recurringDetails;"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        fastForwarder \u003d FastForwarderGenerator.generateFastForwarder(recurringDetails);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        return super.toString() + String.format(\" (Recurring: %s)\", recurringDetails);"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"    public String getSummary() {"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        return \"R\" + super.getSummary() + SYMBOL_SEPARATOR + recurringDetails;"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     * Returns a RecurringDeadline instance from the summary provided."},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"     * Summary should be of the form RD|{0 or 1}|{description}|{deadline}|{recurring details}."},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"     * @param summary summary from the save file."},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"     * @return Recurring deadline object corresponding to the summary provided."},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidSaveException if the summary is invalid."},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"    public static RecurringDeadline reconstructFromSummary(String summary) throws InvalidSaveException {"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d summary.split(Pattern.quote(SYMBOL_SEPARATOR));"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"        if (details.length !\u003d NUM_FIELDS_SUMMARY) {"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Wrong number of details!\");"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"        } else if (!isValidSaveSymbol(details[1])) {"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"            RecurringDeadline recurringDeadline \u003d new RecurringDeadline(details[2], details[3], details[4]);"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"            boolean isDone \u003d details[1].equals(SYMBOL_DONE);"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"            RecurringDeadline updatedRecurringDeadline \u003d updateRecurringDeadline(recurringDeadline, isDone);"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"            return updatedRecurringDeadline;"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"        } catch (DukeException e) {"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid datetime format in save!\");"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a recurring deadline object with the deadline updated to after the current time */"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"    private static RecurringDeadline updateRecurringDeadline(RecurringDeadline recurringDeadline, boolean isDone) {"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"        LocalDateTime currentTime \u003d LocalDateTime.now();"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"        LocalDateTime deadline \u003d recurringDeadline.getDeadline();"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"        boolean isOutdated \u003d deadline.compareTo(currentTime) \u003c 0;"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"        while (isOutdated) {"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"            FastForwarder fastForwarder \u003d recurringDeadline.fastForwarder;"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"            deadline \u003d fastForwarder.apply(deadline);"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"            isOutdated \u003d deadline.compareTo(currentTime) \u003c 0;"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"        boolean isUpdated \u003d deadline !\u003d recurringDeadline.getDeadline();"},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"        if (isUpdated) {"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"            recurringDeadline \u003d new RecurringDeadline(recurringDeadline.getTaskDescription(),"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"                    deadline, recurringDeadline.recurringDetails);"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"        if (!isUpdated \u0026\u0026 isDone) {"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"            recurringDeadline.markDone();"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"        return recurringDeadline;"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":124}},{"path":"src/main/java/duke/task/RecurringEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.datetime.FastForwarder;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import duke.datetime.FastForwarderGenerator;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" * Encapsulates a recurring event."},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" * Recurring tasks assumes that the user frequently closes and reopens this app."},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":" * Upon initialization, Duke will read from the save and interpret the summaries and load them into storage."},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":" * During this process, for recurring tasks, if the end timing has passed, the task is pushed forward by the"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":" * specified interval."},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"public class RecurringEvent extends Event {"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    /** Symbol representing a Recurring Event object */"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    public static final String SYMBOL \u003d \"R\" + Event.SYMBOL;"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    /** Number of separate fields in a event save summary */"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    private static final int NUM_FIELDS_SUMMARY \u003d 5;"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /** FastForwarder that controls the amount of time the start and end timings jump on each reoccurrence */"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    private FastForwarder fastForwarder;"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    /** Details used to create the FastForwarder object */"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    private String recurringDetails;"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * Constructs a RecurringEvent instance with the given description, start and end timings and recurring details."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     * @param eventDescription description of the task and the start and end timings of the event."},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     * @param recurringDetails string represneting the length between each reoccurrence."},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the description of recurring details are invalid."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    public RecurringEvent(String eventDescription, String recurringDetails) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        super(eventDescription);"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        parseRecurringDetails(recurringDetails);"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    /** Constructs a recurring event instance directly from string arguments of each attribute */"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    protected RecurringEvent(String eventDescription, String eventTiming, String recurringDetails)"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"            throws DukeException {"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        super(eventDescription, eventTiming);"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        parseRecurringDetails(recurringDetails);"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"    /** Constructs a recurring event instance directly from the provided description and start and end timings */"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    protected RecurringEvent(String eventDescription, LocalDateTime startTiming,"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"             LocalDateTime endTiming, String recurringDetails) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        super(eventDescription, startTiming, endTiming);"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        this.recurringDetails \u003d recurringDetails.toUpperCase();"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    /** Parses the recurring details into a FastForwarder and saves it in the instance */"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    private void parseRecurringDetails(String recurringDetails) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        this.recurringDetails \u003d recurringDetails;"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        fastForwarder \u003d FastForwarderGenerator.generateFastForwarder(recurringDetails);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        return super.toString() + String.format(\" (Recurring: %s)\", recurringDetails);"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    public String getSummary() {"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        return \"R\" + super.getSummary() + SYMBOL_SEPARATOR + recurringDetails;"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"     * Returns a RecurringEvent instance from the summary provided."},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     * Summary should be of the form RE|{0 or 1}|{description}|{event start and end timings}|{recurring details}"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     * @param summary summary from the save file."},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"     * @return Recurring event object corresponding to the summary provided."},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidSaveException if the summary is invalid."},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"    public static RecurringEvent reconstructFromSummary(String summary) throws InvalidSaveException {"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d summary.split(Pattern.quote(SYMBOL_SEPARATOR));"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"        if (details.length !\u003d NUM_FIELDS_SUMMARY) {"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Wrong number of details!\");"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"        } else if (!isValidSaveSymbol(details[1])) {"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"            RecurringEvent recurringEvent \u003d new RecurringEvent(details[2], details[3], details[4]);"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"            boolean isDone \u003d details[1].equals(SYMBOL_DONE);"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"            RecurringEvent updatedRecurringEvent \u003d updateRecurringEvent(recurringEvent, isDone);"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"            return updatedRecurringEvent;"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"        } catch (DukeException e) {"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid datetime format in save!\");"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"    /** Returns a recurring event object with the event start and end timings updated to after the current time */"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"    private static RecurringEvent updateRecurringEvent(RecurringEvent recurringEvent, boolean isDone) {"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"        LocalDateTime currentTime \u003d LocalDateTime.now();"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"        LocalDateTime startTime \u003d recurringEvent.getStartTiming();"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"        LocalDateTime endTime \u003d recurringEvent.getEndTiming();"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"        boolean isOutdated \u003d endTime.compareTo(currentTime) \u003c 0;"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"        while (isOutdated) {"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"            FastForwarder fastForwarder \u003d recurringEvent.fastForwarder;"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"            startTime \u003d fastForwarder.apply(startTime);"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"            endTime \u003d fastForwarder.apply(endTime);"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"            isOutdated \u003d endTime.compareTo(currentTime) \u003c 0;"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"        boolean isUpdated \u003d endTime !\u003d recurringEvent.getEndTiming();"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"        if (isUpdated) {"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"            recurringEvent \u003d new RecurringEvent(recurringEvent.getTaskDescription(),"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"                    startTime, endTime, recurringEvent.recurringDetails);"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"        if (!isUpdated \u0026\u0026 isDone) {"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"            recurringEvent.markDone();"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"        return recurringEvent;"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":127}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import duke.storage.PrintSummary;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":" * Encapsulates a Task with a description."},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":" *"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":" * Task can be completed and will be mark as done. By default, it is initialised as incomplete."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"public abstract class Task implements PrintSummary {"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"    /** summary symbol for separating components */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    public static final String SYMBOL_SEPARATOR \u003d \"|\";"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /** summary symbol for representing the task is complete */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    protected static final String SYMBOL_DONE \u003d \"1\";"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** summary symbol for representing the task is not complete */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    protected static final String SYMBOL_NOT_DONE \u003d \"0\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    /** description of the task */"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    private String description;"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    /** boolean flag indicating completion of the task */"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    private boolean isDone;"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * Creates a new incomplete Task object."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     * @param description description of the task."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    public Task(String description) {"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        this.description \u003d description;"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"        this.isDone \u003d false;"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     * Returns a tick or cross String depending on whether the task is completed."},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     * @return tick if the task is completed, a cross otherwise."},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    public String getStatusIcon() {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"     * Returns a String representation of the Task."},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"     * @return String representing the task, showing its status and description."},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     * Returns the task description."},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"     * @return string of task description."},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"    public String getTaskDescription() {"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        return description;"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"     * Returns the state of th:we Task, whether it is completed or not."},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"     * @return true if the task is completed, false otherwise."},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    public boolean isCompleted() {"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        return isDone;"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"     * Marks the task as complete."},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"    public void markDone() {"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"        isDone \u003d true;"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"     * Returns a summary of the Task."},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"     * Implementing classes should also implement a static method to reconstruct the object from the summary."},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"     * @return string summarising the object."},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"    public String getSummary() {"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d new String[] {"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"                getSymbol(),"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"                isCompleted() ? SYMBOL_DONE : SYMBOL_NOT_DONE,"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"                getTaskDescription()"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"        };"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"        return String.join(SYMBOL_SEPARATOR, details);"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"    /** Returns true if the symbol provided is a valid save symbol for a save summary */"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"    protected static boolean isValidSaveSymbol(String symbol) {"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"        return symbol.equals(SYMBOL_DONE) || symbol.equals(SYMBOL_NOT_DONE);"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"     * Returns a symbol representing the type of task."},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"     * @return string containing a symbol for that type of task."},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"    public abstract String getSymbol();"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":107}},{"path":"src/main/java/duke/task/TaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.util.Pair;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" * Class handles parsing of strings inputs (from users) into the apporpriate task object."},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"public class TaskParser {"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /** todo-type task indicator */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    protected static final String TO_DO \u003d \"todo\";"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /** deadline-type task indicator */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    protected static final String DEADLINE \u003d \"deadline\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    /** event-type task indicator */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    protected static final String EVENT \u003d \"event\";"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    /** collections of the valid indicator strings */"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    protected static final List\u003cString\u003e VALID_TASK_TYPES;"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    static {"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"        VALID_TASK_TYPES \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"        VALID_TASK_TYPES.add(TO_DO);"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"        VALID_TASK_TYPES.add(DEADLINE);"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        VALID_TASK_TYPES.add(EVENT);"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    protected static final String SC_RECURRING \u003d \"-R\";"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    protected static final List\u003cString\u003e VALID_SUBCOMMANDS \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    static {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        VALID_SUBCOMMANDS.add(SC_RECURRING);"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     * Parses a task description and returns the corresponding task if the description is valid."},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"     * @param taskDescription description of the task, starting with the type as the first word."},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"     * @return task corresponding to the description given."},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"     * @throws DukeException if the command given is not a valid type."},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    public static Task parse(String taskDescription) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        Pair\u003cString, HashMap\u003cString, String\u003e\u003e pair \u003d parseForSubcommands(taskDescription);"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        String newTaskDescription \u003d pair.getFirst();"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        HashMap\u003cString, String\u003e subcommands \u003d pair.getSecond();"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d newTaskDescription.split(\" \", 2);"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"        if (!VALID_TASK_TYPES.contains(details[0])) {"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(details[0] + \" is not a valid type of command!\");"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        if (details.length \u003d\u003d 1 || details[1].isBlank()) {"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(\"The description of a \" + details[0] + \" task cannot be empty.\");"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"        Task addedTask;"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        switch (details[0]) {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        case TO_DO:"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"            addedTask \u003d new ToDo(details[1]);"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        case DEADLINE:"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"            if (subcommands.containsKey(SC_RECURRING)) {"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"                addedTask \u003d new RecurringDeadline(details[1], subcommands.get(SC_RECURRING));"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"            } else {"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"                addedTask \u003d new Deadline(details[1]);"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        case EVENT:"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"            if (subcommands.containsKey(SC_RECURRING)) {"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"                addedTask \u003d new RecurringEvent(details[1], subcommands.get(SC_RECURRING));"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"            } else {"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"                addedTask \u003d new Event(details[1]);"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"        default:"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"            throw new DukeException(details[0] + \" is not a valid type of command!\");"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"        return addedTask;"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"     * Parses and returns the description and the subcommands found."},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"     * First object in the pair is the description with the subcommands removed."},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"     * Second object is a hash map of the subcommands found and the arguments provided."},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"     * @param taskDescription description of task to be parsed."},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"     * @return String with subcommands removed and a Hashmap of subcommands found and their arguments."},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"    private static Pair\u003cString, HashMap\u003cString, String\u003e\u003e parseForSubcommands(String taskDescription) {"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d taskDescription.split(\" \");"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"        HashMap\u003cString, String\u003e subcommands \u003d new HashMap\u003c\u003e();"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"        String currentCommand \u003d \"\";"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"        String firstFoundCommand \u003d null;"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"        String upperCaseDetails;"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"        boolean isPreviousDetailSubcommand \u003d false;"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"        for (String detail : details) {"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"            upperCaseDetails \u003d detail.toUpperCase();"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"            if (isPreviousDetailSubcommand) {"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"                subcommands.put(currentCommand, detail);"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"                isPreviousDetailSubcommand \u003d false;"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"                continue;"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"            if (!VALID_SUBCOMMANDS.contains(upperCaseDetails)) {"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"                continue;"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"            if (firstFoundCommand \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"                firstFoundCommand \u003d detail;"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"            isPreviousDetailSubcommand \u003d true;"},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"            currentCommand \u003d upperCaseDetails;"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"        String newTaskDescription \u003d firstFoundCommand \u003d\u003d null"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"                ? taskDescription"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"                : taskDescription.split(\" \" + firstFoundCommand, 2)[0];"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"        return Pair.of(newTaskDescription, subcommands);"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":123}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":" * Encapsulates Tasks that are to be completed."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" * Object only carries information about the task to be completed."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"public class ToDo extends Task {"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    /** Symbol representing the type of Task this is */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    public static final String SYMBOL \u003d \"T\";"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    /** Number of separate fields in a todo save summary */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    private static final int NUM_FIELDS_SUMMARY \u003d 3;"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     * Creates a ToDo object with the given task description."},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"     * @param taskDescription description of the task to be done."},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    public ToDo(String taskDescription) {"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"        super(taskDescription);"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     * Returns the String representation of the object."},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     * Updated from the superclass Task to include the type of Task this object is."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @return string representing the ToDo task with a \"[T]\" identifier."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        return \"[\" + SYMBOL + \"]\" + super.toString();"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     * Returns a ToDo object corresponding to the summary given."},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"     * @param summary string summary of the ToDo object to be reconstructed."},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"     * @return ToDo object representing the summary given."},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidSaveException if the summary in the save file is invalid."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"    public static ToDo reconstructFromSummary(String summary) throws InvalidSaveException {"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        String[] details \u003d summary.split(Pattern.quote(SYMBOL_SEPARATOR));"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        if (details.length !\u003d NUM_FIELDS_SUMMARY) {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Wrong number of details!\");"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"        } else if (!isValidSaveSymbol(details[1])) {"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        boolean isDone \u003d details[1].equals(SYMBOL_DONE);"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        ToDo newToDo \u003d new ToDo(details[2]);"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"        if (isDone) {"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"            newToDo.markDone();"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        return newToDo;"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"     * Returns a \u0027T\u0027 representing a ToDo type."},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"     * @return string \"T\"."},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"    public String getSymbol() {"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        return SYMBOL;"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":70}},{"path":"src/main/java/duke/util/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":" * Utility class representing a pair of objects, possibly of different types."},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":" * @param \u003cT\u003e Type of the first object."},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":" * @param \u003cU\u003e Type of the second object."},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"public class Pair\u003cT, U\u003e {"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"    private T first;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"    private U second;"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    /** Constructs the pair object from the objects provided */"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    private Pair(T first, U second) {"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"        this.first \u003d first;"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"        this.second \u003d second;"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"     * Returns the first object."},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"     * @return the first object in the pair."},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    public T getFirst() {"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"        return this.first;"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     * Returns the second object."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     * @return the second object in the pair."},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    public U getSecond() {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        return this.second;"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     * Returns a pair object containing the two objects provided as arguments."},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"     * @param first first object in the pair."},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"     * @param second second object in the pair."},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"     * @param \u003cT\u003e type of the first object."},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"     * @param \u003cU\u003e type of the second object."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"     * @return a pair object containing both objects."},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T first, U second) {"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        return new Pair\u003c\u003e(first, second);"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        return String.format(\"(%s, %s)\", first, second);"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":55}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":" * An aggregation of tasks."},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":" * Functions largely similar to java.util.List."},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"     * Returns the task at the provided index."},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"     * Note that index starts at 1."},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"     * @param index index of the task to be returned from the list."},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     * @return task at the index provided."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    public Task get(int index) {"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        return super.get(index - 1);"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * Removes and returns the task at the provided index."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     * Note that index starts at 1."},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     * @param index index of the task to be removed from the list."},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * @return task removed."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    public Task remove(int index) {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        return super.remove(index - 1);"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        int count \u003d 1;"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        for (Task task : this) {"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"            if (count !\u003d 1) {"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"                builder.append(\u0027\\n\u0027);"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"            builder.append(count++ + \". \" + task.toString());"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        return builder.toString();"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     * Returns a customised string message for the number of tasks in the list."},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"     * @return string informing the user about the number of tasks in the list."},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"    public String createTaskNumberCountMessage() {"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"        return \"Now you have \" + size() + \" tasks in the list.\";"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":59}},{"path":"src/test/java/duke/datetime/DateTimeHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.datetime;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static duke.datetime.DateTimeHandler.STANDARD_DATETIME_FORMAT;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static duke.datetime.DateTimeHandler.parseDateTime;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import static duke.datetime.DateTimeHandler.parseEventTimings;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":" * JUnit test class for the DateTimeHandler class methods."},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"public class DateTimeHandlerTest {"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"     * Test the parseDateTime method on valid Strings."},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    public void testParseDateTime_validStrings_success() {"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"        String time1 \u003d \"24-09-2000 1800\";"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"        String time2 \u003d \"24-12-2020 0100\";"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        String expected1 \u003d \"2000-09-24T18:00\";"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        String expected2 \u003d \"2020-12-24T01:00\";"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"            LocalDateTime localDateTime1 \u003d parseDateTime(time1);"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"            assertEquals(expected1, localDateTime1.toString());"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"            assertEquals(expected2, parseDateTime(time2).toString());"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"            assertEquals(time1, STANDARD_DATETIME_FORMAT.format(localDateTime1));"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"     * Tests the parseDateTime method in invalid Strings."},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    public void testParseDateTime_invalidStrings_errorThrown() {"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"abcde\";"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"24-09-2020 100\";"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        String invalidError \u003d \"is an invalid datetime format! Please use\";"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"            parseDateTime(input1);"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(invalidError));"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"            parseDateTime(input2);"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(invalidError));"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"     * Tests the parseEventTimings method on valid Strings."},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"    public void testParseEventTimings_validStrings_success() {"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"24-09-2000 1800-2000\";"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"24-09-2000 1800-26-09-2000 2000\";"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        String expected1 \u003d \"(2000-09-24T18:00, 2000-09-24T20:00)\";"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        String expected2 \u003d \"(2000-09-24T18:00, 2000-09-26T20:00)\";"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"            assertEquals(expected1, parseEventTimings(input1).toString());"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"            assertEquals(expected2, parseEventTimings(input2).toString());"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"        } catch (DukeException e) {"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"            e.printStackTrace();"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"     * Tests the parseEventTimings method on invalid Strings."},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"    public void testParseEventTimings_invalidStrings_errorThrown() {"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"abcde\";"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"24-09-2000 180026-09-2000 2000\";"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"        String input3 \u003d \"22-09-2000 1800 20-09-2000 2000\";"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"        String input4 \u003d \"22-09-2000 1800-1600\";"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        String invalidError \u003d \" is not a valid event timing. Please use either\\n\";"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"        String endEarlierThanStartError \u003d \"End timing must be later than start timing!\";"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"            parseEventTimings(input1);"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(invalidError));"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"            parseEventTimings(input2);"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(invalidError));"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"            parseEventTimings(input3);"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(endEarlierThanStartError));"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"            parseEventTimings(input4);"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(endEarlierThanStartError));"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":117}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" * JUnit test class to test the Deadline class."},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"public class DeadlineTest {"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     * Tests to see if the Deadline created with valid timing strings will be successful."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    public void createDeadline_validStrings_success() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"meeting /by 21-09-2020 0800\";"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"meeting /by 23-09-2020 1000\";"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"        String output1 \u003d \"[D][\\u2718] meeting (by: 21-09-2020 0800)\";"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"        String output2 \u003d \"[D][\\u2713] meeting (by: 23-09-2020 1000)\";"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"        Deadline deadline2 \u003d new Deadline(input2);"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"        deadline2.markDone();"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(output1, new Deadline(input1).toString());"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(output2, deadline2.toString());"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     * Tests to see if the Deadline class correctly rejects invalid String inputs."},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    public void createDeadline_invalidStrings_errorThrown() {"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"            String input1 \u003d \"meeting /by abcde\";"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"            new Deadline(input1);"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(\" is an invalid datetime format! Please use \"));"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"            String input2 \u003d \"meeting\";"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"            new Deadline(input2);"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(\"Please follow the format \"));"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     * Tests 1. if the summary comes out in the form required and"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     * 2. The same Deadline can be recreated from the summary."},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    public void testSummary_standardDeadlines_success() throws InvalidSaveException, DukeException {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"meeting /by 21-09-2020 0800\";"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"carnival@park /by 23-10-2020 0800\";"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"        Deadline event1 \u003d new Deadline(input1);"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        event1.markDone();"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"        Deadline event2 \u003d new Deadline(input2);"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        String summary1 \u003d event1.getSummary();"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        String summary2 \u003d event2.getSummary();"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"        String expectedSummary1 \u003d \"D|1|meeting|21-09-2020 0800\";"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"        String expectedSummary2 \u003d \"D|0|carnival@park|23-10-2020 0800\";"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(expectedSummary1, summary1);"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(expectedSummary2, summary2);"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(event1.toString(), Deadline.reconstructFromSummary(summary1).toString());"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(event2.toString(), Deadline.reconstructFromSummary(summary2).toString());"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":75}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":" * JUnit test class for testing the Event class"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"public class EventTest {"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"     * Tests to see if the Event created with valid timing strings will be successful."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    public void createEvent_validStrings_success() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"meeting /at 21-09-2020 0800-1000\";"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"meeting /at 21-09-2020 0800-21-09-2020 1000\";"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"        String input3 \u003d \"meeting /at 21-09-2020 0800-23-09-2020 1000\";"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"        String output1 \u003d \"[E][\\u2718] meeting (at: 21-09-2020 0800-1000)\";"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"        String output2 \u003d \"[E][\\u2718] meeting (at: 21-09-2020 0800-1000)\";"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"        String output3 \u003d \"[E][\\u2713] meeting (at: 21-09-2020 0800-23-09-2020 1000)\";"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        Event event3 \u003d new Event(input3);"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        event3.markDone();"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(output1, new Event(input1).toString());"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(output2, new Event(input2).toString());"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(output3, event3.toString());"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     * Tests to see if the Event correctly rejects invalid String inputs."},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"    public void createEvent_invalidStrings_errorThrown() {"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            String input1 \u003d \"meeting /at 21-09-2020 0800-20-09-2020 0800\"; //End timing earlier than start time"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"            new Event(input1);"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(\"End timing must be later than start timing!\"));"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"            String input2 \u003d \"meeting /at abcde\";"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"            new Event(input2);"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(\"is not a valid event timing. Please use either\"));"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"            String input3 \u003d \"meeting /at 21-09-2020 2020- 21-09-2020 20:30\";"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"            new Event(input3);"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(\"is not a valid event timing. Please use either\"));"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"     * Tests 1. if the summary comes out in the form required and"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"     * 2. The same Event can be recreated from the summary."},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    public void testSummary_standardEvents_success() throws DukeException, InvalidSaveException {"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"meeting /at 21-09-2020 0800 21-09-2020 1000\";"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"carnival@park /at 23-10-2020 0800 05-11-2020 2300\";"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        Event event1 \u003d new Event(input1);"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"        event1.markDone();"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"        Event event2 \u003d new Event(input2);"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"        String summary1 \u003d event1.getSummary();"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"        String summary2 \u003d event2.getSummary();"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"        String expectedSummary1 \u003d \"E|1|meeting|21-09-2020 0800-1000\";"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"        String expectedSummary2 \u003d \"E|0|carnival@park|23-10-2020 0800-05-11-2020 2300\";"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(expectedSummary1, summary1);"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(expectedSummary2, summary2);"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(event1.toString(), Event.reconstructFromSummary(summary1).toString());"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(event2.toString(), Event.reconstructFromSummary(summary2).toString());"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":88}},{"path":"src/test/java/duke/task/TaskParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"public class TaskParserTest {"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    public void testParse_validStrings_success() throws DukeException {"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"        String toDoInput \u003d \"something\";"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(new ToDo(toDoInput).toString(),"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"                TaskParser.parse(TaskParser.TO_DO + \" \" + toDoInput).toString());"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"        String deadlineInput \u003d \"homework /by 20-12-2020 2359\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(new Deadline(deadlineInput).toString(),"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"                TaskParser.parse(TaskParser.DEADLINE + \" \" + deadlineInput).toString());"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"        String eventInput \u003d \"gaming /at 20-12-2020 2200-2359\";"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(new Event(eventInput).toString(),"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"                TaskParser.parse(TaskParser.EVENT + \" \" + eventInput).toString());"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    public void testParse_invalidString_errorThrown() {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"wrong abcde /by 20-12-2020 2359\";"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"to do something\";"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"            TaskParser.parse(input1);"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(\"is not a valid type of command!\"));"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"            TaskParser.parse(input2);"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"            fail();"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            assertTrue(e.getMessage().contains(\"is not a valid type of command!\"));"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"}"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":""}],"authorContributionMap":{"chan-j-d":50}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import duke.InvalidSaveException;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"public class ToDoTest {"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"     * Tests to see if the ToDo created strings will be successful."},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    public void createToDo_validStrings_success() {"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"meeting\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"clown around\";"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"        String output1 \u003d \"[T][\\u2718] meeting\";"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"        String output2 \u003d \"[T][\\u2713] clown around\";"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        ToDo toDo2 \u003d new ToDo(input2);"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        toDo2.markDone();"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(output1, new ToDo(input1).toString());"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(output2, toDo2.toString());"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"     * Tests 1. if the summary comes out in the form required and"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"     * 2. The same ToDo can be recreated from the summary."},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    public void testSummary_standardToDos_success() throws InvalidSaveException, DukeException {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        String input1 \u003d \"meeting\";"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        String input2 \u003d \"attend carnival park\";"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        ToDo event1 \u003d new ToDo(input1);"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        event1.markDone();"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        ToDo event2 \u003d new ToDo(input2);"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        String summary1 \u003d event1.getSummary();"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        String summary2 \u003d event2.getSummary();"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        String expectedSummary1 \u003d \"T|1|meeting\";"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        String expectedSummary2 \u003d \"T|0|attend carnival park\";"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(expectedSummary1, summary1);"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(expectedSummary2, summary2);"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(event1.toString(), ToDo.reconstructFromSummary(summary1).toString());"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        assertEquals(event2.toString(), ToDo.reconstructFromSummary(summary2).toString());"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":65}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"deadline return book /by June 6th"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"list"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"todo join sports club"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"list"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"list"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"bye"}],"authorContributionMap":{"chan-j-d":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"chan-j-d":1,"-":20}}]
