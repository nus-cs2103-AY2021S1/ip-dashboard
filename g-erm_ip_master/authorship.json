[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"    mainClassName \u003d \"dd.javafx.Launcher\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"compileJava.options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"g-erm":23,"-":46}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"# Timmi User Guide :clipboard:"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":"![Timmi BigHead io avatar icon](../src/main/resources/images/BigheadDD.png)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"Timmi the Task Manager is a chat bot personality that is created for the CS2103T "},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"individual project. It is a simple application to help users manage their tasks."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"![Timmi Ui image](./Ui.png)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"## :peach: Features :peach:"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"Overview of Features:"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"1. Add tasks"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"1. Sort tasks chronologically"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"1. View existing tasks"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"1. Keep track of done tasks"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"1. Delete existing tasks"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"1. Search tasks by date or keyword"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"1. Exit the application"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"### Add Tasks"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"Timmi supports the addition of tasks under **3 task types**, namely:"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"* `todo`"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"* `deadline`"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"* `event` "},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"See the respective usages for more information."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"### Sort Tasks Chronologically"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"Timmi automatically sorts all tasks input for the user in the following sequence:"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"1. All Todo tasks, according to the sequence they are added."},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"1. All Event and Deadline tasks, in chronological order."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"### View Existing Tasks"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"Timmi allows users to view their current task list. See usage of `list`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"### Keep Track of Done Tasks"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"Timmi allows users to mark their tasks as done through symbols ✘ and ✓. "},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"See usage of `done`."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"### Delete Existing Tasks"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"Timmi allows users to remove tasks from their list. See usage of `delete`."},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"### Search Tasks by Date or Keyword"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"Timmi allows users to search for tasks related to a date, a query word or phrase."},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"See usage of `check` and `find`."},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"### Exit the Application"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"See usage of `bye`."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"## :peach: Usage :peach:"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"### `todo` - Adds a todo task"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"A todo task will be taken in and added to the existing task list."},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"`todo \u003citem description\u003e`"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"Example of usage and outcome: "},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"`\u003e todo prepare meeting materials`"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"`Ok, To-do added:`\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"\u0026nbsp;\u0026nbsp;`[T][✘] prepare meeting materials`"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"### `deadline` - Adds a deadline task"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"A deadline task will be taken in and added to the existing task list."},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":"`deadline \u003citem description\u003e /by \u003cdeadline date\u003e \u003c(OPTIONAL) time\u003e`"},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"Example of usages and outcomes: "},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"`\u003e deadline lab assignment /by 31-12-2020`"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"`Ok, Deadline added:`\u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"\u0026nbsp;\u0026nbsp;`[D][✘] lab assignment (by: 31 Dec 2020)`"},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"`\u003e deadline CS2103T tutorial /by 31-12-2020 2359`"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"`Ok, Deadline added:`\u003cbr\u003e"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"\u0026nbsp;\u0026nbsp;`[D][✘] CS2103T tutorial (by: 31 Dec 2020 11:59 PM)`"},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"### `event` - Adds an event task"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"An event task will be taken in and added to the existing task list."},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"`event \u003citem description\u003e /at \u003cevent date\u003e \u003c(OPTIONAL) time\u003e`"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"Example of usages and outcomes: "},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"`\u003e event team meeting /at 31-12-2020`"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"`Ok, Event added:`\u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":"\u0026nbsp;\u0026nbsp;`[E][✘] team meeting (at: 31 Dec 2020)`"},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"`\u003e event group presentation /at 31-12-2020 2359`"},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"`Ok, Event added:`\u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"\u0026nbsp;\u0026nbsp;`[E][✘] group presentation (at: 31 Dec 2020 11:59 PM)`"},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"### `list` - Shows user their current task list"},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"Timmi will print the current task list for the user."},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"Example of usage and outcome: "},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":"`\u003e list`"},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"`Here is your current list of task(s)!`\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"`----------------------------------------`\u003cbr\u003e"},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":"`1. [T][✘] prepare meeting materials`\u003cbr\u003e"},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":"`2. [D][✘] lab assignment (by: 31 Dec 2020)`\u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"`3. [E][✘] group presentation (at: 31 Dec 2020 11:59 PM)`"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"### `done` - Marks tasks as completed"},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"Tasks will be marked as done on the task list."},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":"`done \u003ctask index\u003e`"},{"lineNumber":131,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":132,"author":{"gitId":"g-erm"},"content":"Example of usage and outcome: "},{"lineNumber":133,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":134,"author":{"gitId":"g-erm"},"content":"`\u003e done 2`"},{"lineNumber":135,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":136,"author":{"gitId":"g-erm"},"content":"`Wow!! Good job!!`\u003cbr\u003e"},{"lineNumber":137,"author":{"gitId":"g-erm"},"content":"\u0026nbsp;\u0026nbsp;`[D][✓] lab assignment (by: 31 Dec 2020)`"},{"lineNumber":138,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":139,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":140,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":141,"author":{"gitId":"g-erm"},"content":"### `delete` - Removes tasks from task list"},{"lineNumber":142,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":143,"author":{"gitId":"g-erm"},"content":"Tasks will be deleted from the task list."},{"lineNumber":144,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":145,"author":{"gitId":"g-erm"},"content":"`delete \u003ctask index\u003e`"},{"lineNumber":146,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":147,"author":{"gitId":"g-erm"},"content":"Example of usage and outcome: "},{"lineNumber":148,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":149,"author":{"gitId":"g-erm"},"content":"`\u003e delete 2`"},{"lineNumber":150,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":151,"author":{"gitId":"g-erm"},"content":"`Alright! I\u0027ve deleted the task:`\u003cbr\u003e"},{"lineNumber":152,"author":{"gitId":"g-erm"},"content":"\u0026nbsp;\u0026nbsp;`[D][✓] lab assignment (by: 31 Dec 2020)`\u003cbr\u003e"},{"lineNumber":153,"author":{"gitId":"g-erm"},"content":"`You now have 2 task(s) in your list!`"},{"lineNumber":154,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":155,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":156,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":157,"author":{"gitId":"g-erm"},"content":"### `check` - Checks for tasks on specified date"},{"lineNumber":158,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":159,"author":{"gitId":"g-erm"},"content":"Tasks on the specified date will be listed out for the user."},{"lineNumber":160,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":161,"author":{"gitId":"g-erm"},"content":"`check \u003cdate\u003e`"},{"lineNumber":162,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":163,"author":{"gitId":"g-erm"},"content":"Example of usage and outcome: "},{"lineNumber":164,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":165,"author":{"gitId":"g-erm"},"content":"`\u003e check 31-12-2020`"},{"lineNumber":166,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":167,"author":{"gitId":"g-erm"},"content":"`Here is your list of task(s) on 31-12-2020`\u003cbr\u003e"},{"lineNumber":168,"author":{"gitId":"g-erm"},"content":"`----------------------------------------`\u003cbr\u003e"},{"lineNumber":169,"author":{"gitId":"g-erm"},"content":"`1. [E][✘] group presentation (at: 31 Dec 2020 11:59 PM)`"},{"lineNumber":170,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":171,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":172,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":173,"author":{"gitId":"g-erm"},"content":"### `find` - Checks for tasks related to a keyword or phrase"},{"lineNumber":174,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":175,"author":{"gitId":"g-erm"},"content":"Tasks related to the keyword or phrase will be listed out for the user."},{"lineNumber":176,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":177,"author":{"gitId":"g-erm"},"content":"`find \u003ckeyword or phrase\u003e`"},{"lineNumber":178,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":179,"author":{"gitId":"g-erm"},"content":"Example of usage and outcome: "},{"lineNumber":180,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":181,"author":{"gitId":"g-erm"},"content":"`\u003e find meeting`"},{"lineNumber":182,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":183,"author":{"gitId":"g-erm"},"content":"`Here is your list of task(s) related to meeting`\u003cbr\u003e"},{"lineNumber":184,"author":{"gitId":"g-erm"},"content":"`----------------------------------------`\u003cbr\u003e"},{"lineNumber":185,"author":{"gitId":"g-erm"},"content":"`1. [T][✘] prepare meeting materials`"},{"lineNumber":186,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":187,"author":{"gitId":"g-erm"},"content":"---"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"g-erm"},"content":"### `bye` - Exits the application"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"g-erm"},"content":"An exit greeting will be shown, and the application will close."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"g-erm"},"content":"Example of usage and outcome: "},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"g-erm"},"content":"`\u003e bye`"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"g-erm"},"content":"`You\u0027re leaving? Bye :( Come back soon!`\u003cbr\u003e"},{"lineNumber":198,"author":{"gitId":"g-erm"},"content":"*Application close*"}],"authorContributionMap":{"g-erm":182,"-":16}},{"path":"src/main/java/dd/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.commands.Command;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import dd.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":" * The main Duke class to create and manage a task list."},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    private DataStorage ds;"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    private TaskList tasks;"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"    public Duke() {"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"        this.ds \u003d new DataStorage();"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     * Indicates results from loading data."},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"     * @return String to indicate results from loading data."},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"    public String initializeDuke() {"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        String output;"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"            tasks \u003d new TaskList(ds.loadData());"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"            output \u003d ds.getLoadResults();"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"            output \u003d ui.showLoadingError();"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"        return output;"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"     * Prints greeting to user."},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"     * @return starting greeting of the system."},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"    public String sendGreeting() {"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"        return ui.greeting();"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"     * Takes in user input, parses into a command and executes"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"     * the next command till an exit command is given."},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"     * @param input User input"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"     * @return Reply to user based on the input."},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"    public String getResponse(String input) {"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"        String ddReply;"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"            ddReply \u003d c.execute(tasks, ui, ds);"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":"            ddReply \u003d ui.showError(e.getMessage());"},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        return ddReply;"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":75}},{"path":"src/main/java/dd/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.datetimehandler.DateTimeHandler;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Deadline;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Todo;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":" * An add command of a certain type and user input modifies"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":" * the task list in the system by adding new tasks."},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"public class AddCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    private DateTimeHandler dth;"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    private TaskList tasks;"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * @param command Command given."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     * @param item Details of item being added."},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    public AddCommand(String command, String item) {"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        super(command, item);"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"    private String addTodo() {"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        int initialNum \u003d tasks.getTaskSize();"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"        Todo addedTodo \u003d new Todo(item);"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        tasks.addTodo(addedTodo);"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        assert (tasks.getTaskSize() - initialNum) \u003d\u003d 1 : \"failed adding todo task\";"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        return ui.startAddTodo(addedTodo) + \"\\n\" + ui.printTasksSize(tasks.getTaskSize());"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"    private String addDeadline() throws DukeException {"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"        // create array of [task desc, task date]"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"        String[] temp \u003d item.split(\" /by \");"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"        if (temp.length \u003d\u003d 2) {"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"            boolean isValidInput \u003d dth.isValidInput(temp[1]);"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"            if (isValidInput) {"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"                // valid"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"                int initialNum \u003d tasks.getTaskSize();"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"                String formattedDate \u003d dth.categorizeInput(temp[1]);"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"                Deadline addedDeadline \u003d new Deadline(temp[0], formattedDate);"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"                tasks.addTask(addedDeadline);"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"                tasks.sortTasks();"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"                assert (tasks.getTaskSize() - initialNum) \u003d\u003d 1 : \"failed adding deadline task\";"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"                return ui.startAddDeadline(addedDeadline) + \"\\n\""},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"                        + ui.printTasksSize(tasks.getTaskSize());"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"                // not valid date"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"                throw new DukeException().invalidDate();"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"            // no date input"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"            throw new DukeException().invalidDeadline();"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"    private String addEvent() throws DukeException {"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"        // create array of [task desc, task date]"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        String[] temp \u003d item.split(\" /at \");"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"        if (temp.length \u003d\u003d 2) {"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"            boolean isValidInput \u003d dth.isValidInput(temp[1]);"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"            if (isValidInput) {"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":"                // valid"},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"                int initialNum \u003d tasks.getTaskSize();"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"                String formattedDate \u003d dth.categorizeInput(temp[1]);"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":"                Event addedEvent \u003d new Event(temp[0], formattedDate);"},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"                tasks.addTask(addedEvent);"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"                tasks.sortTasks();"},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"                assert (tasks.getTaskSize() - initialNum) \u003d\u003d 1 : \"failed adding event task\";"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"                return ui.startAddEvent(addedEvent) + \"\\n\""},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"                        + ui.printTasksSize(tasks.getTaskSize());"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"                // not valid date"},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"                throw new DukeException().invalidDate();"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":"            // no date input"},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"            throw new DukeException().invalidEvent();"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"     * Executes the appropriate method based on command."},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"     * @param taskList Current TaskList to modify."},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"     * @param u Ui used to print statements."},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"     * @param ds DataStorage used to load or write data."},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"     * @return String to confirm details of task added."},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If no date string contained in item,"},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"     * or invalid date string is given to Deadline or Event tasks."},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"    public String execute(TaskList taskList, Ui u, DataStorage ds) throws DukeException {"},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"        tasks \u003d taskList;"},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":"        ui \u003d u;"},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"        this.dth \u003d new DateTimeHandler();"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":"        String output \u003d \"\";"},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":"        switch (command) {"},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"        case \"todo\":"},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"            output \u003d addTodo();"},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":"            break;"},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":"        case \"deadline\":"},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"            output \u003d addDeadline();"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":"            break;"},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":"        case \"event\":"},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":"            output \u003d addEvent();"},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"            break;"},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":"        default:"},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"            assert false : \"invalid command: \" + command;"},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":131,"author":{"gitId":"g-erm"},"content":"        return output;"},{"lineNumber":132,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":133}},{"path":"src/main/java/dd/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":" * A command with a certain type and user input modifies"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":" * the task list stored in the system."},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"    protected String command;"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"    protected String item;"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"     * @param command Command given."},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"     * @param item Details of item."},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    public Command(String command, String item) {"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        this.command \u003d command;"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"        this.item \u003d item;"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     * Executes the appropriate method based on command."},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     * @param taskList Current TaskList to modify."},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"     * @param u Ui used to print statements."},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"     * @param ds DataStorage used to load or write data."},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"     * @return Appropriate response from DD according to user input given."},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If details in item are invalid."},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"    public abstract String execute(TaskList taskList, Ui u, DataStorage ds) throws DukeException;"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":37}},{"path":"src/main/java/dd/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":" * A delete command with a particular user input modifies the task list"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":" * in the system by deleting the specified task."},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * @param command Command given."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     * @param item Details of item being deleted."},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    public DeleteCommand(String command, String item) {"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"        super(command, item);"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * Deletes the task as given in item."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     * @param tasks Current TaskList to modify."},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     * @param ui Ui used to print statements."},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"     * @param ds DataStorage used to load or write data."},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     * @return Output to confirm deleted task if successful, and indicate the updated task list size."},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If invalid task number is given in item."},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"    public String execute(TaskList tasks, Ui ui, DataStorage ds) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        int delNum;"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"            delNum \u003d Integer.parseInt(item);"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        } catch (NumberFormatException ignored) {"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"            delNum \u003d 0;"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"        if (delNum \u003e 0 \u0026\u0026 delNum \u003c\u003d tasks.getTaskSize()) {"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"            int initialNum \u003d tasks.getTaskSize();"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"            String deletedTask \u003d ui.printDeletedTask(tasks.getTask(delNum - 1));"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"            tasks.deleteTask(delNum - 1);"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"            assert initialNum - tasks.getTaskSize() \u003d\u003d 1 : \"failed to delete task\";"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"            return deletedTask + \"\\n\" + ui.printTasksSize(tasks.getTaskSize());"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"            throw new DukeException().invalidTaskNumber();"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":55}},{"path":"src/main/java/dd/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":" * A done command with a particular user input modifies the task list"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":" * in the system by marking the specified task as done."},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * @param command Command given."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     * @param item Details of item that is done."},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    public DoneCommand(String command, String item) {"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"        super(command, item);"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * Marks the task given in item as done."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     * @param tasks Current TaskList to modify."},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     * @param ui Ui used to print statements."},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"     * @param ds DataStorage used to load or write data."},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     * @return Output to confirm done task if successful."},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If invalid task number is given in item."},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"    public String execute(TaskList tasks, Ui ui, DataStorage ds) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        int taskNum;"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"            taskNum \u003d Integer.parseInt(item);"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        } catch (NumberFormatException ignored) {"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"            taskNum \u003d 0;"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"        if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasks.getTaskSize()) {"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"            tasks.getTask(taskNum - 1).markAsDone();"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"            return ui.printDoneTask(tasks.getTask(taskNum - 1));"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"            throw new DukeException().invalidTaskNumber();"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":50}},{"path":"src/main/java/dd/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":" * An exit command prints out a exit greeting and"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":" * saves the task list data into a file."},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"public class ExitCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * @param command Command given."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     * @param item Empty string."},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    public ExitCommand(String command, String item) {"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"        super(command, item);"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * Calls the exit greeting and saves the current data."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     * @param tasks Current TaskList to modify."},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     * @param u Ui used to print statements."},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"     * @param ds DataStorage used to load or write data."},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     * @return Exit greeting string from DD."},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If no data is able to be written."},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"    public String execute(TaskList tasks, Ui u, DataStorage ds) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        String output \u003d u.exit() + \"\\n\" + ds.writeData(tasks.getTaskList());"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"        return output;"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":38}},{"path":"src/main/java/dd/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"public class HelpCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"     * @param command Command given."},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"     * @param item    Empty string."},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"    public HelpCommand(String command, String item) {"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"        super(command, item);"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"     * Use ui object to list all commands for user."},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"     * @param taskList Current TaskList to modify."},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     * @param u Ui used to print statements."},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     * @param ds DataStorage used to load or write data."},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * @return String to show all the possible DD commands."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    public String execute(TaskList taskList, Ui u, DataStorage ds) {"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        return u.printAllCommands();"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":31}},{"path":"src/main/java/dd/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.datetimehandler.DateTimeHandler;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":" * A list command of a certain type and user input goes through the current"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":" * task list in the system and displays the list of tasks requested."},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"public class ListCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    private DateTimeHandler dth;"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    private TaskList tasks;"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * @param command Command given."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     * @param item Empty string."},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    public ListCommand(String command, String item) {"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        super(command, item);"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"    private String list(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        return tasks.stream().reduce(\"\","},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"                (string, currTask) -\u003e string + printTaskInList(currTask, tasks),"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"                (prev, next) -\u003e prev + next);"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"    private String printTaskInList(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        return ui.printTask(tasks.indexOf(task) + 1, task) + \"\\n\";"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"    private String checkDate() throws DukeException {"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"        boolean isValidInput \u003d dth.isValidInput(item);"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"        if (isValidInput \u0026\u0026 item.length() \u003d\u003d 10) {"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"            // valid"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"            ArrayList\u003cTask\u003e tasksOnDate \u003d dth.filterDate(item, tasks.getTaskList());"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"            if (tasksOnDate.isEmpty()) {"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"                throw new DukeException().emptyCheckDate(item);"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"                return ui.startCheckDate(item) + \"\\n\" + list(tasksOnDate);"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"            // not valid date"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"            throw new DukeException().invalidCheckDate();"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"    private String checkDesc() throws DukeException {"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e tasksWithDesc \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"        for (Task t : tasks.getTaskList()) {"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"            String taskDesc \u003d t.getDescription();"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"            if (taskDesc.contains(item)) {"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"                tasksWithDesc.add(t);"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"        if (tasksWithDesc.isEmpty()) {"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"            throw new DukeException().emptyCheckDesc(item);"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"            return ui.startCheckDesc(item) + \"\\n\" + list(tasksWithDesc);"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":"     * Executes the appropriate method based on command."},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"     * @param taskList Current TaskList to modify."},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":"     * @param u Ui used to print statements."},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"     * @param ds DataStorage used to load or write data."},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"     * @return String to indicate resulting tasks from list."},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If invalid date string is given to a check command,"},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"     * or if no tasks match given date or description in check and find commands."},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"    public String execute(TaskList taskList, Ui u, DataStorage ds) throws DukeException {"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"        tasks \u003d taskList;"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"        ui \u003d u;"},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"        this.dth \u003d new DateTimeHandler();"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"        String output \u003d \"\";"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":"        switch (command) {"},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"        case \"list\":"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"            output \u003d u.startList() + \"\\n\" + list(tasks.getTaskList());"},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":"        case \"check\":"},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":"            output \u003d checkDate();"},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"            break;"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"        case \"find\":"},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"            output \u003d checkDesc();"},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"            break;"},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"        default:"},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"            assert false : \"invalid command: \" + command;"},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"        return output;"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":111}},{"path":"src/main/java/dd/datetimehandler/DateTimeHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.datetimehandler;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Deadline;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Event;"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":" * A date time handler checks if a date input given is valid and"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":" * parses them according to the given format."},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"public class DateTimeHandler {"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"     * Returns whether input is a valid date or date and time input."},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     * @param input String containing input date or date and time."},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     * @return true if input is valid, false if not."},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"    public boolean isValidInput(String input) {"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"        int dateLength \u003d 10;"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"        int dateTimeLength \u003d 15;"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"        if (input.length() \u003d\u003d dateLength) {"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"            try {"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"                convertDate(input);"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"                return true;"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"                return false;"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        } else if (input.length() \u003d\u003d dateTimeLength) {"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"                convertDateTime(input);"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"                return true;"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"                return false;"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"            return false;"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"     * Returns the appropriate method based on whether input consists of only date"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"     * or both date and time."},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"     * @param input String containing input date or date and time."},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"     * @return convertDate() method if date input given,"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"     * convertDateTime() method if date and time input is given."},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"    public String categorizeInput(String input) {"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"        int dateLength \u003d 10;"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"        int dateTimeLength \u003d 15;"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"        if (input.length() \u003d\u003d dateLength) {"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"            return convertDate(input);"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"        } else if (input.length() \u003d\u003d dateTimeLength) {"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"            return convertDateTime(input);"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"            assert false : \"invalid input to categorize\";"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"            return input;"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"    private String convertDate(String input) {"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"        // define the input and output date formats"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"dd-MM-yyyy\")"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"                .toFormatter();"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"        // parse the input according to the defined input format"},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"        LocalDate parsedDate \u003d LocalDate.parse(input, inputFormat);"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"        String outputDate \u003d parsedDate.format(outputFormat);"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"        assert outputDate.length() \u003d\u003d 11;"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"        return outputDate;"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"    private String convertDateTime(String input) {"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"        // define the input and output date and time formats"},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"        DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"dd-MM-yyyy HHmm\")"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"                .toFormatter();"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\");"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"        // parse the input according to the defined input format"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"        LocalDateTime parsedDate \u003d LocalDateTime.parse(input, inputFormat);"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":"        String outputDateTime \u003d parsedDate.format(outputFormat);"},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"        assert outputDateTime.length() \u003d\u003d 20;"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"        return outputDateTime;"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"     * Filters an ArrayList of tasks given according to date given."},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"     * @param date String containing input date."},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"     * @param tasks ArrayList of tasks to filter from."},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"     * @return ArrayList of tasks in given tasks that fall on the date given."},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"    public ArrayList\u003cTask\u003e filterDate(String date, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"        DateTimeFormatter inputFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"dd-MM-yyyy\")"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"                .toFormatter();"},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"        DateTimeFormatter taskFormat \u003d new DateTimeFormatterBuilder().appendPattern(\"dd MMM yyyy\")"},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"                .toFormatter();"},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e tasksOnDate \u003d new ArrayList\u003c\u003e();"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":"        LocalDate queryDate \u003d LocalDate.parse(date, inputFormat);"},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":"        for (Task t : tasks) {"},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"            if (t instanceof Deadline) {"},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"                LocalDate deadlineDate \u003d LocalDate.parse(((Deadline) t).getDate(), taskFormat);"},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":"                if (deadlineDate.isEqual(queryDate)) {"},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"                    int initialNum \u003d tasksOnDate.size();"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":"                    tasksOnDate.add(t);"},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":"                    assert tasksOnDate.size() - initialNum \u003d\u003d 1 : \"matched task was not added into list\";"},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"                }"},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":"            } else if (t instanceof Event) {"},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"                LocalDate eventDate \u003d LocalDate.parse(((Event) t).getDate(), taskFormat);"},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":"                if (eventDate.isEqual(queryDate)) {"},{"lineNumber":131,"author":{"gitId":"g-erm"},"content":"                    int initialNum \u003d tasksOnDate.size();"},{"lineNumber":132,"author":{"gitId":"g-erm"},"content":"                    tasksOnDate.add(t);"},{"lineNumber":133,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":134,"author":{"gitId":"g-erm"},"content":"                    assert tasksOnDate.size() - initialNum \u003d\u003d 1 : \"matched task was not added into list\";"},{"lineNumber":135,"author":{"gitId":"g-erm"},"content":"                }"},{"lineNumber":136,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":139,"author":{"gitId":"g-erm"},"content":"        return tasksOnDate;"},{"lineNumber":140,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":141}},{"path":"src/main/java/dd/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.exception;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":" * A Duke exception thrown when an exception specifically to the Duke system occurs."},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"    private String message;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"     * Class Constructor with specified error message."},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"     * @param errorMessage Specified error message for exception."},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"        message \u003d errorMessage;"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    public DukeException() {"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     * Returns error message."},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"     * @return Error message stored in exception."},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"    public String getMessage() {"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"        return this.message;"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for empty TaskList found for date given in check command."},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"     * @param date Date given in check command."},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing no task found message."},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"    public DukeException emptyCheckDate(String date) {"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"No tasks found on \" + date + \"!\";"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for empty TaskList found for description given in find command."},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"     * @param desc Description given in find command."},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing no task found message."},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"    public DukeException emptyCheckDesc(String desc) {"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"No tasks related to \" + desc + \"!\";"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for invalid date given in check command."},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing invalid date message."},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"    public DukeException invalidCheckDate() {"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"I don\u0027t understand :( Please input date as DD-MM-YYYY\\n\""},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"                + \"Example: 31-12-2020\";"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for invalid date given in event or deadline commands."},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing invalid date message."},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"    public DukeException invalidDate() {"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"I don\u0027t understand :( Please input date as DD-MM-YYYY or DD-MM-YYYY HHmm\\n\""},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"                + \"Example: 31-12-2020 or 31-12-2020 2359\";"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for invalid date given in deadline command."},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing invalid date message."},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"    public DukeException invalidDeadline() {"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"Due date not detected, try again!\\n\""},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"                + \"Please input deadline as \u0027deadline (title) /by (date)\u0027\\n\""},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"                + \"Example: deadline return book /by 31-12-2020\";"},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for invalid date given in event command."},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing invalid date message."},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"    public DukeException invalidEvent() {"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"Event date not detected, try again!\\n\""},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"                + \"Please input event as \u0027event (title) /at (date)\u0027\\n\""},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"                + \"Example: event group meeting /at 31-12-2020\";"},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for invalid task number given."},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing invalid task number message."},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"    public DukeException invalidTaskNumber() {"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"hmm.. I don\u0027t think thats a valid task, try again?\";"},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":"     * Creates a new exception for no data written to file."},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":"     * @return A new DukeException containing no data written message."},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":"    public DukeException noData() {"},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"        String msg \u003d \"No data written to file.\";"},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"        return new DukeException(msg);"},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":130}},{"path":"src/main/java/dd/javafx/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.javafx;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"        var userDialog \u003d new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"        userDialog.dialog.setStyle(\"-fx-background-color: #539818\");"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"        return userDialog;"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"        db.flip();"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"        return db;"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":63}},{"path":"src/main/java/dd/javafx/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.javafx;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":12}},{"path":"src/main/java/dd/javafx/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.javafx;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"            /* logo image from"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"            https://www.clipartkey.com/view/hhoTTh_transparent-emoji-peach-png-transparent-background-peach-emoji/ */"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/appIcon.png\")));"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"            stage.setTitle(\"Timmi the Task Manager\");"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"            stage.setResizable(false);"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke();"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"            stage.show();"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":35}},{"path":"src/main/java/dd/javafx/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.javafx;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.Duke;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"    // images from bigheads.io"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/BigheadUser.png\"));"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/BigheadDD.png\"));"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"    public void setDuke() {"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        duke \u003d new Duke();"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"        String output \u003d duke.initializeDuke();"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"                DialogBox.getDukeDialog(output, dukeImage)"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"        );"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"        printGreeting();"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"    private void printGreeting() {"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        String greeting \u003d duke.sendGreeting();"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"                DialogBox.getDukeDialog(greeting, dukeImage)"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"        );"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"    private void handleUserInput() {"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"        );"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"        userInput.clear();"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":68}},{"path":"src/main/java/dd/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.parser;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.commands.AddCommand;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import dd.commands.Command;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import dd.commands.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import dd.commands.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import dd.commands.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.commands.HelpCommand;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.commands.ListCommand;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"import javafx.util.Duration;"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":" * A parser makes sense of the user input and"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":" * executes the next appropriate command."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"     * Parses and returns a appropriate command based on input given by user."},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     * @param input Input given by user."},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * @return A Command based on the input given."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If an empty item description is given,"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     * or if an invalid command is given."},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"    public static Command parse(String input) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"        Command c;"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"        boolean isQueryInput \u003d input.startsWith(\"check\") || input.startsWith(\"find\");"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        boolean isListCommand \u003d input.equals(\"list\") || isQueryInput;"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        boolean isAddTodo \u003d input.startsWith(\"todo\");"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"        boolean isAddDeadline \u003d input.startsWith(\"deadline\");"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        boolean isAddEvent \u003d input.startsWith(\"event\");"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"        boolean isAddCommand \u003d isAddTodo || isAddDeadline || isAddEvent;"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"        if (isListCommand) {"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"            c \u003d parseListInput(input);"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"        } else if (isAddCommand) {"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"            c \u003d parseAddInput(input);"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"        } else if (input.startsWith(\"done\")) {"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"            c \u003d parseDoneInput(input);"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"        } else if (input.startsWith(\"delete\")) {"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"            c \u003d parseDeleteInput(input);"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        } else if (input.equals(\"bye\")) {"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"            c \u003d parseExit();"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"        } else if (input.equals(\"help\")) {"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"            c \u003d new HelpCommand(\"help\", \"\");"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"            throw new DukeException(\"Invalid command, I don\u0027t understand :(\\n\""},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"                    + \"Type \u0027help\u0027 for a list of possible commands.\");"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"        return c;"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"    private static Command parseListInput(String input) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"        Command c \u003d null;"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"        if (input.equals(\"list\")) {"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"            // list command"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"            c \u003d new ListCommand(\"list\", \"\");"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"        } else if (input.startsWith(\"check\")) {"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"            // check list command"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"            if (input.length() \u003c 6) {"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"                throw new DukeException(\"Query date cannot be empty!\");"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":"                c \u003d new ListCommand(\"check\", input.substring(6));"},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"        } else if (input.startsWith(\"find\")) {"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"            // list find command"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"            if (input.length() \u003c 5) {"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"                throw new DukeException(\"Query description cannot be empty!\");"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"                c \u003d new ListCommand(\"find\", input.substring(5));"},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"        return c;"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"    private static Command parseAddInput(String input) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"        Command c \u003d null;"},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"        if (input.startsWith(\"todo\")) {"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"            if (input.length() \u003c 5) {"},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"                throw new DukeException(\"To-do item cannot be empty! e.g. todo borrow book\");"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"                c \u003d new AddCommand(\"todo\", input.substring(5));"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"        } else if (input.startsWith(\"deadline\")) {"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"            if (input.length() \u003c 9) {"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"                throw new DukeException(\"Deadline item cannot be empty!\");"},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"                c \u003d new AddCommand(\"deadline\", input.substring(9));"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"        } else if (input.startsWith(\"event\")) {"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":"            if (input.length() \u003c 6) {"},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":"                throw new DukeException(\"Event item cannot be empty!\");"},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"                c \u003d new AddCommand(\"event\", input.substring(6));"},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"        return c;"},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"    private static Command parseDoneInput(String input) throws DukeException {"},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"        Command c \u003d null;"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"        if (input.length() \u003c 5) {"},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"            throw new DukeException(\"Item number cannot be empty!\");"},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"            c \u003d new DoneCommand(\"done\", input.substring(5));"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":"        return c;"},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"    private static Command parseDeleteInput(String input) throws DukeException {"},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":"        Command c \u003d null;"},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"        if (input.length() \u003c 7) {"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":"            throw new DukeException(\"Item number cannot be empty!\");"},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":"            c \u003d new DeleteCommand(\"delete\", input.substring(7));"},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":"        return c;"},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":"    private static Command parseExit() {"},{"lineNumber":131,"author":{"gitId":"g-erm"},"content":"        Command c \u003d null;"},{"lineNumber":132,"author":{"gitId":"g-erm"},"content":"        c \u003d new ExitCommand(\"exit\", \"\");"},{"lineNumber":133,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":134,"author":{"gitId":"g-erm"},"content":"        // delay 2 seconds before closing application to display bye greeting first"},{"lineNumber":135,"author":{"gitId":"g-erm"},"content":"        PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"},{"lineNumber":136,"author":{"gitId":"g-erm"},"content":"        delay.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":137,"author":{"gitId":"g-erm"},"content":"        delay.play();"},{"lineNumber":138,"author":{"gitId":"g-erm"},"content":"        return c;"},{"lineNumber":139,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":141,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":141}},{"path":"src/main/java/dd/storage/DataStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.storage;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Task;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":" * A data storage loads the data from an existing file, if any,"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":" * into the system when it starts and saves the data"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":" * into the file when the system exits."},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"public class DataStorage {"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    private Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    private String loadResults;"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     * Returns file created or opened to read and save data."},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * @return File created or opened."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     * @throws IOException When file is not successfully created."},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    public File loadData() throws IOException {"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        // create a File for the given file path"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"        File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"        f.getParentFile().mkdirs();"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        if (f.createNewFile()) {"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"            loadResults \u003d ui.dataCreate(f.getName());"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"            loadResults \u003d ui.dataExists();"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"        return f;"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"     * Indicates whether data was loaded successfully."},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"     * @return String that indicates whether loading the file was successful."},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"    public String getLoadResults() {"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"        return loadResults;"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"     * Parse data to file at exit."},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"     * @param taskList TaskList to be converted and written to file."},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"     * @throws IOException when it is unable to be written to file."},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"     * @throws RuntimeException when taskList is empty."},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"    private void convertData(ArrayList\u003cTask\u003e taskList) throws IOException, RuntimeException {"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"        FileWriter fw \u003d new FileWriter(\"data/duke.txt\");"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"        String input \u003d taskList.get(0).saveString();"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"        taskList.remove(0);"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"        while (!taskList.isEmpty()) {"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"            input \u003d input + \"\\n\" + taskList.get(0).saveString();"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"            int initialNum \u003d taskList.size();"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"            taskList.remove(0);"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"            assert initialNum - taskList.size() \u003d\u003d 1 : \"error iterating through task list\";"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":"        fw.write(input);"},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"        fw.close();"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"     * Writes data to file based on ArrayList of tasks given."},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"     * @param taskList ArrayList of tasks to be written to file."},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"     * @return String to show result of writing data to file."},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":"     * @throws DukeException If no tasks are in taskList,"},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"     * and no tasks are to be written to file."},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":"    public String writeData(ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"            convertData(taskList);"},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":"            return ui.updateData();"},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"        } catch (IOException e) {"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"            return ui.showError(\"Error writing to file.\");"},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"        } catch (RuntimeException e) {"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"            throw new DukeException().noData();"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":92}},{"path":"src/main/java/dd/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.tasks;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":" * A deadline task with a specific due date or date and time."},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"    protected String by;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * @param description Description of deadline."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     * @param by Due date or date and time of deadline."},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"        this.by \u003d by;"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        assert !(description.equals(\"\")) : \"deadline item is empty\";"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"        assert !(by.equals(\"\")) : \"deadline date is empty\";"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     * Returns due date of deadline."},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     * @return String of due date of deadline."},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"    public String getDate() {"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        int dateLength \u003d 11;"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        return by.substring(0, dateLength);"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"     * Returns LocalDate or LocalDateTime form of date or date and time of deadline."},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"     * @return LocalDate or LocalDateTime form of date or date and time of deadline."},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"        int dateLength \u003d 11;"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"        int dateTimeLength \u003d 20;"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        assert by.length() \u003d\u003d dateLength || by.length() \u003d\u003d dateTimeLength : \"by string is not valid\";"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"        if (by.length() \u003d\u003d dateLength) {"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"            return LocalDate.parse(by, format).atStartOfDay();"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\");"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"            return LocalDateTime.parse(by, format);"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"     * {@inheritDoc}"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"    public String saveString() {"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"        if (this.isDone) {"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"            return \"D , 1 , \" + description + \" , \" + by;"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"            return \"D , 0 , \" + description + \" , \" + by;"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":75}},{"path":"src/main/java/dd/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.tasks;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":" * An event task occurring on a specific date or date and time."},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"    protected String at;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * @param description Description of event."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     * @param at Date or date and time of event."},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    public Event(String description, String at) {"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"        this.at \u003d at;"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        assert !(description.equals(\"\")) : \"event item is empty\";"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"        assert !(at.equals(\"\")) : \"event date is empty\";"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     * Returns date of event."},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"     * @return String of date of event."},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"    public String getDate() {"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        int dateLength \u003d 11;"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        return at.substring(0, dateLength);"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"     * Returns LocalDate or LocalDateTime form of date or date and time of event."},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"     * @return LocalDate or LocalDateTime form of date or date and time of event."},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"        int dateLength \u003d 11;"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"        int dateTimeLength \u003d 20;"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        assert at.length() \u003d\u003d dateLength || at.length() \u003d\u003d dateTimeLength : \"at string is not valid\";"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"        if (at.length() \u003d\u003d dateLength) {"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"            return LocalDate.parse(at, format).atStartOfDay();"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mm a\");"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"            return LocalDateTime.parse(at, format);"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"     * {@inheritDoc}"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"    public String saveString() {"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"        if (this.isDone) {"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"            return \"E , 1 , \" + description + \" , \" + at;"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"            return \"E , 0 , \" + description + \" , \" + at;"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":75}},{"path":"src/main/java/dd/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.tasks;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":" * A task stored in the task list."},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"     * @param description Description of task."},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    public Task(String description) {"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"     * Returns the description of the task."},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     * @return Description of the task."},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"    public String getDescription() {"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"        return description;"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"    private String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"     * Converts task into string to be written into file when saving tasks."},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"     * @return String to be written into file."},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"    public String saveString() {"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"        return \"\";"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"     * Marks the task as done."},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"    public void markAsDone() {"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        this.isDone \u003d true;"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"     * Returns LocalDate or LocalDateTime form of date or date and time of task."},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"     * @return LocalDate or LocalDateTime form of date or date and time of task."},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"        return null;"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":64}},{"path":"src/main/java/dd/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.tasks;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":" * A task list contains tasks in an array list."},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"    private final ArrayList\u003cTask\u003e taskList;"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"    private int numOfTodo \u003d 0;"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"        taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     * Class Constructor with specified file to fetch data from."},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     * @param f Specified file to fetch data from to create TaskList."},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     * @throws FileNotFoundException When file is not found."},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"    public TaskList(File f) throws FileNotFoundException {"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e scannedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"        while (s.hasNext()) {"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"            String[] temp \u003d s.nextLine().split(\" , \");"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"            if (temp[0].equals(\"T\")) {"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"                scannedTasks.add(new Todo(temp[2]));"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"                this.numOfTodo +\u003d 1;"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"            } else if (temp[0].equals(\"E\")) {"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"                scannedTasks.add(new Event(temp[2], temp[3]));"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"                scannedTasks.add(new Deadline(temp[2], temp[3]));"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"            if (temp[1].equals(\"1\")) {"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"                scannedTasks.get(scannedTasks.size() - 1).markAsDone();"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"        this.taskList \u003d scannedTasks;"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"     * Returns the ArrayList of tasks saved."},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"     * @return ArrayList of tasks."},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"        return this.taskList;"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"     * Returns the number of tasks saved."},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"     * @return The size of ArrayList of tasks."},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"    public int getTaskSize() {"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"        return taskList.size();"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"     * Returns a task according to a given index."},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"     * @param i Index of Task in tasks to be returned."},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"     * @return Task at the given index."},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"    public Task getTask(int i) {"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"        return taskList.get(i);"},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"     * Adds a Task given into tasks."},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"     * @param t Task to be added to ArrayList of tasks."},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":"    public void addTask(Task t) {"},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"        taskList.add(t);"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"     * Adds a To-do task, ensures that all to-do tasks are at the top of list"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"     * and increase number of to-do by one."},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"     * @param t To-do task to be added to ArrayList of tasks."},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":"    public void addTodo(Task t) {"},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"        taskList.add(numOfTodo, t);"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"        this.numOfTodo +\u003d 1;"},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"     * Deletes the task at a given index."},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"     * @param i Index of Task in tasks to be deleted."},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"    public void deleteTask(int i) {"},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"        if (taskList.get(i) instanceof Todo) {"},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":"            this.numOfTodo -\u003d 1;"},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"        taskList.remove(i);"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":"     * Sorts the deadline and event tasks chronologically."},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":"    public void sortTasks() {"},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":"        assert (!(taskList.get(numOfTodo) instanceof Todo)) : \"trying to sort todo\";"},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":"        taskList.subList(numOfTodo, getTaskSize()).sort(Comparator.comparing(Task::getDateTime));"},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":119}},{"path":"src/main/java/dd/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.tasks;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":" * A to-do task."},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"     * Class Constructor."},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"     * @param description Description of to-do."},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"        assert !(description.equals(\"\")) : \"todo item is empty\";"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"     * {@inheritDoc}"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    public String saveString() {"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        if (this.isDone) {"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"            return \"T , 1 , \" + description;"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"            return \"T , 0 , \" + description;"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":34}},{"path":"src/main/java/dd/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.ui;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":" * A Ui deals with interaction with the user and prints out"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":" * appropriate statements."},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":" */"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"    private final String smileyLine \u003d \"*********************\""},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"            + \"*****************************\";"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"     * Indicate data created at given file name."},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"     * @param fName File name that data is created in."},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"     * @return String that indicates file is created."},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    public String dataCreate(String fName) {"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"        return \"New data created: \" + fName;"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"     * Indicate data already exists."},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"     * @return String that indicates data exists."},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"    public String dataExists() {"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        return \"Data already exists.\";"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"     * Returns exit output."},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"     * @return DD exit string."},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"    public String exit() {"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"        return \"You\u0027re leaving? Bye :( Come back soon!\";"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"     * Returns greeting output."},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"     * @return DD greeting string."},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"    public String greeting() {"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"        return \"Hi! I\u0027m Timmi, your personal Task Manager!\\n\""},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"                + \"Type \u0027help\u0027 for a list of possible commands!\";"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"     * Returns all possible user commands."},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":"     * @return Possible user commands for user."},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"    public String printAllCommands() {"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"        String lineBreak \u003d \"----------------------------------------------------------\""},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":"                + \"-------------------------------------------------------\\n\";"},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"        return \"Here are all the possible commands and how to use them:\\n\""},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"                + smileyLine + \"\\n\""},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"                + \"   To add a todo, enter: \\\"todo \u003citem name\u003e\\\". \\n\""},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"                + \"     For example: \\\"todo borrow book\\\". \\n\""},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"                + \"   To add a deadline, enter: \\\"deadline \u003citem name\u003e /by \u003cdate\u003e \u003c(OPTIONAL) time\u003e\\\". \\n\""},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"                + \"     For example: \\\"deadline return book /by 31-12-2020\\\". \\n\""},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"                + \"   To add an event, enter: \\\"event \u003citem name\u003e /at \u003cdate\u003e \u003c(OPTIONAL) time\u003e\\\". \\n\""},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"                + \"     For example: \\\"event team meeting /at 31-12-2020 1800\\\". \\n\""},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":"                + \"   To check your list of tasks, enter: \\\"list\\\". \\n\""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"                + \"   To check your list of tasks on a particular date, enter: \\\"check \u003cdate\u003e\\\". \\n\""},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"                + \"   To find list of tasks related to a word, enter: \\\"find \u003cyour query word\u003e\\\". \\n\""},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"                + \"   To mark a task as done, enter: \\\"done \u003ctask number in list\u003e\\\". \\n\""},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"                + \"   To delete a task, enter: \\\"delete \u003ctask number in list\u003e\\\". \\n\""},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":"                + lineBreak"},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"                + \"   And if you want to leave and save your data, you can just say \\\"bye\\\" I guess......\\n\";"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"     * Indicate task given is deleted."},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"     * @param t Task that is deleted."},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"     * @return String that confirms deleted task."},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"    public String printDeletedTask(Task t) {"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"        return \"Alright! I\u0027ve deleted the task:\\n  \" + t;"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"     * Indicate task given is marked as done."},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"     * @param t Task that is marked as done."},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"     * @return String that confirms task that is mark as done."},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":"    public String printDoneTask(Task t) {"},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":"        return \"Wow!! Good job!!\\n  \" + t;"},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"     * Returns string for listing of task according to task index and Task given."},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"     * @param taskIndex Index of task."},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":"     * @param t Task to be printed."},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"     * @return String of task details."},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"    public String printTask(int taskIndex, Task t) {"},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"        return taskIndex + \". \" + t;"},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":"     * Indicates number of tasks in list."},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":"     * @param taskSize Number of tasks in list."},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"     * @return String to indicate the number of tasks in list."},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":"    public String printTasksSize(int taskSize) {"},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":"        return \"You now have \" + taskSize + \" task(s) in your list!\";"},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":"     * Returns error message given."},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":"     * @param msg Error message to be printed."},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"     * @return Error message."},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":"    public String showError(String msg) {"},{"lineNumber":131,"author":{"gitId":"g-erm"},"content":"        return msg;"},{"lineNumber":132,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":134,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"g-erm"},"content":"     * Indicates loading error."},{"lineNumber":136,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"g-erm"},"content":"     * @return String to show that loading error occurred."},{"lineNumber":138,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"g-erm"},"content":"    public String showLoadingError() {"},{"lineNumber":140,"author":{"gitId":"g-erm"},"content":"        return \"An error occurred, unable to load prior data. New list created.\";"},{"lineNumber":141,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":143,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"g-erm"},"content":"     * Indicate to-do given is added."},{"lineNumber":145,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"g-erm"},"content":"     * @param t To-do that is added."},{"lineNumber":147,"author":{"gitId":"g-erm"},"content":"     * @return String to confirm to-do task added."},{"lineNumber":148,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"g-erm"},"content":"    public String startAddTodo(Task t) {"},{"lineNumber":150,"author":{"gitId":"g-erm"},"content":"        return \"Ok, To-do added:\\n  \" + t;"},{"lineNumber":151,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":153,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"g-erm"},"content":"     * Indicate deadline given is added."},{"lineNumber":155,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"g-erm"},"content":"     * @param t Deadline that is added."},{"lineNumber":157,"author":{"gitId":"g-erm"},"content":"     * @return String to confirm deadline task added."},{"lineNumber":158,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"g-erm"},"content":"    public String startAddDeadline(Task t) {"},{"lineNumber":160,"author":{"gitId":"g-erm"},"content":"        return \"Ok, Deadline added:\\n  \" + t;"},{"lineNumber":161,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":163,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"g-erm"},"content":"     * Indicate event given is added."},{"lineNumber":165,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"g-erm"},"content":"     * @param t Event that is added."},{"lineNumber":167,"author":{"gitId":"g-erm"},"content":"     * @return String to confirm event task added."},{"lineNumber":168,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"g-erm"},"content":"    public String startAddEvent(Task t) {"},{"lineNumber":170,"author":{"gitId":"g-erm"},"content":"        return \"Ok, Event added:\\n  \" + t;"},{"lineNumber":171,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":173,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"g-erm"},"content":"     * Indicate date that is being checked."},{"lineNumber":175,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"g-erm"},"content":"     * @param date Date that is being checked."},{"lineNumber":177,"author":{"gitId":"g-erm"},"content":"     * @return String to confirm date checked."},{"lineNumber":178,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"g-erm"},"content":"    public String startCheckDate(String date) {"},{"lineNumber":180,"author":{"gitId":"g-erm"},"content":"        return \"Here is your list of task(s) on \" + date + \":\\n\""},{"lineNumber":181,"author":{"gitId":"g-erm"},"content":"                + smileyLine;"},{"lineNumber":182,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":184,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"g-erm"},"content":"     * Indicate description that is being checked."},{"lineNumber":186,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":187,"author":{"gitId":"g-erm"},"content":"     * @param desc Description that is being checked."},{"lineNumber":188,"author":{"gitId":"g-erm"},"content":"     * @return String to confirm description being checked."},{"lineNumber":189,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"g-erm"},"content":"    public String startCheckDesc(String desc) {"},{"lineNumber":191,"author":{"gitId":"g-erm"},"content":"        return \"Here is the list of task(s) related to \" + desc + \":\\n\""},{"lineNumber":192,"author":{"gitId":"g-erm"},"content":"                + smileyLine;"},{"lineNumber":193,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":195,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"g-erm"},"content":"     * Indicate start of listing of tasks."},{"lineNumber":197,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":198,"author":{"gitId":"g-erm"},"content":"     * @return String to show the start of list."},{"lineNumber":199,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"g-erm"},"content":"    public String startList() {"},{"lineNumber":201,"author":{"gitId":"g-erm"},"content":"        return \"Here is your current list of task(s)!\\n\""},{"lineNumber":202,"author":{"gitId":"g-erm"},"content":"                + smileyLine;"},{"lineNumber":203,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":205,"author":{"gitId":"g-erm"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"g-erm"},"content":"     * Indicate data is updated."},{"lineNumber":207,"author":{"gitId":"g-erm"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"g-erm"},"content":"     * @return String to indicate that data is updated."},{"lineNumber":209,"author":{"gitId":"g-erm"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"g-erm"},"content":"    public String updateData() {"},{"lineNumber":211,"author":{"gitId":"g-erm"},"content":"        return \"Updated your data!\";"},{"lineNumber":212,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":213}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"dialog\" stylesheets\u003d\"@../css/dd.css\" text\u003d\"Label\" /\u003e"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"g-erm":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"dd.javafx.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"600.0\" prefWidth\u003d\"724.0\" promptText\u003d\"Send something to Timmi!\" styleClass\u003d\"input\" stylesheets\u003d\"@../css/dd.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" AnchorPane.topAnchor\u003d\"558.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"719.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"81.0\" stylesheets\u003d\"@../css/dd.css\" text\u003d\"ENTER\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"719.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"558.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"559.0\" prefWidth\u003d\"800.0\" styleClass\u003d\"chatbg\" stylesheets\u003d\"@../css/dd.css\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"         \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"558.0\" prefWidth\u003d\"783.0\" styleClass\u003d\"chatbg\" stylesheets\u003d\"@../css/dd.css\" /\u003e"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"         \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"g-erm":19}},{"path":"src/test/java/dd/commands/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Deadline;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Event;"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Todo;"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"public class AddCommandTest {"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"    public void addTodo_success() throws DukeException {"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Ok, To-do added:  \\n\" + new Todo(\"borrow book\")"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"                + \"\\n\" + \"You now have 1 task(s) in your list!\";"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new AddCommand(\"todo\", \"borrow book\").execute(tasks, ui, ds);"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"    public void addDeadline_success() throws DukeException {"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Ok, Deadline added:  \\n\" + new Deadline(\"return book\", \"31 Dec 2020\")"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"                + \"\\n\" + \"You now have 1 task(s) in your list!\";"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new AddCommand(\"deadline\", \"return book /by 31-12-2020\")"},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"                .execute(tasks, ui, ds);"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"    public void addDeadline_invalidDeadline_exceptionThrown() {"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Due date not detected, try again!\\n\""},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"                + \"Please input deadline as \u0027deadline (title) /by (date)\u0027\\n\""},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"                + \"Example: deadline return book /by 31-12-2020\";"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new AddCommand(\"deadline\", \"return book\")"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":"                    .execute(tasks, ui, ds);"},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"    public void addDeadline_invalidDate_exceptionThrown() {"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"I don\u0027t understand :( Please input date as DD-MM-YYYY or DD-MM-YYYY HHmm\\n\""},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"                + \"Example: 31-12-2020 or 31-12-2020 2359\";"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new AddCommand(\"deadline\", \"return book /by 9 June\")"},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":"                    .execute(tasks, ui, ds);"},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"    public void addEvent_success() throws DukeException {"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Ok, Event added:  \\n\" + new Event(\"meeting\", \"31 Dec 2020 02:00 PM\")"},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":"                + \"\\n\" + \"You now have 1 task(s) in your list!\";"},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new AddCommand(\"event\", \"meeting /at 31-12-2020 1400\")"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"                .execute(tasks, ui, ds);"},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":"    public void addEvent_invalidEvent_exceptionThrown() {"},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Event date not detected, try again!\\n\""},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"                + \"Please input event as \u0027event (title) /at (date)\u0027\\n\""},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":"                + \"Example: event group meeting /at 31-12-2020\";"},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new AddCommand(\"event\", \"return book /at\")"},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":"                    .execute(tasks, ui, ds);"},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"g-erm"},"content":"    public void addEvent_invalidDate_exceptionThrown() {"},{"lineNumber":132,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"I don\u0027t understand :( Please input date as DD-MM-YYYY or DD-MM-YYYY HHmm\\n\""},{"lineNumber":133,"author":{"gitId":"g-erm"},"content":"                + \"Example: 31-12-2020 or 31-12-2020 2359\";"},{"lineNumber":134,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":135,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":136,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":137,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":138,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":139,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new AddCommand(\"event\", \"meeting /at 9 June\")"},{"lineNumber":141,"author":{"gitId":"g-erm"},"content":"                    .execute(tasks, ui, ds);"},{"lineNumber":142,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":143,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":144,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":145,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":146,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":147,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":148,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":150}},{"path":"src/test/java/dd/commands/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Todo;"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"public class DeleteCommandTest {"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    public void execute_success() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"        Todo delTask \u003d new Todo(\"borrow book\");"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Alright! I\u0027ve deleted the task:  \\n\" + delTask"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"                + \"\\n\" + \"You now have 0 task(s) in your list!\";"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"        tasks.addTask(delTask);"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new DeleteCommand(\"delete\", \"1\").execute(tasks, ui, ds);"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"    public void execute_invalidTaskNumber_exceptionThrown() {"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"hmm.. I don\u0027t think thats a valid task, try again?\";"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new DeleteCommand(\"delete\", \"1\").execute(tasks, ui, ds);"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":53}},{"path":"src/test/java/dd/commands/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Todo;"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"public class DoneCommandTest {"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"    public void execute_success() throws DukeException {"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"        Todo doneTask \u003d new Todo(\"borrow book\");"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"        doneTask.markAsDone();"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Wow!! Good job!!  \\n\" + doneTask;"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"        tasks.addTask(doneTask);"},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new DoneCommand(\"done\", \"1\").execute(tasks, ui, ds);"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":"    public void execute_invalidTaskNumber_exceptionThrown() {"},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"hmm.. I don\u0027t think thats a valid task, try again?\";"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new DoneCommand(\"done\", \"1\").execute(tasks, ui, ds);"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":53}},{"path":"src/test/java/dd/commands/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"package dd.commands;"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"import dd.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"import dd.storage.DataStorage;"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Deadline;"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Event;"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Task;"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"import dd.tasks.TaskList;"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"import dd.tasks.Todo;"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"import dd.ui.Ui;"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"public class ListCommandTest {"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"g-erm"},"content":"    public void list_success() throws DukeException {"},{"lineNumber":23,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Here is your current list of task(s)!\\n\""},{"lineNumber":24,"author":{"gitId":"g-erm"},"content":"                + \"**************************************************\\n\""},{"lineNumber":25,"author":{"gitId":"g-erm"},"content":"                + \"1. [T][✘] borrow book\\n\";"},{"lineNumber":26,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":27,"author":{"gitId":"g-erm"},"content":"        Todo t \u003d new Todo(\"borrow book\");"},{"lineNumber":28,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e a \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"g-erm"},"content":"        a.add(t);"},{"lineNumber":30,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":31,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(t);"},{"lineNumber":33,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":34,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":35,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":36,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":37,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new ListCommand(\"list\", \"\").execute(tasks, ui, ds);"},{"lineNumber":38,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":39,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":40,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":41,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":43,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"g-erm"},"content":"    public void checkDate_success() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Here is your list of task(s) on 31-12-2020:\\n\""},{"lineNumber":46,"author":{"gitId":"g-erm"},"content":"                + \"**************************************************\\n\""},{"lineNumber":47,"author":{"gitId":"g-erm"},"content":"                + \"1. [D][✘] return book (by: 31 Dec 2020)\\n\";"},{"lineNumber":48,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":49,"author":{"gitId":"g-erm"},"content":"        Todo t \u003d new Todo(\"borrow book\");"},{"lineNumber":50,"author":{"gitId":"g-erm"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"31 Dec 2020\");"},{"lineNumber":51,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e a \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"g-erm"},"content":"        a.add(t);"},{"lineNumber":53,"author":{"gitId":"g-erm"},"content":"        a.add(d);"},{"lineNumber":54,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":55,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":56,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(t);"},{"lineNumber":57,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(d);"},{"lineNumber":58,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":59,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":60,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":61,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":62,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new ListCommand(\"check\", \"31-12-2020\").execute(tasks, ui, ds);"},{"lineNumber":63,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":64,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":65,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":66,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":68,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"g-erm"},"content":"    public void checkDate_invalidDate_exceptionThrown() {"},{"lineNumber":70,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"I don\u0027t understand :( Please input date as DD-MM-YYYY Example: 31-12-2020\";"},{"lineNumber":71,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":72,"author":{"gitId":"g-erm"},"content":"        Todo t \u003d new Todo(\"borrow book\");"},{"lineNumber":73,"author":{"gitId":"g-erm"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"31 Dec 2020\");"},{"lineNumber":74,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e a \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"g-erm"},"content":"        a.add(t);"},{"lineNumber":76,"author":{"gitId":"g-erm"},"content":"        a.add(d);"},{"lineNumber":77,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":78,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":79,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(t);"},{"lineNumber":80,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(d);"},{"lineNumber":81,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":82,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":83,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":84,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":85,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new ListCommand(\"check\", \"9 June\").execute(tasks, ui, ds);"},{"lineNumber":87,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":88,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":89,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":90,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":91,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":92,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":93,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":96,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"g-erm"},"content":"    public void checkDate_noDateMatch_exceptionThrown() {"},{"lineNumber":98,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"No tasks found on 09-06-2020!\";"},{"lineNumber":99,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":100,"author":{"gitId":"g-erm"},"content":"        Todo t \u003d new Todo(\"borrow book\");"},{"lineNumber":101,"author":{"gitId":"g-erm"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"31 Dec 2020\");"},{"lineNumber":102,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e a \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitId":"g-erm"},"content":"        a.add(t);"},{"lineNumber":104,"author":{"gitId":"g-erm"},"content":"        a.add(d);"},{"lineNumber":105,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":106,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":107,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(t);"},{"lineNumber":108,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(d);"},{"lineNumber":109,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":110,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":111,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":112,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":113,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":114,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new ListCommand(\"check\", \"09-06-2020\").execute(tasks, ui, ds);"},{"lineNumber":115,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":116,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":117,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":118,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":119,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":120,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":121,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":124,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"g-erm"},"content":"    public void checkDesc_success() throws DukeException {"},{"lineNumber":126,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"Here is the list of task(s) related to book:\\n\""},{"lineNumber":127,"author":{"gitId":"g-erm"},"content":"                + \"**************************************************\\n\""},{"lineNumber":128,"author":{"gitId":"g-erm"},"content":"                + \"1. [T][✘] borrow book\\n\""},{"lineNumber":129,"author":{"gitId":"g-erm"},"content":"                + \"2. [D][✘] return book (by: 31 Dec 2020)\\n\";"},{"lineNumber":130,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":131,"author":{"gitId":"g-erm"},"content":"        Todo t \u003d new Todo(\"borrow book\");"},{"lineNumber":132,"author":{"gitId":"g-erm"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"31 Dec 2020\");"},{"lineNumber":133,"author":{"gitId":"g-erm"},"content":"        Event e \u003d new Event(\"meeting\", \"06 Jun 2020\");"},{"lineNumber":134,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e a \u003d new ArrayList\u003c\u003e();"},{"lineNumber":135,"author":{"gitId":"g-erm"},"content":"        a.add(t);"},{"lineNumber":136,"author":{"gitId":"g-erm"},"content":"        a.add(d);"},{"lineNumber":137,"author":{"gitId":"g-erm"},"content":"        a.add(e);"},{"lineNumber":138,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":139,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":140,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(t);"},{"lineNumber":141,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(d);"},{"lineNumber":142,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(e);"},{"lineNumber":143,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":144,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":145,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":146,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":147,"author":{"gitId":"g-erm"},"content":"        String actual \u003d new ListCommand(\"find\", \"book\").execute(tasks, ui, ds);"},{"lineNumber":148,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":149,"author":{"gitId":"g-erm"},"content":"        assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":150,"author":{"gitId":"g-erm"},"content":"                actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":151,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":153,"author":{"gitId":"g-erm"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"g-erm"},"content":"    public void checkDate_noDescMatch_exceptionThrown() {"},{"lineNumber":155,"author":{"gitId":"g-erm"},"content":"        String res \u003d \"No tasks related to meeting!\";"},{"lineNumber":156,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":157,"author":{"gitId":"g-erm"},"content":"        Todo t \u003d new Todo(\"borrow book\");"},{"lineNumber":158,"author":{"gitId":"g-erm"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"31 Dec 2020\");"},{"lineNumber":159,"author":{"gitId":"g-erm"},"content":"        ArrayList\u003cTask\u003e a \u003d new ArrayList\u003c\u003e();"},{"lineNumber":160,"author":{"gitId":"g-erm"},"content":"        a.add(t);"},{"lineNumber":161,"author":{"gitId":"g-erm"},"content":"        a.add(d);"},{"lineNumber":162,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":163,"author":{"gitId":"g-erm"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":164,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(t);"},{"lineNumber":165,"author":{"gitId":"g-erm"},"content":"        tasks.getTaskList().add(d);"},{"lineNumber":166,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":167,"author":{"gitId":"g-erm"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":168,"author":{"gitId":"g-erm"},"content":"        DataStorage ds \u003d new DataStorage();"},{"lineNumber":169,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":170,"author":{"gitId":"g-erm"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"g-erm"},"content":"            String actual \u003d new ListCommand(\"find\", \"meeting\").execute(tasks, ui, ds);"},{"lineNumber":172,"author":{"gitId":"g-erm"},"content":""},{"lineNumber":173,"author":{"gitId":"g-erm"},"content":"            assertEquals(\"\", actual.replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":174,"author":{"gitId":"g-erm"},"content":"            fail();"},{"lineNumber":175,"author":{"gitId":"g-erm"},"content":"        } catch (DukeException e) {"},{"lineNumber":176,"author":{"gitId":"g-erm"},"content":"            assertEquals(res.replaceAll(\"\\\\p{Cntrl}\", \" \"),"},{"lineNumber":177,"author":{"gitId":"g-erm"},"content":"                    e.getMessage().replaceAll(\"\\\\p{Cntrl}\", \" \"));"},{"lineNumber":178,"author":{"gitId":"g-erm"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"g-erm"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"g-erm"},"content":"}"}],"authorContributionMap":{"g-erm":180}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"g-erm"},"content":"hi"},{"lineNumber":2,"author":{"gitId":"g-erm"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"g-erm"},"content":"deadline return book /by September 6th"},{"lineNumber":4,"author":{"gitId":"g-erm"},"content":"deadline return book /by 06-09-2020"},{"lineNumber":5,"author":{"gitId":"g-erm"},"content":"event lesson /at 06-09-2020 2pm"},{"lineNumber":6,"author":{"gitId":"g-erm"},"content":"event lesson /at 06-09-2020 1400"},{"lineNumber":7,"author":{"gitId":"g-erm"},"content":"event project meeting"},{"lineNumber":8,"author":{"gitId":"g-erm"},"content":"event project meeting /at 09-09-2020 1830"},{"lineNumber":9,"author":{"gitId":"g-erm"},"content":"todo join sports club"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"list"},{"lineNumber":11,"author":{"gitId":"g-erm"},"content":"check 06-09-2020 2359"},{"lineNumber":12,"author":{"gitId":"g-erm"},"content":"check 06-09-2020"},{"lineNumber":13,"author":{"gitId":"g-erm"},"content":"done 1"},{"lineNumber":14,"author":{"gitId":"g-erm"},"content":"done 2"},{"lineNumber":15,"author":{"gitId":"g-erm"},"content":"delete 2"},{"lineNumber":16,"author":{"gitId":"g-erm"},"content":"list"},{"lineNumber":17,"author":{"gitId":"g-erm"},"content":"check 06-09-2020"},{"lineNumber":18,"author":{"gitId":"g-erm"},"content":"delete 10"},{"lineNumber":19,"author":{"gitId":"g-erm"},"content":"done 0"},{"lineNumber":20,"author":{"gitId":"g-erm"},"content":"check 10-09-2020"},{"lineNumber":21,"author":{"gitId":"g-erm"},"content":"bye"}],"authorContributionMap":{"g-erm":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"g-erm"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\dd\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"g-erm":1,"-":20}}]
