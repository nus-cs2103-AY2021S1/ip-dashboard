[
  {
    "path": ".idea/checkstyleidea-libs/readme.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "This folder contains libraries copied from the \"ip\" project."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "It is managed by the CheckStyle-IDEA IDE plugin."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Do not modify this folder while the IDE is running."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "When the IDE is stopped, you may delete this folder at any time. It will be recreated as needed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "In order to prevent the CheckStyle-IDEA IDE plugin from creating this folder,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "uncheck the \"Copy libraries from project directory\" option in the CheckStyle-IDEA settings dialog."
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 6
    }
  },
  {
    "path": "DukeTodoSave.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] GUI added "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][X] add (at: 11 Nov 1111 1100)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] todo1 "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][X] event 1 (at: 22 Feb 2222 1100)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] test "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] number 2 (by: 21 Feb 2222 1100)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] number 3 (by: 21 Feb 2222 1000)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][X] number 4 (at: 21 Feb 2222 1300)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] CS2103T "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] CS2103T IP (by: 18 Sep 2020 2359)"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 10
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "run {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 62
    }
  },
  {
    "path": "build/resources/main/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#f9f9f9\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 20
    }
  },
  {
    "path": "build/resources/main/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-image: url(\u0027images/BackgroundImage.jpeg\u0027);\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. Ensure that you have Java `11` or above installed on your device."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. You can find the latest version of Mattbot [here](provide link later)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3. Download the `mattbot.jar` file and open to start the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. Run the jar file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "5. Enter commands into the textbox and click `Send`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| Feature name               | Description  | syntax |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "|:--------------------------| :----------- | :------ |"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Add new todo task          | Add a new todo task with the given *[name]*                                                     | todo *[name]*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Add new deadline task      | Add a new deadline task with the given *[name]*, *[date and time]*                              | deadline *[name]* /by *[d-MM-uuuu HHmm]*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Add new Event task         | Add a new event task with the given *[name]*, *[date and time]*                                 | event *[name]* /at *[d-MM-uuuu HHmm]*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Mark as done               | Mark the specific task index, *[index]* as completed                                            | done *[index]*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Delete task                | Deletes the specified task *[index]* from the list                                              | delete *[index]*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Show all existing commands | Show all the commands the user can used                                                         | show"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "List all task              | List all currently tracked task and show their relevant information                             | list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "View all tasks for a day   | View all the task on a specific date, *[date]*, and the tasks are arranged in order of the time | view *[d-MM-uuuu]*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Search for tasks           | Search of all tasks with this name *[name]*                                                     | find *[name]*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Filter the tasks by date   | Filter all the tasks and only show those that have the same *[date]*                            | filter *[d-MM-uuuu]*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Exits the program          | Terminates and closes the program | bye"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Add a new todo task with the given *[name]*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `todo`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`todo CS2103T`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Task has been successfully added!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    [T][X] CS2103T"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Mattbot is tracking 1 number of tasks!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 2"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Add a new deadline task with the given *[name]*, *[date and time]*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `deadline`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`deadline CS2103T IP /by 18-09-2020 2359`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Task has been successfully added!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    [D][X] CS2103T IP (by: 18 Sep 2020 2359)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Mattbot is tracking 2 number of tasks!"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 3"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Add a new event task with the given *[name]*, *[date and time]*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keyword: `event`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`event CS2103T IP /by 19-09-2020 2359`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Task has been successfully added!"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    [E][X] CS2103T IP (by: 19 Sep 2020 2359)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Mattbot is tracking 3 number of tasks!"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 4"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Mark the specific task index, *[index]* as completed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `done`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    [T][O] CS2103T"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The tracked task has been marked as completed! Congrats~~!"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    [D][O] CS2103T IP (by: 18 Sep 2020 2359)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The tracked task has been marked as completed! Congrats~~!"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 5"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Deletes the specified task *[index]* from the list"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `delete`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    [T][O] CS2103T"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "The tracked task has been deleted!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 6"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Show all the commands the user can used"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### keywords: `show`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`show`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list: to show all existing tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "bye: to exit the todo bot."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "delete [task index]: to delete the selected task from the todolist."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "todo [task name]: to add the todo task into the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline [task name] /by [dd-MM-uuuu HHmm]: add a deadline task with the specific time and date."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event [task name] /at [dd-MM-uuuu HHmm]: add a event task with the specific period."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "done [task index]: to mark the specific task as completed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "filter [d-MM-uuuu]: to show all the tasks with this date."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "find [keyword]: to find all tasks with that has the keywords in its name."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "view [d-MM-uuuu]: to view the tasks in order on that day"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 7"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "List all currently tracked task and show their relevant information"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `list`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "These are your current tasks!"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. [D][O] CS2103T IP (by: 18 Sep 2020 2359)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. [E][X] CS2103T IP (by: 19 Sep 2020 2359)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 8"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "View all the task on a specific date, *[date]*, and the tasks are arranged in order of the time"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `view`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`view 18-09-2020`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Here are your tasks on this date!"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    1. [D][X] CS2103T IP (by: 18 Sep 2020 1200)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    2. [D][X] CS2103T IP (by: 18 Sep 2020 2359)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 9"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Search of all tasks with this name *[name]*"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `find`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`find CS2103T`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Here are your tasks with this keywords!"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    1. [T][X] CS2103T"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    2. [D][X] CS2103T IP (by: 18 Sep 2020 2359)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 10"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Filter all the tasks and only show those that have the same *[date]*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `filter`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`filter 18-09-2020`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Here are your tasks on this date!"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    1. [D][X] CS2103T IP (by: 18 Sep 2020 2359)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Feature 11"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Terminates and closes the program"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Keywords: `bye`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Awww, leaving so soon? Hope to see you again!"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 231,
      "-": 12
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 103
    }
  },
  {
    "path": "original_ignore.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/*.iml"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ".DS_Store"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "bin/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/text-ui-test/ACTUAL.txt"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "text-ui-test/EXPECTED-UNIX.TXT"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 17
    }
  },
  {
    "path": "src/main/java/Command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getFileDir;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that adds a Deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates and add a new deadline into the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the added Deadline task message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String deadline nessage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to get name or date of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d getDate(input, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return TaskManager.newTask2(name, \"Deadline\", date, getFileDir());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 28
    }
  },
  {
    "path": "src/main/java/Command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getFileDir;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that adds an Event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates and add a new Event into the list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the added Event task message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String event message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to get name or date of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d getDate(input, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return TaskManager.newTask2(name, \"Event\", date, getFileDir());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 30
    }
  },
  {
    "path": "src/main/java/Command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getFileDir;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that adds a Todo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates and add a new Todo into the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the added Todo task message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String Todo message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to get name or date of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return TaskManager.newTask2(name, \"Todo\", null, getFileDir());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 28
    }
  },
  {
    "path": "src/main/java/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the overall command abstract class for sub-class to follow."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s String."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i integer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date and time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(LocalDateTime date) {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 34
    }
  },
  {
    "path": "src/main/java/Command/CompletedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that marks a task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class CompletedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Marks the selected task as completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the completion message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i task index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String completion message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to locate specified task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int index \u003d i;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            t \u003d TaskManager.getTask(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            TaskManager.completed(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UserInterface.done2();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return \"    \" + TaskManager.read(t) + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + \"The tracked Tasks.task has been marked as completed! Congrats~~!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no such Tasks.task!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 33
    }
  },
  {
    "path": "src/main/java/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that deletes a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Deletes the selected task from the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the deleted task message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i task index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to find task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int index \u003d i;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            t \u003d TaskManager.getTask(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            TaskManager.delete(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UserInterface.done2();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return \"    \" + TaskManager.read(t) + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + \"The tracked Tasks.task has been deleted!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no suck Tasks.task!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 35
    }
  },
  {
    "path": "src/main/java/Command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that exits the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the UserInterface to print the stop message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the exit message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String exit message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return UserInterface.stop2();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Command/FilterDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that filters the task by the date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FilterDateCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static ArrayList\u003ctask\u003e filter(LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d TaskManager.getStore();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e filtered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task t : clone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            LocalDateTime dateTime \u003d t.getTaskDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (dateTime !\u003d null \u0026\u0026 dateTime.toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                filtered.add(t);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Filters the tasks based on the input date, showing only those with that date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Return the list of task matching the filter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date to search."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String filtered list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions wrong date format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(LocalDate date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e filtered \u003d filter(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        result \u003d result + \"Here are your tasks on this date!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : filtered) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            result \u003d result + System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            result \u003d result + \"    \" + count + \". \" + TaskManager.read(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 49
    }
  },
  {
    "path": "src/main/java/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the find command that searches for task by date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the search function by looking through all the tasks stored and checking the date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the filtered list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String filtered list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d TaskManager.getStore();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        result \u003d result + \"Here are your tasks with this keywords!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : clone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (i.getTaskName().contains(name)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                result \u003d result + System.lineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                result \u003d result + \"    \" + count + \". \" + TaskManager.read(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 36
    }
  },
  {
    "path": "src/main/java/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that displays all existing tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints all the existing task and its information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns all the existing tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String current tracking list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return TaskManager.listing2();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 18
    }
  },
  {
    "path": "src/main/java/Command/ShowFunctionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that displays all commands and the snytax."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ShowFunctionCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns all commands and their syntax."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String command list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String nLine \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String one \u003d \"list: to show all existing tasks.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String two \u003d \"bye: to exit the todo bot.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String three \u003d \"delete [task index]: to delete the selected task from the todolist.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String four \u003d \"todo [task name]: to add the todo task into the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String five \u003d \"deadline [task name] /by [dd-MM-uuuu HHmm]: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                + \"add a deadline task with the specific time and date.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String six \u003d \"event [task name] /at [dd-MM-uuuu HHmm]: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                + \"add a event task with the specific period.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String seven \u003d \"done [task index]: to mark the specific task as completed.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String eight \u003d \"filter [d-MM-uuuu]: to show all the tasks with this date.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String nine \u003d \"find [keyword]: to find all tasks with that has the keywords in its name.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String ten \u003d \"view [d-MM-uuuu]: to view the tasks in order on that day.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        result \u003d result + one + nLine + two + nLine + three + nLine + four + nLine + five"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                + nLine + six + nLine + seven + nLine + eight + nLine + nine + nLine + ten;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 32
    }
  },
  {
    "path": "src/main/java/Command/ViewScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static task findSmallest(ArrayList\u003ctask\u003e list) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int initial \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task smallest \u003d list.get(initial);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (int i \u003d 1; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            task current \u003d list.get(i);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            LocalDateTime currentTime \u003d current.getTaskDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (currentTime.isBefore(smallest.getTaskDate())) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                smallest \u003d current;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                // do nothing as smallest is the earliest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return smallest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static ArrayList\u003ctask\u003e sortByDateTime(ArrayList\u003ctask\u003e store) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // add sorting function for date and time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        while (!store.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            task smallest \u003d findSmallest(store);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            store.remove(smallest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            sorted.add(smallest);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return sorted;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(LocalDate date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e filtered \u003d FilterDateCommand.filter(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e sorted \u003d sortByDateTime(filtered);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String result \u003d \"Here are your tasks for \" + date.toString() + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task t : sorted) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            result +\u003d \"    \" + count + \". \" + TaskManager.read(t) + System.lineSeparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//    public static String execute3() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        ArrayList\u003ctask\u003e clone \u003d TaskManager.getStore();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        clone \u003d sortByDateTime(clone);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        String result \u003d \"Here are your tasks for in order \" + System.lineSeparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        int count \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        for (task t : clone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//            result +\u003d \"    \" + count + \". \" + TaskManager.read(t) + System.lineSeparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//            count++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 59
    }
  },
  {
    "path": "src/main/java/Command/WrongCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that calls to print the wrong inout message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class WrongCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls UserInterface to print the error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String wrong message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return UserInterface.wrongCommand2();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/DateTime/DateTimeManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a manager that handles all actions and requests that involves dates and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DateTimeManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns a LocalDateTime from the input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s date time in String."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return LocalDateTime date and time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static LocalDateTime setDateTime(CharSequence s) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert s !\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.parse(s, format);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return dt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static LocalDate setDate(CharSequence s) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert s !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(s, format);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Adds a LocalDateTime to an existing task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param task task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date and time in String form."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions wrong date and time format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void addDate(task task, String date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert date.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String d \u003d sc.next();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String t \u003d sc.next();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String dateTime \u003d d + \" \" + t;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    LocalDateTime dt \u003d DateTimeManager.setDateTime(dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    task.setDate(dt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    throw new ErrorExceptions(\"Wrong date time format! dd-mm-yyyy HHmm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Missing time!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Missing Date!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 67
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the main method of the MattBot program. The bot is able to track added todo tasks into the list and it"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * is stored locally in a save txt file called DukeTodoSave.txt located in the root of the project directory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * If this file is not present, the program will automatically create this text file in the root."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static Stream\u003cString\u003e convertToStream(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003cString\u003e comboCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String sum \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (gotComma(current)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d current.substring(0, current.length() - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                sum +\u003d current + \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                comboCommands.add(sum);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                sum \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                sum +\u003d current + \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        comboCommands.add(sum);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        System.out.println(comboCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Stream\u003cString\u003e comboCommandStream \u003d comboCommands.stream();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return comboCommandStream;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static boolean gotComma(String word) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int lengthOfCurrent \u003d word.length();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        boolean haveComma \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (word.charAt(lengthOfCurrent - 1) \u003d\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            haveComma \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return haveComma;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    static String removeBlank(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int length \u003d input.length();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (input.charAt(length-1) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            userInput \u003d input.substring(0, input.length() - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            userInput \u003d input;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    static String getResponse(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String userInput \u003d removeBlank(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"CHANGED: \" + userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface UI \u003d new UserInterface();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UI.input(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return UI.parse2();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 64,
      "-": 1
    }
  },
  {
    "path": "src/main/java/Errors/ErrorExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the error that will be thrown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ErrorExceptions extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Throws an ErrorExceptions object with the input message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param message message when printing the error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ErrorExceptions(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 14
    }
  },
  {
    "path": "src/main/java/File/FileManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import DateTime.DateTimeManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a manager that handles all actions related to File."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FileManager {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Adds a new task into the save file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param location file directory of the local save."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param text text to add into file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws IOException missing file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void add(String location, String text) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert location.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileWriter f \u003d new FileWriter(location, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.write(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.write(System.lineSeparator());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Rewrites the current save file based on the list of tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param location file directory."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param store ArrayList that holds all the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws IOException error when editing the file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void edit(String location, ArrayList\u003ctask\u003e store) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert location.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileWriter fw \u003d new FileWriter(location);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : store) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fw.append(TaskManager.read(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the name of the task in the file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text line from file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error reading the text."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String getName(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert s.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            sc.next(); // skip the symbols"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (current.charAt(0) !\u003d \u0027(\u0027) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            // Do nothing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the date and time of the line in the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String date and time in String."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error reading the date and time."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String getDate(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert s.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (current.charAt(0) !\u003d \u0027(\u0027) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            current \u003d sc.next();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (current.charAt(current.length() - 1) !\u003d \u0027)\u0027) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                date \u003d date + current + \" \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            int l \u003d current.length() - 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String last \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                last \u003d last + current.charAt(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            date \u003d date + last;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter d \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.parse(date, d);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return dt.format(DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the type of task in the file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text line."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return int type of task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error reading the type in the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static int getType(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert s.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            char type \u003d current.charAt(1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (type \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if (type \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 2;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 3;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Error: Wrong item type detected, file might be corrupted!\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        + System.lineSeparator() + type);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Failed to load saved file (Type)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + e);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns whether the task is completed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text line."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean completed or not completed."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error when reading the file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static boolean getDone(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert s.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            char done \u003d current.charAt(4);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String d \u003d \"\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            d \u003d d + done;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (d.equals(\"O\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if (d.equals(\"X\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Error: Cannot determine if item is done, file might be corrupted!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Failed to load saved file (Completed?)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + e);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Reads the local save file and convert into task to add to list."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param f saved file."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param store ArrayList to store the tasks."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void read(File f, ArrayList\u003ctask\u003e store) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert f.exists();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String current \u003d sc.nextLine();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    int type \u003d FileManager.getType(current);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String name \u003d FileManager.getName(current);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    boolean done \u003d FileManager.getDone(current);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        Todo t \u003d new Todo(name, \"[T]\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        if (done) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            t.setDone();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        store.add(t);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            String date \u003d FileManager.getDate(current);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            Deadline d \u003d new Deadline(name, \"[D]\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            if (done) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                d.setDone();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            DateTimeManager.addDate(d, date);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            store.add(d);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            System.out.println(e);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            String date \u003d FileManager.getDate(current);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            Event e \u003d new Event(name, \"[E]\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            if (done) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                e.setDone();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            DateTimeManager.addDate(e, date);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            store.add(e);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            System.out.println(e);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    System.out.println(e);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"File does not exist!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 230
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Parser.InputManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userImage.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/rainpoop.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Starts the GUI with the given loading of files."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String fileDir \u003d \"./DukeTodoSave.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        setUpLocalSave(fileDir);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                DialogBox.getDukeDialog(UserInterface.welcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets up the required process to read and load into the program."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param fileDir the directory of the local saved file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void setUpLocalSave(String fileDir) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        InputManager.fileDir(fileDir);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        File save \u003d new File(fileDir);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!save.exists()) { // create the text file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    DialogBox.getDukeDialog(\"Save file does not exist, creating it now!\", dukeImage));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                save.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        DialogBox.getDukeDialog(\"Error creating the save file!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                + e, dukeImage));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert save.exists() \u003d\u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.load(save);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Stream\u003cString\u003e results \u003d Duke.convertToStream(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        results.forEach(reply -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//            System.out.println(\"REPLY: \" + reply);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String response \u003d Duke.getResponse(reply);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 96
    }
  },
  {
    "path": "src/main/java/Parser/InputManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import DateTime.DateTimeManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a manager that handles all actions carried out by the parser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Decomposes all user input into key terms."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class InputManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String fileDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Determines what bridge Parse to call based on the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the appropriate message of the action called."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String action message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when selected task do not exists."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String parse2(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert input.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String current \u003d sc.next();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.fileDir(fileDir);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (current.equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runBye();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"delete\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runDelete(sc);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"done\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runDone(sc);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"list\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"show\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runShow();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"filter\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runFilter(sc);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"find\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runFind(sc, input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"view\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runViewSchedule(sc);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else { // add tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return runAdd(current, input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runViewSchedule(Scanner sc) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String date \u003d sc.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            LocalDate d \u003d DateTimeManager.setDate(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return ParseViewSchedules.execute2(d);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//            return ParseViewSchedules.execute3();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return \"Missing date for view command!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the method for receiving \"Bye\" command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String the String when saying bye."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runBye() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ParseExit.execute2();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the method when deleting command is received."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param sc scanner of the input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String the String when deleting a task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the task entered is not found."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runDelete(Scanner sc) throws ErrorExceptions {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return ParseDelete.execute2(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no such tasks!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the method when receiving a mark as done command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param sc scanner of the input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String the done message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the task cannot be found."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runDone(Scanner sc) throws ErrorExceptions {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return ParseCompleted.execute2(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no such tasks!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the method for showing all tracked tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String list of all task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ParseList.execute2();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the show all commands method."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String show all commands."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runShow() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ParseShow.execute2();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the method when an add task command in received."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param current current command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input overall user input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String adding of task message."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runAdd(String current, String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ParseAddTask.execute2(current, input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the filter by date method."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param sc scanner with input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String all the task after filtering."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runFilter(Scanner sc) throws ErrorExceptions {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String date \u003d sc.next();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return ParseFilter.execute2(date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Missing date!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the find by name method."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param sc scanner with input."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String all the filtered results."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String runFind(Scanner sc, String input) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return ParseFind.execute2(input);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the name of the task from the user input."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of task."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String name of task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the add task command format is wrong"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getName(String input, int type) throws ErrorExceptions {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        sc.next(); // skip first commandtype"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (type \u003d\u003d 1) { // todo"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    while (current.charAt(0) !\u003d \u0027/\u0027) { // deadline and event"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        current \u003d sc.next();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    while (current.charAt(0) !\u003d \u0027/\u0027) { // deadline and event"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        current \u003d sc.next();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Missing item name!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the LocalDateTime from the user input."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of task."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return LocalDateTime date and time."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the date and time format is wrong or missing."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getDate(String input, int type) throws ErrorExceptions {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String next \u003d sc.next();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String N \u003d \"\" + next.charAt(0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (!N.equals(\"/\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                next \u003d sc.next();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                N \u003d \"\" + next.charAt(0);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String action \u003d \"\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String day \u003d sc.next();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                action \u003d action + day;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String time \u003d sc.next();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    action \u003d action + \" \" + time;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        throw new ErrorExceptions(\"Wrong event command format, missing timeslot\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                date \u003d action;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Wrong event command format, missing date\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Wrong deadline or event command format, missing /action: task\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the file directory of the local save."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param d file directory."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void fileDir(String d) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fileDir \u003d d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the file directory of the local save."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String file directory."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getFileDir() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return fileDir;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 268
    }
  },
  {
    "path": "src/main/java/Parser/Parse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the base Parse object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public abstract class Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the methods for sub-class to inherit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i integer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the methods for sub-class to inherit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the methods for sub-class to inherit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 26
    }
  },
  {
    "path": "src/main/java/Parser/ParseAddTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.WrongCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate add task command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseAddTask extends Parse {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Decomposes the user input and pass to the specific add task commands depending on what"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * type of task is called."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the added task message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s task name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String task added message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the task cannot be created."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(String s, String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String current \u003d s;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (current.equals(\"todo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return AddTodoCommand.execute2(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return AddDeadlineCommand.execute2(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"event\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return AddEventCommand.execute2(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return WrongCommand.execute2();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 35
    }
  },
  {
    "path": "src/main/java/Parser/ParseCompleted.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.CompletedCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate complete task command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseCompleted extends Parse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the completion command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the completion message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i index of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String completion message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the task cannot be found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return CompletedCommand.execute2(i);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 22
    }
  },
  {
    "path": "src/main/java/Parser/ParseDelete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate delete task command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseDelete extends Parse {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the delete task command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the deletion message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i task index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String deletion of task message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when task cannot be found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return DeleteCommand.execute2(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 23
    }
  },
  {
    "path": "src/main/java/Parser/ParseExit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate exit command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseExit extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the exit command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the exiting message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String exiting message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ExitCommand.execute2();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Parser/ParseFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.FilterDateCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate filter by date command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseFilter extends Parse {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the filter command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the filtered list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date to filter."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String filtered list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions wrong date format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(String date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDate d \u003d LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return FilterDateCommand.execute2(d);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 30
    }
  },
  {
    "path": "src/main/java/Parser/ParseFind.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridging class that connects to the find Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseFind extends Parse {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Takes the user input and breaks down into the search keywords and pass it to the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * find Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the filtered message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String filtered message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        sc.next();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return FindCommand.execute2(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Wrong format! Missing name!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 38
    }
  },
  {
    "path": "src/main/java/Parser/ParseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate list task command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseList extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns all the currently tracked tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String all current tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ListCommand.execute2();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Parser/ParseShow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ShowFunctionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate show all commands command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseShow extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the show command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns all existing commands and the syntax."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String command list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ShowFunctionCommand.execute2();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Parser/ParseViewSchedules.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ViewScheduleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseViewSchedules extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String execute2(LocalDate timeDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ViewScheduleCommand.execute2(timeDate);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//    public static String execute3() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        return ViewScheduleCommand.execute3();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a Deadline task that is created by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Stores the set if information of the task entered by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Deadline extends task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates an Event object with the given values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Deadline(String name, String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 18
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents an Event task that is created by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Stores the set if information of the task entered by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Event extends task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates an Event object with the given values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Event(String name, String type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import DateTime.DateTimeManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import File.FileManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the object that handles all the actions carried out by the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static ArrayList\u003ctask\u003e store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String fileDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates and returns a new task depending on the type of task entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param itype type of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date due date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param fileDir file directory of the local save."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String the added task message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions if there is an error adding the date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String newTask2(String name, String itype, String date, String fileDir) throws ErrorExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task Task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert name.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert itype.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert date.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert fileDir.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (itype.equals(\"Todo\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Todo(name, \"[T]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (itype.equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Deadline(name, \"[D]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            DateTimeManager.addDate(Task, date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Event(name, \"[E]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            DateTimeManager.addDate(Task, date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        store.add(Task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        save(fileDir, Task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return UserInterface.addedTask2(Task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the selected task from the task store ArrayList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param index index of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return task selected task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static task getTask(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t \u003d store.get(index - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(t.name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the task to be completed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void completed(task t) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert t !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t.setDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.edit(fileDir, store);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Deletes the selected task from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param index index of the task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void delete(int index) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        store.remove(index - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.edit(fileDir, store);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the number of tasks stored in the ArrayList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return int number of tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static int storeIndex() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return store.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the printing String of a task which contain all the information."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String read(task t) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert t !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String done \u003d \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (t.getTaskCompleted()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            done \u003d \"[O]\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            done \u003d \"[X]\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (t.getTaskType().equals(\"[T]\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.getTaskType() + done + \" \" + t.getTaskName();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (t.getTaskType().equals(\"[D]\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.getTaskType() + done + \" \" + t.getTaskName() + \"(by: \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + t.getTaskDate().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HHmm\")) + \")\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.getTaskType() + done + \" \" + t.getTaskName() + \"(at: \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + t.getTaskDate().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HHmm\")) + \")\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the lists all the tasks that is currently in"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * the list and all its relevant information."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String list of tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String listing2() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String start \u003d \"These are your current tasks!\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003cString\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        results.add(start);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        store.forEach(task-\u003eresults.add(read(task)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return printListOfStrings(results);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Loads the local save file into the program to continue the previous list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param save"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void load(File save) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert save.exists() \u003d\u003d true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileManager.read(save, store);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the FileManager to save the selected task into the local save file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param fileDir file directory of the local save."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void save(String fileDir, task t) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert fileDir.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert t !\u003d null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.add(fileDir, TaskManager.read(t));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the file directory of the local save file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param d file file directory."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void fileDir(String d) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert d.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fileDir \u003d d;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Clones and returns the ArrayList the stores all the tasks."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return ArrayList task store."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static ArrayList\u003ctask\u003e getStore() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : store) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            clone.add(i);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String printListOfStrings(ArrayList\u003cString\u003e results) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String ans \u003d \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ans \u003d results.get(0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (int i \u003d 1; i \u003c results.size(); i++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ans \u003d ans + System.lineSeparator();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ans +\u003d i + \". \" + results.get(i);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return ans;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 201
    }
  },
  {
    "path": "src/main/java/Tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a Todo task that is created by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Stores the set if information of the task entered by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Todo extends task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates an Event object with the given values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of Todo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Todo(String name, String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Tasks/task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a task that will be created by the user to be added into the list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected static int count \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected boolean completed;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a task object with the set if information entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name the name of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type the type of task to be created."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public task(String name, String type) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.count++;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the name of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String name of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns whether the task is completed or not."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean completion."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean getTaskCompleted() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the task to be completed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the type of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String type of task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the date and time of the task to be completed by."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return LocalDateTime date and time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public LocalDateTime getTaskDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the date and time of the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date and time of the task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void setDate(LocalDateTime date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 80
    }
  },
  {
    "path": "src/main/java/UI/InitiateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Parser.InputManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge between the UserInterface and the Parser."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class InitiateParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the parse method in InputManger, acts as a bridging method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String output of carrying out the action."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String parser2(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert input.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return InputManager.parse2(input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 24
    }
  },
  {
    "path": "src/main/java/UI/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a UserInterface that is used by the main program. The UserInterface class handles all"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * the inputs entered by the user. It also helps to check for empty commands and prints most of the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * replies from the bot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private Stream\u003cString\u003e inputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Saves the user input in the instance variable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void input(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the task processing message when the user tries to mark a task as completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String the executing filler message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void done2() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Beep Boop Beep .....\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the starting message when the program first runs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String welcome message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String welcomeMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return \"Welcome to MattBot v1.0!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                + \"How may I assist you today?\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the error message when an empty command is entered into the bot."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String failure message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String failed2() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return \"No commands entered, please enter a command!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the message when calling the Parser and pass the user"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * input along to be broken down and understood."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String action message."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String action2(String command) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert input.equals(\"\") \u003d\u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return InitiateParser.parser2(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the ouput of the input message."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Determines if the user input is acceptable, whether it is null or not."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * If the input is null, failed() is called."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * If the input is not null, action() is called."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String either the failure or action message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String parse2() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (this.input.equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return failed2();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return action2(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the value of the exit variable of the instance. This determines if the user entered the exit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean whether the user entered the exit command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String stop2() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return \"Awww, leaving so soon? Hope to see you again!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the error message when an invalid command is entered by the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String invalid command message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String wrongCommand2() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return \"Errroorrrr! Invalid command entered! Cannot compute!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the message when a task is successfully added into the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t the selected task to be added."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String the success or failed message."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String addedTask2(task t) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assert t !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String nLine \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String one \u003d \"Task has been successfully added!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String two \u003d \"    \" + TaskManager.read(t);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String three \u003d \"MattBot is tracking \" + TaskManager.storeIndex() + \" number of Tasks.task!\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        result \u003d result + one + nLine + two + nLine + three;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 117
    }
  },
  {
    "path": "src/main/java/testing.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class testing {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Stream\u003cString\u003e inputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String helper(String input) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void convertToStream() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(this.input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003cString\u003e comboCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String sum \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (gotComma(current)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d current.substring(0, current.length() - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                sum +\u003d current + \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                comboCommands.add(sum);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                sum \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                sum +\u003d current + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        comboCommands.add(sum);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(comboCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Stream\u003cString\u003e comboCommandStream \u003d comboCommands.stream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.inputStream \u003d comboCommandStream;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static boolean gotComma(String word) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int lengthOfCurrent \u003d word.length();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        boolean haveComma \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (word.charAt(lengthOfCurrent - 1) \u003d\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            haveComma \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return haveComma;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        String[] test \u003d {\"1\", \"2\", \"3\", \"4\", \"5\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        Stream\u003cString\u003e testStream \u003d Arrays.stream(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        testStream.forEach(item-\u003eSystem.out.println(helper(item)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        testing t \u003d new testing();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t.input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        System.out.println(t.input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t.convertToStream();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t.inputStream.forEach(x-\u003eSystem.out.println(x));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        t.inputStream.peek(p-\u003eSystem.out.println(p));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 55
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#f9f9f9\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-image: url(\u0027images/BackgroundImage.jpeg\u0027);\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/test/java/Tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2Done \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 2\", t2.getTaskName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2Done.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t2.getTaskCompleted());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t2Done.getTaskCompleted());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[D]\", t2.getTaskType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt1 \u003d LocalDateTime.parse(\"5-12-2020 1200\", format);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2.setDate(dt1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt1, t2.getTaskDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 39
    }
  },
  {
    "path": "src/test/java/Tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3Done \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 3\", t3.getTaskName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3Done.setDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t3.getTaskCompleted());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t3Done.getTaskCompleted());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[E]\", t3.getTaskType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt2 \u003d LocalDateTime.parse(\"6-12-2020 1200\", format);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3.setDate(dt2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt2, t3.getTaskDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 40
    }
  },
  {
    "path": "src/test/java/Tasks/TaskManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class TaskManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    String date \u003d \"12-12-1212 1200\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    String dir \u003d \"./TestingSave.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1 \u003d new Todo(\"Test 1\",\"[T]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\",\"[D]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\",\"[E]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void getTask() throws ErrorExceptions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 1\",\"[T]\",null,dir);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 2\",\"[D]\",date,dir);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 3\",\"[E]\",date,dir);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(2));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void storeIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void read() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void getStore() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 35
    }
  },
  {
    "path": "src/test/java/Tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final Todo t1 \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1Done \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 1\", t1.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t1Done.setDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t1.getTaskCompleted());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t1Done.getTaskCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[T]\", t1.getTaskType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(null, t1.getTaskDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 34
    }
  },
  {
    "path": "src/test/java/Tasks/taskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class taskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1 \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1Done \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2Done \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3Done \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 1\", t1.getTaskName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 2\", t2.getTaskName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 3\", t3.getTaskName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t1Done.setDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2Done.setDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3Done.setDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t1.getTaskCompleted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t2.getTaskCompleted());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t3.getTaskCompleted());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t1Done.getTaskCompleted());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t2Done.getTaskCompleted());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t3Done.getTaskCompleted());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[T]\", t1.getTaskType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[D]\", t2.getTaskType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[E]\", t3.getTaskType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt1 \u003d LocalDateTime.parse(\"5-12-2020 1200\", format);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt2 \u003d LocalDateTime.parse(\"6-12-2020 1200\", format);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2.setDate(dt1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3.setDate(dt2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(null, t1.getTaskDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt1, t2.getTaskDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt2, t3.getTaskDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 59
    }
  },
  {
    "path": "text-ui-test/DukeTodoSave.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][✓] test 3 (at: 11 Nov 2020 1100)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] test 1 "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] test 2 (by: 12 Dec 2020 1200)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][X] test 3 (at: 11 Nov 2020 1100)"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "todo test 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by monday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by 12-12-2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by 12-12-2020 1200"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at 11-11-2020"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at 11-11-2020 1100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "show"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "filter"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "filter 12-12-2020"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Errors\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\DateTime\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Tasks\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Command\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\File\\*.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Parser\\*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\UI\\*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 8,
      "-": 20
    }
  }
]
