[
  {
    "path": ".idea/checkstyleidea-libs/readme.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "This folder contains libraries copied from the \"ip\" project."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "It is managed by the CheckStyle-IDEA IDE plugin."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Do not modify this folder while the IDE is running."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "When the IDE is stopped, you may delete this folder at any time. It will be recreated as needed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "In order to prevent the CheckStyle-IDEA IDE plugin from creating this folder,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "uncheck the \"Copy libraries from project directory\" option in the CheckStyle-IDEA settings dialog."
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 6
    }
  },
  {
    "path": "DukeTodoSave.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] name (by: 12 Dec 2020 1200)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][O] t (by: 12 Dec 2020 1200)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] return "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] test (by: 12 Dec 1212 1200)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] read "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] read "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] add read book "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] read book "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] gradle test "
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 9
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 47
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 103
    }
  },
  {
    "path": "src/main/java/Command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getFileDir;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that adds a Deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates and add a new deadline into the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to get name or date of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d getDate(input, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.newTask(name, \"Deadline\", date, getFileDir());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 25
    }
  },
  {
    "path": "src/main/java/Command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getFileDir;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that adds an Event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates and add a new Event into the list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to get name or date of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d getDate(input, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.newTask(name, \"Event\", date, getFileDir());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 28
    }
  },
  {
    "path": "src/main/java/Command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getFileDir;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static Parser.InputManager.getName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that adds a Todo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates and add a new Todo into the list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to get name or date of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d getName(input, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.newTask(name, \"Todo\", null, getFileDir());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 26
    }
  },
  {
    "path": "src/main/java/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the overall command abstract class for sub-class to follow."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s String."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i integer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the method to be followed by sub-class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date and time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(LocalDateTime date) {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 34
    }
  },
  {
    "path": "src/main/java/Command/CompletedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that marks a task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class CompletedCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Marks the selected task as completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i task index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to locate specified task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int index \u003d i;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            t \u003d TaskManager.getTask(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            TaskManager.completed(t);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UserInterface.done();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"    \" + TaskManager.read(t));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"The tracked Tasks.task has been marked as completed! Congrats~~!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no such Tasks.task!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 31
    }
  },
  {
    "path": "src/main/java/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that deletes a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Deletes the selected task from the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i task index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions failed to find task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int index \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            t \u003d TaskManager.getTask(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            TaskManager.delete(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UserInterface.done();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"    \" + TaskManager.read(t));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"The tracked Tasks.task has been deleted!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"There is no suck Tasks.task!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 34
    }
  },
  {
    "path": "src/main/java/Command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that exits the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the UserInterface to print the stop message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface.stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/Command/FilterDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that filters the task by the date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FilterDateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Filters the tasks based on the input date, showing only those with that date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date to search."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions wrong date format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(LocalDate date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d TaskManager.getStore();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Here are your tasks on this date!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : clone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (i.getTaskDate() !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                if (i.getTaskDate().toLocalDate().equals(date)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    System.out.println(\"    \" + count + \". \" + TaskManager.read(i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 36
    }
  },
  {
    "path": "src/main/java/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the find command that searches for task by date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Runs the search function by looking through all the tasks stored and checking the date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d TaskManager.getStore();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Here are your tasks with this keywords!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : clone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (i.getTaskName().contains(name)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                System.out.println(\"    \" + count + \". \" + TaskManager.read(i));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 30
    }
  },
  {
    "path": "src/main/java/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that displays all existing tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints all the existing task and its information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.listing();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 15
    }
  },
  {
    "path": "src/main/java/Command/ShowFunctionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that displays all commands and the snytax."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ShowFunctionCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints all commands and their syntax."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"list: to show all existing tasks.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"bye: to exit the todo bot.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"delete [task index]: to delete the selected task from the todolist.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"todo [task name]: to add the todo task into the list.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"deadline [task name] /by [dd-MM-uuuu HHmm]: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        + \"add a deadline task with the specific time and date.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"event [task name] /at [dd-MM-uuuu HHmm]: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        + \"add a event task with the specific period.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"done [task index]: to mark the specific task as completed.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"filter [d-MM-uuuu]: to show all the tasks with this date.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"find [keyword]: to find all tasks with that has the keywords in its name.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 24
    }
  },
  {
    "path": "src/main/java/Command/WrongCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a command that calls to print the wrong inout message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class WrongCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls UserInterface to print the error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface.wrongCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/DateTime/DateTimeManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package DateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a manager that handles all actions and requests that involves dates and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class DateTimeManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns a LocalDateTime from the input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s date time in String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return LocalDateTime date and time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static LocalDateTime setDateTime(CharSequence s) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.parse(s, format);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return dt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Adds a LocalDateTime to an existing task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param task task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date and time in String form."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions wrong date and time format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void addDate(task task, String date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String d \u003d sc.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String t \u003d sc.next();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String DT \u003d d + \" \" + t;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    LocalDateTime dt \u003d DateTimeManager.setDateTime(DT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    task.setDate(dt);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    throw new ErrorExceptions(\"Wrong date time format! dd-mm-yyyy HHmm\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Missing time!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Missing Date!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 56
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Parser.InputManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the main method of the MattBot program. The bot is able to track added todo tasks into the list and it"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * is stored locally in a save txt file called DukeTodoSave.txt located in the root of the project directory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * If this file is not present, the program will automatically create this text file in the root."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the main method of the program. The start of the mattbot program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param args args."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String fileDir \u003d \"./DukeTodoSave.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        InputManager.fileDir(fileDir);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        File save \u003d new File(fileDir);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (!save.exists()) { // create the text file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"Save file does not exist, creating it now!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                save.createNewFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                System.out.println(\"Error creating the save file!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.load(save);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface UI \u003d new UserInterface();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        while (UI.getStop() \u003d\u003d false) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UI.input(sc.nextLine());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            UI.parse();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 37,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Errors/ErrorExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the error that will be thrown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ErrorExceptions extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Throws an ErrorExceptions object with the input message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param message message when printing the error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ErrorExceptions(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 14
    }
  },
  {
    "path": "src/main/java/File/FileManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import DateTime.DateTimeManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a manager that handles all actions related to File."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class FileManager {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Adds a new task into the save file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param location file directory of the local save."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param text text to add into file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws IOException missing file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void add(String location, String text) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileWriter f \u003d new FileWriter(location, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.write(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.write(System.lineSeparator());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        f.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Rewrites the current save file based on the list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param location file directory."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param store ArrayList that holds all the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws IOException error when editing the file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void edit(String location, ArrayList\u003ctask\u003e store) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileWriter fw \u003d new FileWriter(location);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : store) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fw.append(TaskManager.read(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the name of the task in the file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text line from file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error reading the text."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String getName(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            sc.next(); // skip the symbols"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (current.charAt(0) !\u003d \u0027(\u0027) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            // Do nothing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the date and time of the line in the file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String date and time in String."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error reading the date and time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String getDate(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (current.charAt(0) !\u003d \u0027(\u0027) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            current \u003d sc.next();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (current.charAt(current.length() - 1) !\u003d \u0027)\u0027) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                date \u003d date + current + \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            int l \u003d current.length() - 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String last \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                last \u003d last + current.charAt(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            date \u003d date + last;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter d \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.parse(date, d);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return dt.format(DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the type of task in the file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text line."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return int type of task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error reading the type in the file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static int getType(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            char type \u003d current.charAt(1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (type \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if (type \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 2;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if (type \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return 3;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Error: Wrong item type detected, file might be corrupted!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Failed to load saved file (Type)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns whether the task is completed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s text line."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean completed or not completed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions error when reading the file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static boolean getDone(String s) throws ErrorExceptions {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(s);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            char done \u003d current.charAt(4);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String d \u003d \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            d \u003d d + done;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (d.equals(\"O\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else if (d.equals(\"X\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Error: Cannot determine if item is done, file might be corrupted!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Failed to load saved file (Completed?)\" + System.lineSeparator()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Reads the local save file and convert into task to add to list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param f saved file."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param store ArrayList to store the tasks."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void read(File f, ArrayList\u003ctask\u003e store) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String current \u003d sc.nextLine();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    int type \u003d FileManager.getType(current);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String name \u003d FileManager.getName(current);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    boolean done \u003d FileManager.getDone(current);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        Todo t \u003d new Todo(name, \"[T]\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        if (done) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            t.setDone();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        store.add(t);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            String date \u003d FileManager.getDate(current);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            Deadline d \u003d new Deadline(name, \"[D]\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            if (done) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                d.setDone();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            DateTimeManager.addDate(d, date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            store.add(d);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            System.out.println(e);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            String date \u003d FileManager.getDate(current);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            Event e \u003d new Event(name, \"[E]\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            if (done) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                                e.setDone();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            DateTimeManager.addDate(e, date);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            store.add(e);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                            System.out.println(e);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    System.out.println(e);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(\"File does not exist!\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 222
    }
  },
  {
    "path": "src/main/java/Parser/InputManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a manager that handles all actions carried out by the parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Decomposes all user input into key terms."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class InputManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String fileDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Determines what bridge Parse to call based on the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when selected task do not exists."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void parse(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String current \u003d sc.next();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        TaskManager.fileDir(fileDir);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (current.equals(\"bye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseExit.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"delete\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                ParseDelete.execute(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"There is no such tasks!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"done\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                task t;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                ParseCompleted.execute(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"There is no such tasks!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"list\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseList.execute();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"show\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseShow.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"filter\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String date \u003d sc.next();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                ParseFilter.execute(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Missing date!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"find\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                ParseFind.execute(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else { // add tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ParseAddTask.execute(current, input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the name of the task from the user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String name of task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the add task command format is wrong"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getName(String input, int type) throws ErrorExceptions {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        sc.next(); // skip first commandtype"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (type \u003d\u003d 1) { // todo"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    while (current.charAt(0) !\u003d \u0027/\u0027) { // deadline and event"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        current \u003d sc.next();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    while (current.charAt(0) !\u003d \u0027/\u0027) { // deadline and event"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        current \u003d sc.next();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    // do nothing"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Missing item name!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the LocalDateTime from the user input."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return LocalDateTime date and time."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the date and time format is wrong or missing."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getDate(String input, int type) throws ErrorExceptions {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String next \u003d sc.next();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String N \u003d \"\" + next.charAt(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (!N.equals(\"/\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                next \u003d sc.next();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                N \u003d \"\" + next.charAt(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String action \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                String day \u003d sc.next();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                action \u003d action + day;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    String time \u003d sc.next();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    action \u003d action + \" \" + time;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    if (type \u003d\u003d 2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        throw new ErrorExceptions(\"Wrong event command format, missing timeslot\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                date \u003d action;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Wrong event command format, missing date\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                throw new ErrorExceptions(\"Wrong deadline or event command format, missing /action: task\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the file directory of the local save."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param d file directory."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void fileDir(String d) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fileDir \u003d d;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the file directory of the local save."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String file directory."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getFileDir() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return fileDir;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 169
    }
  },
  {
    "path": "src/main/java/Parser/Parse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the base Parse object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public abstract class Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the methods for sub-class to inherit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i integer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the methods for sub-class to inherit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s) throws ErrorExceptions {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the methods for sub-class to inherit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 26
    }
  },
  {
    "path": "src/main/java/Parser/ParseAddTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.WrongCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate add task command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseAddTask extends Parse {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Decomposes the user input and pass to the specific add task commands depending on what"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * type of task is called."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param s task name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the task cannot be created."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String s, String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String current \u003d s;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (current.equals(\"todo\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            AddTodoCommand.execute(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            AddDeadlineCommand.execute(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (current.equals(\"event\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            AddEventCommand.execute(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            WrongCommand.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 33
    }
  },
  {
    "path": "src/main/java/Parser/ParseCompleted.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.CompletedCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate complete task command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseCompleted extends Parse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the completion command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i index of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when the task cannot be found."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        CompletedCommand.execute(i);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 20
    }
  },
  {
    "path": "src/main/java/Parser/ParseDelete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate delete task command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseDelete extends Parse {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the delete task command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param i task index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions when task cannot be found."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(int i) throws ErrorExceptions {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DeleteCommand.execute(i);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 20
    }
  },
  {
    "path": "src/main/java/Parser/ParseExit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate exit command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseExit extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the exit command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ExitCommand.execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/Parser/ParseFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.FilterDateCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate filter by date command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseFilter extends Parse {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the filter command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date to filter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions wrong date format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String date) throws ErrorExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDate d \u003d LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FilterDateCommand.execute(d);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 27
    }
  },
  {
    "path": "src/main/java/Parser/ParseFind.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridging class that connects to the find Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseFind extends Parse {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Takes the user input and breaks down into the search keywords and pass it to the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * find Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute(String input) throws ErrorExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        sc.next();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d sc.next();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                current \u003d sc.next();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            name \u003d name + current + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FindCommand.execute(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            throw new ErrorExceptions(\"Wrong format! Missing name!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 36
    }
  },
  {
    "path": "src/main/java/Parser/ParseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate list task command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseList extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ListCommand.execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/Parser/ParseShow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Command.ShowFunctionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge that calls the appropriate show all commands command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParseShow extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the show command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ShowFunctionCommand.execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 16
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a Deadline task that is created by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Stores the set if information of the task entered by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Deadline extends task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates an Event object with the given values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Deadline(String name, String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 18
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents an Event task that is created by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Stores the set if information of the task entered by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Event extends task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates an Event object with the given values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Event(String name, String type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import DateTime.DateTimeManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import File.FileManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import UI.UserInterface;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the object that handles all the actions carried out by the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static ArrayList\u003ctask\u003e store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static String fileDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a new task depending on the type of task entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param itype type of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date due date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param fileDir file directory of the local save."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ErrorExceptions if there is an error adding the date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void newTask(String name, String itype, String date, String fileDir) throws ErrorExceptions {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (itype.equals(\"Todo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Todo(name, \"[T]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (itype.equals(\"Deadline\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Deadline(name, \"[D]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            DateTimeManager.addDate(Task, date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Task \u003d new Event(name, \"[E]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            DateTimeManager.addDate(Task, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        store.add(Task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        UserInterface.addedTask(Task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        save(fileDir, Task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the selected task from the task store ArrayList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param index index of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return task selected task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static task getTask(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        task t \u003d store.get(index - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the task to be completed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void completed(task t) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t.setDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.edit(fileDir, store);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Deletes the selected task from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param index index of the task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void delete(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        store.remove(index - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.edit(fileDir, store);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the number of tasks stored in the ArrayList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return int number of tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static int storeIndex() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return store.size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the printing String of a task which contain all the information."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String message."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String read(task t) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String done \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (t.getTaskCompleted()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            done \u003d \"[O]\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            done \u003d \"[X]\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (t.getTaskType().equals(\"[T]\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.getTaskType() + done + \" \" + t.getTaskName();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else if (t.getTaskType().equals(\"[D]\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.getTaskType() + done + \" \" + t.getTaskName() + \"(by: \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + t.getTaskDate().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HHmm\")) + \")\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return t.getTaskType() + done + \" \" + t.getTaskName() + \"(at: \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                    + t.getTaskDate().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HHmm\")) + \")\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Lists all the tasks that is currently in the list and all its relevant information."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void listing() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"These are your current tasks!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : store) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(count + \". \" + read(i));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Loads the local save file into the program to continue the previous list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param save"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void load(File save) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        FileManager.read(save, store);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the FileManager to save the selected task into the local save file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param fileDir file directory of the local save."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void save(String fileDir, task t) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            FileManager.add(fileDir, TaskManager.read(t));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the file directory of the local save file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param d file file directory."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void fileDir(String d) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        fileDir \u003d d;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Clones and returns the ArrayList the stores all the tasks."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return ArrayList task store."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static ArrayList\u003ctask\u003e getStore() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ArrayList\u003ctask\u003e clone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (task i : store) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            clone.add(i);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 175
    }
  },
  {
    "path": "src/main/java/Tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a Todo task that is created by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Stores the set if information of the task entered by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Todo extends task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates an Event object with the given values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of Todo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type type of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Todo(String name, String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        super(name, type);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 19
    }
  },
  {
    "path": "src/main/java/Tasks/task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a task that will be created by the user to be added into the list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected static int count \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected boolean completed;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a task object with the set if information entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name the name of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param type the type of task to be created."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public task(String name, String type) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.count++;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the name of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String name of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns whether the task is completed or not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean completion."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean getTaskCompleted() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the task to be completed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the type of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String type of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getTaskType() { return this.type; }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the date and time of the task to be completed by."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return LocalDateTime date and time."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public LocalDateTime getTaskDate() { return this.date; }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Sets the date and time of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param date date and time of the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void setDate(LocalDateTime date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 78
    }
  },
  {
    "path": "src/main/java/UI/InitiateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Parser.InputManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the bridge between the UserInterface and the Parser."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class InitiateParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the parse method in InputManger, acts as a bridging method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void parser(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            InputManager.parse(input);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } catch (ErrorExceptions e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 21
    }
  },
  {
    "path": "src/main/java/UI/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Tasks.task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents a UserInterface that is used by the main program. The UserInterface class handles all"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * the inputs entered by the user. It also helps to check for empty commands and prints most of the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * replies from the bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a UserInterface object that helps to handle all the user inputs and pass it along to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * the parser to be broken down."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public UserInterface() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Welcome to MattBot v1.0!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                        + \"How may I assist you today?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Saves the user input in the instance variable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void input(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Calls the Parser and pass the user input along to be broken down and understood."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void action() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        InitiateParser.parser(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints the error message when an empty command is entered into the bot."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void failed() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"No commands entered, please enter a command!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Determines if the user input is acceptable, whether it is null or not."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * If the input is null, failed() is called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * If the input is not null, action() is called."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void parse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (this.input.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            failed();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            action();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints the closing off statement when the user shuts down the Mattbot."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void stop() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Awww, leaving so soon? Hope to see you again!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints the task processing message when the user tries to mark a task as completed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void done() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Beep Boop Beep .....\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the value of the exit variable of the instance. This determines if the user entered the exit"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean whether the user entered the exit command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean getStop() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints the error message when an invalid command is entered by the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void wrongCommand() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Errroorrrr! Invalid command entered! Cannot compute!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints the message when a task is successfully added into the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param t the selected task to be added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static void addedTask(task t) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"Task has been successfully added!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"    \" + TaskManager.read(t));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(\"MattBot is tracking \" + TaskManager.storeIndex() + \" number of Tasks.task!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 102
    }
  },
  {
    "path": "src/test/java/Tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2Done \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 2\", t2.getTaskName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2Done.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t2.getTaskCompleted());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t2Done.getTaskCompleted());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[D]\", t2.getTaskType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt1 \u003d LocalDateTime.parse(\"5-12-2020 1200\", format);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2.setDate(dt1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt1, t2.getTaskDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 39
    }
  },
  {
    "path": "src/test/java/Tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3Done \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 3\", t3.getTaskName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3Done.setDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t3.getTaskCompleted());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t3Done.getTaskCompleted());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[E]\", t3.getTaskType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt2 \u003d LocalDateTime.parse(\"6-12-2020 1200\", format);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3.setDate(dt2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt2, t3.getTaskDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 40
    }
  },
  {
    "path": "src/test/java/Tasks/TaskManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import Errors.ErrorExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class TaskManagerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    String date \u003d \"12-12-1212 1200\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    String dir \u003d \"./TestingSave.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1 \u003d new Todo(\"Test 1\",\"[T]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\",\"[D]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\",\"[E]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void getTask() throws ErrorExceptions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 1\",\"[T]\",null,dir);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 2\",\"[D]\",date,dir);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        TaskManager.newTask(\"Test 3\",\"[E]\",date,dir);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//        assertEquals(t1,TaskManager.getTask(2));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void storeIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void read() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void getStore() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 35
    }
  },
  {
    "path": "src/test/java/Tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final Todo t1 \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1Done \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 1\", t1.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t1Done.setDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t1.getTaskCompleted());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t1Done.getTaskCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[T]\", t1.getTaskType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(null, t1.getTaskDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 34
    }
  },
  {
    "path": "src/test/java/Tasks/taskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "class taskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1 \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2 \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3 \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t1Done \u003d new Todo(\"Test 1\", \"[T]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t2Done \u003d new Deadline(\"Test 2\", \"[D]\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    final task t3Done \u003d new Event(\"Test 3\", \"[E]\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 1\", t1.getTaskName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 2\", t2.getTaskName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"Test 3\", t3.getTaskName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskCompleted() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t1Done.setDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2Done.setDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3Done.setDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t1.getTaskCompleted());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t2.getTaskCompleted());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(false, t3.getTaskCompleted());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t1Done.getTaskCompleted());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t2Done.getTaskCompleted());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(true, t3Done.getTaskCompleted());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[T]\", t1.getTaskType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[D]\", t2.getTaskType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(\"[E]\", t3.getTaskType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    void taskDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"d-MM-uuuu HHmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt1 \u003d LocalDateTime.parse(\"5-12-2020 1200\", format);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        LocalDateTime dt2 \u003d LocalDateTime.parse(\"6-12-2020 1200\", format);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t2.setDate(dt1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        t3.setDate(dt2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(null, t1.getTaskDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt1, t2.getTaskDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        assertEquals(dt2, t3.getTaskDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 59
    }
  },
  {
    "path": "text-ui-test/DukeTodoSave.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][✓] test 3 (at: 11 Nov 2020 1100)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[T][X] test 1 "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[D][X] test 2 (by: 12 Dec 2020 1200)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[E][X] test 3 (at: 11 Nov 2020 1100)"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "todo test 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by monday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by 12-12-2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "deadline test 2 /by 12-12-2020 1200"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at 11-11-2020"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "event test 3 /at 11-11-2020 1100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "show"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "filter"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "filter 12-12-2020"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Errors\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\DateTime\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Tasks\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Command\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\File\\*.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Parser\\*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\UI\\*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 8,
      "-": 20
    }
  }
]
