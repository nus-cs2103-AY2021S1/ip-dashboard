[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    implementation \u0027org.jetbrains:annotations:15.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    archiveBaseName \u003d \"Duck\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 22,
      "-": 42
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Duke denotes the faithful robot."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a Duke robot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param filePath  FilePath to store the data file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        storage.addDirectoryIfRequired();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Gets the stage from Main."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param stage Stage to be showcased."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void getStage(Stage stage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns the stage stored."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Stage returnStage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return stage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Executes all the operations stated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param input  String arrays of operations."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return c.execute(tasks, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 54,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Duke denotes the faithful robot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Duke duke \u003d new Duke(getFilePath());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Gets file path based on user\u0027s system."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static String getFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Path path \u003d Paths.get(home, \"Duke\", \"data\", \"tasks.text\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Stages the stage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param stage Stage where the application is shown."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            duke.getStage(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 52
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.storage.DukeIOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.Deadlines;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.DukeNumberFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.Events;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.ToDos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Command denotes a command object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String taskInfo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param commandType Type of command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo    Description of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Command(CommandType commandType, String taskInfo) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Executes a command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks   The list of tasks for user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param storage Storage object to store task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String dukeResponse \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d bidFarewell();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case PRINT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d  printList(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case MARKTASKDONE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d  markTaskDone(tasks, taskInfo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case HANDLETODO:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d  handleToDo(tasks, taskInfo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case HANDLEDEADLINE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d  handleDeadLine(tasks, taskInfo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case HANDLEVENT:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d  handleEvent(tasks, taskInfo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case DELETETASK:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d  tasks.deleteTask(taskInfo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case DUPLICATE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                List\u003cString\u003e duplicateList \u003d tasks.detectDuplicates();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d  findDuplicateTasks(duplicateList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case REMOVEDUPLICATES:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                dukeResponse \u003d removeDuplicates(tasks);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (findMatchingTasks(tasks, taskInfo).length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    throw new DukeInvalidCommandException(\"Sorry handsome but I\u0027m not sure about this command :)\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    dukeResponse \u003d findMatchingTasks(tasks, taskInfo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            storage.saveTaskList(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeInvalidCommandException err) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dukeResponse \u003d \"\\t\" + err.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeIndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dukeResponse \u003d \"\\t\" + err.getMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeIncompleteCommandException err) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dukeResponse \u003d \"\\t\" + err.getMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeIOException err) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dukeResponse \u003d \"\\t\" + err.getMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeDateTimeParseException err) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dukeResponse \u003d \"\\t\" + err.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeNumberFormatException err) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dukeResponse \u003d \"\\t\" + err.getMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            assert dukeResponse !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return dukeResponse;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Says goodbye to user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of farewell."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String bidFarewell() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return \"\\tBye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Prints the list of tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks List of tasks to print."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return List of tasks in taskList."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String printList(TaskList tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String toPrint \u003d \"\\tHere are the tasks in your list:\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            toPrint +\u003d String.format(\"\\n\\t\\t%d. %s\", i + 1, tasks.get(i));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Marks task with task index in taskInfo as done."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks    List of user\u0027s tasks."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo Description of task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of words Duke say in response."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String markTaskDone(TaskList tasks, String taskInfo) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String done \u003d \"done \";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String requiredTask \u003d taskInfo.replace(\"done\", \"\").trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskInfo.length() \u003c\u003d done.length()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int taskNo;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            taskNo \u003d Integer.parseInt(requiredTask);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskNo \u003c 1 || taskNo \u003e tasks.size()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int index \u003d taskNo - 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert index \u003e\u003d 0 : \"Index should not be lesser than 0\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task task \u003d tasks.remove(index).doneTask();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert task !\u003d null : \"Task should not be null\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks.add(index, task);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return \"\\tNice! I\u0027ve marked this task as done:\" + \"\\n\\t\\t\" + task;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds todos task to list of tasks."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks    List of user\u0027s tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo Description of todos task."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of words Duke say in response."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String handleToDo(TaskList tasks, String taskInfo) throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskInfo.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String requiredTask \u003d taskInfo.replace(\"todo\", \"\").trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert taskInfo.length() \u003e 0 : \"taskInfo should not be empty\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return tasks.addTask(new ToDos(requiredTask));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds deadline task to list of tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks    List of user\u0027s tasks."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo Description of deadline task."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of words Duke say in response."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String handleDeadLine(TaskList tasks, String taskInfo)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        throws DukeInvalidCommandException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String taskWithBy \u003d taskInfo.replace(\"deadline\", \"\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // splits task to 2 segments - task information and date"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] stringArr \u003d taskWithBy.split(\"/by\", 2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (stringArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String requiredTask \u003d stringArr[0].trim();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String by \u003d stringArr[1].trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (requiredTask.length() \u003d\u003d 0 || by.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert requiredTask.length() \u003e 0 : \"taskInfo should not be empty\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert by.length() \u003e 0 : \"by should not be empty\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return tasks.addTask(new Deadlines(requiredTask, by));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds event task to list of tasks."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks    List of user\u0027s tasks."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo Description of event task."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of words Duke say in response."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String handleEvent(TaskList tasks, String taskInfo)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        throws DukeInvalidCommandException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String taskWithAt \u003d taskInfo.replace(\"event\", \"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        // splits task to 2 segments - task information and date"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] stringArr \u003d taskWithAt.split(\"/at\", 2);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (stringArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String requiredTask \u003d stringArr[0].trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String at \u003d stringArr[1].trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (requiredTask.length() \u003d\u003d 0 || at.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert requiredTask.length() \u003e 0 : \"taskInfo should not be empty\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert at.length() \u003e 0 : \"at should not be empty\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return tasks.addTask(new Events(requiredTask, at));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Prints out the task if user input matches any word from task."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks    List of user\u0027s tasks."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo Description of todos task."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return List of matching tasks if any."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String findMatchingTasks(TaskList tasks, String taskInfo) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] taskInfos \u003d taskInfo.trim().split(\" \");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert taskInfos.length \u003e 0 : \"taskInfos length should be \u003e\u003d 1\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e matchList \u003d tasks.returnMatchingTasks(taskInfos);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert matchList !\u003d null : \"matchList should not be null\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String dukeResponse \u003d matchList.size() \u003d\u003d 0 ? \"\" : \"\\tHere are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String matches \u003d IntStream"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            .range(0, matchList.size())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            .mapToObj(i -\u003e String.format(\"\\n\\t\\t%d. %s\", i + 1, matchList.get(i)))"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            .reduce(\"\", (prevStr, nextStr) -\u003e prevStr + nextStr);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        dukeResponse +\u003d matches;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return dukeResponse;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns string of duke response of list containing duplicate tasks."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param duplicateTaskList List of duplicate tasks."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of duke response containing duplicate tasks."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String findDuplicateTasks(List\u003cString\u003e duplicateTaskList) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String dukeResponse \u003d \"\\tHere are the duplicate tasks:\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String duplicates \u003d IntStream.range(0, duplicateTaskList.size())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            .mapToObj(i -\u003e String.format(\"\\n\\t\\t%d. %s\", i + 1, duplicateTaskList.get(i)))"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            .reduce(\"\", (prevStr, nextStr) -\u003e prevStr + nextStr);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return dukeResponse +\u003d duplicates;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Removes all duplicate tasks except for the first entry."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of duke response containing new task list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String removeDuplicates(TaskList tasks) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks.removeDuplicatesExceptFirst();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String dukeResponse \u003d \"\\tDuplicates removed. Only first copies remain.\\n\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        dukeResponse +\u003d printList(tasks);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return dukeResponse;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 266
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        duke.command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The enum CommandType denotes the type of command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        PRINT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        MARKTASKDONE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        HANDLETODO,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        HANDLEDEADLINE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        HANDLEVENT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        DELETETASK,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FINDMATCHINGTASK,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        DUPLICATE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        REMOVEDUPLICATES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 20
    }
  },
  {
    "path": "src/main/java/duke/command/DukeIncompleteCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeIncompleteCommandException denotes a Duke IncompleteCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIncompleteCommandException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeIncompleteCommandException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeIncompleteCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DukeIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeIndexOutOfBoundsException denotes a Duke IndexOutOfBoundsException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIndexOutOfBoundsException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeIndexOutOfBoundsException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeIndexOutOfBoundsException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeInvalidCommandException denotes a Duke InvalidCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeInvalidCommandException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeInvalidCommandException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeInvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DukeRunTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeRunTimeException denotes a Duke RunTimeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeRunTimeException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeRunTimeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeRunTimeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns a command based on the task information provided."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @Return Command based on task information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static Command parse(String taskInfo) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String cmd \u003d taskInfo.trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (cmd.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.BYE, taskInfo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (cmd.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.PRINT, taskInfo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (taskInfo.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.MARKTASKDONE, taskInfo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (taskInfo.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.HANDLETODO, taskInfo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (taskInfo.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.HANDLEDEADLINE, taskInfo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (taskInfo.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.HANDLEVENT, taskInfo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (taskInfo.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.DELETETASK, taskInfo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (taskInfo.startsWith(\"duplicate\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.DUPLICATE, taskInfo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else if (taskInfo.startsWith(\"remove duplicates\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.REMOVEDUPLICATES, taskInfo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.FINDMATCHINGTASK, taskInfo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 37
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeCompileTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeCompileTimeException denotes a Duke checked exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeCompileTimeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeCompileTimeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeCompileTimeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeIOException denotes a Duke IOexception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIOException extends DukeCompileTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeCompileTimeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeIOException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeLoadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeLoadFileException denotes a DukeLoadFilexception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeLoadFileException extends DukeCompileTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeCompileTimeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeLoadFileException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 18
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.Deadlines;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.Events;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.ToDos;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Storage denotes a storage object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private enum dataFileColumn {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TASKTYPE(0),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        DONESTATUS(1),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TASKSTRING(2),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        DATE(3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        private static final int TOTALCOLUMNS \u003d 4;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        private int index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        dataFileColumn(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        private int returnIndex() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final int TASKTYPEINDEX \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a storage"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param filePath  file path where data file is stored"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds the respective directories if required."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void addDirectoryIfRequired() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Path dukePath \u003d Paths.get(home, \"Duke\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        boolean dukeDirectoryExists \u003d Files.exists(dukePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Path dataPath \u003d Paths.get(home, \"Duke\", \"data\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        boolean dataDirectoryExists \u003d Files.exists(dataPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!dukeDirectoryExists) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File dir \u003d new File(dukePath.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!dataDirectoryExists) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File dir \u003d new File(dataPath.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Generates the task list for the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskTypeChar  Task type."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param doneStatus    Done status of the task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo      Information of the task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param when          Date and time of the task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Task list of user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @throws DukeLoadFileException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private List\u003cTask\u003e addTaskToList(List\u003cTask\u003e taskList, char taskTypeChar, String doneStatus,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                                        String taskInfo, String when) throws DukeLoadFileException{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert taskTypeChar !\u003d \u0027\\0\u0027 : \"taskTypeChar should not be null\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        switch (taskTypeChar) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        case \u0027T\u0027 :"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            ToDos todo \u003d Integer.parseInt(doneStatus) \u003d\u003d Task.DONENO"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                ? new ToDos(taskInfo).doneTask()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                : new ToDos(taskInfo);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            taskList.add(todo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        case \u0027D\u0027 :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Deadlines deadline \u003d Integer.parseInt(doneStatus) \u003d\u003d Task.DONENO"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                ? new Deadlines(taskInfo, when).doneTask()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                : new Deadlines(taskInfo, when);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            taskList.add(deadline);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        case \u0027E\u0027 :"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Events event \u003d Integer.parseInt(doneStatus) \u003d\u003d Task.DONENO"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                ? new Events(taskInfo, when).doneTask()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                : new Events(taskInfo, when);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            taskList.add(event);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeLoadFileException(\"Error generating task list from file.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Loads the list of tasks from storage."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @Return List of tasks from storage."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Scanner sc \u003d new Scanner(fis);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                String nextLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (nextLine \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return taskList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String[] strArr \u003d nextLine.split(\":\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    assert strArr.length \u003d\u003d 3 || strArr.length \u003d\u003d 4: \"Error in saving task information\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String taskType \u003d strArr[dataFileColumn.TASKTYPE.returnIndex()];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String doneStatus \u003d strArr[dataFileColumn.DONESTATUS.returnIndex()].trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String taskInfo \u003d strArr[dataFileColumn.TASKSTRING.returnIndex()].trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String when \u003d strArr.length \u003d\u003d dataFileColumn.TOTALCOLUMNS"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        ? strArr[dataFileColumn.DATE.returnIndex()].trim()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        : \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    char taskTypeChar \u003d taskType.charAt(TASKTYPEINDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    addTaskToList(taskList, taskTypeChar, doneStatus, taskInfo, when);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeLoadFileException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            //Error in task list of data file"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            //A new file will be created when updatelist"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Saves individual task to list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param bw    Buffered writer"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks List of tasks to be saved"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private void saveTasksToList(BufferedWriter bw, TaskList tasks) throws IOException{"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            TaskType taskType \u003d task.returnTaskType();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String taskInfo \u003d task.returnTaskInfo();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String when \u003d \"\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            switch(taskType.returnTaskSymbol()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case \u0027D\u0027 :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                Deadlines deadline \u003d (Deadlines) tasks.get(i);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                when \u003d \" : \" + deadline.returnTime().trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case \u0027E\u0027 :"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                Events event \u003d (Events) tasks.get(i);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                when \u003d \" : \" + event.returnTime().trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String toWrite \u003d taskType.returnTaskSymbol() + \" : \" + task.returnDoneStatus() + \" : \" + taskInfo.trim() + when;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            bw.write(toWrite);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            bw.newLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Saves lists of tasks into storage."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks List of tasks to be saved."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @throws DukeIOException"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void saveTaskList(TaskList tasks) throws DukeIOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            saveTasksToList(bw, tasks);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIOException(\"Sorry handsome but file is not found.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 197
    }
  },
  {
    "path": "src/main/java/duke/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Deadlines denotes a Deadlines task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a Deadlines task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task description information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param by  String description of time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Deadlines(String taskInfo , String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(taskInfo, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            this.localDateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeDateTimeParseException(\"Please input the date and time in yyyy-MM-dd HHmm format\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    + \" with the correct values\\n\\teg. event hackathon /by 2014-12-25 1630\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns string description of deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String description of deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String returnTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Return a done deadline task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done deadline task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Deadlines doneTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super.done \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return String.format(\"%s (by: %s)\", super.toString(), dateTimeFormatter.format(this.localDateTime));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 59
    }
  },
  {
    "path": "src/main/java/duke/task/DukeDateTimeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeRunTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeDateTimeParseException denotes a Duke DateTimeParseException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeDateTimeParseException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeDateTimeParseException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeDateTimeParseException(String errorMessage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 19
    }
  },
  {
    "path": "src/main/java/duke/task/DukeNumberFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeRunTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeNumberFormatException denotes a Duke DateTimeParseException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeNumberFormatException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeNumberFormatException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeNumberFormatException(String errorMessage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 19
    }
  },
  {
    "path": "src/main/java/duke/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Events denotes a Events task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a Events task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task description information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param at  String description of time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Events(String taskInfo , String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(taskInfo, TaskType.EVENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            this.localDateTime \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeDateTimeParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                \"Please input the date and time in yyyy-MM-dd HHmm format\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    + \" with the correct values\\n\\teg. event hackathon /at 2014-12-25 1630\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns string description of deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String description of deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String returnTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Return a done events task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done events task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Events doneTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super.done \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return String.format(\"%s (at: %s)\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            super.toString(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dateTimeFormatter.format(this.localDateTime));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 63
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Task denotes a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final int UNDONENO \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final int DONENO \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String taskInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private TaskType taskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task description information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskType  Type of event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task(String taskInfo, TaskType taskType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns a done events task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done events task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task doneTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns task type of event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Task type of event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public TaskType returnTaskType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns integer representing status of event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Integer representing status of event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public int returnDoneStatus() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return done ? DONENO : UNDONENO;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns description of task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String returnTaskInfo() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskInfo;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String status \u003d done ? \t\"[\\u2713]\" : \"[\\u274C]\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskType + status + \" \" + taskInfo;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 67
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * The class TaskList denotes a task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @author Alvin Chee"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static final int STARTINDEX \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private static List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskList  An ArrayList of tasks to emulate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns size of taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Size of taskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Gets the task based on index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param index  Index of task in taskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Task that is retrieved."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Removes the task based on index."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param index  Index of task in taskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Task that is removed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds the task based at specified index."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param index  Index of task in taskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param task  Task to be added to taskList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void add(int index, Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(index, task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds the task based at last index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param task  Task to be added to taskList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of words duke say in response."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return \"\\tGot it. I\u0027ve added this task:\" + \"\\n\\t\\t\" + task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            + String.format(\"\\n\\tNow you have %d tasks in the list.\", taskList.size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Deletes the task based on index in taskInfo"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task information with task index information."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String of words duke say in response."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @throws DukeIndexOutOfBoundsException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String deleteTask(String taskInfo) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String delete \u003d \"delete\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskInfo.trim().length() \u003c\u003d delete.length()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to delete is invalid\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String taskNoString \u003d taskInfo.replace(\"delete\", \"\").trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int taskNo;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            taskNo \u003d Integer.parseInt(taskNoString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeNumberFormatException(\"Please input a number for the task you want to delete.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskNo \u003c STARTINDEX || taskNo \u003e taskList.size()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to delete is invalid\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int index \u003d taskNo - 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task t \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return \"\\tNoted. I\u0027ve removed this task:\" + \"\\n\\t\\t\" + t"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            + String.format(\"\\n\\tNow you have %d tasks in the list.\", taskList.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns a list of task matching the keyword."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param matchWords  All the keywords from user"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public List\u003cTask\u003e returnMatchingTasks(String ... matchWords) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Iterator\u003cTask\u003e iterator \u003d taskList.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        iterator.forEachRemaining(matchTask -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            for (int j \u003d 0; j \u003c matchWords.length; j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                //In case of having alot of spaces in between two words, skip the iteration."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (matchWords[j].equals(\"\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                String pattern \u003d \"\\\\b\" + matchWords[j] + \"\\\\b\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    Pattern p \u003d Pattern.compile(pattern);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    assert p !\u003d null : \"PatternSyntaxException not thrown,\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                            \" unknown exception occured without being caught.\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    Matcher m \u003d p.matcher(matchTask.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    if (m.find()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        matchList.add(matchTask);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } catch (PatternSyntaxException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    throw new DukeInvalidCommandException(\"Sorry handsome but I\u0027m not sure about this command :)\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return matchList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns a list of duplicate tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public List\u003cString\u003e detectDuplicates() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cString\u003e duplicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cString\u003e finalDuplicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            for (int j \u003d i + 1; j \u003c taskList.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (taskList.get(i).returnTaskInfo().equalsIgnoreCase(taskList.get(j).returnTaskInfo())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    duplicateList.add(taskList.get(i).returnTaskInfo());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        duplicateList.sort(null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String taskAdded \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for(int i \u003d 0; i \u003c duplicateList.size(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String currentTask \u003d duplicateList.get(i);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            if (!taskAdded.equalsIgnoreCase(currentTask)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                taskAdded \u003d currentTask;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                finalDuplicateList.add(duplicateList.get(i));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return finalDuplicateList;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Removes all duplicate tasks except first copies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void removeDuplicatesExceptFirst() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cString\u003e duplicates \u003d detectDuplicates();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cString\u003e removedDuplicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            for (int j \u003d 0; j \u003c duplicates.size(); j++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                String taskInfo \u003d taskList.get(i).returnTaskInfo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (taskInfo.equalsIgnoreCase(duplicates.get(j))) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    if (!removedDuplicates.contains(taskInfo)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        removedDuplicates.add(taskInfo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        taskList.set(i, null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.removeIf(task -\u003e task \u003d\u003d null);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 186
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The enum TaskType denotes the type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    TODO (\u0027T\u0027),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    DEADLINE (\u0027D\u0027),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    EVENT (\u0027E\u0027);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private char taskSymbol;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a task type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskSymbol  Symbol representing the type of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    TaskType(char taskSymbol) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskSymbol \u003d taskSymbol;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns the task symbol."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public char returnTaskSymbol() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskSymbol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return \"[\" + taskSymbol + \"]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 34
    }
  },
  {
    "path": "src/main/java/duke/task/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Events denotes a Events task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a todos task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param task  Task description information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ToDos(String task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(task, TaskType.TODO);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Return a done todos task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done todos task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ToDos doneTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super.done \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 33
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert tmp !\u003d null : \"tmp should not be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 62
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String input \u003d userInput.getText() + \"\\t\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assert response.length() \u003e 0 : \"Duke should not be speechless\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (input.trim().equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            duke.returnStage().close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 52
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"650.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"550.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"52.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"560.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"39.0\" prefWidth\u003d\"75.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"550.0\" prefWidth\u003d\"650.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"550.0\" prefWidth\u003d\"636.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 19
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlinesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class DeadlinesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTime() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"2020-02-12 1330\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Deadlines(\"party\", \"2020-02-12 1330\").returnTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[D][✓] party (by: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Deadlines(\"party\", \"2020-02-12 1330\").doneTask().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[D][✗] party (by: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Deadlines(\"party\", \"2020-02-12 1330\").toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 26
    }
  },
  {
    "path": "src/test/java/duke/task/EventsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class EventsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTime() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"2020-02-12 1330\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Events(\"party\", \"2020-02-12 1330\").returnTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[E][✓] party (at: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Events(\"party\", \"2020-02-12 1330\").doneTask().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[E][✗] party (at: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Events(\"party\", \"2020-02-12 1330\").toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 26
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"sleep\", TaskType.TODO));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void get() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"sleep\", TaskType.TODO));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] sleep\", taskList.get(0).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"sleep\", TaskType.TODO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] study\", taskList.remove(1).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task sleep \u003d new Task(\"sleep\", TaskType.TODO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(1, sleep);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] sleep\", taskList.remove(1).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void addTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task sleep \u003d new Task(\"sleep\", TaskType.TODO);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.addTask(sleep);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task sleep \u003d new Task(\"sleep\", TaskType.TODO);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.addTask(sleep);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.deleteTask(\"delete 1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 67
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✓] sleep\", new Task(\"sleep\", TaskType.TODO).doneTask().toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTaskType() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(TaskType.TODO, new Task(\"sleep\", TaskType.TODO).returnTaskType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnDoneStatus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(1, new Task(\"sleep\", TaskType.TODO).doneTask().returnDoneStatus());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTaskInfo() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"sleep\", new Task(\"sleep\", TaskType.TODO).doneTask().returnTaskInfo());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] sleep\", new Task(\"sleep\", TaskType.TODO).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 33
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTypeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class TaskTypeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[E]\", TaskType.EVENT.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 13
    }
  },
  {
    "path": "src/test/java/duke/task/ToDosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class ToDosTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✓] party\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new ToDos(\"party\").doneTask().toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] party\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new ToDos(\"party\").toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 7,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "if [ ! -d \" C:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2\\bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    mkdir C:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "-": 36
    }
  }
]
