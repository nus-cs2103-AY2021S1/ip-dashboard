[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 17,
      "-": 44
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * A Deadline is a Task, with the addition of a deadline, signifying when it has to be completed before."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * @author jingyenloh"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String SAVE_STRING \u003d \"DEADLINE|%s|%s|%s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final LocalDate deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A constructor for a Deadline Task that is not done yet."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param taskName the name of the Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param deadline when the Task has to be completed before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Deadline(String taskName, LocalDate deadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A constructor for a Deadline Task, which may or may not be done yet."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param isDone   whether the Task has been completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param taskName the name of the Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param deadline when the Task has to be completed before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Deadline(boolean isDone, String taskName, LocalDate deadline) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(isDone, taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \"[D]%s (by: %s)\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                this.deadline.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Serializes the Deadline into a String that is easy to parse. The String takes the form:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * \u003ccode\u003eDEADLINE|isDone|taskName|deadLine\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * The deadLine is formatted into yyyy-mm-dd, where yyyy is the year, mm- is the month, and dd is the day."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return A formatted String ready for saving into a file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format(SAVE_STRING, super.isDone, super.taskName, this.deadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Deadline d \u003d (Deadline) o;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return super.equals(d) \u0026\u0026 this.deadline.equals(d.deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 68
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 54
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String SAVE_FILE_PATH \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            System.getProperty(\"user.home\") + File.separator + \".duke\" + File.separator + \"tasks.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A Constructor for Duke that initializes the save file path to nothing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * A Constructor for Duke that sets the save file path to a given path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param filePath the path to the saved tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            this.tasks.addAllTasks(this.storage.load());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            this.ui.showLoadingError();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Initializes an instance of Duke, and runs it."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param args The command line args passed to the program"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        new Duke(SAVE_FILE_PATH).run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Executes an instance of the Duke chatbot. While the user does not input a goodbye command, Duke interprets"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * different commands passed to it and performs different actions, including but not limited to the following:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * - store a task to be done"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * - mark a task as done"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * - list the tasks to be done"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * - find tasks that match a search term"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * - remove a task from the list of tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try (Scanner scanner \u003d new Scanner(System.in)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            this.ui.displayGreeting();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (this.storage.hasSavedTasks()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                this.ui.displayGreetingReminder(this.tasks.tasksCount());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            System.out.print(\"\u003e \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                String output \u003d handleCommand(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                if (output.equalsIgnoreCase(Ui.GOODBYE_MESSAGE)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    this.storage.saveTasks(this.tasks.getTasks());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                System.out.print(\"\u003e \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            this.ui.displayGoodbye();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            this.ui.displayMessages(e.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Interprets a command that was passed to Duke, and returns a corresponding response based on it. If the command or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * its arguments were malformed, return an error response to the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param input The String containing the command, as well as its arguments"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return Duke\u0027s response to the input string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private String handleCommand(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String[] tokens \u003d input.split(\" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String command \u003d tokens[0].toLowerCase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"list\": // show tasks available"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                return ui.displayTasks(this.tasks.getTasks());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                String term \u003d input.substring(\"find\".length()).strip();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                List\u003cTask\u003e matchingTasks \u003d this.tasks.searchTasks(term);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                return ui.displayMatchingTasks(matchingTasks);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"done\": {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    throw new InvalidInputException(\"Um, you need to tell me what it is you\u0027ve done.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                int index \u003d Integer.parseInt(tokens[1]) - 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                task.markDone();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                return ui.displayMessages("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                        \"Okay. So you\u0027ve done:\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                        task.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                int index \u003d Integer.parseInt(tokens[1]) - 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                Task task \u003d this.tasks.getTask(index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                this.tasks.deleteTask(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                return this.ui.displayMessages("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                        \"Right, you no longer want me to track:\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                        task.toString(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                        this.ui.getTasksLeftMessage(this.tasks.tasksCount()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"event\": // it\u0027s a new task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                return addTask(command, input);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                return ui.displayGoodbye();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                return ui.displayMessages(\"Um, I don\u0027t get what you\u0027re saying.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return ui.displayMessages(e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private String addTask(String command, String input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Task task \u003d TaskParser.parseInput(command, input);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.tasks.addTask(task);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this.ui.displayMessages("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \"Okay, you want to:\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                this.ui.getTasksLeftMessage(this.tasks.tasksCount()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String response \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns Duke\u0027s response String to a user\u0027s input."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return handleCommand(input);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 245,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * An Event is a kind of Task that occurs within a certain period/time range."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * @author jingyenloh"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String SAVE_STRING \u003d \"EVENT|%s|%s|%s\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private String timeRange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Event(String taskName, String timeRange) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Event(boolean isDone, String taskName, String timeRange) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(isDone, taskName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.timeRange \u003d timeRange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), this.timeRange);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Serializes the Event into a String that is easy to parse. The String takes the form:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * \u003ccode\u003eEvent|isDone|taskName|timeRange\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return A formatted String ready for saving into a file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format(SAVE_STRING, super.isDone, super.taskName, this.timeRange);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 34
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * An Exception that should be thrown when malformed input is received."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * @author jingyenloh"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class InvalidInputException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 10
    }
  },
  {
    "path": "src/main/java/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * An Exception that should be thrown when invalid input is received, while trying to create a Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * @author jingyenloh"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class InvalidTaskException extends InvalidInputException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public InvalidTaskException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 10
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 25
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (response.trim().equalsIgnoreCase(Ui.GOODBYE_MESSAGE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 52
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Deserializes a list of tasks stored at a given path into a list of Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return a list of Tasks that were stored at the path at \u003ccode\u003efilePath\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws IOException if a problem was encountered while trying to access the file at \u003ccode\u003efilePath\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // TODO: 26/8/20 Add more relevant error for parsing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public List\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try (var br \u003d new BufferedReader(new FileReader(this.filePath))) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                Task task \u003d TaskParser.parse(line);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // TODO: 26/8/20 consider a more robust check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Checks if the file at \u003ccode\u003efilePath\u003c/code\u003e exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return true if the file exists, otherwise false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean hasSavedTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new File(this.filePath).exists();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Saves a list of tasks into a file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param tasks the list of tasks to serialize and save"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws IOException if a problem was encountered while trying to access the file at \u003ccode\u003efilePath\u003c/code\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void saveTasks(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        File saveFile \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            boolean directoryCreated \u003d saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (!directoryCreated) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                throw new IOException(\"Unable to create parent directories to save file\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            boolean saveFileCreated \u003d saveFile.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (!saveFileCreated) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                throw new IOException(\"Unable to create save file\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // Use PrintWriter wrapping BufferedWriter in FileWriter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        try (var out \u003d new PrintWriter(new BufferedWriter(new FileWriter(this.filePath)))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                out.println(task.toSaveString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 65
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * The Task represents something that can be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * @author jingyenloh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this(false, taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Task(boolean isDone, String taskName) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format(\"[%s] %s\", isDone ? \"✓\" : \"✘\", this.taskName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Formats the task into a String that is easy to parse."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return a formatted String, ready for saving into a file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public abstract String toSaveString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (this \u003d\u003d o) return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (isDone !\u003d task.isDone) return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return Objects.equals(taskName, task.taskName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 49
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void addAllTasks(Collection\u003cTask\u003e newTasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        tasks.addAll(newTasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public int tasksCount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public List\u003cTask\u003e searchTasks(String term) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .filter(t -\u003e t.taskName.contains(term))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 41
    }
  },
  {
    "path": "src/main/java/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "// TODO: 26/8/20 Consider a visitor pattern"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "// TODO: 26/8/20 Add try-catch clause"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * A class containing a collection of static methods that Duke uses to parse Tasks from Strings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * @author jingyenloh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Parses a Task from an input string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param line the input to parse"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return a Task which was parsed from the String"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static Task parse(String line) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String[] tokens \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String taskType \u003d tokens[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(tokens[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String taskName \u003d tokens[2];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case \"TODO\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return TaskParser.parseTodo(isDone, taskName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case \"DEADLINE\": {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String deadlineStr \u003d tokens[3];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return TaskParser.parseDeadline(isDone, taskName, deadlineStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case \"EVENT\": {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String timeRangeStr \u003d tokens[3];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return TaskParser.parseEvent(isDone, taskName, timeRangeStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new InvalidInputException(\"Unable to parse task\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns an Event Task, given its state, task name, and the range it occurs within"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param isDone       whether the Task has been completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param taskName     the name of the Task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param timeRangeStr the interval the Event occurs in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return an Event Task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static Event parseEvent(boolean isDone, String taskName, String timeRangeStr) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new Event(isDone, taskName, timeRangeStr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns a Deadline Task, given its state, task name, and a String representing the deadline."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param isDone      whether the Task has been completed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param taskName    the name of the Task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param deadlineStr a String representing the deadline"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return a Deadline Task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws DateTimeParseException if \u003ccode\u003edeadlineStr\u003c/code\u003e is not well formatted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static Deadline parseDeadline(boolean isDone, String taskName, String deadlineStr)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throws DateTimeParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        // TODO: 26/8/20 Handle DateTimeParseException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        LocalDate deadline \u003d LocalDate.parse(deadlineStr);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new Deadline(isDone, taskName, deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Returns a Todo Task, given its state and task name."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param isDone   whether the Task has been completed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param taskName the name of the Task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return a Todo Task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static Todo parseTodo(boolean isDone, String taskName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return new Todo(isDone, taskName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Parses a type of Task out of an input String, given a command on the type of Task to parse into."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param command the type of Task to parse into"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param input   the input to parse to create the Task from"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e a Task that was parsed from the input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @throws InvalidTaskException if the input is malformed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // TODO: Consider some cleaner way of validating, perhaps a factory method for each Task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static Task parseInput(String command, String input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String[] todoDetails \u003d input.split(\"todo \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (todoDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                throw new InvalidTaskException(\"😡 I have no idea what you want to do.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String taskName \u003d todoDetails[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return new Todo(taskName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String[] deadlineDetails \u003d input.split(\"deadline | /by \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (deadlineDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                throw new InvalidTaskException(\"What is it you want to do?\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (deadlineDetails.length \u003c 3) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                throw new InvalidTaskException(\"What\u0027s your deadline? You have to tell me, you know.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return TaskParser.parseDeadline(false, deadlineDetails[1], deadlineDetails[2]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String[] eventDetails \u003d input.split(\"event | /at \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (eventDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                throw new InvalidTaskException(\"What is it you want to do?\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            if (eventDetails.length \u003c 3) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                throw new InvalidTaskException(\"When do you need to do this? You have to tell me, you know.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return new Event(eventDetails[1], eventDetails[2]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            throw new InvalidTaskException(\"Um, I don\u0027t get what you\u0027re saying.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 121
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * A Todo is the simplest form of a Task, without any restrictions on when it occurs or when it is due."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " * @author jingyenloh"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String SAVE_STRING \u003d \"TODO|%s|%s\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public Todo(boolean isDone, String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        super(isDone, taskName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format(SAVE_STRING, super.isDone, super.taskName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (!(obj instanceof Todo)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Todo todo \u003d (Todo) obj;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return super.isDone \u003d\u003d todo.isDone \u0026\u0026 super.taskName.equalsIgnoreCase(todo.taskName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 38
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \"██████╗ ███████╗███╗   ██╗███████╗██████╗ ██╗ ██████╗████████╗\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    + \"██╔══██╗██╔════╝████╗  ██║██╔════╝██╔══██╗██║██╔════╝╚══██╔══╝\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    + \"██████╔╝█████╗  ██╔██╗ ██║█████╗  ██║  ██║██║██║        ██║\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    + \"██╔══██╗██╔══╝  ██║╚██╗██║██╔══╝  ██║  ██║██║██║        ██║\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    + \"██████╔╝███████╗██║ ╚████║███████╗██████╔╝██║╚██████╗   ██║\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    + \"╚═════╝ ╚══════╝╚═╝  ╚═══╝╚══════╝╚═════╝ ╚═╝ ╚═════╝   ╚═╝\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"Ok lor like that lor.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Displays a greeting message to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void displayGreeting() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        System.out.println(\"Hi, I\u0027m \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        System.out.println(\"What do you need this time 😫\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Displays a given number of messages in an indented block, enclosed by 2 indented lines."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param messages a variable number of messages to be displayed in the indented block"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String displayMessages(String... messages) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        StringBuilder response \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        System.out.println(\"     ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            System.out.printf(\"     %s\\n\", message);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            response.append(message).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        System.out.println(\"     ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Displays a friendly reminder on the number of tasks to do, given a count. If the count is zero, display nothing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param count the number of tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String displayGreetingReminder(int count) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return this.displayMessages("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    \"Don\u0027t forget you already have one thing to do.\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    \"But okay.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return this.displayMessages("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \"Don\u0027t forget you already have \" + count + \" things to do.\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \"But okay.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Displays a list of tasks in an indented block. If the list of tasks is empty, display a message indicating so."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param tasks the tasks to display in the indented block"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String displayTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        int noOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (noOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return this.displayMessages(\"You didn\u0027t tell me to remind you anything.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String[] messages \u003d new String[noOfTasks + 1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"Right, you said you wanted to:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            messages[0] \u003d \"Right, you said you wanted to:\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            for (int i \u003d 0; i \u003c noOfTasks; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                messages[i + 1] \u003d String.format(\"%3d: %s\", i + 1, tasks.get(i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                sb.append(String.format(\"%3d: %s\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return this.displayMessages(messages);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Retrieves a nicely formatted reminder of the number of tasks, given the number of tasks left."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param noOfTasks the number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @return a formatted String"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String getTasksLeftMessage(int noOfTasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \"Now you have %d thing%s you need me to remind you about.\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                noOfTasks,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                noOfTasks \u003d\u003d 1 ? \"\" : \"s\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Displays a goodbye message."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String displayGoodbye() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return displayMessages(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    // TODO: Consider something more descriptive"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Display an error message to the user indicating that Duke failed to load saved tasks properly."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        return displayMessages(\"Ugh, I can\u0027t remember what you told me to remind you :(\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * Displays a list of matching tasks in an indented block. If the list of tasks is empty, display a message"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * indicating so."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     * @param matchingTasks the tasks to display in the indented block"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public String displayMatchingTasks(List\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        int noOfTasks \u003d matchingTasks.size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        if (noOfTasks \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return this.displayMessages(\"Well, I don\u0027t recall you asking me to note down anything like that.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            String[] messages \u003d new String[noOfTasks + 1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            messages[0] \u003d \"Right, here\u0027s some tasks that match what you asked for:\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            for (int i \u003d 0; i \u003c noOfTasks; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                messages[i + 1] \u003d String.format(\"%3d: %s\", i + 1, matchingTasks.get(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            return this.displayMessages(messages);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 132
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 23
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 11
    }
  },
  {
    "path": "src/test/java/TaskParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "class TaskParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parseEvent() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parseDeadline() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        boolean isDone \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String taskName \u003d \"A task\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String deadlineStr \u003d \"2020-08-26\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2020, 8, 26);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(isDone, taskName, date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Deadline result \u003d TaskParser.parseDeadline(isDone, taskName, deadlineStr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(deadline, result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parseTodo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        String taskName \u003d \"A task\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Todo task \u003d new Todo(taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        Todo result \u003d TaskParser.parseTodo(false, taskName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "        assertEquals(task, result);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    void parseInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 42
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "done"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "blah"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 11
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JingYenLoh"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "JingYenLoh": 1,
      "-": 37
    }
  }
]
