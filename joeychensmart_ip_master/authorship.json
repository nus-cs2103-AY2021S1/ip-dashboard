[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for the Duke object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.storage \u003d new Storage(\"duke.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.taskList \u003d this.storage.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            ui.systemMessage(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.parser \u003d new Parser(this.taskList, this.ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Main function/entrypoint. Will create a new Duke instance and begin interaction with the user immediately."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Takes in no command line arguments."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param args command line arguments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.welcomeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        while (ui.isActive()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String input \u003d ui.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                parser.parseAndRun(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                this.storage.save(this.taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                ui.systemMessage(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 54,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Stores all the commands to be run."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    TODO(CommandLibrary.todoCommand,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.TODO_EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(.*)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"todo\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DEADLINE(CommandLibrary.deadlineCommand,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.DEADLINE_BAD_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(.*?) /by (.*)\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"deadline\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    EVENT(CommandLibrary.eventCommand,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.EVENT_BAD_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(.*) /at (.*)\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"event\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    LIST(CommandLibrary.listCommand,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"list\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    BYE(CommandLibrary.byeCommand,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"bye\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    // TODO add more specific errors for these two below"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DONE(CommandLibrary.doneCommand,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(\\\\d+)\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"done\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    DELETE(CommandLibrary.deleteCommand,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(\\\\d+)\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"delete\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    FIND(CommandLibrary.findCommand,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            DukeException.Errors.UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"(.*)\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            \"find\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final CommandExecutable exec;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final DukeException.Errors matchError;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Pattern format;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    Command(CommandExecutable exec, DukeException.Errors matchError, String formatString, String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.exec \u003d exec;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.format \u003d Pattern.compile(formatString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.matchError \u003d matchError;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses the String input and returns a Optional.of(regex.Matcher) if there is a match,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * otherwise returns Optional.empty(). The matcher will be configured to return the arguments"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * to the Command in its capture groups. The regex used to match can be found in the Command enum."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param rawInput String raw input from the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Optional regex.Matcher if there is a match, else empty()."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Optional\u003cMatcher\u003e matcher(String rawInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (!rawInput.startsWith(this.name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Matcher matcher \u003d this.format.matcher(rawInput.substring(this.name.length()).trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return Optional.of(matcher);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void dispatch(TaskList taskList, Ui ui, String[] args) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.exec.run(taskList, ui, args);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DukeException matchError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.matchError.create();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 82
    }
  },
  {
    "path": "src/main/java/duke/command/CommandExecutable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "interface CommandExecutable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void run(TaskList taskList, Ui ui, String[] arguments) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 10
    }
  },
  {
    "path": "src/main/java/duke/command/CommandLibrary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "class CommandLibrary {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable deadlineCommand \u003d (taskList, ui, args) -\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d args[0].trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (args.length !\u003d 2 || description.equals(\"\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.DEADLINE_BAD_FORMAT.create();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String time \u003d args[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(taskList.add(new Deadline(description, time)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable eventCommand \u003d (taskList, ui, args) -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d args[0].trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (args.length !\u003d 2 || description.equals(\"\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.EVENT_BAD_FORMAT.create();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String time \u003d args[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(taskList.add(new Event(description, time)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable todoCommand \u003d (taskList, ui, args) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String description \u003d args[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.TODO_EMPTY_DESCRIPTION.create();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(taskList.add(new Todo(description)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable deleteCommand \u003d (taskList, ui, args) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int idx \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (idx \u003e taskList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.DELETE_OUT_OF_RANGE.create();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d taskList.deleteItem(idx - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(\"sir this task has been remove sir:\\n  \" + selected);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable doneCommand \u003d (taskList, ui, args) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int idx \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (idx \u003e taskList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.DONE_OUT_OF_RANGE.create();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d taskList.markItem(idx - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(\"afternoon sir i have mark this task done sir:\\n  \" + selected);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable listCommand \u003d (taskList, ui, args) -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(taskList.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable byeCommand \u003d (taskList, ui, args) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(\"bye sir thanks for using me sir hope to see you again sir\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static final CommandExecutable findCommand \u003d (taskList, ui, args) -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cTask\u003e items \u003d taskList.getItemsList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // if description does not contain string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (!items.get(i).getDescription().contains(args[0])) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                items.set(i, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(\"sir i found your items sir look:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        ui.systemMessage(TaskList.enumerateItems(items));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 69
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Custom exception class for Duke-related exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public enum Errors {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        UNKNOWN_COMMAND(\"sorry sir i dont understand your command sir\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"please enter again sir thank you sir\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        TODO_EMPTY_DESCRIPTION(\"v sorry sir you need to give todo description sir\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        EVENT_BAD_FORMAT(\"apology mr sir, i dont not understand your input\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"the format for new event is \\\"event DESCRIPTION /at DATE\\\" sir\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DEADLINE_BAD_FORMAT(\"very sorry sir, i cannot understand your input\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"the format for new deadline is \\\"deadline DESCRIPTION /by DATE\\\" sir\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DONE_OUT_OF_RANGE(\"sir that number is too many for the list sir please\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"choose a lower number for the list please sir\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DELETE_OUT_OF_RANGE(\"sir that number is too many for the list sir please\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"choose a lower number for the list please sir\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        DATE_PARSE_ERROR(\"sir the date of format is wrong sir please try\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                + \"\\\"yyyy-mm-dd\\\", eg \\\"2020-08-24\\\" sir\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FILE_READ_ERROR(\"sir there is some error in read file i make new list ok?\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        FILE_WRITE_ERROR(\"sir there is some error in write file, oopsies!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        private final String message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Errors(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.message \u003d message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        public DukeException create() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new DukeException(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DukeException(Errors error) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(error.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 39
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class to parse raw input from user and run commands from the input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for Parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param taskList TaskList to pass to commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param ui Ui object that commands will use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Parser(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Parses the String input, then runs the respective Command (if input is valid)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * using the Parser object\u0027s internal TaskList and Ui objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param input String raw input from user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException If there are any parse errors, or Command has any errors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void parseAndRun(String input) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Command command : Command.values()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Optional\u003cMatcher\u003e maybeMatcher \u003d command.matcher(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (maybeMatcher.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Matcher matcher \u003d maybeMatcher.get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            // Should we throw a more specific error here?"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (!matcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                throw command.matchError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int count \u003d matcher.groupCount();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String[] args \u003d new String[count];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                args[i - 1] \u003d matcher.group(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            command.dispatch(this.taskList, this.ui, args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        // if we are here means no command has matched"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        throw DukeException.Errors.UNKNOWN_COMMAND.create();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 56
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonDeserializer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import com.google.gson.JsonSerializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class to store TaskList objects as json files."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final GsonBuilder gsonBuilder \u003d new GsonBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final JsonSerializer\u003cTaskList\u003e taskListSerializer \u003d (src, typeOfSrc, context) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonArray list \u003d new JsonArray();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (Task task : src.getItemsList()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            JsonElement elem \u003d context.serialize(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            elem.getAsJsonObject().addProperty(\"taskType\", task.getTaskIdentifier());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            list.add(elem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final JsonDeserializer\u003cTaskList\u003e taskListDeserializer \u003d (json, typeOfT, context) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonArray taskElems \u003d json.getAsJsonArray();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (JsonElement elem : taskElems) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            JsonObject elemObject \u003d elem.getAsJsonObject();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String description \u003d elemObject.get(\"description\").getAsString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String taskType \u003d elemObject.get(\"taskType\").getAsString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            String time \u003d parseDate(elemObject.get(\"date\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    task \u003d new Todo(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    task \u003d new Event(description, time);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    task \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                    throw new JsonParseException(\"Invalid task type.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                throw new JsonParseException(\"Invalid date format.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (elemObject.get(\"isDone\").getAsBoolean()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new TaskList(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        gsonBuilder.registerTypeAdapter(TaskList.class, taskListSerializer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        gsonBuilder.registerTypeAdapter(TaskList.class, taskListDeserializer);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Gson gsonObject;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param filePath Relative String filepath to the input json file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.gsonObject \u003d gsonBuilder.create();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static String parseDate(JsonElement elem) throws JsonParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (elem \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        JsonObject obj \u003d elem.getAsJsonObject();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int year \u003d obj.get(\"year\").getAsInt();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int month \u003d obj.get(\"month\").getAsInt();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            int date \u003d obj.get(\"day\").getAsInt();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return String.format(\"%04d-%02d-%02d\", year, month, date);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw new JsonParseException(\"Invalid date format.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Saves TaskList in Json format to the filepath supplied to the constructor."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param taskList TaskList to save."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException If there is any IOException."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try (FileWriter fw \u003d new FileWriter(this.filePath)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.gsonObject.toJson(taskList, TaskList.class, fw);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.FILE_WRITE_ERROR.create();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Loads TaskList from a previously saved Json file. Uses filepath supplied to constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return TaskList parsed from Json file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @throws DukeException If any parsing errors occur (wrong format, etc)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        if (!path.toFile().isFile()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try (Reader reader \u003d Files.newBufferedReader(path)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            return gsonObject.fromJson(reader, TaskList.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.FILE_READ_ERROR.create();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 138
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Represents a Deadline item in Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Deadline extends TimeTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Deadline(String description, String time) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDateDescriptor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"by\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Represents an Event item in Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Event extends TimeTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Event(String description, String time) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description, time);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDateDescriptor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"at\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Abstract class for Task-related classes to inherit from."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * An ID of the task, e.g. \"T\" for Todo, \"D\" for Deadline, etc."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Used in Json serialization (Storage class)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String ID of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public abstract String getTaskIdentifier();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String checkMark \u003d this.isDone ? \"X\" : \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return squareBox(this.getTaskIdentifier())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + squareBox(checkMark)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Getter function for description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String squareBox(String str) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"[\" + str + \"]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 46
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Wrapper for the list of Tasks stored in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final List\u003cTask\u003e items;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public TaskList(List\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public List\u003cTask\u003e getItemsList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return new ArrayList\u003c\u003e(this.items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.items.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Adds a new Task to the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Returns a formatted String that should be printed to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String output to print."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.items.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"morning sir i have added this to the list sir:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"\\ni counted all your number of tasks sir it is \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.items.size()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \" sir\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Formats a List of Tasks into a human readable list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Ignore null indices. This is used for the find command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param items List of items to print."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return formatted String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public static String enumerateItems(List\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        StringBuilder numberedItems \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            Task item \u003d items.get(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            if (item !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "                numberedItems.append(i + 1).append(\". \").append(item).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return numberedItems.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return enumerateItems(this.items);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Calls the markAsDone method of the Task stored in this TaskList at index idx."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @param idx Index of Task to markAsDone."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return Task of item that was just marked."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Task markItem(int idx) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Task selected \u003d this.items.get(idx);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        selected.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return selected;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Task deleteItem(int idx) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.items.remove(idx);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 78
    }
  },
  {
    "path": "src/main/java/duke/task/TimeTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "abstract class TimeTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected TimeTask(String description, String dateString) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            this.date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            throw DukeException.Errors.DATE_PARSE_ERROR.create();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Date descriptor used to format output."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * e.g. \"at\" for Event (Event at ...)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Used only for toString formatting. Does not affect Command\u0027s match function."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * @return String date descriptor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public abstract String getDateDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    protected String dateString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return super.toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \" (\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.getDateDescriptor()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \": \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + this.dateString()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Represents a Todo item in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String getTaskIdentifier() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 15
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " * Class to handle and abstract Ui (currently stdio) operations."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String logo \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        \"               /,   ,|   ,|     \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"           /| /(  ,\u0027 / ,//      \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"        \\\\`( |/ /,\u0027  (,/ |      \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"         \\\\ \\\\ ` `   `  /--,    \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"       _,_\\\\ `  ` `  ``  /__    \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"        \u0027-.____________`  /     \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"          [  \\\\@,    :] `--,-..-\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"          [__________]__,\u0027-._/  \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"           )\u0027o\\\\ \u0027 o) \\\\/ )       hello sir\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"           \\\\  /   __  ./        its me your assistant sir\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"            \\\\\u003d`   \u003d\u003d,\\\\..        how may i be of service sir\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"             \\\\ -. `,\u0027 (        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            + \"             \\\\`--\u0027\u0027    \\\\.     \\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private static final String horizontalRule \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private boolean isActive;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Constructor for Ui object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isActive \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return this.isActive;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     * Closes this Ui object, and sets isActive() to false."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.isActive \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void welcomeMessage() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        this.systemMessage(logo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public void systemMessage(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        System.out.println(horizontalRule + indent(input) + \"\\n\" + horizontalRule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private String indent(String original) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        return \"     \" + original.replace(\"\\n\", \"\\n     \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 63
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void testCommandRejectsBadInputs(Command command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(Optional.empty(), command.matcher(\"thisshouldnotmatchever\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private void testCommandMatchesCorrectly(Command command, String input, String[] argsToMatch) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Optional\u003cMatcher\u003e maybeMatcher \u003d command.matcher(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        Matcher matcher \u003d maybeMatcher.get();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        matcher.find();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        int count \u003d matcher.groupCount();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        String[] args \u003d new String[count];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            args[i - 1] \u003d matcher.group(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertArrayEquals(argsToMatch, args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testTodoCommandRejectsBadInputs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testCommandRejectsBadInputs(Command.TODO);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testTodoCommandMatchesCorrectly() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        testCommandMatchesCorrectly(Command.TODO, \"todo test\", new String[] {\"test\"});"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 38
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public DeadlineTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deadline \u003d new Deadline(\"test\", \"2020-08-24\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testRejectsBadInputs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            new Deadline(\"test\", \"bad input\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testCorrectIdentifier() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"D\", deadline.getTaskIdentifier());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[D][ ] test (by: Aug 24 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMarkAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[D][X] test (by: Aug 24 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 38
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    public EventTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        event \u003d new Event(\"test\", \"2020-08-24\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testRejectsBadInputs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "            new Event(\"test\", \"bad input\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testCorrectIdentifier() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"E\", event.getTaskIdentifier());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[E][ ] test (at: Aug 24 2020)\", event.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMarkAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[E][X] test (at: Aug 24 2020)\", event.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 38
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    private final Todo todo \u003d new Todo(\"test\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testCorrectIdentifier() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"T\", todo.getTaskIdentifier());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[T][ ] test\", todo.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    void testMarkAsDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "        assertEquals(\"[T][X] test\", todo.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "todo test1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline thisbreaks"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline add tests /by now"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "event commit changes /at later"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "event thisalsobreaks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "deadline do tasks /by now"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joeychensmart"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "joeychensmart": 1,
      "-": 36
    }
  }
]
