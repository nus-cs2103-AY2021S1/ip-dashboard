[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "# com.jacob.Duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/com.jacob.Duke.Duke.java` file, right-click it, and choose `Run com.jacob.Duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/CommandHandlers.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class CommandHandlers {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void handleFileCommands(String inputCommand, List\u003cTask\u003e taskList,int count) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //parse input command (in format :  type, done, description, datetime) into task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String[] inputs \u003d inputCommand.split(\",\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String type \u003d inputs[0];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int isDone \u003d Integer.parseInt(inputs[1]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String description \u003d inputs[2];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Task theTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    theTodo.setDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                taskList.add(count, theTodo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                String dateTime \u003d inputs[3];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Task theEvent \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    theEvent.setDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                taskList.add(count, theEvent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                dateTime \u003d inputs[3];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Task theDeadline \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    theDeadline.setDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                taskList.add(count, theDeadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Handles all commands and send them to the correct eventHandler"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * 1) take input and split by white space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * 2) use case to check command type"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Command issued to duke chat bot"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List of all recorded tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void handleConsoleCommands(String inputCommand, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String[] splitStrings \u003d inputCommand.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String firstInput \u003d splitStrings[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\" -----------------\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            switch (firstInput) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    //prints the task description and updates the relevant task into taskList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    System.out.println(toDoHandler(inputCommand, taskList));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    //create the deadline and update the relevant deadline into taskList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    System.out.println(deadlineHandler(inputCommand, taskList));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    //create the event and update the relevant event into taskList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    System.out.println(eventHandler(inputCommand, taskList));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    //delete the task from taskList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    System.out.println(deleteHandler(inputCommand, taskList));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    //iterate through the taskList and print all active members"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    printListStatus(taskList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                case \"list-due\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    //iterate through the taskList and print all active members"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    filterPrintTasks(inputCommand,taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    //doneEventHandler();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    System.out.println(doneHandler(inputCommand,taskList));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    throw new DukeException(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } finally { //always end event with the line even if exception is caught"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\" -----------------\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Handles the UI and logic of the done command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Command issued to duke chat bot"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List of all recorded tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return Done Handler UI description"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static String doneHandler(String inputCommand, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\" Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //get the integer from the string command and convert to integer"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theTask \u003d taskList.get(Integer.parseInt(inputCommand.substring(5))-1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String lineToEdit \u003d theTask.convertToFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //set task as done"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        theTask.setDone();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String replacementText \u003d theTask.convertToFile();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //replace line"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FileEditor.replacement(lineToEdit,replacementText);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return theTask.getCurrentStatus();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Handles the printing of all existing tasks in a list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List of all recorded tasks"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static void printListStatus(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\" Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (Task t: taskList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\"  \"+ count + \". \" + t.getCurrentStatus());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Handles the to-do Command and return the task description"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Command issued to Duke Chat bot"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List of stored tasks"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return Event Handler UI description"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException To check if there are any statuses"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //handle to-do UI and logic"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static String toDoHandler(String inputCommand, List\u003cTask\u003e taskList) throws DukeException{"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String s \u003d inputCommand.substring(4);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (s.equals(\"\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theTodo \u003d new Todo(inputCommand.substring(4+1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(theTodo);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //append text"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FileEditor.appendText(theTodo.convertToFile());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\" Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \"   %s\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \" Now you have %d tasks in the list.\\n\", theTodo.getCurrentStatus(), taskList.size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * handle deadline UI and logic"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Command Issued to Duke Chat Bot"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List of Tasks recorded"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return String description of added task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException In case there is no description"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static String deadlineHandler(String inputCommand, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int breakpoint \u003d inputCommand.indexOf(\"/\")-1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (inputCommand.length() \u003c\u003d \"deadline \".length() ) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a Deadline cannot be empty.\\n\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } else if (breakpoint \u003d\u003d -1) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"Hey a deadline cannot have no actual date!!\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String description \u003d inputCommand.substring(\"deadline\".length()+1, breakpoint);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String dateTime \u003d inputCommand.substring(breakpoint + 5);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theDeadline \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(theDeadline);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //append text"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FileEditor.appendText(theDeadline.convertToFile());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\" Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \"   %s\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \" Now you have %d tasks in the list.\", theDeadline.getCurrentStatus(), taskList.size());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * handle Event UI and logic"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Command Issued to Duke Chat Bot"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List of Tasks recorded"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return String description of added event"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException in case there is no description"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static String eventHandler(String inputCommand, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int breakpoint \u003d inputCommand.indexOf(\"/\")-1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (inputCommand.length() \u003c\u003d \"event \".length() ) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a event cannot be incomplete.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } else if (breakpoint \u003d\u003d -1) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"Hey, a event cannot have no actual date and time!!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String description \u003d inputCommand.substring(\"event\".length()+1, breakpoint);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String dateTime \u003d inputCommand.substring(breakpoint + 5);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theEvent \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(theEvent);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //append text"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FileEditor.appendText(theEvent.convertToFile());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\" Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \"   %s\\n\" +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \" Now you have %d tasks in the list.\", theEvent.getCurrentStatus(), taskList.size());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Print the bye description"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return stored bye description"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String byeHandler() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return \" Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Handle deletion of tasks from the task list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Input Command of delete to the chat bot"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList Task list of all recorded tasks"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return String description of the current status of task list and delete tasks"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static String deleteHandler(String inputCommand, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theRemovedTask \u003d taskList.remove(Integer.parseInt(inputCommand.substring(7))-1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //TODO find a way to remove text, current method doesnt work"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        FileEditor.removeText(theRemovedTask.convertToFile());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\" Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \"   %s\\n\" +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \" Now you have %d tasks in the list.\",theRemovedTask.getCurrentStatus(), taskList.size());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //add ability to filter for date time using predicate"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static void filterPrintTasks(String inputCommand,List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //get the date time string from the initial string"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String dateTime \u003d inputCommand.substring(\"list-due \".length());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //get the date time object for comparison"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        LocalDateTime filterDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //check that the date and time is the same before printing"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Predicate\u003cLocalDateTime\u003e dateTimePredicate \u003d x -\u003e x.equals(filterDateTime);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //print out the filtered items"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\" Here are the tasks in your filtered list:\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (Task t: taskList) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (t.dueDateTime !\u003d null \u0026\u0026 dateTimePredicate.test(t.dueDateTime)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                System.out.println(\"  \"+ count + \". \"+ t.getCurrentStatus());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 250
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Deadline(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Deadline(String description, String dateTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 14
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Basic Driver code to get the inputs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param args Basic syntax requirement"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e toDoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        CommandHandlers comHandlers \u003d new CommandHandlers();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\"Omo!! hello from\\n\" + logo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // get file commands and turn them into task objects in toDoList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String filename \u003d FileEditor.accessTaskListInFileSystem(FileEditor.getCurrentDirectory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        toDoList \u003d FileEditor.readFile(filename, comHandlers, toDoList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //get console inputs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            // all encompassing driver code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            comHandlers.handleConsoleCommands(input, toDoList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            FileEditor.writeToFile(filename);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            // checks for the next input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //handle the bye command when encountered"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\" -----------------\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(comHandlers.byeHandler());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\" -----------------\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 45
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DukeException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 7
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Event(String description, String dateTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 15
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/FileEditor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.DataInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FileEditor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //get current directory"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static String getCurrentDirectory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //Access the current list, creates the folder and files if they do not exist"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static String accessTaskListInFileSystem(String current) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        java.nio.file.Path directoryPath \u003d java.nio.file.Paths.get(current, \"data\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        boolean directoryExists \u003d java.nio.file.Files.exists(directoryPath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        java.nio.file.Path filePath \u003d java.nio.file.Paths.get(current, \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        boolean fileExists \u003d java.nio.file.Files.exists(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (!directoryExists) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Files.createDirectories(directoryPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (!fileExists) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Files.createFile(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\"Printing filepath after accessing it: \" + filePath.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return filePath.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static StringBuffer stringBufferOfData \u003d new StringBuffer();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    static String filename \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static List\u003cTask\u003e readFile(String filename, CommandHandlers comHandlers, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(filename))));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            for (String line; (line \u003d reader.readLine()) !\u003d null; ) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                //System.out.println(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                //parse the line here and add to taskList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                comHandlers.handleFileCommands(line, taskList, count++);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                //add to the buffer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                stringBufferOfData.append(line).append(\"\\r\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            reader.close();//this is used to release the scanner from file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\"The file \" + filename + \" could not be found or opened! \" + e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static void writeToFile(String filename) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            BufferedWriter bfWriter \u003d new BufferedWriter(new FileWriter(filename));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            bfWriter.write(stringBufferOfData.toString());//writes the edited string buffer to the new file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            bfWriter.close();//closes the file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (Exception e) {//if an exception occurs"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\"Error occurred while attempting to write to file: \" + e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static void replacement(String lineToEdit, String replacementText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //System.out.println(sb);//used for debugging to check that my string buffer has correct contents and spacing"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //Find the original text"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int startIndex \u003d stringBufferOfData.indexOf(lineToEdit);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int endIndex \u003d startIndex + lineToEdit.length();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //if exists, then replace"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //else append to the end of the String buffer"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        stringBufferOfData.replace(startIndex, endIndex, replacementText);//this is where the actual replacement of the text happens"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static void appendText(String replacementText) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //add a separator for the newline before appending"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String newLine \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        replacementText \u003d replacementText + newLine;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        stringBufferOfData.append(replacementText);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static void removeText(String lineToEdit) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String newLine \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        lineToEdit \u003d lineToEdit + newLine;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        replacement(lineToEdit, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    // test driver"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        accessTaskListInFileSystem(getCurrentDirectory());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(getCurrentDirectory());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\"Please enter your files name and path i.e C:\\\\test.txt: \");//prompt for file name"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String filename \u003d sc.nextLine();//read in the file name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //create dummy command handler and task list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        CommandHandlers commandHandlers \u003d new CommandHandlers();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        readFile(filename,commandHandlers,taskList); //call the method to read the file with the files name"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(stringBufferOfData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\"Please enter the contents of a line you would like to edit: \");//prompt for a line in file to edit"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String lineToEdit \u003d sc.nextLine();//read the line to edit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\"Please enter the the replacement text: \");//prompt for a line in file to replace"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String replacementText \u003d sc.nextLine();//read the line to replace"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        replacement(lineToEdit, replacementText);//call method to get text to replace, replacement text and output replaced String buffer"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //add text"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(\"Please enter the the append text: \");//prompt for a line in file to replace"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String appendText \u003d sc.nextLine();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        appendText(appendText);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //complete writing to file"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        writeToFile(filename);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 145
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected LocalDateTime dueDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Task(String description, String dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.dueDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // example command: deadline return book /by 2019-10-15 1800"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (dueDateTime !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return \"  [\"+ type + \"]\"+ \"[\" + getStatusIcon() +\"] \" + getDescription()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    + \" \" +dueDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy ha\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return \"  [\"+ type + \"]\"+ \"[\" + getStatusIcon() +\"] \" + getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String convertToFile() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (dueDateTime !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return String.format(\"%s,%s,%s,%s\", type, isDone ? 1 : 0 , getDescription(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    dueDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\"%s,%s,%s\", type, isDone ? 1 : 0, getDescription());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 52
    }
  },
  {
    "path": "src/main/java/com/jacob/Duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package com.jacob.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "SET MY_PATH\u003dD:\\CY stuff\\NUS\\5. AY2020 Sem 1 Actual\\CS2103T\\ip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "cmd"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5,
      "-": 18
    }
  }
]
