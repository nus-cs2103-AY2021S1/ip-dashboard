[
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Deadline(String description, boolean isCompleted, String deadline) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        super(description,isCompleted);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.date \u003d parseDate(deadline);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.time \u003d parseTime(deadline);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String storeFormat() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return String.format(\"%s %s %s %s\",this.getTaskSymbol(),this.isDone(),this.description,this.deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return String.format(\"%s (by: %s %s)\",this.description,date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")),time.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public LocalDate parseDate(String deadline) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "       return  LocalDate.parse(deadline.split(\"\\\\s+\")[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public LocalTime parseTime(String deadline) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return LocalTime.parse(deadline.split(\"\\\\s+\")[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 42
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private UI userInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            this.userInterface \u003d new UI();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            this.taskList \u003d new TaskList(Storage.loadFile());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            System.out.println(\"An error has occurred: \" + e);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        userInterface.greetUser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        do{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                String input \u003d Parser.getUserCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                String command \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    Storage.writeToFile(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    userInterface.goodbye();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    userInterface.listTasks(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                } else if (command.split(\"\\\\s+\")[0].equals(\"find\"))  {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    String keyword \u003d Parser.parseKeyWord(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    UI.listTasks(taskList.search(keyword));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                } else if (command.split(\"\\\\s+\")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    Task task \u003d taskList.get(Integer.parseInt(command.split(\"\\\\s+\")[1]) - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    task.setDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    userInterface.taskCompletedMessage(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                }else if (command.split(\"\\\\s+\")[0].equals(\"delete\")){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    if (command.split(\"\\\\s+\").length !\u003d 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        throw new IllegalUserInputException(\"PLease specify the correct argument number\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        int i \u003d Integer.parseInt(command.split(\"\\\\s+\")[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        Task.decrementTask();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        Task task \u003d taskList.get(i-1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        taskList.deleteTaskIndex(i-1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        userInterface.taskDeletedMessage(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    } catch (TaskListError e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        System.out.println(e.getDetails());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                    storeInput(input, taskList, userInterface);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            } catch (IllegalArgumentException | IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } while (true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void storeInput(String command, TaskList taskList,UI userInterface) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String cmd1 \u003d command.split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String cmd2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Task task \u003dnull;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (cmd1.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            cmd2 \u003d  command.substring(cmd1.length()+1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                task \u003d Parser.parseDeadline(cmd2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "               System.out.println( \"Please specify time in format YYYY-MM-DD hh:hh \\n for instance : 2019-10-15 18:00\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else if (cmd1.equals(\"todo\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (command.split(\"\\\\s+\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                throw new IllegalUserInputException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            cmd2 \u003d  command.substring(cmd1.length()+1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            task \u003d new Todo(cmd2,false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else if (cmd1.equals(\"event\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            cmd2 \u003d  command.substring(cmd1.length()+1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            task \u003d Parser.parseEvent(cmd2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new IllegalUserInputException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (task !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            userInterface.taskAddedMessage(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 101,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Event class encapsulates Event object which is a subtype of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Constructor for Event class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param name String description or name of event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param isCompleted boolean indicating completion of task. True means task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     *                    has been completed. False means vice versa."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param duration String duration of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Event (String name,boolean isCompleted, String duration) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        super(name,isCompleted);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private String getDuration() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return the symbol of the Event class as a String"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Formats the Event object to be stored in the Database."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return the storage of the event as a String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String storeFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return String.format(\"%s %s %s %s\",this.getTaskSymbol(),this.isDone(),this.description,this.duration);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String toString () {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return String.format(\"%s (at: %s)\",this.description,this.duration);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 43
    }
  },
  {
    "path": "src/main/java/duke/IllegalUserInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class IllegalUserInputException extends IllegalArgumentException{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public IllegalUserInputException (String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 12
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static Printable getUserInput() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return () -\u003e scanner.nextLine();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static String getUserCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return getUserInput().print();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static String[] splitString(String str) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return str.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public  static Deadline parseDeadline(String deadlineInputString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String[] arr \u003d splitString(deadlineInputString);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String description\u003d\"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String deadline\u003d\"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (int i \u003d 0; i\u003carr.length;i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (arr[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                flag \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (!flag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                description +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                deadline +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new Deadline (description.substring(0,description.length()-1),false,deadline.substring(0,deadline.length()-1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static Event parseEvent (String eventInputString) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String[] arr \u003d splitString(eventInputString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String description\u003d\"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String duration\u003d\"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (int i \u003d 0; i\u003carr.length;i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (arr[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                flag \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (!flag) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                description +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                duration +\u003d arr[i] + \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new Event (description.substring(0,description.length()-1),false,duration.substring(0,duration.length()-1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static String parseKeyWord(String command) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return command.substring(5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 62
    }
  },
  {
    "path": "src/main/java/duke/Printable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public interface Printable {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String print();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 4
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Store and Retrieve tasks from the task list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static String  folderPath \u003d \"Data\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static String writePath \u003d \"Data/Duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Writes tasks to file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param taskList List of tasks to be written to the file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void writeToFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        FileWriter fw \u003d new FileWriter(writePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (Task task : taskList.getListOfTasks()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            fw.append(task.storeFormat() + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Loads tasks from Database to be stored in the taskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return list of Tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static List\u003cTask\u003e loadFile() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        File f \u003d new File(writePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                String taskString \u003d s.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                tasks.add(generateTask(taskString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            System.out.println(\"Initializing storage\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            File f2 \u003d new  File(folderPath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            f2.mkdir();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Reads tasks from the database"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param taskString Storage string that represents the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return the actual task object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static Task generateTask(String taskString) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String [] arr \u003d taskString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        boolean isCompleted \u003d booleanToString(arr[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (arr[0].equals(\"[D]\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            task \u003d generateDeadline(arr,isCompleted);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else if (arr[0].equals(\"[E]\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            task \u003d new Event(arr[2],isCompleted,arr[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else if (arr[0].equals(\"[T]\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            task \u003d new Todo(arr[2], isCompleted);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            System.out.println(\"This task cannot be read: \" + taskString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static Deadline generateDeadline(String[] arr, boolean isCompleted) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String deadline \u003d arr[arr.length-2] + \" \" +arr[arr.length-1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        String description \u003d arr[2];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (i \u003d3 ; i \u003c arr.length-2 ;i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            description +\u003d \" \" + arr[i];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return new Deadline(description,isCompleted,deadline);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static boolean booleanToString (String bool) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (bool.equals(\"false\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else if (bool.equals(\"true\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        System.out.println(\"Boolean could not be deciphered\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 94
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    protected static int total \u003d 0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Task(String name, boolean isCompleted) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.description \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.isDone \u003d isCompleted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.total ++;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static int remainingTasks() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return Task.total;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (!this.isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            this.total--;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public abstract String getTaskSymbol();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public abstract String storeFormat();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void decrementTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Task.total --;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (this.getClass().equals(other.getClass())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            Task object2 \u003d (Task)other;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return this.description.equals(object2.description) \u0026\u0026 this.isDone\u003d\u003dobject2.isDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 54
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Stores tasks in a list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Constructor to initialize the tasks "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public List\u003cTask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public int getTotalTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void deleteTaskIndex(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            taskList.remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new TaskListError(2,index,getTotalTask());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return taskList.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            throw new TaskListError(1,index,getTotalTask());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public TaskList search (String keyWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (Task task:this.taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (task.toString().contains(keyWord)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                taskList.addTask(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 58
    }
  },
  {
    "path": "src/main/java/duke/TaskListError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class TaskListError extends IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static String errorType1 \u003d \"Accessing out of bounds index in TaskList \" +"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            \"You tried to access index %s The list is of size %s\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static String errorType2 \u003d \"Deleting out of bounds index in TaskList \" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            \"You tried to delete index %s The list is of size %s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private int errorType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private int indexAccessed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private int sizeOfList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public TaskListError(int errorType, int indexAccessed, int sizeOfList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.errorType \u003d errorType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.indexAccessed \u003d indexAccessed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        this.sizeOfList \u003d sizeOfList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        if (errorType \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return String.format(errorType1,indexAccessed,sizeOfList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        } else if (errorType \u003d\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            return String.format(errorType2,indexAccessed,sizeOfList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return \"Unknown error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 28
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Todo is a type of Task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public Todo(String name, boolean isCompleted) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        super(name,isCompleted);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return String representing the symbol of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String getTaskSymbol() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Formats the Todo object to be stored in the Database."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @return the storage of the event as a String"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public String storeFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return String.format(\"%s %s %s\",this.getTaskSymbol(),this.isDone(),this.description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 25
    }
  },
  {
    "path": "src/main/java/duke/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " * Deals with user interactions"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static Printable greetingMessage \u003d () -\u003e \"Hello! I\u0027m Duke \\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static Printable goodbyeMessage \u003d () -\u003e \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Generates greeting message for user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void greetUser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        speak(greetingMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Generates goodbye message for user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void goodbye() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        speak(goodbyeMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Generates Task completion message for user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param task Completed Task as input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void taskCompletedMessage(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        speak(() -\u003e \"Nice! I\u0027ve marked this task as done:\\n[✓] \" + task.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Generates task deletion message for user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param task Task to be deleted as input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void taskDeletedMessage (Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        speak(() -\u003e String.format(\"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \"%s%s %s\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \"Now you have %d tasks in the list.\",task.getTaskSymbol(),task.getSymbol(),task.toString(),Task.remainingTasks()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void taskAddedMessage (Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        speak(() -\u003e String.format(\"Got it. i\u0027ve added this task:\\n %s%s %s\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                \"Now you have %d tasks in the list.\", task.getTaskSymbol(), task.getSymbol(), task.toString(), Task.remainingTasks()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * Lists completed tasks for user"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     * @param taskList list of tasks as input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public static void listTasks (TaskList taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for (i \u003d 0 ; i \u003c taskList.getTotalTask() ; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            if (i\u003d\u003dtaskList.getTotalTask()-1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                sb.append(String.format(\"%d.%s %s\",i+1,task.getSymbol(),task));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "                sb.append(String.format(\"%d.%s %s\\n\", i+1,task.getSymbol(), task));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Printable task \u003d () -\u003e sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        speak(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    private static void speak(Printable printable) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        System.out.println(\"------------------------------------------------------\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        System.out.println(printable.print() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        System.out.println(\"------------------------------------------------------\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 80
    }
  },
  {
    "path": "src/test/Data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "[T] false eat"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 1
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void storageTest() throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        TaskList taskList\u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        TaskList taskList2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        taskList.addTask(new Todo(\"eat\",false));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Storage.loadFile();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        Storage.writeToFile(taskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        taskList2 \u003d new TaskList(Storage.loadFile());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        for  (int i \u003d 0; i\u003ctaskList.getTotalTask();i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "            assertEquals(taskList.get(i),taskList2.get(i));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 23
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void totalTasksCheck() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        TaskList list \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        list.addTask(new Todo(\"sleep\", false));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        list.addTask(new Todo(\"eat\",true));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertEquals(list.getTotalTask(),2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    public void deleteTaskIndexTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        TaskList list \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        list.addTask(new Todo(\"sleep\", false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        list.addTask(new Todo(\"eat\",true));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        list.deleteTaskIndex(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "        assertEquals(list.getTotalTask(),1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "todo eat"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nauman-S"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Nauman-S": 1,
      "-": 20
    }
  }
]
