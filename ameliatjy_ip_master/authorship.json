[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a Deadline by its taskName, deadline and whether or not it has been completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Deadline(String taskName, boolean isCompleted, LocalDateTime date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy h:mm a\")) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A Duke object represents the chatbot which responds to users\u0027 inputs."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Public constructor of Duke to create a Duke object to deal with user inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param filePath Path where file containing past and new tasks can be loaded from and saved to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } catch (DukeException | IOException | ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void run() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        welcomeMsg();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        ui.start(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Prints a welcome message when the bot is first launched."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void welcomeMsg() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String welcomeMsg \u003d \"Hello! I\u0027m Duke, some call me a parrot.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        System.out.println(welcomeMsg);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Creates new Duke object to process user inputs when the bot is launched."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param args Command-line arguments."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            new Duke(\"./data/duke.txt\").run();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 55,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    DukeException(String s) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents an Event by its taskName, date of event and whether or not it has been completed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Event(String taskName, boolean isCompleted, LocalDateTime date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy h:mm a\")) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 24
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A Parser object deals with making sense of user command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private TaskList currList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Parser(TaskList currList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.currList \u003d currList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Displays all added tasks for users to view."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DukeException If no task has been added yet."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void viewTasks() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (currList.getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // user has not added any task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DukeException(\"Nothing has been added to the list yet!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            System.out.println(currList.displayTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Marks an existing task as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param inputMsg User input which contains the task number to be marked done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DukeException If task number indicated does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void markDone(String inputMsg) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // gets the done task number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int taskNumber \u003d Integer.valueOf(inputMsg.split(\" \")[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (currList.getNumOfTasks() \u003c taskNumber || taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DukeException(\"There is no such task number!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Task currTask \u003d currList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (currTask.getStatus()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                // task has already marked done before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                throw new DukeException(\"Task has already been completed earlier on!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                currTask.markAsComplete();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + currTask.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Deletes an existing task from the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param inputMsg User input which contains the task number to be deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DukeException If task number indicated does not exist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void deleteFromList(String inputMsg) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // gets the deleted task number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int taskNumber \u003d Integer.valueOf(inputMsg.split(\" \")[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (currList.getNumOfTasks() \u003c taskNumber || taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DukeException(\"There is no such task number!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Task currTask \u003d currList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            currList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String output \u003d \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    + currTask.toString()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    + \"\\nNow you have \" + currList.getNumOfTasks() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            System.out.println(output);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Processes the input date by user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param inputDeadline Date related to Task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return LocalDateTime object representing the date related to Task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DukeException If input date format is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public LocalDateTime processDate(String inputDeadline) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String dateFormat;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (inputDeadline.contains(\"/\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            dateFormat \u003d \"/\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else if (inputDeadline.contains(\".\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            dateFormat \u003d \"\\\\.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else if (inputDeadline.contains(\"-\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            dateFormat \u003d \"-\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DukeException(\"Please input valid date format!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String[] inputData \u003d inputDeadline.split(dateFormat);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int date \u003d Integer.parseInt(inputData[0]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int month \u003d Integer.parseInt(inputData[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int year \u003d Integer.parseInt(inputData[2].substring(0, 4));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int hour \u003d Integer.parseInt(inputData[2]. substring(5, 7));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int min \u003d Integer.parseInt(inputData[2]. substring(7));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return LocalDateTime.of(year, month, date, hour, min);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Adds a new task to the list of tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param inputMsg User\u0027s input message to the chatbot."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param actionType Type of task indicated."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DukeException If user does not give a task description."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void addToList(String inputMsg, String actionType) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int numOfWords \u003d inputMsg.split(\" \").length;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        switch (actionType) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (numOfWords \u003c\u003d 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                throw new DukeException(\"Description of task cannot be empty!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String taskName \u003d inputMsg.substring(5);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            newTask \u003d new Todo(taskName, false);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (numOfWords \u003c\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                throw new DukeException(\"Description of task cannot be empty!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String task \u003d inputMsg.split(\"/\")[0];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String taskName \u003d task.substring(9, task.length() - 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String inputDeadline \u003d inputMsg.split(\"/\", 2)[1].substring(3);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            LocalDateTime deadline \u003d processDate(inputDeadline);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            newTask \u003d new Deadline(taskName, false, deadline);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (numOfWords \u003c\u003d 1) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                throw new DukeException(\"Description of task cannot be empty!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String task \u003d inputMsg.split(\"/\")[0];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String taskName \u003d task.substring(6, task.length() - 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String inputDeadline \u003d inputMsg.split(\"/\", 2)[1].substring(3);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            LocalDateTime deadline \u003d processDate(inputDeadline);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            newTask \u003d new Event(taskName, false, deadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // when user keys in unregistered action"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DukeException(\"Specified action is not recognised.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        currList.add(newTask);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String outputMsg \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                + newTask.toString()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                + \"\\nYou have \" + currList.getNumOfTasks() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        System.out.println(outputMsg);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Displays tasks containing keyword."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param inputMsg User\u0027s input message to the chatbot."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DukeException If user does not specify a keyword or there were no matches."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void findTask(String inputMsg) throws DukeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int numOfWords \u003d inputMsg.split(\" \").length;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (numOfWords \u003c\u003d 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DukeException(\"Enter keyword to search for!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            ArrayList\u003cTask\u003e searchResult \u003d currList.searchFor(inputMsg.substring(5));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (searchResult.isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                throw new DukeException(\"Unable to find keyword.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                TaskList result \u003d new TaskList(searchResult);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(result.displayTasks());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Looks through the input message to determine actions to be taken."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param inputMsg User\u0027s input message to the chatbot."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void processMsg(String inputMsg) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // user specified action, to identify type of action"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String actionType \u003d inputMsg.split(\" \")[0];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (inputMsg.equals(\"list\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                viewTasks();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else if (actionType.equals(\"done\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                markDone(inputMsg);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else if (actionType.equals(\"delete\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                deleteFromList(inputMsg);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else if (actionType.equals(\"find\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                findTask(inputMsg);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                addToList(inputMsg, actionType);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 218
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A Storage object deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Store all tasks in a file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param tasks List of tasks as a TaskList object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws IOException If directory or file does not exist."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void writeToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (tasks.getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // user has not added any task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            output \u003d \"Nothing has been added to the list yet!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            output \u003d tasks.displayTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        File directory \u003d new File(file.getParent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // directory does not exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // file does not exist"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        fw.write(output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Converts date to a LocalDateTime object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param taskDate Date of a task obtained from a .txt file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return LocalDateTime object representing the date related to Task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws ParseException If an error has been reached while parsing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public LocalDateTime getDate(String taskDate) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String[] splitDate \u003d taskDate.split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int date \u003d Integer.parseInt(splitDate[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // convert month in words to month in int"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String monthInWords \u003d splitDate[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Date checkMonth \u003d new SimpleDateFormat(\"MMM\", Locale.ENGLISH).parse(monthInWords);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        cal.setTime(checkMonth);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int month \u003d cal.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int year \u003d Integer.parseInt(splitDate[2]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        // get hour and minute from time"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String time \u003d splitDate[3];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int hour \u003d Integer.parseInt(time.split(\":\")[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (splitDate[4].equals(\"PM\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            hour +\u003d 12;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        int min \u003d Integer.parseInt(time.split(\":\")[1].substring(0, 2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return LocalDateTime.of(year, month, date, hour, min);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            throw new DukeException(\"There are no saved tasks.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        FileReader fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return getPastTasks(br);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Obtain a list of tasks from .txt file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param br BufferedReader object used to read the file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return List of tasks stored in an ArrayList\u003cTask\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws IOException If an I/O exception of some sort has occurred."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws ParseException If an error has been reached while parsing."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @throws DukeException If the task type is not recognized."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public ArrayList\u003cTask\u003e getPastTasks(BufferedReader br) throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        ArrayList\u003cTask\u003e pastTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String line \u003d br.readLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Pattern p \u003d Pattern.compile(\"\\\\[(.*?)\\\\]\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Matcher m \u003d p.matcher(line);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String taskType \u003d m.group(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            m.find();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String completionState \u003d m.group(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            int pos \u003d m.end();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // check for completion"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            boolean isCompleted;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (completionState.equals(\"done\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                isCompleted \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                isCompleted \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Task currTask;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (taskType.equals(\"T\")) { // Todo"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String taskName \u003d line.substring(pos + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                currTask \u003d new Todo(taskName, isCompleted);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String taskNameAndDate \u003d line.substring(pos + 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String taskName1 \u003d taskNameAndDate.split(\"\\\\(\")[0];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String taskName \u003d taskName1.substring(0, taskName1.length() - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                String taskDate \u003d taskNameAndDate.split(\"\\\\)\")[0].split(\"\\\\(\")[1].substring(4);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                LocalDateTime taskTime \u003d getDate(taskDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                if (taskType.equals(\"D\")) { // Deadline"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    currTask \u003d new Deadline(taskName, isCompleted, taskTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                } else if (taskType.equals(\"E\")) { // Event"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    currTask \u003d new Event(taskName, isCompleted, taskTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                    throw new DukeException(\"Task type is not recognised.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            pastTasks.add(currTask);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            line \u003d br.readLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return pastTasks;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 156
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Task(String taskName, boolean isCompleted) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return Current task name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return Current task\u0027s state of completion."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Marks the current task as complete by changing its boolean attribute isCompleted."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void markAsComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String task \u003d \"[\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            task +\u003d \"done\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // task +\u003d \"\\u2713\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            task +\u003d \"not done\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            // task +\u003d \"\\u274C\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        task +\u003d \"] \" + taskName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 44
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A TaskList object stores tasks input by the user in a list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return Number of tasks in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param i Task number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return Task object with task number i."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return tasks.get(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param i Remove Task object with task number i from the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.tasks.remove(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param t Task to be added to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        this.tasks.add(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Searches for and returns the list of tasks containing keyword."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param keyword Keyword user is searching for."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return ArrayList of tasks containing keyword."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public ArrayList\u003cTask\u003e searchFor(String keyword) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        ArrayList\u003cTask\u003e searchResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Task currTask \u003d this.tasks.get(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String currTaskName \u003d currTask.getTaskName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (currTaskName.contains(keyword)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                searchResult.add(currTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @return String representing all tasks in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String displayTasks() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (i \u003d\u003d this.tasks.size() - 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                output +\u003d (i + 1) + \". \" + this.tasks.get(i).toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                output +\u003d (i + 1) + \". \" + this.tasks.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 83
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * Represents a Todo by its taskName and whether or not it has been completed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    Todo(String taskName, boolean isCompleted) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 17
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * A Ui object deals with interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @author amelia"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " * @since 2020-08-26"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * Obtain user inputs and edit the TaskList currList accordingly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     * @param currList Current list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void start(TaskList currList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Parser parser \u003d new Parser(currList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            String inputMsg \u003d sc.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            if (inputMsg.equals(\"bye\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                // ends the bot"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            parser.processMsg(inputMsg);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 31
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(\"[D][not done] return book (by: 12 June 2019 6:00 PM)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new Deadline(\"return book\", false,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                        LocalDateTime.of(2019, 6, 12, 18, 0)).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 15
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(\"[E][not done] dance auditions (at: 30 September 2020 11:30 AM)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                new Event(\"dance auditions\", false,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "                        LocalDateTime.of(2020, 9, 30, 11, 30)).toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 15
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void processMsg_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            Parser p \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            p.processMsg(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "            assertEquals(\"Specified action is not recognised.\", e.getMessage());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void processDate_validDate_success() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Parser p \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        LocalDateTime test \u003d p.processDate(\"5/2/2020 1821\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(LocalDateTime.of(2020, 2, 5, 18, 21), test);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 24
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(\"[not done] read book\", new Task(\"read book\", false).toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void markAsComplete_incompleteTask_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        Task testTask \u003d new Task(\"read book\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        testTask.markAsComplete();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertTrue(testTask.getStatus());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 18
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "        assertEquals(\"[T][not done] read book\", new Todo(\"read book\", false).toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "deadline finish CS2103T iP /by today"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "event block event /at 8pm every Tuesday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "list read book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ameliatjy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ameliatjy": 1,
      "-": 20
    }
  }
]
