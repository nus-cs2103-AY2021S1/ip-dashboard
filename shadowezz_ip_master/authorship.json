[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.DateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.MissingInformationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a task managing system."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * It makes use of different components to display UI,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * keep track of tasks and manage the storage of data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * It initialises the UI, creates a storage based on the filepath"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and initialises the existing tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param filePath The location where the task data is stored"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException | DateException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Runs the task management program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * It allows the user to input commands and executes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * the commands accordingly, until the user chooses to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * exit the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ui.displayWelcome();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } catch (DukeException | MissingInformationException | DateException e ) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                ui.printMessage(\"Invalid task number!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Allows user to start running the program."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param args Command line arguments which are not used for this program"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 68,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.GetCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.DateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.MissingInformationException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.format.DateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a decoder to make sense of the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Transforms a given user command from string type to Command type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param fullCommand the command user inputs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return a Command that can be executed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws MissingInformationException If there are missing information in user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DateException If the date provided is of the wrong format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DukeException If the user command is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Command parse(String fullCommand) throws MissingInformationException, DateException, DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String[] commandArr \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (commandArr[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return parseTodo(commandArr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "           return parseDeadline(commandArr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return parseEvent(commandArr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return parseDone(commandArr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return parseDelete(commandArr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"get\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return parseGet(commandArr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return parseFind(commandArr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (commandArr[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DukeException(\"I am sorry, I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static void checkDescription(String[] commandArr, String message) throws MissingInformationException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (commandArr.length \u003c 2 || commandArr[1].isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new MissingInformationException(message);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static Command parseDelete(String[] commandArr) throws MissingInformationException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        int index \u003d getIndex(commandArr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static Command parseDone(String[] commandArr) throws MissingInformationException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        int index \u003d getIndex(commandArr);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static Command parseGet(String[] commandArr) throws MissingInformationException, DateException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        checkDescription(commandArr, \"Date is missing!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Date date \u003d DateFormat.parseDate(commandArr[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new GetCommand(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static Command parseFind(String[] commandArr) throws MissingInformationException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        checkDescription(commandArr, \"Key word is missing!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new FindCommand(commandArr[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static Command parseTodo(String[] commandArr) throws MissingInformationException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        checkDescription(commandArr, \"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new AddCommand(TaskType.TODO, commandArr[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static Command parseDeadline(String[] commandArr) throws MissingInformationException, DateException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        checkDescription(commandArr, \"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String[] descriptionArr \u003d commandArr[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (descriptionArr.length \u003c 2 || descriptionArr[1].isBlank()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new MissingInformationException(\"Deadline is missing a date.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Date date \u003d DateFormat.parseDate(descriptionArr[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new AddCommand(TaskType.DEADLINE, descriptionArr[0], date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static Command parseEvent(String[] commandArr) throws MissingInformationException, DateException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        checkDescription(commandArr, \"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String[] descriptionArr \u003d commandArr[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (descriptionArr.length \u003c 2 || descriptionArr[1].isBlank()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new MissingInformationException(\"Event is missing a date.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Date date \u003d DateFormat.parseDate(descriptionArr[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new AddCommand(TaskType.EVENT, descriptionArr[0], date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Extracts the task number referred to in the user command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param  commandArr the user input represented in the form of an array"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the task number"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws MissingInformationException If task number is not provided."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static int getIndex(String[] commandArr) throws MissingInformationException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (commandArr.length \u003c 2 || commandArr[1].isBlank()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new MissingInformationException(\"Task number is missing!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Integer.parseInt(commandArr[1]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 129
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.DateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.format.DateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a storage system responsible for loading existing tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * when user starts up the program and saving all the tasks on hard drive"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * when user exits the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of storage with the file location of"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * where the tasks are stored."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param filePath the file location where the tasks are stored on hard drive"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Loads up all the existing tasks on hard drive and returns them"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * in the form of a list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return a list of existing tasks on hard drive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IOException If there are errors reading the storage file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DateException If the date of tasks in the file are of the wrong format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public List\u003cTask\u003e load() throws IOException, DateException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        File dataFile \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        FileReader reader \u003d new FileReader(this.filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(reader);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String line \u003d br.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            loadTask(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            line \u003d br.readLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Saves all the tasks into hard drive when user exists the program so"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * that they can be loaded again when the user runs the program again."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the current list of tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IOException If there are errors writing tasks to the storage file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveData(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        File dataFile \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String DIR_PATH \u003d dataFile.getParent();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        File directory \u003d new File(DIR_PATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        dataFile.createNewFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        FileWriter writer \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String data \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            data +\u003d String.format(\"%s\\n\", formatTask(task));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        writer.write(data);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Formats the task into an understandable string to be stored on hard drive."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param task the task that needs to be converted to string format"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the string format of input task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private String formatTask(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String name \u003d task.getName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        int isComplete \u003d task.getStatus() ? 1 : 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (task.getType() \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            type \u003d \"D\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (task.getType() \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            type \u003d \"T\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            type \u003d \"E\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return String.format(\"%s|%d|%s\", type, isComplete, name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return String.format(\"%s|%d|%s|%s\", type, isComplete,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    name, DateFormat.formatDate(task.getDate()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Takes the string stored in hard drive and converts it back to"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * a task object, before adding it to the existing list of tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param line the string format of task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DateException If the date of tasks stored in hard drive is of the wrong format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private void loadTask(String line) throws DateException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String[] taskComponent \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        boolean isComplete \u003d !taskComponent[1].equals(\"0\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String name \u003d taskComponent[2];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (taskComponent[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            taskList.add(new Todo(name, isComplete));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (taskComponent[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            String by \u003d taskComponent[3];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            taskList.add(new Deadline(name, isComplete, DateFormat.parseDate(by)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            String at \u003d taskComponent[3];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            taskList.add(new Event(name, isComplete, DateFormat.parseDate(at)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 130
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents the current list of tasks the user has."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * There are operations for the user to manipulate the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of TaskList which stores the current list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks the user has"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of TaskList with no existing tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Gets the current list of tasks the user has."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the current list of tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Gets the number of tasks the user has."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the number of tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Marks a particular task as completed and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param index the task number to be marked as completed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the completed task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Task completeTask(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return taskList.get(index - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Deletes a particular task and returns it."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param index the task number to be deleted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the deleted task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return taskList.remove(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds a todo to the list of tasks and returns it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of the todo task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the newly added todo"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Task addTodo(String name) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Todo todo \u003d new Todo(name, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        addTask(todo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds a deadline to the list of tasks and returns it."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of the deadline task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param by the date the deadline is due"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the newly added deadline"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Task addDeadline(String name, Date by) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deadline deadline \u003d new Deadline(name, false, by);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        addTask(deadline);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds an event to the list of tasks and returns it."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of the event task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param at the date the event is on"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the newly added event"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Task addEvent(String name, Date at) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Event event \u003d new Event(name, false, at);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        addTask(event);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds a task to the list of tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Obtains a list of tasks that are due or on a specified date."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param date the queried date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the list of tasks that are due or on that date"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public List\u003cTask\u003e getTasksWithDate(Date date) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (task.getType() !\u003d TaskType.TODO \u0026\u0026 task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Obtains a list of tasks containing the specific keyword or keywords."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param keyword the keyword queried by user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the list of tasks with the specific keyword or keywords"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public List\u003cTask\u003e getTasksWithWord(String keyword) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (task.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 141
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Interacts with the user by reading user inputs and outputting the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * appropriate responses."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final static String line \u003d \"______________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final static String lineIndent \u003d \"    \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final static String listIndent \u003d \"       \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final static String textIndent \u003d \"     \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of UI with a scanner to read in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * user inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Displays a welcome message when the user first starts up the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void displayWelcome() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        System.out.println(String.format(\"Hello from\\n%s\\nWhat can I do for you?\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                logo));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Reads in user input using the scanner."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the user input in the form of a string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Displays a formatted message for the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param message the message displayed to the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        System.out.println(String.format(\"%s%s\\n%s%s\\n%s%s\", lineIndent, line,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                textIndent, message, lineIndent, line));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Lists down all the tasks the user has"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the current tasks the user has"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void listTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String output \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        int taskLen \u003d taskList.getCount();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskLen; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            output +\u003d String.format(\"%s%d. %s\", textIndent, i + 1, taskList.getTasks().get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (i !\u003d taskLen - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        printMessage(output);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Informs the user when he has successfully marked a task as complete."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param task the task completed by user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void completeSuccess(Task task) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        printMessage(String.format(\"Nice! I\u0027ve marked this task as done:\\n%s%s\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                listIndent, task));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Informs the user when he has successfully deleted a task, along with a count of current tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param task the task deleted by user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskCount the current number of tasks the user has"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void deleteSuccess(Task task, int taskCount) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String message \u003d String.format(\"Noted. I\u0027ve removed this task:\\n%s%s\\n%sNow you have %d %s in the list.\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                listIndent, task, textIndent, taskCount, taskCount \u003e 1 ? \"tasks\" : \"task\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        printMessage(message);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Informs the user when he has successfully added a task, along with a count of current tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param task the task added by user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskCount the current number of tasks the user has"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void addSuccess(Task task, int taskCount) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String message \u003d String.format(\"Got it. I have added this task:\\n%s%s\\n%sNow you have %d %s in the list.\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                listIndent, task, textIndent, taskCount, taskCount \u003e 1 ? \"tasks\" : \"task\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        printMessage(message);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Lists all the tasks the user has queried."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks matching the user query"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void listQueriedTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String output \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        int taskSize \u003d taskList.size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (int i \u003d 0; i \u003c taskSize; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            output +\u003d String.format(\"%s%d. %s\", textIndent, i+1, taskList.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (i !\u003d taskSize - 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        printMessage(output);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Closes the scanner after user exits the program."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 125
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents the command where user adds task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class AddCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    TaskType type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of AddCommand with no date field."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param type the type of task added"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of task added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public AddCommand(TaskType type, String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of AddCommand with date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param type the type of task added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of task added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param date the date of task added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public AddCommand(TaskType type, String name, Date date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns false since this is not an exit command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command by adding task to taskList, storing it in file and displaying"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * the success message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks user has"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param ui ui instance to display messages"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param storage storage instance to manage storing on disk"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (type \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                task \u003d taskList.addTodo(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } else if (type \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                task \u003d taskList.addDeadline(name, date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                task \u003d taskList.addEvent(name, date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            ui.addSuccess(task, taskList.getCount());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            storage.saveData(taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 78
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 12
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents the delete command where user deletes a particular task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Instantiates a DeleteCommand with the index of task to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param index index of task to be deleted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns false since this is not an exit command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command by deleting task from taskList, updating in file and displaying"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * the success message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks user has"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param ui ui instance to display messages"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param storage storage instance to manage updating on disk"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Task task \u003d taskList.deleteTask(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            ui.deleteSuccess(task, taskList.getCount());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            storage.saveData(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 51
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a command where user completes a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Instantiates a DoneCommand with the index of task that is completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param index the index of task that is completed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns false since this is not an exit command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command by completing the task from taskList, updating in file and displaying"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * the success message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks user has"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param ui ui instance to display messages"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param storage storage instance to manage updating on disk"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Task task \u003d taskList.completeTask(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            ui.completeSuccess(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            storage.saveData(taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents the command when user exits the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true since this is an exit command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * No execution needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks user has"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param ui ui instance to display messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param storage storage instance to manage storing on disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 31
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents the command where user queries tasks containing a keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Instantiates a FindCommand with the queried keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param keyword the keyword queried"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns false since this is not an exit command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command by querying the task from taskList and displaying"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * the queried tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks user has"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param ui ui instance to display messages"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param storage storage instance to manage updating on disk"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getTasksWithWord(keyword);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ui.listQueriedTasks(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 46
    }
  },
  {
    "path": "src/main/java/duke/command/GetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a command where user queries tasks using a dates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class GetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Instantiates a GetCommand with the queried date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param date the queried date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public GetCommand(Date date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns false since this is not an exit command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command by querying tasks from taskList and displaying"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * the matching tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks user has"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param ui ui instance to display messages"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param storage storage instance to manage storing on disk"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getTasksWithDate(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ui.listQueriedTasks(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a command to list all tasks the user has."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns false since this is not an exit command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command by obtaining all tasks from taskList and displaying"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * them to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param taskList the list of tasks user has"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param ui ui instance to display messages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param storage storage instance to manage updating on disk"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ui.listTasks(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 32
    }
  },
  {
    "path": "src/main/java/duke/exception/DateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DateException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shadowezz": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingInformationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class MissingInformationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public MissingInformationException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 7
    }
  },
  {
    "path": "src/main/java/duke/format/DateFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.format;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.DateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DateFormat {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static List\u003cString\u003e dateFormats \u003d Arrays.asList(\"d/M/yy HHmm\", \"d-M-yy HHmm\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \"d/M/yy h:mma\", \"d-M-yy h:mma\", \"d/M/yy\", \"d-M-yy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Date parseDate(String dateString) throws DateException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (String dateFormat : dateFormats) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                return new SimpleDateFormat(dateFormat).parse(dateString);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        throw new DateException(\"Invalid date format\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static String formatDate(Date date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new SimpleDateFormat(\"d/M/yyyy HHmm\").format(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.format.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a deadline type of task that contains an additional due date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param isComplete the completion status of deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param by the due date of deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deadline(String name, boolean isComplete, Date by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(name, isComplete, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Gets the due date of deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the due date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Represents the deadline in string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the string representation of deadline"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return String.format(\"[D] %s (by: %s)\", super.toString(), DateFormat.formatDate(this.by));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.format.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents an event type of task with the date of event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param isComplete the completion status of event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param at the date the event is held on"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Event(String name, boolean isComplete, Date at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(name, isComplete, TaskType.EVENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Gets the date of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the date of the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Represents the event in string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the string representation of the event"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return String.format(\"[E] %s (at: %s)\", super.toString(), DateFormat.formatDate(this.at));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 40
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a todo type of task with the date of event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected TaskType type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected Task(String name, boolean isDone, TaskType type) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public abstract Date getDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), this.name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 45
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 7
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a todo type of task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an instance of todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param name the name of todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param isComplete the completion status of todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Todo(String name, boolean isComplete) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(name, isComplete, TaskType.TODO);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Represents the todo in a string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the string representation of a todo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return String.format(\"[T] %s\", super.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns null since there is no date associated with todo"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 36
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void parse_noDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Parser.parse(\"todo\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            assertEquals(\"The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void parse_noDate_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Parser.parse(\"deadline read book\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            assertEquals(\"Deadline is missing a date.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void parse_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Parser.parse(\"deadline read book /by Monday\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            assertEquals(\"Invalid date format\", e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 42
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void getTasks() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        tasks.add(new Todo(\"Test\", false));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(tasks, taskList.getTasks());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void getCount() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        tasks.add(new Todo(\"Test\", false));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(1, taskList.getCount());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Todo todo \u003d new Todo(\"Test\", false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Todo expectedTodo \u003d new Todo(\"Test\", true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(expectedTodo.toString(), taskList.completeTask(1).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 38
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import duke.exception.DateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void toStringTest() throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String expected \u003d String.format(\"[D] [\\u2718] Test (by: 11/11/2020 1200)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"d/M/yy HHmm\").parse(\"11/11/20 1200\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(expected, new Deadline(\"Test\", false, date).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void getDate() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"d/M/yy HHmm\").parse(\"11/11/20 1200\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test\", false, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(date, deadline.getDate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 26
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void toStringTest() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String expected \u003d String.format(\"[E] [\\u2718] Test (at: 11/11/2020 1200)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"d/M/yy HHmm\").parse(\"11/11/20 1200\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(expected, new Event(\"Test\", false, date).toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void getDate() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"d/M/yy HHmm\").parse(\"11/11/20 1200\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Event event \u003d new Event(\"Test\", false, date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(date, event.getDate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 25
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String expected \u003d String.format(\"[T] [\\u2718] Test\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertEquals(expected, new Todo(\"Test\", false).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deadline return book /by sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deadline return book /by 1/1/20 1700"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "event project meeting /at 1/1/2020 5:00PM"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "done haha"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "delete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "delete haha"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "get 1/1/2020 1700"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "todo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deadline jog"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "deadline jog /by"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "event test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "event test /at"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "blah blah"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 28
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 5,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/TaskList.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/Storage.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/Parser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/Ui.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/task/TaskType.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/task/Event.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/task/Task.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/task/Deadline.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/task/Todo.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/format/DateFormat.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/DeleteCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/ListCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/Command.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/AddCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/GetCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/FindCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/ExitCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/command/DoneCommand.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/exception/DateException.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/exception/MissingInformationException.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "../src/main/java/duke/exception/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 22
    }
  }
]
