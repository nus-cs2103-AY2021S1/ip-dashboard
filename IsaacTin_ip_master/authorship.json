[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    enableAssertions \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 18,
      "-": 44
    }
  },
  {
    "path": "data/database.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "T|F|hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "D|F||Sunday 2010-10-10 19:50"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "E|F||Friday 2010-09-09 20:00"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "A simple guide to get you kick started on how to easily use this CLI app to create and manage your personal TaskList"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003cdetails\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003csummary\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        How do I drop down?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003c/summary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "This is how"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c/details\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Description of feature."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### `Keyword` - Describe action"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Describe action and its outcome."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "`keyword (optional arguments)`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`outcome`"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 9,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Bot with personality which assists and keeps track of user\u0027s tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create Duke object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Contains a \u003ccode\u003eUi\u003c/code\u003e, a \u003ccode\u003eStorage\u003c/code\u003e,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * \\a \u003ccode\u003eParser\u003c/code\u003e and a \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * which is responsible for user interaction,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * saving and writing user\u0027s tasks to user\u0027s local storage and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * making sense of user\u0027s commands and keeping track of user\u0027s tasks respectively."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasks \u003d new TaskList(storage.readFile());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Responsible for receiving user\u0027s input and executing program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Communicates with user via Ui, sends user input to parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * to parse and find command of user, executes command and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * sends result to be saved in storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert parser !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Command command \u003d parser.findCommand(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (command.isExit()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String response \u003d command.execute(tasks, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            storage.saveToFile(tasks.getList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (\"Error \" + e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return greeting message."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getGreeting() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        /*String logo \u003d \" ______  ___       __         __        _____\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                + \"   |    /         /  \\\\       /  \\\\     /\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                + \"   |    \\\\___     /____\\\\     /____\\\\   |\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                + \"   |        \\\\   /      \\\\   /      \\\\   \\\\\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                + \" ------  ___/  /        \\\\ /        \\\\    -----\\n\";*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return \"Hello! I\u0027m Pepe!\" + \"\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 74,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Exception thrown when program encounters errors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Exception duke throws whenever there are errors encountered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param message the specific details of the error thrown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(\"Hi my friend, \" + message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 16
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            stage.setTitle(\"Pepe The Frog\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 30
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.Commands;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.TimeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Parses user input to make sense of the command and find out what user wants."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Parses user input and finds out of user input is valid and if it is, which specific command is given."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description User input containing command and tasks description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return Specific command that user keyed in."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException throw when error occurs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Command findCommand(String description) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description instanceof String : \"Description must be a String\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean noInput \u003d description.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean isMinimumLength \u003d description.length() \u003e\u003d 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean hasDescription \u003d description.split(\" \").length \u003e 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean hasDeadlineOrEventTiming \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                description.split(\"/by\").length \u003e\u003d 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                || description.split(\"/at\").length \u003e\u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean invalidSearchOrDelete \u003d description.split(\" \").length \u003e 2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (noInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"there\u0027s no commands\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!isMinimumLength) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"invalid Command\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return doneProcess(hasDescription, invalidSearchOrDelete, description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return todoProcess(hasDescription, description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return deadlineProcess(hasDescription, hasDeadlineOrEventTiming, description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return eventProcess(hasDescription, hasDeadlineOrEventTiming, description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return deleteProcess(hasDescription, invalidSearchOrDelete, description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"schedule\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return scheduleProcess(invalidSearchOrDelete, hasDescription, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return findProcess(invalidSearchOrDelete, hasDescription, description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith((\"time\"))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return timeProcess(invalidSearchOrDelete, hasDescription, description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (description.startsWith(\"bye\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"type in \u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027 to start!\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"Also, type \u0027schedule\u0027 and key in a date in YYYY-MM-DD format \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"to view schedule on that date!\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"Or type \u0027time\u0027 and key in time in HH:mm format \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"to search for events/deadline happening on that time!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command todoProcess(boolean hasDescription, String description) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!hasDescription) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException((\"you don\u0027t even know what you want to do.\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new AddCommand(Commands.TODO, description.substring(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command doneProcess(boolean hasDescription,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                boolean invalidSearchOrDelete,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                String description) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!hasDescription) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"you need to give a number.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (invalidSearchOrDelete) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"Check one at a time pls and only one \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"space between your \u0027done\u0027 and the task number.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new DoneCommand(description.split(\" \")[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command deadlineProcess(boolean hasDescription,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                    boolean hasDeadlineOrEventTiming,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                    String description) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!hasDescription) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"no deadline given so how you know when it is?\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!hasDeadlineOrEventTiming) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"for deadlines, please include a \u0027/by\u0027 just before the deadline!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new AddCommand(Commands.DEADLINE, description.substring(9));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command eventProcess(boolean hasDescription,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                 boolean hasDeadlineOrEventTiming,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                 String description) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!hasDescription) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"I don\u0027t see any event.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (!hasDeadlineOrEventTiming) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"for events, please include a \u0027/at\u0027 just before the event!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new AddCommand(Commands.EVENT, description.substring(6));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command deleteProcess(boolean hasDescription,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                  boolean invalidSearchOrDelete,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                  String description) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!hasDescription) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"you need to give a number.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (invalidSearchOrDelete) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"Delete one at a time pls and \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"only have one space between \u0027delete\u0027 and the task number.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new DeleteCommand(description.split(\" \")[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command scheduleProcess(boolean invalidSearchOrDelete,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                    boolean hasDescription,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                    String description) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (invalidSearchOrDelete || !hasDescription) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException((\"you need to input a legit date for e.g: 29-01-19, no more and no less.\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new ScheduleCommand(description.substring(9));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command findProcess(boolean invalidSearchOrDelete,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                boolean hasDescription,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                String description) throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (invalidSearchOrDelete || !hasDescription) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException((\"you need to input something to find.\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new FindCommand(description.substring(5));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command timeProcess(boolean invalidSearchOrDelete,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                boolean hasDescription,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                String description) throws DukeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (invalidSearchOrDelete || !hasDescription) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException((\"you need to input a legit time for e.g: 18:00, no more and no less.\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new TimeCommand(description.substring(5));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 147
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Saves and stores tasks that user has input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String database;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Reads the text file \u0027database.txt\u0027 which contains the saved tasks user input previously."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return List of tasks which user had from the last time they used the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException throw when error occurs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public List\u003cTask\u003e readFile() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String currentDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        File dataFolder \u003d new File(currentDirectory + File.separator + \"data\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean directoryExists \u003d dataFolder.exists() \u0026\u0026 dataFolder.isDirectory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (directoryExists) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            File database \u003d new File(dataFolder.getAbsolutePath() + File.separator + \"database.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                Scanner s \u003d new Scanner(database);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    String task \u003d s.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    getSavedTasks(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                this.database \u003d database.getAbsolutePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                return tasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new DukeException(\"No file found sorry please make one\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            dataFolder.mkdir();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            File database \u003d new File(dataFolder.getAbsolutePath() + File.separator + \"database.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                database.createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                this.database \u003d database.getAbsolutePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                return tasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new DukeException(\"File already exists\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private void getSavedTasks(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert descriptions[0].equals(\"T\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                || descriptions[0].equals(\"D\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                || descriptions[0].equals(\"E\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                : \"Task type does not exist.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (descriptions[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            t \u003d new Todo(descriptions[2]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (descriptions[1].equals(\"T\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                t.markAsDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (descriptions[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            t \u003d new Deadline(descriptions[2], descriptions[3]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (descriptions[1].equals(\"T\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                t.markAsDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else if (descriptions[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            t \u003d new Event(descriptions[2], descriptions[3]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (descriptions[1].equals(\"T\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                t.markAsDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Writes the list of tasks into text file \u0027database.txt\u0027 and saves it for future use."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasks current list of tasks of user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws IOException   throw when FileWriter operations fail."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException throw when error occurs and need to print error message."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void saveToFile(List\u003cTask\u003e tasks) throws IOException, DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert database !\u003d null : \"Path to database cannot be null\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        FileWriter fw \u003d new FileWriter(database);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        tasks.forEach((task) -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (task instanceof Todo) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    if (task.getDone()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        fw.write(\"T\" + \"|\" + \"T\" + \"|\" + task.getDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        fw.write(\"T\" + \"|\" + \"F\" + \"|\" + task.getDescription() + System.lineSeparator());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    if (task.getDone()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        fw.write(\"D\" + \"|\" + \"T\" + \"|\" + task.getDescription()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                + \"|\" + ((Deadline) task).getDateorTime() + System.lineSeparator());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        fw.write(\"D\" + \"|\" + \"F\" + \"|\" + task.getDescription()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                + \"|\" + ((Deadline) task).getDateorTime() + System.lineSeparator());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    if (task.getDone()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        fw.write(\"E\" + \"|\" + \"T\" + \"|\" + task.getDescription()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                + \"|\" + ((Event) task).getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        fw.write(\"E\" + \"|\" + \"F\" + \"|\" + task.getDescription()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                                + \"|\" + ((Event) task).getDate() + System.lineSeparator());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    throw new DukeException(\"error while saving :(\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    dukeException.printStackTrace();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 135
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Command to add \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e and \u003ccode\u003eevent\u003c/code\u003e to \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final Commands c;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create AddCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param c           an enum that is the command to identify type of task added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description specific details of the task being added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public AddCommand(Commands c, String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.c \u003d c;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Adds the task into \u003ccode\u003etasklist\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage  stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be null.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        switch (c) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasklist.add(new Todo(description));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (\"Hi there, I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + tasklist.get(tasklist.getSize() - 1) + \"\\nYou have \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + tasklist.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String[] descriptions \u003d description.split(\"/by \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String response \u003d checkForClashes(tasklist);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasklist.add(new Deadline(descriptions[0], descriptions[1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (\"Hi there, I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + tasklist.get(tasklist.getSize() - 1) + \"\\nYou have \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + tasklist.getSize() + \" tasks in the list. \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + response);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String[] descriptions2 \u003d description.split(\"/at \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            String response2 \u003d checkForClashes(tasklist);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasklist.add(new Event(descriptions2[0], descriptions2[1]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (\"Hi there, I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + tasklist.get(tasklist.getSize() - 1) + \"\\nYou have \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + tasklist.getSize() + \" tasks in the list. \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + response2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"invalid command.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String checkForClashes(TaskList tasklist) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d description.split(\" \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String response \u003d \"\\n***WARNING!*** \\nTasks on the same date and within an hour of added task: \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean hasClash \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        List\u003cTask\u003e tasks \u003d tasklist.getList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        LocalTime time \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (String i : descriptions) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                date \u003d LocalDate.parse(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    time \u003d LocalTime.parse(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (Task k : tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (k instanceof Deadline) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (((Deadline) k).isSameDate(date)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    if (((Deadline) k).isWithinAnHour(time)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        response +\u003d tasks.indexOf(k) + 1 + \". \" + k.toString() + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        hasClash \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else if (k instanceof Event) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (((Event) k).isSameDate(date)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    if (((Event) k).isWithinAnHour(time)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        response +\u003d tasks.indexOf(k) + 1 + \". \" + k.toString() + \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                        hasClash \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (hasClash) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 112
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Command to end program with \"bye\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Prints out exit message to send of user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException throw when error occurs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return (\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 28
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Command sent to Duke from user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Abstract method to be implemented by all Command subclasses, with each Command applying different executions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException throw when error occurs while executing commands"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public abstract String execute(TaskList tasklist, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Decides if program should terminate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true only if program is ending."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 29
    }
  },
  {
    "path": "src/main/java/duke/commands/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Describes all the possible types of Commands that a user can give to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    LIST, DONE, DELETE, TODO, DEADLINE, EVENT, SCHEDULE, FIND, TIME,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 8
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Delete task from tasklist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create DeleteCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description task number to delete."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public DeleteCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException when task number does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be null.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            int index \u003d Integer.parseInt(description.split(\" \")[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (tasklist.getSize() \u003c index || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new DukeException(\"you don\u0027t have this task number.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Task temp \u003d tasklist.get(index - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasklist.delete(index - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (\"Removed this task for you!\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + temp + \"\\nYou have \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + tasklist.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"you need to put a number.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 48
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Command to mark a task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create DateCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description task number to mark as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public DoneCommand(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Mark task number as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException when task number does not exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be null.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            int index \u003d Integer.parseInt(description.split(\" \")[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (tasklist.getSize() \u003c index || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                throw new DukeException(\"you don\u0027t have this task number.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            tasklist.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            return (\"Marked this task as done for you!\\n\" + tasklist.get(index - 1)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"\\nYou have \" + tasklist.getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"you need to put a number.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Command to find words in list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create FindCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description description of task being searched for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Find tasks in TaskList which contains word being searched."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException when no words are found matching in list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be null.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String response \u003d IntStream.range(0, tasklist.getSize())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .filter(index -\u003e tasklist.get(index).toString().contains(description))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .mapToObj(index -\u003e String.format(\"%d. %s\", index + 1, tasklist.get(index)))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (response.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"word does not exist in TaskList!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 46
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Shows list of tasks of user so far."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Prints out list of tasks of user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException when no task in list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String response \u003d \"Here\u0027s the list you sad soul \\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (tasklist.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"there\u0027s nothing on the list yet.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return response + IntStream.range(0, tasklist.getSize())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .mapToObj(index -\u003e String.format(\"%d . %s\", index + 1, tasklist.get(index)))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Command to find tasks by date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create DateCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description date being searched"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public ScheduleCommand(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Searches for the date that was keyed in."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if tasks with date is not in tasklist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be null.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean dateExists \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        int position \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String response \u003d \"Tasks on \" + description + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        LocalDate dateSearched;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            dateSearched \u003d LocalDate.parse(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"invalid date. Put in format \u0027YYYY MM DD\u0027.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (Task i : tasklist.getList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (i instanceof Deadline) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (((Deadline) i).isSameDate(dateSearched)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    response +\u003d \"Task \" + position + \". \" + i.toString() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    dateExists \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    position++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else if (i instanceof Event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (((Event) i).isSameDate(dateSearched)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    response +\u003d \"Task \" + position + \". \" + i.toString() + \"\\n\";;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    dateExists \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    position++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!dateExists) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"No events/deadlines with this date!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 69
    }
  },
  {
    "path": "src/main/java/duke/commands/TimeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Command to find tasks by time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class TimeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create TimeCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description time being searched"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public TimeCommand(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Searches for the time that was keyed in."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasklist list of all the tasks stored in Duke so far."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param storage stores all the tasks being added so far into user\u0027s local storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if tasks with time is not in tasklist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String execute(TaskList tasklist, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasklist !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert storage !\u003d null : \"Storage cannot be null.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be null.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        boolean timeExists \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        LocalTime timeSearched;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            timeSearched \u003d LocalTime.parse(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"invalid Time. Put in format \u0027HH:mm\u0027.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (Task i : tasklist.getList()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            if (i instanceof Deadline) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (((Deadline) i).isSameTime(timeSearched)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    response +\u003d (i.toString()) + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    timeExists \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } else if (i instanceof Event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (((Event) i).isSameTime(timeSearched)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    response +\u003d (i.toString()) + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    timeExists \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (!timeExists) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            throw new DukeException(\"No events/deadlines with this time!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 65
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Type of task which includes end date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String dateorTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create Deadline object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param date date of deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.dateorTime \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Gets the date of deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return date of the deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getDateorTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return dateorTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Reads through LocalDate and LocalTime of deadline in userInput and converts them to Strings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return Formatted String version of LocalDate and LocalTime in input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String convertDateAndTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be empty.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String d1 \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateorTime.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                d1 +\u003d \" \" + LocalDate.parse(descriptions[i]).format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    String decideAMorPm \u003d LocalTime.parse(descriptions[i]).isAfter(LocalTime.NOON) ? \"pm\" : \"am\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    d1 +\u003d \" \" + LocalTime.parse(descriptions[i])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                            .format(DateTimeFormatter.ofPattern(\"hh:mm\")) + decideAMorPm;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    d1 +\u003d \" \" + descriptions[i];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return d1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Checks if the date provided exists in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param date date that is being searched for in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true or false if date is in list or not."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if description provided does not match format of date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isSameDate(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert dateorTime !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateorTime.split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalDate d1 \u003d date;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalDate d2 \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                d2 \u003d LocalDate.parse(descriptions[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                return d2.equals(d1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Checks if the time provided exists in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param time time that is being searched for in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true or false if time is in list or not."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if description provided does not match format of time."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isSameTime(LocalTime time) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert dateorTime !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateorTime.split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalTime t1 \u003d time;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalTime t2 \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                t2 \u003d LocalTime.parse(descriptions[i]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (t2.equals(t1)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    return t2.equals(t1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Checks if the time provided is within an hour of tasks"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param time time that is being searched for in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true or false if time is within an hour of tasks"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * list or not."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if description provided does not match format of time."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isWithinAnHour(LocalTime time) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert dateorTime !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateorTime.split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalTime t1 \u003d time;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalTime t2 \u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                t2 \u003d LocalTime.parse(descriptions[i]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (t2.getHour() - t1.getHour() \u003c\u003d 1 \u0026\u0026 t2.getHour() - t1.getHour() \u003e\u003d -1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Prints out the task in correct format."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return task in the form of a string."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return \"[D][\" + getStatusIcon() + \"] \" + description + \"(by:\" + convertDateAndTime() + \")\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 152
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Type of task which includes date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String dateOrTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create Event object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description specific details of Event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param date when the Event is taking place."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.dateOrTime \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Gets the date of Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return date of the Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return dateOrTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Reads through LocalDate and LocalTime of deadline in userInput and converts them to Strings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return Formatted String version of LocalDate and LocalTime in input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private String convertDateAndTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert description !\u003d null : \"Description cannot be empty.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String d1 \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateOrTime.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                d1 +\u003d \" \" + LocalDate.parse(descriptions[i]).format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    String decideAMorPm \u003d LocalTime.parse(descriptions[i]).isAfter(LocalTime.NOON) ? \"pm\" : \"am\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    d1 +\u003d \" \" + LocalTime.parse(descriptions[i])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                            .format(DateTimeFormatter.ofPattern(\"hh:mm\")) + decideAMorPm;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    d1 +\u003d \" \" + descriptions[i];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return d1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Checks if the date provided exists in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param date date that is being searched for in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true or false if date is in list or not."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if description provided does not match format of date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isSameDate(LocalDate date) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert dateOrTime !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateOrTime.split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalDate d1 \u003d date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalDate d2 \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                d2 \u003d LocalDate.parse(descriptions[i]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                return d2.equals(d1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Checks if the time provided exists in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param time time that is being searched for in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true or false if time is in list or not."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if description provided does not match format of time."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isSameTime(LocalTime time) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert dateOrTime !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateOrTime.split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                LocalTime t1 \u003d time;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                LocalTime t2 \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                t2 \u003d LocalTime.parse(descriptions[i]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (t2.equals(t1)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    return t2.equals(t1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Checks if the time provided is within an hour of tasks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param time time that is being searched for in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true or false if time is within an hour of tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * list or not."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @throws DukeException if description provided does not match format of time."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean isWithinAnHour(LocalTime time) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert dateOrTime !\u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String[] descriptions \u003d dateOrTime.split(\" \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptions.length; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalTime t1 \u003d time;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            LocalTime t2 \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                t2 \u003d LocalTime.parse(descriptions[i]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                if (t2.getHour() - t1.getHour() \u003c\u003d 1 \u0026\u0026 t2.getHour() - t1.getHour() \u003e\u003d -1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Prints out the task in correct format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return task in the form of a string."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return \"[E][\" + getStatusIcon() + \"] \" + description + \"(at:\" + convertDateAndTime() + \")\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 147
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Parent Task class with multiple sub-classes that are different types of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create new Task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description specific details of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Get the details of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return details of the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Checks if the particular task is done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return true or false if task is done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Get the status icon according to whether task is done or not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return status icon, a tick or cross."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Mark a task as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 54
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * List that contains all the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Overloaded Constructor to create TaskList object when a list is already saved in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param tasks list saved in user\u0027s local storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Adds a new task to TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param task task to be added into list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasks !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Removes task from TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param index position of task being deleted in the TaskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasks !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        List\u003cTask\u003e newList \u003d this.tasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        tasks \u003d newList.stream().filter((task) -\u003e tasks.indexOf(task) !\u003d index)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Get task from TaskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param index position of task needed in the TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return task at the index position in TaskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasks !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Gets the size of the TaskList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return the number of tasks in the TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasks !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Gets the entire list of tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return the entire lists of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert tasks !\u003d null : \"Tasklist cannot be null.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 81
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " * Simple task with no date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Constructor to create Todo object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @param description specific details of the todo event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Prints out the task in correct format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * @return task in the form of a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 27
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private BackgroundFill backgroundColor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private DialogBox(String text, Image img, BackgroundFill backgroundColor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert img !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert backgroundColor !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.setBackground("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new Background(backgroundColor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image iv) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert iv !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return new DialogBox(text, iv,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new BackgroundFill(Color.LIGHTBLUE, new CornerRadii(20), new Insets(5, 5, 5, 5)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image iv) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert iv !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        var db \u003d new DialogBox(text, iv,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new BackgroundFill(Color.PINK, new CornerRadii(20), new Insets(5, 3, 5, 5)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public static DialogBox getDukeErrorDialog(String text, Image iv) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assert iv !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        var db \u003d new DialogBox(text, iv,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                new BackgroundFill(Color.INDIANRED, new CornerRadii(20), new Insets(5, 3, 5, 5)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 83
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Doge.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/PepeSad.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Image greetImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/PepeGreet.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Image failImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/PepeSad2.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     * Initializes dialogContainer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String style \u003d \"-fx-background-color: rgba(40,42,47,1);\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        this.dialogContainer.setStyle(style);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        dialogContainer.setSpacing(20);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                DialogBox.getDukeDialog(duke.getGreeting(), greetImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        if (response.startsWith(\"Error\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    DialogBox.getDukeErrorDialog(response.substring(6), failImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 65
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    \u003cFont name\u003d\"Impact\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void doneCommand_noNumberGiven_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Command command \u003d parser.findCommand(\"done five\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            assertEquals(e.getMessage(), \"Hi my friend, you need to give a number.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void todoCommand_noDescriptionGiven_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Command command \u003d parser.findCommand(\"todo\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            assertEquals(e.getMessage(), \"Hi my friend, you don\u0027t even know what you want to do.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void findCommand_wrongCommandGiven_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            Command command \u003d parser.findCommand(\"Todo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            assertEquals(e.getMessage(), \"Hi my friend, type in \u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027 to start!\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"Also, type \u0027schedule\u0027 and key in a date in YYYY-MM-DD format \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"to view schedule on that date!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"Or type \u0027time\u0027 and key in time in HH:mm format \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "                    + \"to search for events/deadline happening on that time!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 41
    }
  },
  {
    "path": "src/test/java/duke/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command command \u003d new ListCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void noList_exceptionThrown() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            command.execute(list, storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            assertEquals(e.getMessage(), \"Hi my friend, there\u0027s nothing on the list yet.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 23
    }
  },
  {
    "path": "src/test/java/duke/commands/ScheduleCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Command command \u003d new ScheduleCommand(\"2020-09-20\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    private TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void scheduleCommandExecution_dateDoesNotExist_exceptionThrown() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            command.execute(list, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "            assertEquals(e.getMessage(), \"Hi my friend, No events/deadlines with this date!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 24
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void deadline_isSameDate_isTrue() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"hi\", \"2020-10-19\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        LocalDate d1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        d1 \u003d LocalDate.parse(\"2020-10-19\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assertEquals(deadline.isSameDate(d1), true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 19
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    public void event_isSameDate_isfalse() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"hi\", \"2020-10-19\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        LocalDate d1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        d1 \u003d LocalDate.parse(\"2020-11-19\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "        assertEquals(deadline.isSameDate(d1), false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 18
    }
  },
  {
    "path": "text-ui-test/data/database.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "T|F|hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "D|F|live |2010-10-10"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "E|F|give |Sunday"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "del .\\data\\duke.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 6,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "if [ -e \"./data/duke.txt\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "    rm ./data/duke.txt"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "fi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IsaacTin"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "IsaacTin": 7,
      "-": 36
    }
  }
]
