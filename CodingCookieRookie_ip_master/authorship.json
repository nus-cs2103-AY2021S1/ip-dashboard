[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.UI.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeRunTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Duke denotes the faithful robot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a Duke robot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param filePath  FilePath to store the data file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    Duke(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        storage.addDirIfRequired();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Bot introduces and gets input from user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        ui.showIntro();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            c.execute(tasks, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Gets file path based on user\u0027s system."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static String getFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Path path \u003d Paths.get(home, \"Duke\", \"data\", \"tasks.text\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Executes all the operations stated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param args  String arrays of operations."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static void main(String[] args) throws DukeRunTimeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        new Duke(getFilePath()).run();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 62,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/UI/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class UI denotes the interface user will use."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Prints out the bot\u0027s introduction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void showIntro() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tHi handsome! My name is Duck. What can I do for you?\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Reads command given by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String task \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 30
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.storage.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Command denotes a command object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String taskInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param commandType  Type of command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Command(CommandType commandType, String taskInfo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Executes a command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks  The list of tasks for user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param storage   Storage object to store task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                isExit \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case PRINT:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                printList(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case MARKTASKDONE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                markTaskDone(tasks, taskInfo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                storage.saveTaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case HANDLETODO:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                handleToDo(tasks, taskInfo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case HANDLEDEADLINE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                handleDeadLine(tasks, taskInfo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case HANDLEVENT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                handleEvent(tasks, taskInfo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            case DELETETASK:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                tasks.deleteTask(taskInfo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                isExit \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (!foundMatchingTasks(tasks, taskInfo)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    throw new DukeInvalidCommandException(\"Sorry handsome but I\u0027m not sure about this command :)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            storage.saveTaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }  catch (DukeInvalidCommandException err) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeIndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeIncompleteCommandException err) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeIOException err) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeDateTimeParseException err) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DukeNumberFormatException err) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(\"\\t\" + err.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Exits Duke programme."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return True if BYE command is called."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (isExit) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.print(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Prints the list of tasks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks  List of tasks to print."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void printList(TaskList tasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(String.format(\"\\t%d. %s\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Marks task with task index in taskInfo as done."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks  List of user\u0027s tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void markTaskDone(TaskList tasks, String taskInfo) throws DukeIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskInfo.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskInfo \u003d taskInfo.replace(\"done\", \"\").trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int taskNo;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            taskNo \u003d Integer.parseInt(taskInfo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (NumberFormatException err){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskNo \u003c 1 || taskNo \u003e tasks.size()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to mark is invalid\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int index \u003d taskNo - 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task task \u003d tasks.remove(index).doneTask();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\t\" + task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks.add(index, task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds todos task to list of tasks."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks  List of user\u0027s tasks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of todos task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void handleToDo(TaskList tasks, String taskInfo) throws DukeInvalidCommandException{"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskInfo.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskInfo \u003d taskInfo.replace(\"todo\", \"\").trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks.addTask(new ToDos(taskInfo));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds deadline task to list of tasks."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks  List of user\u0027s tasks."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of deadline task."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void handleDeadLine(TaskList tasks, String taskInfo) throws DukeInvalidCommandException, DukeDateTimeParseException{"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskInfo \u003d taskInfo.replace(\"deadline\", \"\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] stringArr \u003d taskInfo.split(\"/by\", 2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (stringArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskInfo \u003d stringArr[0].trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String by \u003d stringArr[1].trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks.addTask(new Deadlines(taskInfo, by));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds event task to list of tasks."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks  List of user\u0027s tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of event task."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void handleEvent(TaskList tasks, String taskInfo) throws DukeInvalidCommandException, DukeDateTimeParseException{"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskInfo \u003d taskInfo.replace(\"event\", \"\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] stringArr \u003d taskInfo.split(\"/at\", 2);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (stringArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeInvalidCommandException(\"The command is incomplete handsome :D\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskInfo \u003d stringArr[0].trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String at \u003d stringArr[1].trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        tasks.addTask(new Events(taskInfo, at));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Prints out the task if user input matches any word from task."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param tasks  List of user\u0027s tasks."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of todos task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return True if user input matches any word from any task in tasks list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public boolean foundMatchingTasks(TaskList tasks, String taskInfo) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        boolean matched \u003d false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String[] taskInfos \u003d taskInfo.trim().split(\" \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e matchList \u003d tasks.returnMatchingTasks(taskInfos);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for(int i \u003d 0; i \u003c matchList.size(); i++) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                System.out.println(\"\\tHere are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            System.out.println(String.format(\"\\t%d. %s\", i + 1, matchList.get(i)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            matched \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return matched;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 204
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        duke.command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The enum CommandType denotes the type of command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        PRINT,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        MARKTASKDONE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        HANDLETODO,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        HANDLEDEADLINE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        HANDLEVENT,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        DELETETASK,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        FINDMATCHINGTASK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 18
    }
  },
  {
    "path": "src/main/java/duke/command/DukeIncompleteCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeIncompleteCommandException denotes a Duke IncompleteCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIncompleteCommandException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeIncompleteCommandException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeIncompleteCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DukeIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeIndexOutOfBoundsException denotes a Duke IndexOutOfBoundsException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIndexOutOfBoundsException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeIndexOutOfBoundsException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeIndexOutOfBoundsException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeInvalidCommandException denotes a Duke InvalidCommandException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeInvalidCommandException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeInvalidCommandException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeInvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/command/DukeRunTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeRunTimeException denotes a Duke RunTimeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeRunTimeException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeRunTimeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeRunTimeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.storage.DukeIOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds task to list of tasks based on type specified."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Description of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static Command parse(String taskInfo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        switch(taskInfo) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        case \"bye\" :"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.BYE, taskInfo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        case \"list\" :"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            return new Command(CommandType.PRINT, taskInfo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (taskInfo.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return new Command(CommandType.MARKTASKDONE, taskInfo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else if (taskInfo.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return new Command(CommandType.HANDLETODO, taskInfo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else if (taskInfo.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return new Command(CommandType.HANDLEDEADLINE, taskInfo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else if (taskInfo.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return new Command(CommandType.HANDLEVENT, taskInfo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else if (taskInfo.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return new Command(CommandType.DELETETASK, taskInfo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                   return new Command(CommandType.FINDMATCHINGTASK, taskInfo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 37
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeCompileTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeCompileTimeException denotes a Duke checked exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeCompileTimeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeCompileTimeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeCompileTimeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeCompileTimeException denotes a Duke IOexception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeIOException extends DukeCompileTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeCompileTimeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeIOException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 17
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Storage denotes a storage object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param filePath  file path where data file is stored"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds the respective directories if required."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void addDirIfRequired() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Path path \u003d Paths.get(home, \"Duke\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        boolean dukeDirectoryExists \u003d Files.exists(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!dukeDirectoryExists) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File dir \u003d new File(path.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        path \u003d Paths.get(home, \"Duke\", \"data\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        boolean dataDirectoryExists \u003d Files.exists(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (!dataDirectoryExists) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File dir \u003d new File(path.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Loads the list of tasks from storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            Scanner sc \u003d new Scanner(fis);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                String nextLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                if (nextLine \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    return taskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String[] strArr \u003d nextLine.split(\":\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String taskType \u003d strArr[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    char taskTypeChar \u003d taskType.charAt(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String doneStatus \u003d strArr[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String taskInfo \u003d strArr[2].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String when \u003d strArr.length \u003e 3 ? strArr[3].trim() : \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    switch (taskTypeChar) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    case \u0027T\u0027 :"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        ToDos todo \u003d Integer.parseInt(doneStatus) \u003d\u003d Task.doneNo ?"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                                new ToDos(taskInfo).doneTask() : new ToDos(taskInfo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        taskList.add(todo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    case \u0027D\u0027 :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        Deadlines deadline \u003d Integer.parseInt(doneStatus) \u003d\u003d Task.doneNo ?"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                                new Deadlines(taskInfo, when).doneTask() : new Deadlines(taskInfo, when);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        taskList.add(deadline);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    case \u0027E\u0027 :"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        Events event \u003d Integer.parseInt(doneStatus) \u003d\u003d Task.doneNo ?"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                                new Events(taskInfo, when).doneTask() : new Events(taskInfo, when);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        taskList.add(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            /*A new file will be created when updatelist*/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Saves lists of tasks into storage."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void saveTaskList() throws DukeIOException{"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            for (int i \u003d 0; i \u003c TaskList.taskList.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                Task task \u003d TaskList.taskList.get(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                TaskType taskType \u003d task.returnTaskType();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                char taskTypeChar \u003d taskType.toString().charAt(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                int status \u003d task.returnDoneStatus();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                String taskInfo \u003d task.returnTaskInfo();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                String when \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                switch(taskTypeChar) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                case \u0027D\u0027 :"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    Deadlines deadline \u003d (Deadlines)TaskList.taskList.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    when \u003d \" : \" + deadline.returnTime().trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                case \u0027E\u0027 :"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    Events event \u003d (Events)TaskList.taskList.get(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    when \u003d \" : \" + event.returnTime().trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                String toWrite \u003d taskType.toString().trim() + \" : \" + status + \" : \" + taskInfo.trim() + when;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                bw.write(toWrite);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIOException(\"Sorry handsome but file is not found.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 127
    }
  },
  {
    "path": "src/main/java/duke/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Deadlines denotes a Deadlines task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a Deadlines task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task description information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param by  String description of time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Deadlines(String taskInfo , String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(taskInfo, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            this.localDateTime \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeDateTimeParseException(\"Please input the date and time in yyyy-MM-dd HHmm format with the correct values\\n\\teg. 2014-12-25 1630\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns string description of deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String description of deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String returnTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Return a done deadline task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done deadline task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Deadlines doneTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super.done \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return String.format(\"%s (by: %s)\", super.toString(), dateTimeFormatter.format(this.localDateTime));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 59
    }
  },
  {
    "path": "src/main/java/duke/task/DukeDateTimeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeRunTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeDateTimeParseException denotes a Duke DateTimeParseException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeDateTimeParseException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeDateTimeParseException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "   public DukeDateTimeParseException(String errorMessage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 19
    }
  },
  {
    "path": "src/main/java/duke/task/DukeNumberFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeRunTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class DukeNumberFormatException denotes a Duke DateTimeParseException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class DukeNumberFormatException extends DukeRunTimeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a DukeNumberFormatException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param errorMessage  Error message of the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public DukeNumberFormatException(String errorMessage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 19
    }
  },
  {
    "path": "src/main/java/duke/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Events denotes a Events task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a Events task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task description information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param at  String description of time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Events(String taskInfo , String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(taskInfo, TaskType.EVENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            this.localDateTime \u003d LocalDateTime.parse(at, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeDateTimeParseException(\"Please input the date and time in yyyy-MM-dd HHmm format with the correct values\\n\\teg. 2014-12-25 1630\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns string description of deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return String description of deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String returnTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Return a done events task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done events task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Events doneTask() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super.done \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return String.format(\"%s (at: %s)\", super.toString(), dateTimeFormatter.format(this.localDateTime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Task denotes a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String taskInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private TaskType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final int undoneNo \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static final int doneNo \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task description information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskType  Type of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task(String taskInfo, TaskType taskType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns a done events task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done events task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task doneTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns task type of event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Task type of event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public TaskType returnTaskType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns integer representing status of event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Integer representing status of event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public int returnDoneStatus() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return done ? doneNo : undoneNo;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns description of task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String returnTaskInfo() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskInfo;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String status \u003d done ? \"[✓]\" : \"[✗]\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskType + status + \" \" + taskInfo;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 68
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import duke.command.DukeIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * The class TaskList denotes a task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @author Alvin Chee"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public static List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskList  An ArrayList of tasks to emulate."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Returns size of taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Size of taskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Gets the task based on index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param index  Index of task in taskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Task that is retrieved."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Removes the task based on index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param index  Index of task in taskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return Task that is removed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds the task based at specified index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param index  Index of task in taskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param task  Task to be added to taskList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void add(int index, Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(index, task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Adds the task based at last index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param task  Task to be added to taskList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this task:\" + \"\\n\\t\\t\" + task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Deletes the task based on index in taskInfo"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskInfo  Task information with task index information."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public void deleteTask(String taskInfo) throws DukeIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskInfo.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to delete is invalid\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        String taskNoString \u003d taskInfo.replace(\"delete\", \"\").trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int taskNo;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            taskNo \u003d Integer.parseInt(taskNoString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        } catch (NumberFormatException err){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeNumberFormatException(\"Please input a number for the task you want to delete.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        if (taskNo \u003c 1 || taskNo \u003e taskList.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            throw new DukeIndexOutOfBoundsException(\"The task you want to delete is invalid\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        int index \u003d taskNo - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task t \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(\"\\tNoted. I\u0027ve removed this task:\" + \"\\n\\t\\t\" + t);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public List\u003cTask\u003e returnMatchingTasks(String[] matchWords) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            for (int j \u003d 0; j \u003c matchWords.length; j++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    if (matchWords[j].equals(\"\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        continue;   //In case of having alot of spaces in between two words."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    String pattern \u003d \"\\\\b\" + matchWords[j] + \"\\\\b\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    Pattern p \u003d Pattern.compile(pattern);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    Matcher m \u003d p.matcher(taskList.get(i).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    if (m.find()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                        matchList.add(taskList.get(i));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return matchList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 119
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The enum TaskType denotes the type of task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    TODO (\"[T]\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    DEADLINE (\"[D]\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    EVENT (\"[E]\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    private String taskSymbol;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a task type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param taskSymbol  Symbol representing the type of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    TaskType(String taskSymbol) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        this.taskSymbol \u003d taskSymbol;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return taskSymbol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 28
    }
  },
  {
    "path": "src/main/java/duke/task/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * The class Events denotes a Events task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " * @author Alvin Chee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Constructs a todos task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @param task  Task description information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ToDos(String task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super(task, TaskType.TODO);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * Return a done todos task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     * @return A done todos task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public ToDos doneTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        super.done \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 33
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlinesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class DeadlinesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTime() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"2020-02-12 1330\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Deadlines(\"party\", \"2020-02-12 1330\").returnTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[D][✓] party (by: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Deadlines(\"party\", \"2020-02-12 1330\").doneTask().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[D][✗] party (by: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Deadlines(\"party\", \"2020-02-12 1330\").toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 26
    }
  },
  {
    "path": "src/test/java/duke/task/EventsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class EventsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTime() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"2020-02-12 1330\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Events(\"party\", \"2020-02-12 1330\").returnTime());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[E][✓] party (at: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Events(\"party\", \"2020-02-12 1330\").doneTask().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[E][✗] party (at: 12 Feb 2020 1:30 PM)\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new Events(\"party\", \"2020-02-12 1330\").toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 26
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"sleep\", TaskType.TODO));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void get() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"sleep\", TaskType.TODO));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] sleep\", taskList.get(0).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"sleep\", TaskType.TODO));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] study\", taskList.remove(1).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task sleep \u003d new Task(\"sleep\", TaskType.TODO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.add(1, sleep);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] sleep\", taskList.remove(1).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void addTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task sleep \u003d new Task(\"sleep\", TaskType.TODO);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.addTask(sleep);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        List\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        Task sleep \u003d new Task(\"sleep\", TaskType.TODO);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskArrayList.add(new Task(\"study\", TaskType.TODO));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        TaskList taskList \u003d new TaskList(taskArrayList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.addTask(sleep);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        taskList.deleteTask(\"delete 1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 67
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✓] sleep\", new Task(\"sleep\", TaskType.TODO).doneTask().toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTaskType() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(TaskType.TODO, new Task(\"sleep\", TaskType.TODO).returnTaskType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnDoneStatus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(1, new Task(\"sleep\", TaskType.TODO).doneTask().returnDoneStatus());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void returnTaskInfo() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"sleep\", new Task(\"sleep\", TaskType.TODO).doneTask().returnTaskInfo());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] sleep\", new Task(\"sleep\", TaskType.TODO).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 33
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTypeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class TaskTypeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[E]\", TaskType.EVENT.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 13
    }
  },
  {
    "path": "src/test/java/duke/task/ToDosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "class ToDosTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✓] party\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new ToDos(\"party\").doneTask().toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "        assertEquals(\"[T][✗] party\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "                new ToDos(\"party\").toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 7,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "if [ ! -d \" C:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2\\bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodingCookieRookie"
        },
        "content": "    mkdir C:\\Users\\alvin\\Desktop\\NUS NOTES\\NUS NOTES\\Y2S1\\CS2103\\w2\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "CodingCookieRookie": 2,
      "-": 36
    }
  }
]
