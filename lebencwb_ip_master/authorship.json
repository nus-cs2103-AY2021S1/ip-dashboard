[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected LocalDate deadlineDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.deadlineDate \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void printTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(this.deadlineDate.getMonth().toString()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \" \" + this.deadlineDate.getDayOfMonth()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \" \" + this.deadlineDate.getYear());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"No valid date available.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 39
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \"\\t-------------------------------------------------------\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String STANDARD_GREETING \u003d HORIZONTAL_LINE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"\\n\\tHello! I\u0027m Duke\\n\" + \"\\t\" + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + HORIZONTAL_LINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String GOODBYE_MESSAGE \u003d \"\\tBye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String ERROR_PREFIX \u003d \"\\t\\u2639\" + \" OOPS!!! \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String CURRENT_TASKS \u003d \"\\tNow you have %d task(s) in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String INVALID_TASK \u003d ERROR_PREFIX + \"Sorry, that is not a valid task.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String ADD_TASK \u003d \"\\tGot it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static File createTaskFile() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        File folder \u003d new File(\"../data\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!folder.exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                folder.mkdir();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            File taskFile \u003d new File(\"../data/Duke.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!taskFile.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                taskFile.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return taskFile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"Error in getting file\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static void updateList(String userInput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Scanner inputScanner \u003d new Scanner(userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String command \u003d inputScanner.next();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Files.copy(Paths.get(\"../data/Duke.txt\"), Paths.get(\"../data/temp.txt\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        File copy \u003d new File(\"../data/temp.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        switch (command.toLowerCase()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            int index \u003d inputScanner.nextInt() - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                FileWriter fw \u003d new FileWriter(\"../data/Duke.txt\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Scanner taskScanner \u003d new Scanner(copy);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(\"\\tNice! I\u0027ve marked this as done:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    if (i \u003d\u003d index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        fw.write(task.toFileString() + System.lineSeparator());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        fw.write(taskScanner.nextLine() + System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                taskScanner.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Files.delete(Paths.get(\"../data/temp.txt\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(INVALID_TASK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            index \u003d inputScanner.nextInt() - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                FileWriter fw \u003d new FileWriter(\"../data/Duke.txt\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Scanner taskScanner \u003d new Scanner(copy);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(\"\\tNoted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Task task \u003d list.remove(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(\"\\t\" + task.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(String.format(CURRENT_TASKS, list.size()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    if (i !\u003d index) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        fw.write(taskScanner.nextLine() + System.lineSeparator());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                taskScanner.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                Files.delete(Paths.get(\"../data/temp.txt\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(INVALID_TASK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!inputScanner.hasNext()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(ERROR_PREFIX"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        + \"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(\"../data/Duke.txt\", true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(ADD_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    ToDo todo \u003d new ToDo(inputScanner.nextLine());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    list.add(todo);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"\\t  \" + todo.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(String.format(CURRENT_TASKS, list.size()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.write(todo.toFileString() + System.lineSeparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Files.delete(Paths.get(\"../data/temp.txt\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!inputScanner.hasNext()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(ERROR_PREFIX"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        + \"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(\"../data/Duke.txt\", true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(ADD_TASK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    inputScanner.useDelimiter(\"( /by )\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    String description \u003d inputScanner.next();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    inputScanner.reset();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    inputScanner.next();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    String by \u003d inputScanner.nextLine().trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Deadline deadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    list.add(deadline);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"\\t  \" + deadline.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(String.format(CURRENT_TASKS, list.size()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.write(deadline.toFileString() + System.lineSeparator());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.close();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Files.delete(Paths.get(\"../data/temp.txt\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (!inputScanner.hasNext()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(ERROR_PREFIX"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        + \"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(\"../data/Duke.txt\", true);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(ADD_TASK);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    inputScanner.useDelimiter(\"( /at )\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    String description \u003d inputScanner.next();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    inputScanner.reset();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    inputScanner.next();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    String at \u003d inputScanner.nextLine().trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Event event \u003d new Event(description, at);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    list.add(event);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"\\t  \" + event.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(String.format(CURRENT_TASKS, list.size()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.write(event.toFileString() + System.lineSeparator());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    fw.close();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    Files.delete(Paths.get(\"../data/temp.txt\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"Encountered an unexpected error with the file :(\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(ERROR_PREFIX"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    + \"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        System.out.println(STANDARD_GREETING);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        createTaskFile();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (userInput.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                scanner.close();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (userInput.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                int index \u003d 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                for (Task task : list) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"\\t\" + index++ + \". \" + task.toString());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    System.out.println(\"\\tYou have no tasks in your list :)\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                updateList(userInput);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "lebencwb": 206
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected LocalDate eventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.eventDate \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void printTime() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(this.eventDate.getMonth().toString()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    + \" \" + this.eventDate.getDayOfMonth()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    + \" \" + this.eventDate.getYear());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            System.out.println(\"No valid date available.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 37
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        int stat;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            stat \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"%s | %d | %s\", this.getType(), stat, this.description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 36
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 16
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "lebencwb": 1
    }
  }
]
