[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 16,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Duke is a Personal Assistant Chatbot that helps a user keep track of various things."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** list of tasks to keep track of */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** storage object handling saving and editing of the save file in the hard drive */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** ui object in charge of direct interaction with the user */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Standard constructor initialising the Duke bot."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * It will attempt to search for a pre-saved save file of a previous task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If found, it loads up that task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Otherwise it creates its own which will be saved and able to be opened by future Duke bots."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage \u003d Storage.init();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        taskList \u003d storage.readStoredData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui \u003d new UiDefault();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a Duke bot with the provided ui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * All other settings are the same as the default constructor."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI to be used."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Duke(Ui ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage \u003d storage.init();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        taskList \u003d storage.readStoredData();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Initialises and runs the Duke chat bot. Does not require input arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param args Input arguments."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Runs the duke bot."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * It continuously queries the ui for the next user response and responds appropriately."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.startup();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                String userInput \u003d ui.getInput();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                Command command \u003d CommandParser.parse(userInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ui.outputMessage(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 81,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Represents a general Exception class of Exceptions that occur while DukeException is running."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a DukeException object with a customised error description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param description description of the type of error encountered."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(\"OOPS!!! \" + description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 17
    }
  },
  {
    "path": "src/main/java/duke/DukeGui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.gui.DialogBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * GUI class handling the graphical aspects of the Duke chatbot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DukeGui extends Application implements Ui {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    // JavaFX pieces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    // Images used for the user and the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private boolean isUpdated;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String enteredMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Starts the Duke GUI application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param stage stage for the gui application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        duke \u003d new Duke(this);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        CompletableFuture.runAsync(() -\u003e duke.run());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Displays the opening message to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void startup() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Platform.runLater(() -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.OPENING_MESSAGE, dukeImage)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Handles the user input upon receiving it."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method registers that the use has responded and updates the GUI with the user\u0027s response."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String text \u003d userInput.getText();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        registerResponse(text);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(text, userImage));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Displays the duke\u0027s message to the user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param message message to be sent."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void outputMessage(String message) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Platform.runLater(() -\u003e dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Used to notify the sleeping thread in getInput() to obtain user response asynchronously */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private synchronized void registerResponse(String enteredMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.enteredMessage \u003d enteredMessage;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        isUpdated \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        notifyAll();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the user\u0027s input by waiting for the user to provide an update."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string of the user input"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public synchronized String getInput() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        isUpdated \u003d false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            wait();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isUpdated) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return enteredMessage;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Exits the app."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 168
    }
  },
  {
    "path": "src/main/java/duke/InvalidSaveException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Represents an exception that occurs when the save file being read has issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class InvalidSaveException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Constructs a new \u003ccode\u003eInvalidSaveException\u003c/code\u003e with the given exception message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param message details of the exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public InvalidSaveException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 17
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Main driver class to initiate the chat bot gui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Application.launch(DukeGui.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 15
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Standard user-interface class that handles interactions between the user and the engine."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Standard opening message sent */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String OPENING_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Queries the user for the next command in the form of a string and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string provided by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getInput();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Notifies the user with the given message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param message message to be sent."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void outputMessage(String message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Initialises Ui."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void startup();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Exits the application and closes Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void exit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 38
    }
  },
  {
    "path": "src/main/java/duke/UiDefault.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class UiDefault implements Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    //Constants used when formatting the bot\u0027s message"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String LINE_BREAK \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String PRESPACING \u003d \"     \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Constructs a new default UI that uses the system I/O for input and output."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public UiDefault() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Sends the opening message to the output."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void startup() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        outputMessage(Ui.OPENING_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Queries the System input stream for the next command in the form of a string and returns it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string provided by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Notifies the System output stream with the given message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param message message to be sent."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void outputMessage(String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        System.out.println(processString(message));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a formatted String according to the needs of the specific implementation of Ui."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param string message to be sent."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted message that will be sent."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static String processString(String string) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return LINE_BREAK + PRESPACING"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + string.replaceAll(\"\\n\", \u0027\\n\u0027 + PRESPACING)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + \u0027\\n\u0027 + LINE_BREAK;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 64
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.TaskParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that adds a new Task to the given TaskList and broadcasts the appropriate update."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Task to be added when execute is performed */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor which is not able to handle String inputs directly. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private AddCommand(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an AddCommand made from the appropriate string put."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * This is a static factory method which handles invalid formats as well."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskCommand String input of the form \"add {task description}\"."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that adds the task to the task list when executed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the description of the command is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static AddCommand parse(String taskCommand) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new AddCommand(TaskParser.parse(taskCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds the stored task to the taskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(createAddMessage(task, taskList));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a formatted message for when a task is added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param task task added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList task list that the task was added to."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String createAddMessage(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return ADDED_MESSAGE + \u0027\\n\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + \"   \" + task + \u0027\\n\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + taskList.createTaskNumberCountMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 67
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Executable command that handles manipulation of Tasks between TaskList, Ui and Storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Sub-classes have to implement the execute command that dictates what movement is performed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Commands can also be adjusted to terminate the overall Duke program by adjusting the isExit() method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a boolean to tell the program if it should exit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return true if the program should exit after executing, false otherwise"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Executes some manipulation of Task between taskList, ui and storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 34
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class handles the parsing of Strings into the appropriate type of command objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** exit-type string indicator */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_CLOSING \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** list-type string indicator */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** done-type string indicator */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** delete-type string indicator */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String INDICATOR_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the appropriate command type based on the string input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method uses the first word to determine that type of command to create."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param userInput string containing the command to be created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object corresponding to the details provided."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the user input given is invalid, with the reason provided."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String firstWord \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case INDICATOR_CLOSING:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return ExitCommand.create();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case INDICATOR_LIST:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return ListCommand.create();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case INDICATOR_DONE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DoneCommand.parse(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case INDICATOR_DELETE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DeleteCommand.parse(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case INDICATOR_FIND:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return FindCommand.parse(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return AddCommand.parse(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that deletes a Task (by index) from the TaskList and broadcasts the appropriate update."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String DELETE_MESSAGE \u003d \"Noted. I\u0027ve removed this task: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Index of item to be deleted from the task list. Index starts at 1 */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private int itemIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor which is not able to handle String inputs directly. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private DeleteCommand(int itemIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.itemIndex \u003d itemIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a DeleteCommand made from the appropriate string put."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * This is a static factory method which handles invalid formats as well."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param command String input of the form \"delete {index}\" (index starts at 1)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that deletes the designated task when executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the command given is invalid, with the reason provided."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static DeleteCommand parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d command.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a task to delete!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            taskNumber \u003d Integer.parseInt(details[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Invalid number input!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Deletes the task corresponding to the index from the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the number provided is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (itemIndex \u003e taskList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"No such item on the list!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (itemIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please enter a valid number between 0 and \" + taskList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Task removedTask \u003d taskList.remove(itemIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(createDeleteMessage(removedTask, taskList));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a formatted message for when a task is deleted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskRemoved task that was removed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList task list where the task was deleted from."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String createDeleteMessage(Task taskRemoved, TaskList taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return DELETE_MESSAGE + \u0027\\n\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + \"   \" + taskRemoved + \u0027\\n\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + taskList.createTaskNumberCountMessage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 83
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that marks the designated task as complete and broadcasts the appropriate update."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is marked as done */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Index of task to be marked as complete */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private int doneIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor which is not able to handle String inputs directly. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private DoneCommand(int doneIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.doneIndex \u003d doneIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an DoneCommand made from the appropriate string put."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * This is a static factory method which handles invalid formats as well."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param command String input of the form \"done {index}\" (index starts at 1)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that marks the task as done when executed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the command given is invalid, with the reason provided."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static DoneCommand parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a task to complete!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            taskNumber \u003d Integer.parseInt(details[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Invalid number input!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Marks the index of the designated task as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the number provided is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (doneIndex \u003e taskList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"No such item on the list!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (doneIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please enter a valid number between 0 and \" + taskList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Task doneTask \u003d taskList.get(doneIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (doneTask.isCompleted()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            ui.outputMessage(createAlreadyDoneMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            doneTask.markDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            ui.outputMessage(createDoneMessage(doneTask));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            storage.updateFile(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a formatted message for when a task is done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDone task marked as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String createDoneMessage(Task taskDone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return DONE_MESSAGE + \"\\n   \" + taskDone;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String createAlreadyDoneMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return \"Task has already been marked as completed!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 92
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that signals exiting the bot and broadcasts the appropriate update."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String CLOSING_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the default implementation of an ExitCommand to signal Exiting the bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return exit command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static ExitCommand create() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Signals exit to the bot."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The command does not perform any manipulation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method also broadcasts an update through the UI and updates the storage file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(getClosingText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Method used to create the closing message. For now it just returns the pre-determined message. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String getClosingText() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return CLOSING_MESSAGE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns true to signal to the bot that it is time to exit."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 55
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that searches Tasks with the given string and sends the appropriate update."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when messages are found */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String FOUND_MESSAGE \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when no messages are found */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String NONE_FOUND_MESSAGE \u003d \"It seems there were no matches!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Reference string to search for */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private final String searchString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor unable to parse the direct user input. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private FindCommand(String searchString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an FindCommand made from the appropriate string put."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * This is a static factory method which handles invalid formats as well."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param command String input of the form \"find {search string}\"."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return command object that finds the tasks containing the search string when executed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the command given does not provide a string to search for."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static FindCommand parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a keyword/keyphrase to search!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new FindCommand(details[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Finds the tasks whose description contains the search string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method then broadcasts an update through the UI."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TaskList matchingTasks \u003d getMatchingTasks(searchString, taskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(createFindMessage(matchingTasks));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a list of tasks all of which have their descriptions containing the search string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param searchString string to be matched."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList list of tasks to be searched."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return list of tasks which contain the string in their description."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected TaskList getMatchingTasks(String searchString, TaskList taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        TaskList matchingList \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (task.getTaskDescription().contains(searchString)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                matchingList.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return matchingList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a formatted message for finding tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Edit this to adjust the message sent when the command is executed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList list of tasks containing the search string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return formatted String notifying of the update."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected String createFindMessage(TaskList taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return NONE_FOUND_MESSAGE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return FOUND_MESSAGE + \u0027\\n\u0027 + taskList.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 92
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Command that outputs the current state of the task list as an update."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when a Task is added */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String LIST_HEADER \u003d \"Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Default message to be sent when no tasks are found in the list */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String EMPTY_LIST_MESSAGE \u003d \"You have no tasks on your list!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a standard List command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return list command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static ListCommand create() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Executes the list command which outputs the elements in the task list to the given ui."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The command does not perform any manipulation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList List of Tasks to work with."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param ui UI element to be used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param storage Storage element to be used."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            message \u003d EMPTY_LIST_MESSAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            message \u003d LIST_HEADER + \u0027\\n\u0027 + taskList.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ui.outputMessage(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 46
    }
  },
  {
    "path": "src/main/java/duke/datetime/DateTimeHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class specifically meant to handle string inputs and convert them into LocalDateTime objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DateTimeHandler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String representing standard datetime format used */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String STANDARD_DATETIME_FORMAT_STRING \u003d \"dd-MM-uuuu HHmm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String representing standard time format */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String STANDARD_2400_FORMAT_STRING \u003d \"HHmm\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** DateTimeFormatter object of standard datetime format */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final DateTimeFormatter STANDARD_DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            STANDARD_DATETIME_FORMAT_STRING);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** DateTimeFormatter object of standard time format */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final DateTimeFormatter STANDARD_2400_FORMAT \u003d DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            STANDARD_2400_FORMAT_STRING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a LocalDateTime object from the parsed string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * This method handles invalid string formats as well."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param dateTime string to be converted into LocalDateTime object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return LocalDateTime object from the details given."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the format of the datetime string is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return LocalDateTime.parse(dateTime, STANDARD_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(dateTime + \" is an invalid datetime format! Please use \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + STANDARD_DATETIME_FORMAT_STRING + \" (24hr)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a pair of LocalDateTime objects from the parsed event timings string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * This method handles invalid string formats as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Besides invalid format, this method checks that the latter timing is later than the earlier timing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param eventTiming string to be converted into a pair of LocalDateTime objects."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return pair of LocalDateTime objects from the details given."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the format of the event-timing string is invalid or end timing later than start."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Pair\u003cLocalDateTime, LocalDateTime\u003e parseEventTimings(String eventTiming) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int acceptableLength1 \u003d STANDARD_DATETIME_FORMAT_STRING.length() + 1 + STANDARD_2400_FORMAT_STRING.length();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int acceptableLength2 \u003d STANDARD_DATETIME_FORMAT_STRING.length() * 2 + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (eventTiming.length() !\u003d acceptableLength1 \u0026\u0026 eventTiming.length() !\u003d acceptableLength2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(getEventStringFormatError(eventTiming));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String firstTiming \u003d eventTiming.substring(0, STANDARD_DATETIME_FORMAT_STRING.length());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String secondTiming \u003d eventTiming.substring(STANDARD_DATETIME_FORMAT_STRING.length() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            LocalDateTime dateTime1 \u003d LocalDateTime.parse(firstTiming, STANDARD_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            LocalDateTime dateTime2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (secondTiming.length() \u003d\u003d STANDARD_DATETIME_FORMAT_STRING.length()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                dateTime2 \u003d LocalDateTime.parse(secondTiming, STANDARD_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                LocalTime time \u003d LocalTime.parse(secondTiming, STANDARD_2400_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                dateTime2 \u003d LocalDateTime.of(dateTime1.toLocalDate(), time);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (dateTime2.compareTo(dateTime1) \u003c 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                throw new DukeException(\"End timing must be later than start timing!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Pair.of(dateTime1, dateTime2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(getEventStringFormatError(eventTiming));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Returns a formatted error message for the parseEventTimings method */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static String getEventStringFormatError(String eventTiming) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return eventTiming + \" is not a valid event timing. Please use either\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_DATETIME_FORMAT_STRING + \" (24hr)\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                + STANDARD_DATETIME_FORMAT_STRING + \"-\" + STANDARD_2400_FORMAT_STRING + \" (24hr)\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 98
    }
  },
  {
    "path": "src/main/java/duke/gui/CircleImage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * A class for creating images with a circular frame."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * The class provides a single static method that creates a circular image from an image and a specified radius."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * To be used with JavaFX."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class CircleImage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a JavaFX node of the image with a circular frame."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param circleRadius radius of the circle."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param image image to be used to fill the circle."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return circle with the provided radius and image as fill."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Circle createCircleImage(double circleRadius, Image image) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Circle background \u003d new Circle(circleRadius);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        background.setFill(new ImagePattern(image));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return background;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 28
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * JavaFX node of a dialog box consisting of a picture and a text box."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** default radius of user\u0027s image in the dialog box */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private static final double IMAGE_RADIUS \u003d 35.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** text to be contained in the text box */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private TextBox text;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** image to be used in the dialog box */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Circle displayPicture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** constructs a dialog box from the given text, image and direction */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private DialogBox(String text, Image image, boolean left) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.text \u003d left"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ? TextBox.leftwardTextBox(text)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                : TextBox.rightwardTextBox(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        displayPicture \u003d CircleImage.createCircleImage(IMAGE_RADIUS, image);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        getChildren().addAll(this.text, displayPicture);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        setSpacing(10.0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a JavaFX dialog box with the user\u0027s message and a given image."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param userMessage message sent by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param image image of the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return a javaFX node containing the user\u0027s image and the user\u0027s text."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static DialogBox getUserDialog(String userMessage, Image image) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new DialogBox(userMessage, image, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a JavaFX dialog box with duke\u0027s message and a given image."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param dukeMessage message sent by duke."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param image image of duke."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return a javaFX node containing the duke\u0027s image and the duke\u0027s text."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static DialogBox getDukeDialog(String dukeMessage, Image image) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        DialogBox box \u003d new DialogBox(dukeMessage, image, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        box.flip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return box;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 71
    }
  },
  {
    "path": "src/main/java/duke/gui/TextBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import javafx.scene.shape.SVGPath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * A JavaFX node representing a text box as is usually seen in apps like Telegram and Messenger."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TextBox extends VBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Constructs a text box with the relevant text placed in a chat bubble."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The text box can be constructed to be leftward or rightward facing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param text text to be placed in the text box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param left boolean for whether the text box should be left facing (or right otherwise)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private TextBox(String text, boolean left) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        //Create text surrounded by a background with rounded corners"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        CornerRadii cornerRadii \u003d left"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                ? new CornerRadii(0, 10, 10, 10, false)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                : new CornerRadii(10, 0, 10, 10, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        BackgroundFill backgroundFill \u003d new BackgroundFill(Color.SKYBLUE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                cornerRadii,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                new Insets(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Background textBackground \u003d new Background(backgroundFill);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Label textLabel \u003d new Label(text);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        textLabel.setWrapText(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        textLabel.setBackground(textBackground);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        textLabel.setPadding(new Insets(5, 10, 5, 10));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        //Adds a small triangle to the appropriate side to mimic a text box"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        HBox hBox \u003d new HBox();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        SVGPath lowerTriangle \u003d new SVGPath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        lowerTriangle.setFill(Color.SKYBLUE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (left) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            lowerTriangle.setContent(\"M0,0 L10,10 L10,0 L0,0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            hBox.getChildren().addAll(lowerTriangle, textLabel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            lowerTriangle.setContent(\"M0,0 L-10,10 L-10,0 L0,0\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            hBox.getChildren().addAll(textLabel, lowerTriangle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        hBox.setSpacing(-1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Rectangle verticalGap \u003d new Rectangle(0, 10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        getChildren().addAll(verticalGap, hBox);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a JavaFX text box node with the contained text and leftward facing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param text text to be contained within the text box."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return a JavaFX node of a text box with the contained text."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static TextBox leftwardTextBox(String text) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new TextBox(text, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a JavaFX text box node with the contained text and rightward facing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param text text to be contained within the text box."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return a JavaFX node of a text box with the contained text."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static TextBox rightwardTextBox(String text) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new TextBox(text, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 75
    }
  },
  {
    "path": "src/main/java/duke/storage/PrintSummary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates classes that can be summarised with the getSummary() method to be stored."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Classes that implement this interface must also have a \u003ccode\u003ereconstruct(String summary)\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * method that recreates the object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public interface PrintSummary {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The object must be able to be reconstructed from the summary."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string representing the details of the object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 18
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.InvalidSaveException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class encapsulating all the methods required to read and write directly to the hard drive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Path to search for the saved file to load or update */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Private constructor to set the file path */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Storage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Initialises and returns the Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * The method first attempts to search for a pre-saved list in a fixed location."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * If it is not found, the method will create such a directory and file to write and save future updates."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return Storage object for updating changes to the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Storage init() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String filePath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        File directory \u003d new File(filePath + \"/data\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        filePath \u003d filePath + \"/data/duke.txt\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new Storage(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a task list of the stored data in the file found in the file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * It interprets the text found in the file to recreate the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task list with items corresponding to what was found in the saved file or empty if a file was not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TaskList readStoredData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                String line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    taskList.add(createTask(line));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                } catch (InvalidSaveException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    System.err.println(\"Not a valid line: \" + line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (FileNotFoundException e1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            } catch (IOException e2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                e2.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a task from the provided string summary of the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskSummary string details of the task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task corresponding to the summary."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws InvalidSaveException if the symbol read is not a valid symbol of a task type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected Task createTask(String taskSummary) throws InvalidSaveException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String identifier \u003d taskSummary.split(\"\\\\|\", 2)[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        switch (identifier) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case Event.SYMBOL:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Event.reconstructFromSummary(taskSummary);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case ToDo.SYMBOL:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return ToDo.reconstructFromSummary(taskSummary);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case Deadline.SYMBOL:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return Deadline.reconstructFromSummary(taskSummary);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(identifier + \" is not a valid type symbol!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Writes the new task list\u0027s details into the file at the file path."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskList updated task list to be saved."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void updateFile(TaskList taskList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            FileWriter writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                if (isFirst) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    isFirst \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    writer.write(task.getSummary());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    writer.write(\u0027\\n\u0027 + task.getSummary());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 127
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.InvalidSaveException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.datetime.DateTimeHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates Tasks with deadlines."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Object carries information of the task to be completed and the deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String separator used to separate the task description from the dateline */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SPLITTER \u003d \" /by \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Symbol representing the type of Task this is */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Deadline of the task */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new Deadline object from the full deadline description that includes the deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription description of the Deadline object with both the task and the deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the string provided to create the deadline is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Deadline(String taskDescription) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(taskDescription.split(SPLITTER)[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d taskDescription.split(SPLITTER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a deadline!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (details.length \u003e 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please follow the format of \\\"{task} /by {deadline}\\\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        deadline \u003d DateTimeHandler.parseDateTime(taskDescription.split(SPLITTER)[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new Deadline object by manually inputting description and the deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param deadlineDescription description of the task only."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param deadline string description of the deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the deadline provided has an invalid datetime format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Deadline(String deadlineDescription, String deadline) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(deadlineDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.deadline \u003d DateTimeHandler.parseDateTime(deadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the String representation of the object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updated from the superclass Task to include the type of task and the deadline."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string representing a Deadline task with a \"[D]\" identifier and the deadline at the back."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"[%s]%s (by: %s)\", SYMBOL, super.toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTimingString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Returns a string of the deadline in the standard format */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String getTimingString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the Deadline."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string containing type, completion status, description and timing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"%s|%d|%s|%s\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                SYMBOL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                isCompleted() ? 1 : 0,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTaskDescription(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTimingString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an Deadline object corresponding to the summary given."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param summary string summary of the Deadline object to be reconstructed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return Deadline object representing the summary given."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws InvalidSaveException if the summary in the save file is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Deadline reconstructFromSummary(String summary) throws InvalidSaveException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d summary.split(\"\\\\|\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length !\u003d 4) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Wrong number of details!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(details[1].equals(\"1\") || details[1].equals(\"0\"))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isDone \u003d details[1].equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(details[2], details[3]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                newDeadline.markDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return newDeadline;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Invalid datetime format in save!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 114
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.InvalidSaveException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.datetime.DateTimeHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates an Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Event are tasks that we have to attend at a given time slot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Symbol representing the type of Task this is */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SYMBOL \u003d \"E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** String separator used to separate the task description and the timing*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SPLITTER \u003d \" /at \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Timing of the start of event */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private LocalDateTime startTiming;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Timing of the end of event */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private LocalDateTime endTiming;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates an Event object with the given event description and timing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription full description of the event including task and timing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the format of the description is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Event(String taskDescription) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(taskDescription.split(SPLITTER)[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d taskDescription.split(SPLITTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please specify a timing!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (details.length \u003e 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"Please follow the format of \\\"{task} /at {deadline}\\\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        processEventTimingString(taskDescription.split(SPLITTER)[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new Event object by manually setting the description and timing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param eventDescription description of the event task only."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param timing string description of the timing of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the timing provided for the event has an invalid format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Event(String eventDescription, String timing) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(eventDescription);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        processEventTimingString(timing);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Processes an event timing String by assigning the pair of start and end timings to the properties."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param timing String containing the details of the start and end timing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the timing provided for the event has an invalid format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private void processEventTimingString(String timing) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Pair\u003cLocalDateTime, LocalDateTime\u003e pair \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                DateTimeHandler.parseEventTimings(timing);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        startTiming \u003d pair.getFirst();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        endTiming \u003d pair.getSecond();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the String representation of the object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updated from the superclass Task to include the type of Task this object is and include the timing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return returns a String representing an Event with a \"[E]\" identifier and timing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"[%s]%s (at: %s)\", SYMBOL, super.toString(), getTimingString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Returns a string of the timings corresponding to this event */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String getTimingString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (startTiming.toLocalDate().equals(endTiming.toLocalDate())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(startTiming)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + \"-\" + DateTimeHandler.STANDARD_2400_FORMAT.format(endTiming.toLocalTime());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return DateTimeHandler.STANDARD_DATETIME_FORMAT.format(startTiming) + \"-\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                    + DateTimeHandler.STANDARD_DATETIME_FORMAT.format(endTiming);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the Event."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string containing type, completion status, description and timing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"%s|%d|%s|%s\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                SYMBOL,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                isCompleted() ? 1 : 0,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTaskDescription(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTimingString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an Event object corresponding to the summary given."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param summary string summary of the Event object to be reconstructed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return Event object representing the summary given."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws InvalidSaveException if the summary in the save file is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Event reconstructFromSummary(String summary) throws InvalidSaveException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d summary.split(\"\\\\|\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length !\u003d 4) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Wrong number of details!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(details[1].equals(\"1\") || details[1].equals(\"0\"))) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            Event event \u003d new Event(details[2], details[3]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            boolean isDone \u003d details[1].equals(\"1\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                event.markDone();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Invalid datetime format in save!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 132
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.storage.PrintSummary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates a Task with a description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Task can be completed and will be mark as done. By default, it is initialised as incomplete."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public abstract class Task implements PrintSummary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** description of the task */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** boolean flag indicating completion of the task */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a new incomplete Task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a tick or cross String depending on whether the task is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return tick if the task is completed, a cross otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a String representation of the Task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return String representing the task, showing its status and description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the task description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string of task description."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the state of th:we Task, whether it is completed or not."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return true if the task is completed, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Marks the task as complete."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the Task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Implementing classes should also implement a static method to reconstruct the object from the summary."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string summarising the object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public abstract String getSummary();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 81
    }
  },
  {
    "path": "src/main/java/duke/task/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Class handles parsing of strings inputs (from users) into the apporpriate task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** todo-type task indicator */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String TO_DO \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** deadline-type task indicator */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** event-type task indicator */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** collections of the valid indicator strings */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected static final List\u003cString\u003e VALID_TASK_TYPES;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        VALID_TASK_TYPES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        VALID_TASK_TYPES.add(TO_DO);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        VALID_TASK_TYPES.add(DEADLINE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        VALID_TASK_TYPES.add(EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Parses a task description and returns the corresponding task if the description is valid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription description of the task, starting with the type as the first word."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task corresponding to the description given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws DukeException if the commaand given is not a valid type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static Task parse(String taskDescription) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d taskDescription.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length \u003d\u003d 1 \u0026\u0026 VALID_TASK_TYPES.contains(details[0])) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(\"The description of a \" + details[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Task addedTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        switch (details[0]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case TO_DO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addedTask \u003d new ToDo(details[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addedTask \u003d new Deadline(details[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            addedTask \u003d new Event(details[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new DukeException(details[0] + \" is not a valid type of command!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return addedTask;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 60
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.InvalidSaveException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Encapsulates Tasks that are to be completed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Object only carries information about the task to be completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Symbol representing the type of Task this is */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static final String SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Creates a ToDo object with the given task description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param taskDescription description of the task to be done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public ToDo(String taskDescription) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        super(taskDescription);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the String representation of the object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Updated from the superclass Task to include the type of Task this object is."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string representing the ToDo task with a \"[T]\" identifier."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return \"[\" + SYMBOL + \"]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a summary of the ToDo."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string containing type, completion status and description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"%s|%d|%s\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                SYMBOL,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                isCompleted() ? 1 : 0,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                getTaskDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a ToDo object corresponding to the summary given."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param summary string summary of the ToDo object to be reconstructed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return ToDo object representing the summary given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @throws InvalidSaveException if the summary in the save file is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static ToDo reconstructFromSummary(String summary) throws InvalidSaveException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String[] details \u003d summary.split(\"\\\\|\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (details.length !\u003d 3) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Wrong number of details!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } else if (!(details[1].equals(\"1\") || details[1].equals(\"0\"))) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            throw new InvalidSaveException(\"Invalid completion status! Ensure that it is either 0 or 1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        boolean isDone \u003d details[1].equals(\"1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo newToDo \u003d new ToDo(details[2]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            newToDo.markDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return newToDo;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 69
    }
  },
  {
    "path": "src/main/java/duke/util/Pair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Utility class representing a pair of objects, possibly of different types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * @param \u003cT\u003e Type of the first object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * @param \u003cU\u003e Type of the second object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private T first;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private U second;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** Constructs the pair object from the objects provided */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    private Pair(T first, U second) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the first object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return the first object in the pair."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public T getFirst() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return this.first;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the second object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return the second object in the pair."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public U getSecond() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return this.second;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a pair object containing the two objects provided as arguments."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param first first object in the pair."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param second second object in the pair."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param \u003cT\u003e type of the first object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param \u003cU\u003e type of the second object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return a pair object containing both objects."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T first, U second) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return new Pair\u003c\u003e(first, second);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return String.format(\"(%s, %s)\", first, second);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 55
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * An aggregation of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * Functions largely similar to java.util.List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /** List of tasks stored */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    protected List\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Constructs a new task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the task at the provided index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Note that index starts at 1."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param index index of the task to be returned from the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task at the index provided."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.get(index - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Removes and returns the task at the provided index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Note that index starts at 1."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @param index index of the task to be removed from the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return task removed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.remove(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns an iterator for the tasks inside the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return iterator object for the tasks in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.iterator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return size of task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return listOfTasks.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            if (count !\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                builder.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            builder.append(count++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Returns a customised string message for the number of tasks in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * @return string informing the user about the number of tasks in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public String createTaskNumberCountMessage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        return \"Now you have \" + listOfTasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 96
    }
  },
  {
    "path": "src/test/java/duke/datetime/DateTimeHandlerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static duke.datetime.DateTimeHandler.STANDARD_DATETIME_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static duke.datetime.DateTimeHandler.parseDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static duke.datetime.DateTimeHandler.parseEventTimings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DateTimeHandlerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseDateTime_validStrings_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String time1 \u003d \"24-09-2000 1800\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String time2 \u003d \"24-12-2020 0100\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected1 \u003d \"2000-09-24T18:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected2 \u003d \"2020-12-24T01:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        LocalDateTime localDateTime1 \u003d parseDateTime(time1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected1, localDateTime1.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected2, parseDateTime(time2).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(time1, STANDARD_DATETIME_FORMAT.format(localDateTime1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseDateTime_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"abcde\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"24-09-2020 100\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String invalidError \u003d \"is an invalid datetime format! Please use\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseDateTime(input1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseDateTime(input2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseEventTimings_validStrings_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"24-09-2000 1800-2000\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"24-09-2000 1800-26-09-2000 2000\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected1 \u003d \"(2000-09-24T18:00, 2000-09-24T20:00)\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expected2 \u003d \"(2000-09-24T18:00, 2000-09-26T20:00)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected1, parseEventTimings(input1).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expected2, parseEventTimings(input2).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParseEventTimings_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"abcde\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"24-09-2000 180026-09-2000 2000\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input3 \u003d \"22-09-2000 1800 20-09-2000 2000\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input4 \u003d \"22-09-2000 1800-1600\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String invalidError \u003d \" is not a valid event timing. Please use either\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String endEarlierThanStartError \u003d \"End timing must be later than start timing!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(invalidError));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(endEarlierThanStartError));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            parseEventTimings(input4);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(endEarlierThanStartError));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 92
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * JUnit test class to test the Deadline class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Deadline created with valid timing strings will be successful."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createDeadline_validStrings_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /by 21-09-2020 0800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"meeting /by 23-09-2020 1000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output1 \u003d \"[D][\\u2718] meeting (by: 21-09-2020 0800)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output2 \u003d \"[D][\\u2713] meeting (by: 23-09-2020 1000)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(input2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        deadline2.markDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output1, new Deadline(input1).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output2, deadline2.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Deadline class correctly rejects invalid String inputs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createDeadline_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input1 \u003d \"meeting /by abcde\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Deadline(input1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\" is an invalid datetime format! Please use \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input2 \u003d \"meeting\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Deadline(input2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please specify a deadline!\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests 1. if the summary comes out in the form required and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * 2. The same Deadline can be recreated from the summary."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testSummary_standardDeadlines_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /by 21-09-2020 0800\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"carnival@park /by 23-10-2020 0800\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Deadline event1 \u003d new Deadline(input1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event1.markDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Deadline event2 \u003d new Deadline(input2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary1 \u003d event1.getSummary();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary2 \u003d event2.getSummary();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary1 \u003d \"D|1|meeting|21-09-2020 0800\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary2 \u003d \"D|0|carnival@park|23-10-2020 0800\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary1, summary1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary2, summary2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event1.toString(), Deadline.reconstructFromSummary(summary1).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event2.toString(), Deadline.reconstructFromSummary(summary2).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 72
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " * JUnit test class for testing the Event class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Event created with valid timing strings will be successful."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createEvent_validStrings_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /at 21-09-2020 0800-1000\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"meeting /at 21-09-2020 0800-21-09-2020 1000\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input3 \u003d \"meeting /at 21-09-2020 0800-23-09-2020 1000\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output1 \u003d \"[E][\\u2718] meeting (at: 21-09-2020 0800-1000)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output2 \u003d \"[E][\\u2718] meeting (at: 21-09-2020 0800-1000)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output3 \u003d \"[E][\\u2713] meeting (at: 21-09-2020 0800-23-09-2020 1000)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Event event3 \u003d new Event(input3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event3.markDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output1, new Event(input1).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output2, new Event(input2).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output3, event3.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the Event correctly rejects invalid String inputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createEvent_invalidStrings_errorThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input1 \u003d \"meeting /at 21-09-2020 0800-20-09-2020 0800\"; //End timing earlier than start time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Event(input1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"End timing must be later than start timing!\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input2 \u003d \"meeting /at abcde\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Event(input2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid event timing. Please use either\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            String input3 \u003d \"meeting /at 21-09-2020 2020- 21-09-2020 20:30\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            new Event(input3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid event timing. Please use either\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests 1. if the summary comes out in the form required and"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * 2. The same Event can be recreated from the summary."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testSummary_standardEvents_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting /at 21-09-2020 0800 21-09-2020 1000\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"carnival@park /at 23-10-2020 0800 05-11-2020 2300\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Event event1 \u003d new Event(input1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event1.markDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        Event event2 \u003d new Event(input2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary1 \u003d event1.getSummary();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary2 \u003d event2.getSummary();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary1 \u003d \"E|1|meeting|21-09-2020 0800-1000\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary2 \u003d \"E|0|carnival@park|23-10-2020 0800-05-11-2020 2300\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary1, summary1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary2, summary2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event1.toString(), Event.reconstructFromSummary(summary1).toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event2.toString(), Event.reconstructFromSummary(summary2).toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 85
    }
  },
  {
    "path": "src/test/java/duke/task/TaskParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class TaskParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParse_validStrings_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String toDoInput \u003d \"something\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(new ToDo(toDoInput).toString(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                TaskParser.parse(TaskParser.TO_DO + \" \" + toDoInput).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String deadlineInput \u003d \"homework /by 20-12-2020 2359\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(new Deadline(deadlineInput).toString(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                TaskParser.parse(TaskParser.DEADLINE + \" \" + deadlineInput).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String eventInput \u003d \"gaming /at 20-12-2020 2200-2359\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(new Event(eventInput).toString(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "                TaskParser.parse(TaskParser.EVENT + \" \" + eventInput).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testParse_invalidString_errorThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"wrong abcde /by 20-12-2020 2359\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"to do something\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            TaskParser.parse(input1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid type of command!\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            TaskParser.parse(input2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "            assertTrue(e.getMessage().contains(\"is not a valid type of command!\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 48
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests to see if the ToDo created strings will be successful."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void createToDo_validStrings_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"clown around\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output1 \u003d \"[T][\\u2718] meeting\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String output2 \u003d \"[T][\\u2713] clown around\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo toDo2 \u003d new ToDo(input2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        toDo2.markDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output1, new ToDo(input1).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(output2, toDo2.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * Tests 1. if the summary comes out in the form required and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     * 2. The same ToDo can be recreated from the summary."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    public void testSummary_standardToDos_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input1 \u003d \"meeting\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String input2 \u003d \"attend carnival park\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo event1 \u003d new ToDo(input1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        event1.markDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        ToDo event2 \u003d new ToDo(input2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary1 \u003d event1.getSummary();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String summary2 \u003d event2.getSummary();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary1 \u003d \"T|1|meeting\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        String expectedSummary2 \u003d \"T|0|attend carnival park\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary1, summary1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(expectedSummary2, summary2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event1.toString(), ToDo.reconstructFromSummary(summary1).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "        assertEquals(event2.toString(), ToDo.reconstructFromSummary(summary2).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 62
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chan-j-d"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chan-j-d": 1,
      "-": 20
    }
  }
]
