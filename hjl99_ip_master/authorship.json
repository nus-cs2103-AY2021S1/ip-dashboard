[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.6.2\u0027"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-params\u0027, version: \u00275.6.2\u0027"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.6.2\u0027"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"applicationDefaultJvmArgs \u003d [\"-Dfile.encoding\u003dutf-8\"]"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"        showStandardStreams \u003d true"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"    toolVersion \u003d \u00278.36\u0027"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"    enableAssertions \u003d true"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":""}],"authorContributionMap":{"hjl99":28,"-":42}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"### Feature 1: Help"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"Displays command guide for users, with all command formats listed down."},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"### Feature 2:  View Tasks"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"Displays all tasks stored in the current task list."},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"### Feature 3: Mark a Task as Done"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"Marks a task as done, updates the local storage file."},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"### Feature 4: Delete a Task"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"Deletes a Task from the current task list, updates the local storage file."},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"### Feature 5: Add a Task"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"Adds a Todo/Event/Deadline to the current task list, updates the local storage file."},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"### Feature 6: List Tasks Matching to Keyword Input"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"Displays all tasks that contain the keyword input by user."},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"### Feature 7: Archive the Current Tasks"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"Save the current task list as a local storage file."},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"### Feature 8: List the Archived Files"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"Displays details of all local archived files."},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"### Feature 9: Load Archived Task List"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"Loads the task list in a specific archived file into the current task list."},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"### Feature 10: Delete an Archived File"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"Deletes an unwanted archived file in order to save space."},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"### Feature 11: Enter and Exit Sleep Mode"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"Enters the sleep mode where the chatbot ceases to respond until the correct command is entered to exit the sleep mode."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"### `help` - Requests for the Command Guide"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"Displays for the Command Guide requested."},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"Format: `help`"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"`help`"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"Please follow the formats below:"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"1. \u0027help\u0027"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"2. \u0027list\u0027"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"3. \u0027done TASK_NUMBER\u0027"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"4. \u0027delete TASK_NUMBER\u0027"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"5. \u0027todo MY_TASK\u0027"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"6. \u0027deadline MY_TASK /by DATE_OR_TIME\u0027"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"7. \u0027event MY_TASK /at DATE_OR_TIME\u0027"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"8. \u0027find KEYWORD\u0027"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"9. \u0027archive\u0027"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"10. \u0027listArchive\u0027"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"11. \u0027loadArchive ARCHIVE_FILE_NAME\u0027"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"12. \u0027binArchive ARCHIVE_FILE_NAME\u0027"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"13. \u0027bye\u0027"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"Legend:"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"1 -\u003e Get command guide"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"2 -\u003e List all tasks in the current version"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"3 \u0026 4 -\u003e Modify the status of a task"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"5 \u0026 6 \u0026 7 -\u003e Add a new task"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"8 -\u003e Search for task(s) matching a certain keyword"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"9 -\u003e Archive your current version of task list"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"10 -\u003e List all existing archive files"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"11 -\u003e Load a certain version of task list to your current work space"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"12 -\u003e Delete a certain archive file"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"13 -\u003e Let Duke enter the sleep mode"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"### `list` - List All Tasks in the Current Task List"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"Displays all tasks in the current task list."},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"Format: `list`"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"`list`"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"Here are the tasks in your list:"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"1. [D][✓] CS2103T quiz (by: Dec 20, 2020, 3:00 PM)"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"2. [T][✘] CCA"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"3. [E][✘] Hostel Briefing (at: Oct 10, 2020, 9:00 AM)"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"### `done` - Marks a Task as Done"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"Marks a specific task as done and updates the local storage file."},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"Format: `done TASKNUMBER`"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"`done 2`"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":" [✓] CCA"},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"### `delete` - Deletes a Task"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"Deletes a specific task from the task list and updates the local storage file."},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"Format: `delete TASKNUMBER`"},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"`done 2`"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":" [T][✓] CCA"},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"Now you have 2 tasks in the list."},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"### `todo` - Adds a Todo Task"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":"Adds a todo task to the current task list and updates the local storage file."},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"`todo join the telegram chat`"},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":" [T][✘] join the telegram chat"},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"Now you have 3 tasks in the list."},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"### `event` - Adds an Event Task"},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"Adds an event task to the current task list and updates the local storage file."},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"Format: `event DESCRIPTION /at TIME`"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"`event meet with friends /at 2020-12-12 1200`"},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":" [E][✘] meet with friends (at: Dec 12, 2020, 12:00 PM)"},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"Now you have 4 tasks in the list."},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":"### `deadline` - Adds a Deadline Task"},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":"Adds a deadline task to the current task list and updates the local storage file."},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"Format: `deadline DESCRIPTION /by TIME`"},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":"`deadline complete quiz /by 2020-09-07 2359`"},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":" [D][✘] complete quiz (by: Sep 7, 2020, 11:59 PM)"},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":"Now you have 5 tasks in the list."},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"### `find` - Searches for Tasks Matching the Keyword"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"Displays all tasks matching the keyword provided."},{"lineNumber":194,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":195,"author":{"gitId":"hjl99"},"content":"Format: `find KEYWORD`"},{"lineNumber":196,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":197,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":198,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":199,"author":{"gitId":"hjl99"},"content":"`find quiz`"},{"lineNumber":200,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":201,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":202,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":203,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":204,"author":{"gitId":"hjl99"},"content":"Here are the tasks that match your keyword:"},{"lineNumber":205,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":206,"author":{"gitId":"hjl99"},"content":"1. [D][✓] CS2103T quiz (by: Dec 20, 2020, 3:00 PM)"},{"lineNumber":207,"author":{"gitId":"hjl99"},"content":"2. [D][✘] complete quiz (by: Sep 7, 2020, 11:59 PM)"},{"lineNumber":208,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":209,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":210,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":211,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":212,"author":{"gitId":"hjl99"},"content":"`find committee`"},{"lineNumber":213,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":214,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":215,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":216,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":217,"author":{"gitId":"hjl99"},"content":"Sorry, there is no match for your keyword!"},{"lineNumber":218,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":219,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":220,"author":{"gitId":"hjl99"},"content":"### `archive` - Archives the Current Task List"},{"lineNumber":221,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":222,"author":{"gitId":"hjl99"},"content":"Archives the current task list by saving it to a local storage file."},{"lineNumber":223,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":224,"author":{"gitId":"hjl99"},"content":"Format: `archive`"},{"lineNumber":225,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":226,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":227,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":228,"author":{"gitId":"hjl99"},"content":"`archive`"},{"lineNumber":229,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":230,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":231,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":232,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":233,"author":{"gitId":"hjl99"},"content":"Tasks successfully archived! Enter \u0027listArchive\u0027 to observe a new file being added."},{"lineNumber":234,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":235,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":236,"author":{"gitId":"hjl99"},"content":"### `listArchive` - Lists all Archived Files"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"hjl99"},"content":"Lists details of all archived files in the local storage."},{"lineNumber":239,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":240,"author":{"gitId":"hjl99"},"content":"Format: `listArchive`"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"hjl99"},"content":"`listArchive`"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":249,"author":{"gitId":"hjl99"},"content":"* Please Note:"},{"lineNumber":250,"author":{"gitId":"hjl99"},"content":"Your current list will be discarded once you switch to an archive file."},{"lineNumber":251,"author":{"gitId":"hjl99"},"content":"Key in \u0027archive\u0027 to save your work before continuing with \u0027loadArchive FILE_NAME\u0027."},{"lineNumber":252,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":253,"author":{"gitId":"hjl99"},"content":"Use \u0027File name\u0027 of the archive file for any further operation."},{"lineNumber":254,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":255,"author":{"gitId":"hjl99"},"content":"File name: Archive-1600278374625.txt"},{"lineNumber":256,"author":{"gitId":"hjl99"},"content":"Archived at: Wed Sep 16 03:02:57 SGT 2020"},{"lineNumber":257,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":258,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":259,"author":{"gitId":"hjl99"},"content":"### `loadArchive` - Loads Archived Task List"},{"lineNumber":260,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":261,"author":{"gitId":"hjl99"},"content":"Loads a specific archived task list into the current task list."},{"lineNumber":262,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":263,"author":{"gitId":"hjl99"},"content":"Format: `loadArchive FILENAME`"},{"lineNumber":264,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":265,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":266,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":267,"author":{"gitId":"hjl99"},"content":"`loadArchive Archive-1600278374625.txt`"},{"lineNumber":268,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":269,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":270,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":271,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":272,"author":{"gitId":"hjl99"},"content":"Task List successfully loaded from Archive file \u0027Archive-1600278374625.txt\u0027 created at Wed Sep 16 03:02:57 SGT 2020!"},{"lineNumber":273,"author":{"gitId":"hjl99"},"content":"Enter \u0027list\u0027 to see the tasks!"},{"lineNumber":274,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":275,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":276,"author":{"gitId":"hjl99"},"content":"### `binArchive` - Deletes an Archived File"},{"lineNumber":277,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":278,"author":{"gitId":"hjl99"},"content":"Deletes an archived file from the local storage."},{"lineNumber":279,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":280,"author":{"gitId":"hjl99"},"content":"Format: `binArchive FILENAME`"},{"lineNumber":281,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":282,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":283,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":284,"author":{"gitId":"hjl99"},"content":"`binArchive Archive-1600278374625.txt`"},{"lineNumber":285,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":286,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":287,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":288,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":289,"author":{"gitId":"hjl99"},"content":"Successful deletion of archive file \u0027Archive-1600278374625.txt\u0027 created at Wed Sep 16 03:02:57 SGT 2020!"},{"lineNumber":290,"author":{"gitId":"hjl99"},"content":"Enter \u0027listArchive\u0027 to see the current file list!"},{"lineNumber":291,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":292,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":293,"author":{"gitId":"hjl99"},"content":"### `bye` - Enters Sleep Mode"},{"lineNumber":294,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":295,"author":{"gitId":"hjl99"},"content":"Enters sleep mode where the chatbot will not respond properly until the corrent command is input."},{"lineNumber":296,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":297,"author":{"gitId":"hjl99"},"content":"Format: `bye`"},{"lineNumber":298,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":299,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":300,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":301,"author":{"gitId":"hjl99"},"content":"`bye`"},{"lineNumber":302,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":303,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":304,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":305,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":306,"author":{"gitId":"hjl99"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":307,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":308,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":309,"author":{"gitId":"hjl99"},"content":"### `hello` - Exits Sleep Mode"},{"lineNumber":310,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":311,"author":{"gitId":"hjl99"},"content":"Exits Sleep Mode when the system is in sleep mode."},{"lineNumber":312,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":313,"author":{"gitId":"hjl99"},"content":"Format: `hello`"},{"lineNumber":314,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":315,"author":{"gitId":"hjl99"},"content":"Example of usage: "},{"lineNumber":316,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":317,"author":{"gitId":"hjl99"},"content":"`hello`"},{"lineNumber":318,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":319,"author":{"gitId":"hjl99"},"content":"Expected outcome:"},{"lineNumber":320,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":321,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":322,"author":{"gitId":"hjl99"},"content":"Hello! This is J.A.R.V.I.S."},{"lineNumber":323,"author":{"gitId":"hjl99"},"content":"How may I help you?"},{"lineNumber":324,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":325,"author":{"gitId":"hjl99"},"content":"Enter \u0027help\u0027 for command guide."},{"lineNumber":326,"author":{"gitId":"hjl99"},"content":"```"},{"lineNumber":327,"author":{"gitId":"hjl99"},"content":""}],"authorContributionMap":{"hjl99":313,"-":14}},{"path":"src/main/java/DateTimeConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"public class DateTimeConverter {"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    //public String dateTime;"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    public DateTimeFormatter dtf;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    public DateTimeConverter(FormatStyle dateStyle, FormatStyle timeStyle) {"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"        //this.dateTime \u003d dateTime;"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"        this.dtf \u003d DateTimeFormatter.ofLocalizedDateTime(dateStyle, timeStyle);"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    /*public DateTimeFormatter dtf \u003d DateTimeFormatter.ofLocalizedDateTime("},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"            FormatStyle.MEDIUM, FormatStyle.SHORT);*/"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    public String processTime(String dateTime) {"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"        String date;"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"        String time;"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"            if (dateTime.length() \u003e 11) {"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"                String[] parts \u003d dateTime.split(\" \", 2);"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"                time \u003d parts[0].length() \u003d\u003d 4 ? parts[0] : parts[1];"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"                date \u003d parts[0].length() \u003d\u003d 4 ? parts[1] : parts[0];"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"                date \u003d dateTime;"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"                time \u003d \"2359\";"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"            LocalTime lt \u003d LocalTime.of("},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"                    Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2)));"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"            date \u003d date.replaceAll(\"\\\\D\", \"-\");"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"            String[] date_seg \u003d date.split(\"-\", 3);"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"            if (date_seg[0].length() !\u003d 4) {"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"                String temp \u003d date_seg[0];"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"                date_seg[0] \u003d date_seg[2];"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"                date_seg[2] \u003d temp;"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"            LocalDate ld \u003d LocalDate.parse(date_seg[0] + \"-\" + date_seg[1] + \"-\" + date_seg[2]);"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"            LocalDateTime ldt \u003d LocalDateTime.of(ld, lt);"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"            return ldt.format(dtf);"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"            HandleException.handleException(DukeException.ExceptionType.improper_dateTime);"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"            return dateTime;"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":54}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    protected String by;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"        this.by \u003d by;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    public Deadline(String description, String by, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        return \"D\";"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    public String getBy() {"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"        return this.by;"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    public String[] getInfo() {"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"        return new String[]{this.getType(), this.isDone(), this.description, this.getBy()};"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":35}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"import java.io.FileWriter;"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"import java.nio.file.Files;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"import java.nio.file.Paths;"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDate;"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDateTime;"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"import java.time.LocalTime;"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    public static String separation_line \u003d \"    ____________________________________________________________\";"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    public static String indent \u003d \"     \";"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    public static String starting_line \u003d separation_line + \"\\n\" + indent;"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    public static String ending_line \u003d \"\\n\" + separation_line + \"\\n\";"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"    public static List\u003cTask\u003e task_collections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    public static String split_notn \u003d \"@#%#@%\";"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"    public static String memory_file_dir \u003d \"./data/\";"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    public static String memory_file_name \u003d \"task_list.txt\";"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"    public static boolean exception_absent;"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    public static String taskToMemoStr(Task t) {"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"        String memoStr \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"        String[] info \u003d t.getInfo();"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"        memoStr +\u003d \"\\n\" + info[0] + split_notn + info[1] + split_notn + info[2];"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"        if (t.getType().equals(\"D\") || t.getType().equals(\"E\")) {"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"            memoStr +\u003d split_notn + info[3];"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"        return memoStr;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"    public static void write_memory(List\u003cTask\u003e task_list) {"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"            FileWriter fw \u003d new FileWriter(memory_file_dir + memory_file_name);"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"            String textToAppend \u003d \"\";"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"            Iterator task_iter \u003d task_list.iterator();"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"            while (task_iter.hasNext()) {"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"                Task t \u003d (Task) task_iter.next();"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"                textToAppend +\u003d taskToMemoStr(t);"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"            fw.write(textToAppend);"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"            fw.close();"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"            handleException(DukeException.ExceptionType.read_file);"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"    public static void appendToFile(String filePath, Task t) {"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"            FileWriter fw \u003d new FileWriter(filePath, true); // appending instead of overwriting"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"            fw.write(taskToMemoStr(t));"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"            fw.close();"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"            handleException(DukeException.ExceptionType.read_file);"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"    public static DateTimeFormatter dtf \u003d DateTimeFormatter.ofLocalizedDateTime("},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"            FormatStyle.MEDIUM, FormatStyle.SHORT);"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"    public static String processTime(String dateTime) {"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"        String date;"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"        String time;"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"            if (dateTime.length() \u003e 11) {"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"                String[] parts \u003d dateTime.split(\" \", 2);"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"                time \u003d parts[0].length() \u003d\u003d 4 ? parts[0] : parts[1];"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"                date \u003d parts[0].length() \u003d\u003d 4 ? parts[1] : parts[0];"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"                date \u003d dateTime;"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"                time \u003d \"2359\";"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"            LocalTime lt \u003d LocalTime.of("},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"                    Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2)));"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"            date \u003d date.replaceAll(\"\\\\D\", \"-\");"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"            String[] date_seg \u003d date.split(\"-\", 3);"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"            if (date_seg[0].length() !\u003d 4) {"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"                String temp \u003d date_seg[0];"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"                date_seg[0] \u003d date_seg[2];"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"                date_seg[2] \u003d temp;"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"            LocalDate ld \u003d LocalDate.parse(date_seg[0] + \"-\" + date_seg[1] + \"-\" + date_seg[2]);"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"            LocalDateTime ldt \u003d LocalDateTime.of(ld, lt);"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"            return ldt.format(dtf);"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"            handleException(DukeException.ExceptionType.improper_dateTime);"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"        return \"Unknown Date/Time\";"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"    public static void handleException(DukeException.ExceptionType et) {"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"        exception_absent \u003d false;"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"        DukeException de \u003d new DukeException(et);"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"        System.out.println(de);"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"    public static void readTasks() {"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"        task_collections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"        File data_folder \u003d new File(memory_file_dir);"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"        if (!data_folder.exists() \u0026\u0026 !data_folder.isDirectory()) {"},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"            data_folder.mkdirs();"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":"        File task_list_file \u003d new File(memory_file_dir + memory_file_name);"},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"        if (!task_list_file.exists()) {"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":"                task_list_file.createNewFile();"},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"            } catch (Exception e) {"},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":"                handleException(DukeException.ExceptionType.read_file);"},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"        Scanner sc \u003d null;"},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"            sc \u003d new Scanner(task_list_file);"},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":"            System.out.println(\"Sorry, the memory cannot be read successfully.\");"},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"            String curr_task \u003d sc.nextLine();"},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":"            String[] temp_type \u003d curr_task.split(split_notn, 2);"},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"            String[] temp_details;"},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"            switch(temp_type[0]) {"},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":"                case \"T\":"},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"                    temp_details \u003d temp_type[1].split(split_notn, 2);"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"                    task_collections.add("},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"                            new Todo(temp_details[1], temp_details[0].equals(\"0\") ? false : true));"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":"                case \"E\":"},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":"                    temp_details \u003d temp_type[1].split(split_notn, 3);"},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"                    task_collections.add("},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"                            new Event(temp_details[1], temp_details[2],"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":"                                    temp_details[0].equals(\"0\") ? false : true));"},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"                    break;"},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":"                case \"D\":"},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"                    temp_details \u003d temp_type[1].split(split_notn, 3);"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":"                    task_collections.add("},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"                            new Deadline(temp_details[1], temp_details[2],"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":"                                    temp_details[0].equals(\"0\") ? false : true));"},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"                    break;"},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"                default:"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"                    System.out.println();"},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"    public static void editMemoFile(String action, String[] input_split_arr) {"},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":"        int action_number \u003d -1;"},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"        String success_result \u003d \"\";"},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":"            action_number \u003d Integer.parseInt(input_split_arr[1]);"},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":"            handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":"                if (action.equals(\"delete\")) {"},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"                    success_result \u003d task_collections.get(action_number - 1).toString();"},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":"                    task_collections.remove(action_number - 1);"},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":"                    task_collections.get(action_number - 1).markAsDone();"},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":"                write_memory(task_collections);"},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":"                handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":"            if (action.equals(\"delete\")) {"},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"Noted. I\u0027ve removed this task:\");"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + success_result);"},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":194,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":195,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":196,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"},{"lineNumber":197,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":201,"author":{"gitId":"hjl99"},"content":"    public static void addMemoFile(String type, String[] input_split_arr) {"},{"lineNumber":202,"author":{"gitId":"hjl99"},"content":"        Task t \u003d null;"},{"lineNumber":203,"author":{"gitId":"hjl99"},"content":"        if (!type.equals(\"todo\")) {"},{"lineNumber":204,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":205,"author":{"gitId":"hjl99"},"content":"                input_split_arr \u003d input_split_arr[1].split("},{"lineNumber":206,"author":{"gitId":"hjl99"},"content":"                        type.equals(\"event\") ? \" /at \" : \" /by \", 2);"},{"lineNumber":207,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":208,"author":{"gitId":"hjl99"},"content":"                handleException(type.equals(\"deadline\")"},{"lineNumber":209,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.deadline_empty_incomplete"},{"lineNumber":210,"author":{"gitId":"hjl99"},"content":"                        : DukeException.ExceptionType.event_empty_incomplete);"},{"lineNumber":211,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":214,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":215,"author":{"gitId":"hjl99"},"content":"                if (type.equals(\"todo\")) {"},{"lineNumber":216,"author":{"gitId":"hjl99"},"content":"                    t \u003d new Todo(input_split_arr[1]);"},{"lineNumber":217,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":218,"author":{"gitId":"hjl99"},"content":"                    String time;"},{"lineNumber":219,"author":{"gitId":"hjl99"},"content":"                    try {"},{"lineNumber":220,"author":{"gitId":"hjl99"},"content":"                        time \u003d input_split_arr[1];"},{"lineNumber":221,"author":{"gitId":"hjl99"},"content":"                        //time \u003d input_split_arr[1].split(\" \", 2)[1];"},{"lineNumber":222,"author":{"gitId":"hjl99"},"content":"                        time \u003d processTime(time);"},{"lineNumber":223,"author":{"gitId":"hjl99"},"content":"                        t \u003d type.equals(\"event\")"},{"lineNumber":224,"author":{"gitId":"hjl99"},"content":"                                ? new Event(input_split_arr[0], time)"},{"lineNumber":225,"author":{"gitId":"hjl99"},"content":"                                : new Deadline(input_split_arr[0], time);"},{"lineNumber":226,"author":{"gitId":"hjl99"},"content":"                    } catch (Exception ex) {"},{"lineNumber":227,"author":{"gitId":"hjl99"},"content":"                        handleException(type.equals(\"event\")"},{"lineNumber":228,"author":{"gitId":"hjl99"},"content":"                                ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":229,"author":{"gitId":"hjl99"},"content":"                                : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":230,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":231,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":232,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":233,"author":{"gitId":"hjl99"},"content":"                handleException(type.equals(\"todo\")"},{"lineNumber":234,"author":{"gitId":"hjl99"},"content":"                    ? DukeException.ExceptionType.todo_empty"},{"lineNumber":235,"author":{"gitId":"hjl99"},"content":"                    : type.equals(\"event\")"},{"lineNumber":236,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":237,"author":{"gitId":"hjl99"},"content":"                        : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":238,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":239,"author":{"gitId":"hjl99"},"content":"            if (exception_absent) {"},{"lineNumber":240,"author":{"gitId":"hjl99"},"content":"                task_collections.add(t);"},{"lineNumber":241,"author":{"gitId":"hjl99"},"content":"                appendToFile(memory_file_dir + memory_file_name, t);"},{"lineNumber":242,"author":{"gitId":"hjl99"},"content":"                if (exception_absent) {"},{"lineNumber":243,"author":{"gitId":"hjl99"},"content":"                    System.out.println(indent + \"Got it. I\u0027ve added ths task:\");"},{"lineNumber":244,"author":{"gitId":"hjl99"},"content":"                    System.out.println(indent + \"  \" + task_collections.get(task_collections.size() - 1));"},{"lineNumber":245,"author":{"gitId":"hjl99"},"content":"                    System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":246,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":247,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":248,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":251,"author":{"gitId":"hjl99"},"content":"    public static void main(String[] args){"},{"lineNumber":252,"author":{"gitId":"hjl99"},"content":"        readTasks();"},{"lineNumber":253,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":254,"author":{"gitId":"hjl99"},"content":"        String greeting \u003d starting_line + \"Hello! This is J.A.R.V.I.S.\\n\" + indent + \"How may I help you?\" + ending_line;"},{"lineNumber":255,"author":{"gitId":"hjl99"},"content":"        System.out.println(greeting);"},{"lineNumber":256,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":257,"author":{"gitId":"hjl99"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":258,"author":{"gitId":"hjl99"},"content":"        boolean exit_bye \u003d false;"},{"lineNumber":259,"author":{"gitId":"hjl99"},"content":"        while (!exit_bye) {"},{"lineNumber":260,"author":{"gitId":"hjl99"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":261,"author":{"gitId":"hjl99"},"content":"            exception_absent \u003d true;"},{"lineNumber":262,"author":{"gitId":"hjl99"},"content":"            if (input.equals(\"bye\")) {"},{"lineNumber":263,"author":{"gitId":"hjl99"},"content":"                System.out.println(starting_line + \"Bye. Hope to see you again soon!\" +  ending_line);"},{"lineNumber":264,"author":{"gitId":"hjl99"},"content":"                exit_bye \u003d true;"},{"lineNumber":265,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":266,"author":{"gitId":"hjl99"},"content":"                System.out.println(separation_line);"},{"lineNumber":267,"author":{"gitId":"hjl99"},"content":"                if (input.equals(\"list\")) {"},{"lineNumber":268,"author":{"gitId":"hjl99"},"content":"                    int temp \u003d 1;"},{"lineNumber":269,"author":{"gitId":"hjl99"},"content":"                    System.out.println(indent + \"Here are the tasks in your list:\");"},{"lineNumber":270,"author":{"gitId":"hjl99"},"content":"                    Iterator task_iter \u003d task_collections.iterator();"},{"lineNumber":271,"author":{"gitId":"hjl99"},"content":"                    while (task_iter.hasNext()) {"},{"lineNumber":272,"author":{"gitId":"hjl99"},"content":"                        System.out.println(indent + temp + \".\" + task_iter.next());"},{"lineNumber":273,"author":{"gitId":"hjl99"},"content":"                        temp++;"},{"lineNumber":274,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":275,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":276,"author":{"gitId":"hjl99"},"content":"                    String[] input_split_arr \u003d input.split(\" \", 2);"},{"lineNumber":277,"author":{"gitId":"hjl99"},"content":"                    String type \u003d input_split_arr[0];"},{"lineNumber":278,"author":{"gitId":"hjl99"},"content":"                    if (type.equals(\"done\") || type.equals(\"delete\")) {"},{"lineNumber":279,"author":{"gitId":"hjl99"},"content":"                        editMemoFile(type, input_split_arr);  //editTask(type, input_split_arr);"},{"lineNumber":280,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":281,"author":{"gitId":"hjl99"},"content":"                    else if (type.equals(\"deadline\") || type.equals(\"event\") || type.equals(\"todo\")){"},{"lineNumber":282,"author":{"gitId":"hjl99"},"content":"                        addMemoFile(type, input_split_arr);   //addTask(type, input_split_arr);"},{"lineNumber":283,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":284,"author":{"gitId":"hjl99"},"content":"                    } else {"},{"lineNumber":285,"author":{"gitId":"hjl99"},"content":"                        handleException(DukeException.ExceptionType.no_meaning);"},{"lineNumber":286,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":287,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":288,"author":{"gitId":"hjl99"},"content":"                System.out.println(separation_line + \"\\n\");"},{"lineNumber":289,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":290,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"}"},{"lineNumber":294,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":295,"author":{"gitId":"hjl99"},"content":"//compile when current directory is at IndividualProject/text-ui-test"},{"lineNumber":296,"author":{"gitId":"hjl99"},"content":"//javac -cp ../src/ ../src/main/java/Task.java   etc. (Task, Deadline, Event, Todo, Duke)"},{"lineNumber":297,"author":{"gitId":"hjl99"},"content":"//sh runtest.sh"},{"lineNumber":298,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":299,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":300,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":301,"author":{"gitId":"hjl99"},"content":"/*public static void editTask(String action, String[] input_split_arr) {"},{"lineNumber":302,"author":{"gitId":"hjl99"},"content":"        int action_number \u003d -1;"},{"lineNumber":303,"author":{"gitId":"hjl99"},"content":"        String success_result \u003d \"\";"},{"lineNumber":304,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":305,"author":{"gitId":"hjl99"},"content":"            action_number \u003d Integer.parseInt(input_split_arr[1]);"},{"lineNumber":306,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":307,"author":{"gitId":"hjl99"},"content":"            handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":308,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":310,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":311,"author":{"gitId":"hjl99"},"content":"                if (action.equals(\"delete\")) {"},{"lineNumber":312,"author":{"gitId":"hjl99"},"content":"                    success_result \u003d task_collections.get(action_number - 1).toString();"},{"lineNumber":313,"author":{"gitId":"hjl99"},"content":"                    task_collections.remove(action_number - 1);"},{"lineNumber":314,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":315,"author":{"gitId":"hjl99"},"content":"                    task_collections.get(action_number - 1).markAsDone();"},{"lineNumber":316,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":317,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":318,"author":{"gitId":"hjl99"},"content":"                handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":319,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":320,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":321,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":322,"author":{"gitId":"hjl99"},"content":"            if (action.equals(\"delete\")) {"},{"lineNumber":323,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"Noted. I\u0027ve removed this task:\");"},{"lineNumber":324,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + success_result);"},{"lineNumber":325,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":326,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":327,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":328,"author":{"gitId":"hjl99"},"content":"                System.out.println(indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"},{"lineNumber":329,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":330,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":331,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":333,"author":{"gitId":"hjl99"},"content":"    public static void addTask(String type, String[] input_split_arr) {"},{"lineNumber":334,"author":{"gitId":"hjl99"},"content":"        Task t \u003d null;"},{"lineNumber":335,"author":{"gitId":"hjl99"},"content":"        if (!type.equals(\"todo\")) {"},{"lineNumber":336,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":337,"author":{"gitId":"hjl99"},"content":"                input_split_arr \u003d input_split_arr[1].split(\" /\", 2);"},{"lineNumber":338,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":339,"author":{"gitId":"hjl99"},"content":"                handleException(type.equals(\"deadline\")"},{"lineNumber":340,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.deadline_empty_incomplete"},{"lineNumber":341,"author":{"gitId":"hjl99"},"content":"                        : DukeException.ExceptionType.event_empty_incomplete);"},{"lineNumber":342,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":343,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":344,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":345,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":346,"author":{"gitId":"hjl99"},"content":"                if (type.equals(\"todo\")) {"},{"lineNumber":347,"author":{"gitId":"hjl99"},"content":"                    t \u003d new Todo(input_split_arr[1]);"},{"lineNumber":348,"author":{"gitId":"hjl99"},"content":"                    System.out.println(input_split_arr[1]);"},{"lineNumber":349,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":350,"author":{"gitId":"hjl99"},"content":"                    String time;"},{"lineNumber":351,"author":{"gitId":"hjl99"},"content":"                    try {"},{"lineNumber":352,"author":{"gitId":"hjl99"},"content":"                        time \u003d input_split_arr[1].split(\" \", 2)[1];"},{"lineNumber":353,"author":{"gitId":"hjl99"},"content":"                        t \u003d type.equals(\"event\")"},{"lineNumber":354,"author":{"gitId":"hjl99"},"content":"                                ? new Event(input_split_arr[0], time)"},{"lineNumber":355,"author":{"gitId":"hjl99"},"content":"                                : new Deadline(input_split_arr[0], time);"},{"lineNumber":356,"author":{"gitId":"hjl99"},"content":"                    } catch (Exception ex) {"},{"lineNumber":357,"author":{"gitId":"hjl99"},"content":"                        handleException(type.equals(\"event\")"},{"lineNumber":358,"author":{"gitId":"hjl99"},"content":"                                ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":359,"author":{"gitId":"hjl99"},"content":"                                : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":360,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":361,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":362,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":363,"author":{"gitId":"hjl99"},"content":"                handleException(type.equals(\"todo\")"},{"lineNumber":364,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.todo_empty"},{"lineNumber":365,"author":{"gitId":"hjl99"},"content":"                        : type.equals(\"event\")"},{"lineNumber":366,"author":{"gitId":"hjl99"},"content":"                            ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":367,"author":{"gitId":"hjl99"},"content":"                            : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":368,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":369,"author":{"gitId":"hjl99"},"content":"            if (exception_absent) {"},{"lineNumber":370,"author":{"gitId":"hjl99"},"content":"                task_collections.add(t);"},{"lineNumber":371,"author":{"gitId":"hjl99"},"content":"                if (exception_absent) {"},{"lineNumber":372,"author":{"gitId":"hjl99"},"content":"                    System.out.println(indent + \"Got it. I\u0027ve added ths task:\");"},{"lineNumber":373,"author":{"gitId":"hjl99"},"content":"                    System.out.println(indent + \"  \" + task_collections.get(task_collections.size() - 1));"},{"lineNumber":374,"author":{"gitId":"hjl99"},"content":"                    System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":375,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":376,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":377,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":378,"author":{"gitId":"hjl99"},"content":"    }*/"}],"authorContributionMap":{"hjl99":374,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class DukeException {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"    protected ExceptionType et;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"    public DukeException(ExceptionType et) {"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"        this.et \u003d et;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    public enum ExceptionType {"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"        no_meaning,"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"        empty_illegal,"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"        todo_empty,"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"        deadline_empty_incomplete,"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"        event_empty_incomplete,"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"        read_file,"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"        improper_dateTime"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"        String output \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"        String full_guide \u003d \"\\n     Please follow the format:\" +"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"                \"\\n     \u0027list\u0027\" + \"\\n     \u0027done TASK_NUMBER\u0027 or \u0027delete TASK_NUMBER\u0027\" + \"\\n     \u0027todo MY_TASK\u0027\" +"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"                \"\\n     \u0027deadline MY_TASK /by DATE_OR_TIME\u0027\" + \"\\n     \u0027event MY_TASK /at DATE_OR_TIME\u0027\" +"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"                \"\\n     \u0027bye\u0027\";"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"        switch(et) {"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"            case no_meaning:"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\" + full_guide;"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"            case empty_illegal:"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! Your number input is empty or invalid.\" +"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"                            \"\\n     Please follow the format: \u0027done TASK_NUMBER\u0027 or \u0027delete TASK_NUMBER\u0027\";"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"            case todo_empty:"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! The description of a todo cannot be empty.\" +"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"                            \"\\n     Please follow the format: \u0027todo MY_TASK\u0027\";"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"            case deadline_empty_incomplete:"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! The description of a deadline cannot be empty or incomplete.\" +"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"                            \"\\n     Please follow the format: \u0027deadline MY_TASK /by DATE_OR_TIME\u0027\";"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"            case event_empty_incomplete:"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! The description of an event cannot be empty or incomplete.\" +"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"                            \"\\n     Please follow the format: \u0027event MY_TASK /at DATE_OR_TIME\u0027\";"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"            case read_file:"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! There seems to be some problem reading the memory!\";"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"            case improper_dateTime:"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! The time provided is in an incorrect form.\" +"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"                        \"\\n     Please follow the format: \u0027YYYY-MM-DD HHMM\u0027 or \u0027YYYY-MM-DD\u0027\";"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"            default:"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"                output \u003d \"     ☹ OOPS!!! Unspecified problem detected!\" + full_guide;"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"                break;"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"        return output;"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"    /*protected String type;"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"    protected String exact;"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"    protected String problem;"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"    public DukeException(String type, String exact, String problem) {"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"        this.type \u003d type;"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"        this.exact \u003d exact;"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"        this.problem \u003d problem;"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"        String msg \u003d \"     \";"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"        if (type.equals(\"input\") \u0026\u0026 problem.equals(\"no_meaning\")) {"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"            msg +\u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"        } else if (type.equals(\"done\")) {"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"            if (problem.equals(\"empty\")) {"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! Please indicate which one to mark.\";"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"            } else if (problem.equals(\"illegal\")) {"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! You did not enter a valid number.\";"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"        } else if (type.equals(\"delete\")) {"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"            if (problem.equals(\"empty\")) {"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! Please indicate which one to delete.\";"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"            } else if (problem.equals(\"illegal\")) {"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! You did not enter a valid number.\";"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"        } else if (type.equals(\"todo\") \u0026\u0026 problem.equals(\"empty\")) {"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"            msg +\u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"        } else if (type.equals(\"deadline\")) {"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"            if (exact.equals(\"content\")) {"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! The description of a deadline cannot be empty.\";"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"            } else if (exact.equals(\"date\")) {"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! The final date of a deadline cannot be empty.\";"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"        } else if (type.equals(\"event\")) {"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"            if (exact.equals(\"content\")) {"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! The description of an event cannot be empty.\";"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"            } else if (exact.equals(\"date\")) {"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"                msg +\u003d \"☹ OOPS!!! The date of an event cannot be empty.\";"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"            msg +\u003d \"Unspecified Exception Detected\";"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"        return msg;"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"    }*/"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":107}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    protected String at;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    public Event(String description, String at) {"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"        this.at \u003d at;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    public Event(String description, String at, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"        this.at \u003d at;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        return \"E\";"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    public String getAt() {"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"        return this.at;"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    public String[] getInfo() {"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"        return new String[]{this.getType(), this.isDone(), this.description, this.getAt()};"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":35}},{"path":"src/main/java/HandleException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class HandleException {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    public HandleException() {"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    public static void handleException(DukeException.ExceptionType et) {"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"        DukeException de \u003d new DukeException(et);"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"        System.out.println(de);"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":13}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"public class Parser {"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    public Parser() {"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"    public String dateTimeParser(String dateTime) {"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"        DateTimeConverter dtc \u003d new DateTimeConverter(FormatStyle.MEDIUM, FormatStyle.SHORT);"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"        return dtc.processTime(dateTime);"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public String[] memoTaskParser(String taskLine) {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        String[] temp_type \u003d taskLine.split(SpecialFormat.split_notn, 2);"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"        String[] temp_details;"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"        if (temp_type[0].equals(\"T\")) {"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"            temp_details \u003d temp_type[1].split(SpecialFormat.split_notn, 2);"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"            return new String[]{temp_type[0], temp_details[0], temp_details[1]};"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"            temp_details \u003d temp_type[1].split(SpecialFormat.split_notn, 3);"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"            return new String[]{temp_type[0], temp_details[0], temp_details[1], temp_details[2]};"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    public String[] commandParser(String input) {"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"        String COMMAND_TYPE;"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"        String[] output \u003d new String[]{};"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"            COMMAND_TYPE \u003d \"bye\";"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"            output \u003d new String[]{COMMAND_TYPE};"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"        } else if (input.equals(\"list\")) {"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"            COMMAND_TYPE \u003d \"list\";"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"            output \u003d new String[]{COMMAND_TYPE};"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"            String[] input_split_arr;"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"            input_split_arr \u003d input.split(\" \", 2);"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"            COMMAND_TYPE \u003d input_split_arr[0];"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"            String EXCEPTION_TYPE;"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"            if (COMMAND_TYPE.equals(\"done\") || COMMAND_TYPE.equals(\"delete\")) {"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"                try {"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"                    String ACTION_NUMBER \u003d input_split_arr[1];"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"                    output \u003d new String[]{COMMAND_TYPE, ACTION_NUMBER};"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"                } catch (Exception ex) {"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"                    COMMAND_TYPE \u003d \"exception\";"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"                    return new String[] {COMMAND_TYPE, \"empty_illegal\"};"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"            } else if (COMMAND_TYPE.equals(\"deadline\") || COMMAND_TYPE.equals(\"event\") || COMMAND_TYPE.equals(\"todo\")) {"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"                String TASK_CONTENT;"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"                String DATE_TIME;"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"                boolean exception_absent \u003d true;"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"                if (!COMMAND_TYPE.equals(\"todo\")) {"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"                    try {"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"                        input_split_arr \u003d input_split_arr[1].split("},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"                                COMMAND_TYPE.equals(\"event\") ? \" /at \" : \" /by \", 2);"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"                    } catch (Exception ex) {"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"                        exception_absent \u003d false;"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"                        EXCEPTION_TYPE \u003d COMMAND_TYPE.equals(\"deadline\")"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"                                ? \"deadline\""},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"                                : \"event\";"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"                        COMMAND_TYPE \u003d \"exception\";"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"                        return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"                if (exception_absent) {"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"                    if (COMMAND_TYPE.equals(\"todo\")) {"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"                        try {"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"                            TASK_CONTENT \u003d input_split_arr[1];"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"                        } catch (Exception e) {"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"                            return new String[] {\"exception\", \"todo\"};"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"                        }"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"                        output \u003d new String[] {COMMAND_TYPE, TASK_CONTENT};"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"                    } else {"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"                        try {"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"                            TASK_CONTENT \u003d input_split_arr[0];"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"                            DATE_TIME \u003d input_split_arr[1];"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"                            DATE_TIME \u003d this.dateTimeParser(DATE_TIME);"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"                            output \u003d new String[] {COMMAND_TYPE, TASK_CONTENT, DATE_TIME};"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"                        } catch (Exception ex) {"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"                            exception_absent \u003d false;"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"                            EXCEPTION_TYPE \u003d COMMAND_TYPE.equals(\"event\")"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"                                    ? \"event\""},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"                                    : \"deadline\";"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"                            COMMAND_TYPE \u003d \"exception\";"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"                            return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"                        }"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"                    try {"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"                    } catch (Exception ex) {"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"                        exception_absent \u003d false;"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"                        EXCEPTION_TYPE \u003d COMMAND_TYPE.equals(\"todo\")"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"                                ? \"todo\""},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"                                : COMMAND_TYPE.equals(\"event\")"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"                                ? \"event\""},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"                                : \"deadline\";"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"                        COMMAND_TYPE \u003d \"exception\";"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"                        return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"                EXCEPTION_TYPE \u003d \"no_meaning\";"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"                COMMAND_TYPE \u003d \"exception\";"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"                return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"        return output;"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"}"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":""}],"authorContributionMap":{"hjl99":114}},{"path":"src/main/java/SpecialFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"public class SpecialFormat {"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    public static String separation_line \u003d \"    ____________________________________________________________\";"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"    public static String indent \u003d \"     \";"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    public static String starting_line \u003d separation_line + \"\\n\" + indent;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    public static String ending_line \u003d \"\\n\" + separation_line + \"\\n\";"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    public static String split_notn \u003d \"@#%#@%\";"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    public static String CHANGE_LINE \u003d \"\\n\";"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    public SpecialFormat() {}"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":15}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"import java.util.Iterator;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public String fileDirectory;"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    public String fileName;"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    public File memoFile;"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public Parser parser;"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    public Storage(String fileDirectory, String fileName) {"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"        this.fileDirectory \u003d fileDirectory;"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    public void reachFile() {"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"        File data_folder \u003d new File(fileDirectory);"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"        if (!data_folder.exists() \u0026\u0026 !data_folder.isDirectory()) {"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"            data_folder.mkdirs();"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"        File task_list_file \u003d new File(fileDirectory + fileName);"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"        if (!task_list_file.exists()) {"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"                task_list_file.createNewFile();"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"            } catch (Exception e) {"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"                HandleException.handleException(DukeException.ExceptionType.read_file);"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"        this.memoFile \u003d task_list_file;"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"    public List\u003cTask\u003e readMemoTasks() {"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"        reachFile();"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"        List\u003cTask\u003e task_collections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"        Scanner sc;"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"            sc \u003d new Scanner(memoFile);"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"            System.out.println(\"Sorry, the memory cannot be read successfully.\");"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"            return task_collections;"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"            String curr_task \u003d sc.nextLine();"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"            if (curr_task.equals(\"\") || curr_task.isBlank()) {"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"                continue;"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"            String[] task_info \u003d this.parser.memoTaskParser(curr_task);"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"            switch (task_info[0]) {"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"                case \"T\":"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"                    task_collections.add("},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"                            new Todo(task_info[2], task_info[1].equals(\"0\") ? false : true));"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"                    break;"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"                case \"E\":"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"                    task_collections.add("},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"                            new Event(task_info[2], task_info[3],"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"                                    task_info[1].equals(\"0\") ? false : true));"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"                case \"D\":"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"                    task_collections.add("},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"                            new Deadline(task_info[2], task_info[3],"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"                                    task_info[1].equals(\"0\") ? false : true));"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"                    break;"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"        return task_collections;"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"    public String taskToMemoStr(Task t) {"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"        String memoStr \u003d \"\";"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"        String[] info \u003d t.getInfo();"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"        memoStr +\u003d \"\\n\" + info[0] + SpecialFormat.split_notn + info[1] + SpecialFormat.split_notn + info[2];"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"        if (t.getType().equals(\"D\") || t.getType().equals(\"E\")) {"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"            memoStr +\u003d SpecialFormat.split_notn + info[3];"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"        return memoStr;"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"    public void write_memory(List\u003cTask\u003e task_list) {"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"            FileWriter fw \u003d new FileWriter(fileDirectory + fileName);"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"            String textToAppend \u003d \"\";"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"            Iterator task_iter \u003d task_list.iterator();"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"            while (task_iter.hasNext()) {"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"                Task t \u003d (Task) task_iter.next();"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"                textToAppend +\u003d taskToMemoStr(t);"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"            fw.write(textToAppend);"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"            fw.close();"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"            HandleException.handleException(DukeException.ExceptionType.read_file);"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"    public void appendToFile(String filePath, Task t) {"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"            FileWriter fw \u003d new FileWriter(filePath, true); // appending instead of overwriting"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"            fw.write(taskToMemoStr(t));"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"            fw.close();"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"            HandleException.handleException(DukeException.ExceptionType.read_file);"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"    /*public void editMemoFile(String action, String[] input_split_arr) {"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"        boolean exception_absent \u003d false;"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"        int action_number \u003d -1;"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":"        String success_result \u003d \"\";"},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"            action_number \u003d Integer.parseInt(input_split_arr[1]);"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"            HandleException.handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":"                if (action.equals(\"delete\")) {"},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"                    success_result \u003d task_collections.get(action_number - 1).toString();"},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":"                    task_collections.remove(action_number - 1);"},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"                    task_collections.get(action_number - 1).markAsDone();"},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"                write_memory(task_collections);"},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"                HandleException.handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":"            if (action.equals(\"delete\")) {"},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"Noted. I\u0027ve removed this task:\");"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + success_result);"},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":"    public void addMemoFile(String type, String[] input_split_arr) {"},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"        Task t \u003d null;"},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"        if (!type.equals(\"todo\")) {"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"                input_split_arr \u003d input_split_arr[1].split("},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":"                        type.equals(\"event\") ? \" /at \" : \" /by \", 2);"},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":"                Ui.handleException(type.equals(\"deadline\")"},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.deadline_empty_incomplete"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":"                        : DukeException.ExceptionType.event_empty_incomplete);"},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"                if (type.equals(\"todo\")) {"},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":"                    t \u003d new Todo(input_split_arr[1]);"},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"                    String time;"},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":"                    try {"},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"                        time \u003d input_split_arr[1];"},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"                        time \u003d this.parser.dateTimeParser(time);"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":"                        t \u003d type.equals(\"event\")"},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":"                                ? new Event(input_split_arr[0], time)"},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":"                                : new Deadline(input_split_arr[0], time);"},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":"                    } catch (Exception ex) {"},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":"                        Ui.handleException(type.equals(\"event\")"},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"                                ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":"                                : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":"                Ui.handleException(type.equals(\"todo\")"},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.todo_empty"},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":"                        : type.equals(\"event\")"},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":"                        : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":"            if (exception_absent) {"},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":"                task_collections.add(t);"},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":"                appendToFile(this.fileDirectory + this.fileName, t);"},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"                if (exception_absent) {"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"Got it. I\u0027ve added ths task:\");"},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"  \" + task_collections.get(task_collections.size() - 1));"},{"lineNumber":194,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":195,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":196,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":197,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"hjl99"},"content":"    }*/"},{"lineNumber":199,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":199}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    public String getStatusIcon() {"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public void markAsDone() {"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"        isDone \u003d true;"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    public String getDescription() {"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"        return this.description;"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"        return \"General_Task\";"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    public String isDone() {"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"        return isDone ? \"1\" : \"0\";"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    public String[] getInfo() {"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"        return new String[]{this.getType(), this.isDone(), this.description, \"\"};"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":45}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    public List\u003cTask\u003e task_collections;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    Parser parser;"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    String MEMO_FILE_DIR;"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    String MEMO_FILE_NAME;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    public TaskList(List\u003cTask\u003e task_collections, String MEMO_FILE_DIR, String MEMO_FILE_NAME) {"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"        this.task_collections \u003d task_collections;"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"        this.MEMO_FILE_DIR \u003d MEMO_FILE_DIR;"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"        this.MEMO_FILE_NAME \u003d MEMO_FILE_NAME;"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"        this.task_collections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    public void editTask(String[] COMMAND_RESULT) {"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"        String TYPE \u003d COMMAND_RESULT[0];"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"        String TASK_NUMBER \u003d COMMAND_RESULT[1];"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"        boolean exception_absent \u003d true;"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"        int action_number \u003d -1;"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"        String TASK_CONTENT \u003d \"\";"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"            action_number \u003d Integer.parseInt(TASK_NUMBER);"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"            exception_absent \u003d false;"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"            HandleException.handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"                if (TYPE.equals(\"delete\")) {"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"                    TASK_CONTENT \u003d this.task_collections.get(action_number - 1).toString();"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"                    task_collections.remove(action_number - 1);"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"                    task_collections.get(action_number - 1).markAsDone();"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"                new Storage(MEMO_FILE_DIR, MEMO_FILE_NAME).write_memory(task_collections);"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"                if (TYPE.equals(\"delete\")) {"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"Noted. I\u0027ve removed this task:\");"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + TASK_CONTENT);"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"Now you have \" + this.task_collections.size() + \" tasks in the list.\");"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"                exception_absent \u003d false;"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"                HandleException.handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"    public void addTask(String[] COMMAND_RESULT) {"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"        String TYPE \u003d COMMAND_RESULT[0];"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"        String TASK_CONTENT \u003d COMMAND_RESULT[1];"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"        Task t;"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"        if (TYPE.equals(\"todo\")) {"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"            t \u003d new Todo(TASK_CONTENT);"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"            t \u003d TYPE.equals(\"event\")"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"                    ? new Event(TASK_CONTENT, COMMAND_RESULT[2])"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"                    : new Deadline(TASK_CONTENT, COMMAND_RESULT[2]);"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"            this.task_collections.add(t);"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"            new Storage(MEMO_FILE_DIR, MEMO_FILE_NAME).appendToFile(MEMO_FILE_DIR + MEMO_FILE_NAME, t);"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"            System.out.println(SpecialFormat.indent + \"Got it. I\u0027ve added ths task:\");"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"            System.out.println(SpecialFormat.indent + \"  \" + task_collections.get(task_collections.size() - 1));"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"            System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"            HandleException.handleException(DukeException.ExceptionType.read_file);"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"    /*public void editTask(String action, String[] input_split_arr) {"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"        boolean exception_absent \u003d false;"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"        int action_number \u003d -1;"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"        String success_result \u003d \"\";"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"            action_number \u003d Integer.parseInt(input_split_arr[1]);"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"            Ui.handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"                if (action.equals(\"delete\")) {"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"                    success_result \u003d this.task_collections.get(action_number - 1).toString();"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"                    task_collections.remove(action_number - 1);"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"                    task_collections.get(action_number - 1).markAsDone();"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"                write_memory(task_collections);"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"                Ui.handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"            if (action.equals(\"delete\")) {"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"Noted. I\u0027ve removed this task:\");"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + success_result);"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"                System.out.println(SpecialFormat.indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"    public void addTask(String type, String[] input_split_arr) {"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"        Task t \u003d null;"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"        boolean exception_absent \u003d false;"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":"        if (!type.equals(\"todo\")) {"},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"                input_split_arr \u003d input_split_arr[1].split("},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"                        type.equals(\"event\") ? \" /at \" : \" /by \", 2);"},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":"                Ui.handleException(type.equals(\"deadline\")"},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.deadline_empty_incomplete"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"                        : DukeException.ExceptionType.event_empty_incomplete);"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"        if (exception_absent) {"},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"            try {"},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":"                if (type.equals(\"todo\")) {"},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"                    t \u003d new Todo(input_split_arr[1]);"},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"                    String time;"},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"                    try {"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":"                        time \u003d input_split_arr[1];"},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":"                        time \u003d parser.dateTimeParser(time);"},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":"                        t \u003d type.equals(\"event\")"},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"                                ? new Event(input_split_arr[0], time)"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"                                : new Deadline(input_split_arr[0], time);"},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":"                    } catch (Exception ex) {"},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"                        Ui.handleException(type.equals(\"event\")"},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"                                ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":"                                : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"            } catch (Exception ex) {"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":"                Ui.handleException(type.equals(\"todo\")"},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.todo_empty"},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"                        : type.equals(\"event\")"},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"                        ? DukeException.ExceptionType.event_empty_incomplete"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":"                        : DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":"            if (exception_absent) {"},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"                task_collections.add(t);"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":"                appendToFile(memory_file_dir + memory_file_name, t);"},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"                if (exception_absent) {"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"Got it. I\u0027ve added ths task:\");"},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"  \" + task_collections.get(task_collections.size() - 1));"},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"                    System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":"    }*/"},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":167}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    public Todo(String description) {"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"        super(description, isDone);"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"        return \"T\";"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":21}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    public static List\u003cTask\u003e task_collections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    protected String FILE_PATH;"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    protected String FILE_NAME;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"    protected Parser parser;"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    protected TaskList TASK_LIST;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"    public boolean exception_absent;"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public Ui(String FILE_PATH, String FILE_NAME, List\u003cTask\u003e MEMO_TASK) {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        this.FILE_PATH \u003d FILE_PATH;"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"        this.FILE_NAME \u003d FILE_NAME;"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"        TASK_LIST \u003d new TaskList(MEMO_TASK, FILE_PATH, FILE_NAME);"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    public void processRequests() {"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"        String greeting \u003d SpecialFormat.starting_line + \"Hello! This is J.A.R.V.I.S.\\n\" +"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"                SpecialFormat.indent + \"How may I help you?\" + SpecialFormat.ending_line;"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"        System.out.println(greeting);"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"        boolean exit_bye \u003d false;"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"        while (!exit_bye) {"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"            String[] COMMAND_RESULT \u003d parser.commandParser(input);"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"            System.out.println(SpecialFormat.separation_line);"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"            if (COMMAND_RESULT.length \u003d\u003d 1) {"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"                switch(COMMAND_RESULT[0]){"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"                    case \"bye\":"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"                        System.out.println(SpecialFormat.indent + \"Bye. Hope to see you again soon!\");"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"                        exit_bye \u003d true;"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"                        break;"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"                    case \"list\":"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"                        int temp \u003d 1;"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"                        System.out.println(SpecialFormat.indent + \"Here are the tasks in your list:\");"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"                        Iterator task_iter \u003d TASK_LIST.task_collections.iterator();"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"                        while (task_iter.hasNext()) {"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"                            System.out.println(SpecialFormat.indent + temp + \".\" + task_iter.next());"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"                            temp++;"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"                        }"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"                        break;"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"                    case \"todo\":"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"                        HandleException.handleException(DukeException.ExceptionType.todo_empty);"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"                        break;"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"                    case \"event\":"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"                        HandleException.handleException(DukeException.ExceptionType.event_empty_incomplete);"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"                        break;"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"                    case \"deadline\":"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"                        HandleException.handleException(DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"                        break;"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"            } else if (COMMAND_RESULT.length \u003d\u003d 2 \u0026\u0026 !COMMAND_RESULT[0].equals(\"todo\")) {"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"                if (COMMAND_RESULT[0].equals(\"exception\")) {"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"                    switch(COMMAND_RESULT[1]){"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"                        case \"todo\":"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"                            HandleException.handleException(DukeException.ExceptionType.todo_empty);"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"                            break;"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"                        case \"event\":"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"                            HandleException.handleException(DukeException.ExceptionType.event_empty_incomplete);"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"                            break;"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"                        case \"deadline\":"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"                            HandleException.handleException(DukeException.ExceptionType.deadline_empty_incomplete);"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"                            break;"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"                        case \"empty_illegal\":"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"                            HandleException.handleException(DukeException.ExceptionType.empty_illegal);"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"                            break;"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"                    }"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"                } else {"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"                    TASK_LIST.editTask(COMMAND_RESULT);"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"                TASK_LIST.addTask(COMMAND_RESULT);"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"            System.out.println(SpecialFormat.separation_line + \"\\n\");"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"}"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":""}],"authorContributionMap":{"hjl99":87}},{"path":"src/main/java/duke/DateTimeConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"public class DateTimeConverter {"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    /** DateTimeFormatter object for formatting purposes */"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    protected DateTimeFormatter dtf;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"     * Constructor of DateTimeConverter class."},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"     * @param dateStyle  FormatStyle for LocalDate."},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"     * @param timeStyle  FormatStyle for LocalTime."},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public DateTimeConverter(FormatStyle dateStyle, FormatStyle timeStyle) {"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"        dtf \u003d DateTimeFormatter.ofLocalizedDateTime(dateStyle, timeStyle);"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"     * Returns Processed date and time from user input."},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"     * @param taskType  User input for task to add."},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"     * @param dateTime  User input for date and time of events."},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"     * @return Formatted date and time."},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    public String processTime(String taskType, String dateTime) {"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"        if (dateTime.equals(\"undecided\")) {"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"            return dateTime;"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"        String[] dateTimeArr \u003d splitDateTime(taskType, dateTime);"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"        String[] dateTimeForConversion \u003d cleanDateTime(dateTimeArr);"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"        LocalDateTime ldt \u003d generateLocalDateTime(dateTimeForConversion);"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"        return ldt.format(dtf);"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"     * Returns cleaned up date and time that are ready for formatting."},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"     * @param dateTimeArr  Array containing date and time Strings processed from user input."},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"     * @return date and time ready for conversion to LocalDateTime."},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"    public String[] cleanDateTime(String[] dateTimeArr) {"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"        String date \u003d dateTimeArr[0];"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"        String time \u003d dateTimeArr[1];"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"        date \u003d date.replaceAll(\"\\\\D\", \"-\");"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"        String[] dateSeg \u003d date.split(\"-\", 3);"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"        if (dateSeg[0].length() !\u003d 4) {"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"            String temp \u003d dateSeg[0];"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"            dateSeg[0] \u003d dateSeg[2];"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"            dateSeg[2] \u003d temp;"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"        String cleanDate \u003d dateSeg[0] + \"-\" + dateSeg[1] + \"-\" + dateSeg[2];"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"        String cleanTimeHour \u003d time.substring(0, 2);"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"        String cleanTimeMinute \u003d time.substring(2);"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"        return new String[] {cleanDate, cleanTimeHour, cleanTimeMinute};"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"     * Returns formatted LocalDateTime object."},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"     * @param dateTimeForConversion  array containing cleaned date and time Strings."},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"     * @return formatted LocalDateTime object."},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"    public LocalDateTime generateLocalDateTime(String[] dateTimeForConversion) {"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"        String cleanDate \u003d dateTimeForConversion[0];"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"        Integer cleanHour \u003d Integer.parseInt(dateTimeForConversion[1]);"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"        Integer cleanMinute \u003d Integer.parseInt(dateTimeForConversion[2]);"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"        LocalDate ld \u003d LocalDate.parse(cleanDate);"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"        LocalTime lt \u003d LocalTime.of(cleanHour, cleanMinute);"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"        return LocalDateTime.of(ld, lt);"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"     * Returns raw date and time information processed from user input Strings."},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"     * @param taskType  type of task to be created."},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"     * @param dateTime  raw user input of datetime of the task."},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"     * @return raw date and time information."},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"    public String[] splitDateTime(String taskType, String dateTime) {"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"        String date;"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"        String time;"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"        dateTime \u003d dateTime.trim();"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"        if (dateTime.contains(\" \")) {"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"            String[] parts \u003d dateTime.split(\" \", 2);"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"            boolean firstPartIsTime \u003d parts[0].length() \u003c\u003d 4;"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"            if (firstPartIsTime) {"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"                time \u003d parts[0];"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"                date \u003d parts[1];"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"                time \u003d parts[1];"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"                date \u003d parts[0];"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"            // If time input contains only a single digit for hour"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"            if (time.length() \u003d\u003d 1) {"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"                time \u003d \"0\" + time;"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"            // If time input contains only two digits for hour"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":"            if (time.length() \u003d\u003d 2) {"},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"                time +\u003d \"00\";"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":"            // If no input for time, set a default time for the task based on its type"},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"            date \u003d dateTime;"},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"            time \u003d taskType.equals(\"event\")"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"                    ? \"0000\""},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"                    : \"2359\";"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"        return new String[] {date, time};"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":128}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    /** date and time of a Deadline object */"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"    protected String by;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"     * Constructor of Deadline."},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"     * @param description  Content of the Task."},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"     * @param by  Date and time of Deadline object."},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"        this.by \u003d by;"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"     * Another constructor of Deadline."},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"     * @param description  Content of the Task."},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"     * @param by  Date and time of Deadline object."},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"     * @param isDone  Completion status of the Deadline object"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"    public Deadline(String description, String by, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"        super(description, isDone);"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"        this.by \u003d by;"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"     * Returns First letter of Deadline to represent its type."},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"     * @return \"D\" to represent type of Deadline."},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"        return \"D\";"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"     * Returns Date and time of the Deadline object."},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"     * @return Date and time of Deadline object."},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"    public String getBy() {"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"        return this.by;"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"     * Returns Information about the Deadline object."},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"     * @return Type, isDone, description, and date and time."},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"    public String[] getInfo() {"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"        return new String[] {this.getType(), this.isDone(), this.description, this.getBy()};"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"     * Returns String representation of the Deadline object."},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"     * @return The string the object prints out to be."},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":75}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":" * An example of a custom control using FXML."},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":" * containing text from the speaker."},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":" */"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"public class DialogBox extends HBox {"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"    private Label dialog;"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    private ImageView displayPicture;"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"     * @param text  Text input of the DialogBox object"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"     * @param img  Profile image of the one doing the output"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"            fxmlLoader.load();"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"        } catch (IOException e) {"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"            e.printStackTrace();"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"        dialog.setText(text);"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"        // Makes the DialogBox has a height adjustable to its text length"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"        displayPicture.setImage(img);"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"    private void flip() {"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"        Collections.reverse(tmp);"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"     * Returns new DialogBox object in User\u0027s style"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"        return new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"     * Returns new DialogBox object in Chatbot\u0027s style"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"        db.flip();"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"        return db;"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":83}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import javafx.scene.Scene;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import javafx.stage.Stage;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"public class Duke extends Application {"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    /** Storage object of the Duke object */"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    private Storage storage;"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    /** TaskList object of the Duke object */"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"    private TaskList tasks;"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    /** Ui object of the Duke object */"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    private Ui ui;"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    /** Directory of file to store tasks */"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    protected static String MEMORY_FILE_DIR \u003d \"./data/\";"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    /** Name of the file to store tasks */"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    protected static String MEMORY_FILE_NAME \u003d \"task_list.txt\";"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"    /** Image objects of user and chatbot initialized */"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/standard_user.png\"));"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/standard_robot.png\"));"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"    /** Components of the  */"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"    private VBox dialogContainer;"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"    private TextField userInput;"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"    private Button sendButton;"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"    private Scene scene;"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"     * Constructor of Duke."},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"     * Initialize storage, tasks, ui of Duke object."},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"    public Duke() {"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"        storage \u003d new Storage(MEMORY_FILE_DIR, MEMORY_FILE_NAME);"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"            tasks \u003d new TaskList(storage.readMemoTasks(), MEMORY_FILE_DIR, MEMORY_FILE_NAME);"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"            List\u003cString\u003e output \u003d HandleException.handleException(DukeException.ExceptionType.READ_FILE);"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"            for (String s : output) {"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"                dialogContainer.getChildren().addAll("},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"                        DialogBox.getDukeDialog(s, duke));"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"                    DialogBox.getDukeDialog(\"Let us start with an empty list now.\", duke));"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"        ui \u003d new Ui(MEMORY_FILE_DIR, MEMORY_FILE_NAME, tasks.showList());"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"    public static void main(String[] args) {"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"     * Set up the Interface and functions"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"     * @param stage  Stage object for the set up"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"    public void start(Stage stage) {"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"        //Step 1. Setting up required components"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"        //The container for the content of the chat to scroll."},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"        userInput \u003d new TextField();"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"        stage.setScene(scene);"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"        stage.show();"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"        stage.setResizable(false);"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"        //mainLayout.setPrefSize(385, 535);"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);"},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"            userInput.clear();"},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"        });"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"            userInput.clear();"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"        });"},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"        //Part 3. Add functionality to handle user input."},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"            handleUserInput();"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":"        });"},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"            handleUserInput();"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":"        });"},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":"     * Iteration 1:"},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"     * Creates a label with the specified text and adds it to the dialog container."},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":"     * @param text String containing text to add"},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"     * @return a label with the specified text that has word wrap enabled."},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"        return textToAdd;"},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"     * Iteration 2:"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":"    private void handleUserInput() {"},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":"        String userText \u003d userInput.getText();"},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"        String[] dukeText \u003d getResponse(userInput.getText());"},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":"                DialogBox.getUserDialog(userText, user));"},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":"        for (String response : dukeText) {"},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":"            DialogBox.getDukeDialog(response, duke));"},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":"        userInput.clear();"},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":"     * Returns an array of output text messages"},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"hjl99"},"content":"    String[] getResponse(String input) {"},{"lineNumber":195,"author":{"gitId":"hjl99"},"content":"        return ui.processRequests(input);"},{"lineNumber":196,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":198,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":198}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"public class DukeException extends Throwable {"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"    /** ExceptionType object of DukeException */"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    protected ExceptionType et;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"     * Constructor of DukeException."},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"     * Initialize ExceptionType object of DukeException object."},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"     * @param et  ExceptionType passsed in to initialize class variable."},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public DukeException(ExceptionType et) {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        this.et \u003d et;"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    /** Enum class of ExceptionType within DukeException class. */"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    public enum ExceptionType {"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"        NO_MEANING,"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"        EMPTY_ILLEGAL,"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"        TODO_INCOMPLETE,"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"        FIND_INCOMPLETE,"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"        DEADLINE_INCOMPLETE,"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"        EVENT_INCOMPLETE,"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"        READ_FILE,"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"        IMPROPER_DATETIME"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    /** Command Guide for Users */"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    public static String fullGuide \u003d \"Please follow the formats below:\\n\""},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"            + \"\\n1. \u0027help\u0027\" + \"\\n2. \u0027list\u0027\" + \"\\n3. \u0027done TASK_NUMBER\u0027\" + \"\\n4. \u0027delete TASK_NUMBER\u0027\""},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"            + \"\\n5. \u0027todo MY_TASK\u0027\" + \"\\n6. \u0027deadline MY_TASK /by DATE_OR_TIME\u0027\""},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"            + \"\\n7. \u0027event MY_TASK /at DATE_OR_TIME\u0027\" + \"\\n8. \u0027find KEYWORD\u0027\" + \"\\n9. \u0027archive\u0027\""},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"            + \"\\n10. \u0027listArchive\u0027\" + \"\\n11. \u0027loadArchive ARCHIVE_FILE_NAME\u0027\""},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"            + \"\\n12. \u0027binArchive ARCHIVE_FILE_NAME\u0027\" + \"\\n13. \u0027bye\u0027\" + \"\\n\\nLegend: \""},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"            + \"\\n1 -\u003e Get command guide\\n2 -\u003e List all tasks in the current version\""},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"            + \"\\n3 \u0026 4 -\u003e Modify the status of a task\\n5 \u0026 6 \u0026 7 -\u003e Add a new task\""},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"            + \"\\n8 -\u003e Search for task(s) matching a certain keyword\\n9 -\u003e Archive your current version of task list\""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"            + \"\\n10 -\u003e List all existing archive files\""},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"            + \"\\n11 -\u003e Load a certain version of task list to your current work space\""},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"            + \"\\n12 -\u003e Delete a certain archive file\\n13 -\u003e Let Duke enter the sleep mode\";"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"     * Returns String representation of DukeException object in form of List\u003cString\u003e."},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e toArrList() {"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"        switch(et) {"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"        case NO_MEANING:"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"            output.add(fullGuide);"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"        case EMPTY_ILLEGAL:"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! Your number input is empty or invalid.\");"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"            output.add(\"Please follow the format: \\n\u0027done TASK_NUMBER\u0027 or \u0027delete TASK_NUMBER\u0027\");"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"        case TODO_INCOMPLETE:"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"            output.add(\"Please follow the format: \\n\u0027todo MY_TASK\u0027\");"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"        case FIND_INCOMPLETE:"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! The keyword of a search cannot be empty.\");"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"            output.add(\"Please follow the format: \u0027find KEYWORD\u0027\");"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"        case DEADLINE_INCOMPLETE:"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! The description of a deadline cannot be empty or incomplete.\\n\""},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"                    + \"\\nUse \u0027/by undecided\u0027 if you want to decide later!\");"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"            output.add(\"Please follow the format: \\n\u0027deadline MY_TASK /by DATE_OR_TIME\u0027\\n\""},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"                    + \"\\n(Acceptable DATE/TIME format:\\n\u0027YYYY-MM-DD HHMM\u0027, \u0027YYYY-MM-DD\u0027, \u0027YYYY-MM-DD HH\u0027, \u0027YYYY-MM-DD H\u0027 or \u0027undecided\u0027)\");"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"        case EVENT_INCOMPLETE:"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! The description of an event cannot be empty or incomplete.\\n\""},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"                    + \"\\nUse \u0027/at undecided\u0027 if you want to decide later!\");"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"            output.add(\"Please follow the format: \\n\u0027event MY_TASK /at DATE_OR_TIME\u0027\\n\""},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"                    + \"\\nAcceptable DATE/TIME format:\\n \u0027YYYY-MM-DD HHMM\u0027, \u0027YYYY-MM-DD\u0027, \u0027YYYY-MM-DD HH\u0027, \u0027YYYY-MM-DD H\u0027 or \u0027undecided\u0027\");"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"        case READ_FILE:"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! There seems to be some problem accessing the memory file!\");"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"        case IMPROPER_DATETIME:"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! We are unable to understand the DateTime provided.\");"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"            output.add(\"Please use the formats \u0027YYYY-MM-DD HHMM\u0027, \u0027YYYY-MM-DD\u0027, \u0027YYYY-MM-DD HH\u0027, \u0027YYYY-MM-DD H\u0027 or \u0027undecided\u0027!\");"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"        default:"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"            output.add(\"☹ OOPS!!! Unspecified problem detected!\");"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"            output.add(fullGuide);"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"        return output;"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":102}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    /** Date and time of the Event object */"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"    protected String at;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"     * Constructor of Event."},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"     * Initialize content, datetime, and completion status of Event object."},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"     * @param description  Task content of the Event object."},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"     * @param at  Date and time of the Event object."},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"    public Event(String description, String at) {"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"     * Another Constructor of Event."},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"     * Initialize content, datetime, and completion status of Event object."},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"     * @param description  Task content of the Event object."},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"     * @param at  Date and time of the Event object."},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"     * @param isDone  Completion status of Event object."},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    public Event(String description, String at, boolean isDone) {"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"        super(description, isDone);"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"        this.at \u003d at;"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"     * Return String \"E\" to represent type of object."},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"     * @return \"E\" to represent the type of object (which is an Event)."},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"        return \"E\";"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"     * Return Date and Time of Event object."},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"     * @return datetime of Event object."},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"    public String getAt() {"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"        return this.at;"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"     * Return Information of Event object."},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"     * @return An array of Strings containing type, status, content, and datetime of Event object."},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"    public String[] getInfo() {"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"        return new String[] {this.getType(), this.isDone(), this.description, this.getAt()};"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"     * Return String representation of Event object."},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"     * @return String representation of Event object."},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":78}},{"path":"src/main/java/duke/HandleException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"public class HandleException {"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"     * Constructor of HandleException."},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    public HandleException() {}"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"     * Handle Exceptions when running the program."},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"     * @param et  ExceptionType object to initialize DukeException object."},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"     * @return  List of Strings that represent the DukeException object."},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    public static List\u003cString\u003e handleException(DukeException.ExceptionType et) {"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"        DukeException de \u003d new DukeException(et);"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"        return de.toArrList();"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":24}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":" */"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"     * Initializes the stage"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"     * @param stage  Stage object for building purposes"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    public void start(Stage stage) {"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"            stage.setScene(scene);"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"            stage.show();"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":37}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.Dialog;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":" */"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"    /** Image objects initialized */"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/standard_user.png\"));"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/standard_robot.png\"));"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"    /** Initializes the Duke object"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"     * @param d  Duke object for initialization of the Duke object for later use"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"        duke \u003d d;"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"        DialogBox db \u003d DialogBox.getDukeDialog(\"Hello! This is J.A.R.V.I.S.\\nHow may I help you?\", dukeImage);"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"        DialogBox dbTwo \u003d DialogBox.getDukeDialog(\"Enter \u0027help\u0027 for command guide.\", dukeImage);"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"        dialogContainer.getChildren().addAll(db, dbTwo);"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"    private void handleUserInput() {"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"        String[] response \u003d duke.getResponse(input);"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"                DialogBox.getUserDialog(input, userImage)"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"        );"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"        for (String r : response) {"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"                    DialogBox.getDukeDialog(r, dukeImage)"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"            );"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"        userInput.clear();"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":70}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"     * Constructor of Parser."},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    public Parser() {}"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"     * Returns Formatted datetime of a task."},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"     * Returns \u0027improperDateTime\u0027 if datetime input cannot be processed properly."},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"     * @param dateTime  User input of date and time of a Task object (specifically Deadline/Event)."},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"     * @returns  Processed datetime of a Deadline or Event object."},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    private String dateTimeParser(String commandType, String dateTime) {"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"            DateTimeConverter dtc \u003d new DateTimeConverter(FormatStyle.MEDIUM, FormatStyle.SHORT);"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"            return dtc.processTime(commandType, dateTime);"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"        } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"            return \"improperDateTime\";"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a Task object."},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"     * @param taskLine  Single line of information of a Task object."},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of a Task contained in an array of Strings."},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    public String[] localFileTaskParser(String taskLine) {"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"        assert (!taskLine.isBlank());"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"        String[] taskTypeAndContent \u003d taskLine.split(SpecialFormat.SPLIT_NOTN, 2);"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"        String taskType \u003d taskTypeAndContent[0];"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"        String taskContent \u003d taskTypeAndContent[1];"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"        String[] taskDetails;"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"        if (taskType.equals(\"T\")) {"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"            taskDetails \u003d taskContent.split(SpecialFormat.SPLIT_NOTN, 2);"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"            return new String[] {taskType, taskDetails[0], taskDetails[1]};"},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"        } else {    // if taskType has value of \"E\" or \"D\", representing Event or Deadline object"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"            taskDetails \u003d taskContent.split(SpecialFormat.SPLIT_NOTN, 3);"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"            // taskDetails[0] isDone, taskDetails[1] taskAction, taskDetails[2] datetime"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"            return new String[] {taskType, taskDetails[0], taskDetails[1], taskDetails[2]};"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a Command in Segments."},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of an exception in Segments if exceptions caught."},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"     * @param input  User input of command."},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of a Command in the form of String array."},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"    public String[] commandParser(String input) {"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"        String cleanInput \u003d input.trim();"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"        if (!cleanInput.contains(\" \")) {   // single word command"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"            return simpleCommandParser(cleanInput);"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"        return complexCommandParser(cleanInput);"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a single-word Command in Segments."},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of an exception in Segments if exceptions caught."},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"     * @param cleanInput  cleaned User input of command."},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of a simple Command in the form of String array."},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"    public String[] simpleCommandParser(String cleanInput) {"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"        switch (cleanInput) {"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"            case \"bye\":"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"            case \"hello\":"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"            case \"help\":"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"            case \"list\":"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"            case \"archive\":"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"            case \"listArchive\":"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"                return new String[]{cleanInput};"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"            default:"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"                return parseException(cleanInput);"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a multi-word Command in Segments."},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of an exception in Segments if exceptions caught."},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"     * @param cleanInput  cleaned User input of command."},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of a complex Command in the form of String array."},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"    public String[] complexCommandParser(String cleanInput) {"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"        String[] inputSplitArr \u003d cleanInput.split(\" \", 2);"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"        String commandType \u003d inputSplitArr[0];"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"        String taskContent \u003d inputSplitArr[1];"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"        switch (commandType) {"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"            case \"find\":"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"                return parseFind(taskContent);"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"            case \"done\":"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"            case \"delete\":"},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"                return parseModifications(commandType, taskContent);"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"            case \"loadArchive\":"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"                return parseLoadArchive(taskContent);"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":"            case \"binArchive\":"},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"                return parseBinArchive(taskContent);"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"            case \"todo\":"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"            case \"event\":"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":"            case \"deadline\":"},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"                return parseNewEvent(commandType, taskContent);"},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"            default:"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"                return new String[] {\"exception\", \"no_meaning\"};"},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a \u0027read\u0027 command in Segments."},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"     * @param fileName  User input of index of the archive file to load."},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of \u0027read\u0027 command."},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"    private String[] parseLoadArchive(String fileName) {"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"        return new String[] {\"loadArchive\", fileName};"},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a \u0027bin\u0027 command in Segments."},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":"     * @param fileName  User input of index of the archive file to delete."},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of \u0027bin\u0027 command."},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":"    private String[] parseBinArchive(String fileName) {"},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"        return new String[] {\"binArchive\", fileName};"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a \u0027find\u0027 command in Segments."},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":"     * @param keyword  User input of keyword to search for."},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of a find command in the form of String array."},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"    private String[] parseFind(String keyword) {"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":"        return new String[] {\"find\", keyword};"},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a \u0027done\u0027 or \u0027delete\u0027 command in Segments."},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"     * @param commandType  type of command, i.e. \u0027done\u0027 or \u0027delete\u0027."},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":"     * @param actionNumber  index of task to be modified."},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of this modification command in the form of String array."},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":"    private String[] parseModifications(String commandType, String actionNumber) {"},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"        return new String[] {commandType, actionNumber};"},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a add-new-event command in Segments."},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"     * @param commandType  type of command, i.e. \u0027todo\u0027 or \u0027event\u0027 or \u0027deadline\u0027."},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":"     * @param taskContent  content of task to be added."},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of \u0027todo\u0027 or \u0027event\u0027 or \u0027deadline\u0027 command in String array."},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":"    private String[] parseNewEvent(String commandType, String taskContent) {"},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":"        if (commandType.equals(\"todo\")) {"},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"            return parseTodo(taskContent);"},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"            return parseEventAndDeadline(commandType, taskContent);"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a \u0027todo\u0027 command in Segments."},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"hjl99"},"content":"     * @param taskContent  content of task to be added."},{"lineNumber":195,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of \u0027todo\u0027 command in String array."},{"lineNumber":196,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"hjl99"},"content":"    private String[] parseTodo(String taskContent) {"},{"lineNumber":198,"author":{"gitId":"hjl99"},"content":"        return new String[] {\"todo\", taskContent};"},{"lineNumber":199,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":201,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":202,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of a \u0027event\u0027 or \u0027deadline\u0027 command in Segments."},{"lineNumber":204,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of an exception in Segments if exceptions caught."},{"lineNumber":205,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":206,"author":{"gitId":"hjl99"},"content":"     * @param commandType  type of command, i.e. \u0027event\u0027 or \u0027deadline\u0027."},{"lineNumber":207,"author":{"gitId":"hjl99"},"content":"     * @param taskContent  content of task to be added."},{"lineNumber":208,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of \u0027event\u0027 or \u0027deadline\u0027 command in String array."},{"lineNumber":209,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"hjl99"},"content":"    private String[] parseEventAndDeadline(String commandType, String taskContent) {"},{"lineNumber":211,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":212,"author":{"gitId":"hjl99"},"content":"            String[] taskDetails \u003d taskContent.split("},{"lineNumber":213,"author":{"gitId":"hjl99"},"content":"                    commandType.equals(\"event\") ? \" /at \" : \" /by \", 2);"},{"lineNumber":214,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":215,"author":{"gitId":"hjl99"},"content":"            String taskAction \u003d taskDetails[0];"},{"lineNumber":216,"author":{"gitId":"hjl99"},"content":"            String taskDateTime \u003d taskDetails[1];"},{"lineNumber":217,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":218,"author":{"gitId":"hjl99"},"content":"            String dateTime \u003d dateTimeParser(commandType, taskDateTime);"},{"lineNumber":219,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":220,"author":{"gitId":"hjl99"},"content":"            if (dateTime.equals(\"improperDateTime\")) {"},{"lineNumber":221,"author":{"gitId":"hjl99"},"content":"                return new String[]{\"exception\", \"improperDateTime\"};"},{"lineNumber":222,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":224,"author":{"gitId":"hjl99"},"content":"            return new String[]{commandType, taskAction, dateTime};"},{"lineNumber":225,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":226,"author":{"gitId":"hjl99"},"content":"            return parseException(commandType);"},{"lineNumber":227,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":229,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":231,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":232,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"hjl99"},"content":"     * Returns Specific information of an exception in Segments."},{"lineNumber":234,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":235,"author":{"gitId":"hjl99"},"content":"     * @param type  type of exception to be processed."},{"lineNumber":236,"author":{"gitId":"hjl99"},"content":"     * @returns  Specific information of exception in String array."},{"lineNumber":237,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":238,"author":{"gitId":"hjl99"},"content":"    private String[] parseException(String type) {"},{"lineNumber":239,"author":{"gitId":"hjl99"},"content":"        switch (type) {"},{"lineNumber":240,"author":{"gitId":"hjl99"},"content":"        case \"done\":"},{"lineNumber":241,"author":{"gitId":"hjl99"},"content":"        case \"delete\":"},{"lineNumber":242,"author":{"gitId":"hjl99"},"content":"            return new String[] {\"exception\", \"empty_illegal\"};"},{"lineNumber":243,"author":{"gitId":"hjl99"},"content":"        case \"find\":"},{"lineNumber":244,"author":{"gitId":"hjl99"},"content":"        case \"todo\":"},{"lineNumber":245,"author":{"gitId":"hjl99"},"content":"        case \"event\":"},{"lineNumber":246,"author":{"gitId":"hjl99"},"content":"        case \"deadline\":"},{"lineNumber":247,"author":{"gitId":"hjl99"},"content":"            return new String[] {\"exception\", type};"},{"lineNumber":248,"author":{"gitId":"hjl99"},"content":"        default:"},{"lineNumber":249,"author":{"gitId":"hjl99"},"content":"            return new String[] {\"exception\", \"no_meaning\"};"},{"lineNumber":250,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":252,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":254,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":254}},{"path":"src/main/java/duke/SpecialFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class SpecialFormat {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    /** Separation line */"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"    public static final String SEPARATION_LINE \u003d \"    ____________________________________________________________\";"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"    /** Indentation */"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    public static final String INDENT \u003d \"     \";"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    /** Starting line */"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    public static final String STARTING_LINE \u003d SEPARATION_LINE + \"\\n\" + INDENT;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    /** Ending line */"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    public static final String ENDING_LINE \u003d \"\\n\" + SEPARATION_LINE + \"\\n\";"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    /** Split notation to separate information components stored in the local file */"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public static final String SPLIT_NOTN \u003d \"@#%#@%\";"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    /** Change line notation */"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public static final String CHANGE_LINE \u003d \"\\n\";"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"     * Constructor of SpecialFormat."},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    public SpecialFormat() {}"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"}"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":""}],"authorContributionMap":{"hjl99":29}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    /** Directory of local file to store tasks */"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    public String fileDirectory;"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    /** Name of the local file to store tasks */"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public String fileName;"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    /** The File object to enable file writing and editing */"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public File memoFile;"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    /** Parser object */"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    public Parser parser;"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"     * Constructor of Storage class."},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"     * Initializes class members fileDirectory, fileName, parser."},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"     * @param fileDirectory  Directory of local file to store tasks."},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"     * @param fileName  Name of local file to store tasks."},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    public Storage(String fileDirectory, String fileName) {"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"        this.fileDirectory \u003d fileDirectory;"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"        parser \u003d new Parser();"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"     * Initializes the File object to enable writing memory."},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"     * Creates valid directory and file if not present."},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":"     * @throws IOException if exception caught in createNewFile()."},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"    public void reachFile() throws IOException {"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"        assert (!fileDirectory.isBlank() \u0026\u0026 !fileName.isBlank());"},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"        // If directory provided does not exist, create a directory"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"        File dataFolder \u003d new File(fileDirectory);"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"        if (!dataFolder.exists() \u0026\u0026 !dataFolder.isDirectory()) {"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"            dataFolder.mkdirs();"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"        // If the file does not exist, create a new file"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"        File taskListFile \u003d new File(fileDirectory + fileName);"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"        if (!taskListFile.exists()) {"},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"            taskListFile.createNewFile();"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"        this.memoFile \u003d taskListFile;"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"     * Returns List of Task objects read and processed from local memory."},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"     * @return List of Task objects each time the chatbot is started."},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"     * @throws IOException if exception caught in reachFile()."},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"    public List\u003cTask\u003e readMemoTasks() throws IOException {"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"        List\u003cTask\u003e taskCollections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"        Scanner sc;"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"        // Reach the designated file before reading it"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"        reachFile();"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"            assert (memoFile !\u003d null);"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"            sc \u003d new Scanner(memoFile);"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"        } catch (Exception e) {"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"            // If problems encountered while trying to read the file, return an empty list"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"            return taskCollections;"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"            String currTask \u003d sc.nextLine();"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"            if (currTask.isBlank()) {"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"                continue;"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"            // parse the task line read from the file"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"            String[] taskInfo \u003d parser.localFileTaskParser(currTask);"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"            assert (taskInfo.length \u003e 1);"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"            String taskType \u003d taskInfo[0];"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"            boolean isDone \u003d taskInfo[1].equals(\"0\") ? false : true;"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"            String taskAction \u003d taskInfo[2];"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"            Task t \u003d taskType.equals(\"T\")"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"                    ? new Todo(taskAction, isDone)"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"                    : taskType.equals(\"E\")"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"                        ? new Event(taskAction, taskInfo[3], isDone)"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"                        : new Deadline(taskAction, taskInfo[3], isDone);"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"            taskCollections.add(t);"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"        return taskCollections;"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"     * Returns String of a Task object for storage in local memory."},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"     * @param t  Task object for conversion."},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"     * @return  Task String to be stored in memory."},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"    public String taskToMemoStr(Task t) {"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"        String memoStr \u003d \"\";"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"        String[] info \u003d t.getInfo();"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"        memoStr +\u003d \"\\n\" + info[0] + SpecialFormat.SPLIT_NOTN + info[1]"},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"                + SpecialFormat.SPLIT_NOTN + info[2];"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"        // For Deadline or Event, add datetime property"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":"        if (t.getType().equals(\"D\") || t.getType().equals(\"E\")) {"},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"            memoStr +\u003d SpecialFormat.SPLIT_NOTN + info[3];"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"        return memoStr;"},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"     * Returns true if file is successfully read and written, false otherwise."},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"     * Overwrites local memory with the current List of Task objects."},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"     * Creates a new file with current task-list if file does not exist."},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"     * Recovers the old list if the local file or even directory is accidentally deleted."},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":"     * @param taskList  Current List of Task objects."},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":"     * @return  true if successfully read and written file, false if failure."},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"    public boolean write_memory(List\u003cTask\u003e taskList) {"},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"            if (!new File(fileDirectory + fileName).exists()) {"},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"                reachFile();"},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"            FileWriter fw \u003d new FileWriter(fileDirectory + fileName);"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"            Iterator taskIter \u003d taskList.iterator();"},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"            String textToAppend \u003d \"\";"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":"            while (taskIter.hasNext()) {"},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"                Task t \u003d (Task) taskIter.next();"},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"                textToAppend +\u003d taskToMemoStr(t);"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":"            fw.write(textToAppend);"},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"            fw.close();"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"            return true;"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":"        } catch (Exception e) {"},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"            return false;"},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"     * Returns true if file is successfully modified, false otherwise."},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":"     * Modifies local memory with a newly added Task object (not overwriting)."},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"     * If local file not existing, create a new file."},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":"     * @param filePath  Path of the file to be modified."},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":"     * @param t  Task object to be added."},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":"     * @return  true if successful appending/overwriting, false if failure."},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":"    public boolean appendToFile(String filePath, Task t, List\u003cTask\u003e taskList) {"},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"        if (!new File(filePath).exists()) {"},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":"            boolean success \u003d write_memory(taskList);"},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"            if (!success) {"},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":"                return false;"},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":"            FileWriter fw \u003d new FileWriter(filePath, true); // appending instead of overwriting"},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"            fw.write(taskToMemoStr(t));"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":"            fw.close();"},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":"            return false;"},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":"        return true;"},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":193}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    /** Content of the Task object */"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"    /** Completion status of the Task object */"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"     * Constructor of Task class."},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"     * Initialize class members description, completion status."},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"     * @param description  Content of the Task object."},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"     * Another Constructor of Task class."},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"     * Initialize class members description, completion status."},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"     * @param description  Content of the Task object."},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"     * @param isDone  Completion Status of the Task object."},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"        this.description \u003d description;"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"     * Return Completion status icon of Task object."},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"     * @return Tick or cross String to represent completion status of the Task object."},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"    public String getStatusIcon() {"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"     * Mark completion status of Task object as done."},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"    public void markAsDone() {"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"        isDone \u003d true;"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"     * Return Content of Task object."},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"     * @return String to represent content of the Task object."},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"    public String getDescription() {"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"        return this.description;"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"     * Return Type of Task object."},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"     * @return String to represent type of the Task object."},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"        return \"General_Task\";"},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"     * Return Completion status of Task object."},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"     * @return String \"1\" or \"0\" to represent completion status of the Task object."},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"    public String isDone() {"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"        return isDone ? \"1\" : \"0\";"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"     * Return Specific information of Task object."},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"     * @return Type, status, content, and empty datetime of Task object in the form of an array of Strings."},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"    public String[] getInfo() {"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"        return new String[]{this.getType(), this.isDone(), this.description, \"\"};"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"     * Return String representation of Task object."},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"     * @return String representation of Task object."},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":105}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"     * Collection of Task objects for easy modification"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    protected List\u003cTask\u003e taskCollections;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"     * Parser object to process input"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    protected Parser parser;"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"     * Directory of the file to store tasks"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"    protected String memoFileDir;"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"     * Name of the file to store tasks"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    protected String memoFileName;"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"     * Constructor of TaskList class."},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"     * Initializes the taskCollections to be an empty ArrayList."},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"     * @param taskCollections List of Task objects to initialize the class variable taskCollections."},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"     * @param memoFileDir     Directory of the file to store tasks."},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"     * @param memoFileName    Name of the file to store tasks."},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"    public TaskList(List\u003cTask\u003e taskCollections, String memoFileDir, String memoFileName) {"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"        this.taskCollections \u003d taskCollections;"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"        parser \u003d new Parser();"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"        this.memoFileDir \u003d memoFileDir;"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"        this.memoFileName \u003d memoFileName;"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"     * Another Constructor of TaskList class."},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"     * Initializes the taskCollections to be an empty ArrayList."},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"     * @return Type, status, content, and empty datetime of Task object in the form of an array of Strings"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"    public TaskList() {"},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"        this.taskCollections \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":"     * Returns taskCollections of the TaskList object."},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"     * @return Current list of Tasks."},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":"    public List\u003cTask\u003e showList() {"},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"        return taskCollections;"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":"     * Returns List of the Task objects matching the keyword."},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"     * @param keyword  User input of keyword to look for."},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":"     * @return Matching Task objects (task content or datetime)."},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"    public List\u003cTask\u003e searchTask(String keyword) {"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"        List\u003cTask\u003e searchResult \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"        Iterator itr \u003d taskCollections.iterator();"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"        String keywordLowerCase \u003d keyword.toLowerCase();"},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"        while (itr.hasNext()) {"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"            Task currTask \u003d (Task) itr.next();"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"            String taskContentLowerCase \u003d currTask.getDescription().toLowerCase();"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":"            // If keyword is present in the task content, it is a matching result"},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"            if (taskContentLowerCase.contains(keywordLowerCase)) {"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"                searchResult.add(currTask);"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"                continue;"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"            // search keyword in DateTime section of a \u0027Event\u0027 or \u0027Deadline\u0027 task"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"            String taskType \u003d currTask.getType();"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"            if (taskType.equals(\"D\") || taskType.equals(\"E\")) {"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"                String dateTimeLowerCase \u003d currTask.getInfo()[3].toLowerCase();"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"                if (dateTimeLowerCase.contains(keywordLowerCase)) {"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"                    searchResult.add(currTask);"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"        return searchResult;"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"     * Returns output array after a successful \u0027done\u0027 or \u0027delete\u0027 action."},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"     * Adds new Task object to the temporary collection and local memory."},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"     * @param commandArr  processed user input of \u0027done\u0027 or \u0027delete\u0027 command."},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"     * @return  output array after a successful \u0027modify\u0027 operation."},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e addTask(String[] commandArr) {"},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"        String type \u003d commandArr[0];"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"        String taskContent \u003d commandArr[1];"},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"        Task t \u003d type.equals(\"todo\")"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"                ? new Todo(taskContent)"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"                : type.equals(\"event\")"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":"                ? new Event(taskContent, commandArr[2])"},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":"                : new Deadline(taskContent, commandArr[2]);"},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"            // Add the task to the current task list"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":"            taskCollections.add(t);"},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"            // Update the local memory file with the new task"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"            Storage s \u003d new Storage(memoFileDir, memoFileName);"},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"            boolean success \u003d s.appendToFile(memoFileDir + memoFileName, t, taskCollections);"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":"            if (success) {"},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"                output.add(addSuccessMsg(\"add\", t.toString()));"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"                output.addAll(HandleException.handleException("},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":"                        DukeException.ExceptionType.READ_FILE"},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"                ));"},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":"        } catch (Exception e) {"},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"            output.addAll(HandleException.handleException("},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"                    DukeException.ExceptionType.READ_FILE));"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"        return output;"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"     * Returns output array after a successful \u0027done\u0027 or \u0027delete\u0027 action."},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":"     * Modifies temporary tasklist and overwrite local memory."},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":"     * @param commandArr  processed user input of \u0027done\u0027 or \u0027delete\u0027 command."},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":"     * @return  output array after a successful \u0027modify\u0027 operation."},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e editTask(String[] commandArr) {"},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"            String actionType \u003d commandArr[0];"},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"            int taskNumber \u003d Integer.parseInt(commandArr[1]);"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":"            int actionNumber \u003d taskNumber - 1;"},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"            String taskContent \u003d taskCollections.get(actionNumber).toString();"},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"            // Update the task list with the new task status"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":"            editTaskCollections(actionType, actionNumber);"},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"            // Update local file with new task status"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":"            boolean success \u003d new Storage(memoFileDir, memoFileName).write_memory(taskCollections);"},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"            if (success) {"},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"                output.add(addSuccessMsg(actionType, taskContent));"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"            } else {"},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"                output.addAll(HandleException.handleException("},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"                        DukeException.ExceptionType.READ_FILE"},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":"                ));"},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"            }"},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"        } catch (Exception ex) {"},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":"            output.addAll(HandleException.handleException("},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"                    DukeException.ExceptionType.EMPTY_ILLEGAL));"},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":"        return output;"},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":"     * Modifies local taskCollections in response to a \u0027done\u0027 or \u0027delete\u0027 command."},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":"     * @param actionType  type of \u0027modification\u0027 command."},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":"     * @param actionNumber  actual index of task in taskCollections (starts from 0)."},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"    public void editTaskCollections(String actionType, int actionNumber) {"},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":"        switch (actionType) {"},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"        case \"delete\":"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":"            taskCollections.remove(actionNumber);"},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":"        case \"done\":"},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":"        default:"},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":"            taskCollections.get(actionNumber).markAsDone();"},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":195,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":196,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"hjl99"},"content":"     * Returns output message after a successful \u0027done\u0027, \u0027delete\u0027 or \u0027add\u0027 action."},{"lineNumber":198,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"hjl99"},"content":"     * @param type  type of command."},{"lineNumber":200,"author":{"gitId":"hjl99"},"content":"     * @param taskContent  content of the task that is added or modified."},{"lineNumber":201,"author":{"gitId":"hjl99"},"content":"     * @return  success message after a successful \u0027add\u0027 or \u0027modify\u0027 operation."},{"lineNumber":202,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"hjl99"},"content":"    public String addSuccessMsg(String type, String taskContent) {"},{"lineNumber":204,"author":{"gitId":"hjl99"},"content":"        switch (type) {"},{"lineNumber":205,"author":{"gitId":"hjl99"},"content":"            case \"delete\":"},{"lineNumber":206,"author":{"gitId":"hjl99"},"content":"                return \"Noted. I\u0027ve removed this task:\\n\" + taskContent"},{"lineNumber":207,"author":{"gitId":"hjl99"},"content":"                        + \"\\nNow you have \" + taskCollections.size() + \" tasks in the list.\";"},{"lineNumber":208,"author":{"gitId":"hjl99"},"content":"            case \"done\":"},{"lineNumber":209,"author":{"gitId":"hjl99"},"content":"                return \"Nice! I\u0027ve marked this task as done:\\n\" + \" [\\u2713] \""},{"lineNumber":210,"author":{"gitId":"hjl99"},"content":"                        + taskContent.split(\"] \", 2)[1];"},{"lineNumber":211,"author":{"gitId":"hjl99"},"content":"            case \"add\":"},{"lineNumber":212,"author":{"gitId":"hjl99"},"content":"            default:"},{"lineNumber":213,"author":{"gitId":"hjl99"},"content":"                return \"Got it. I\u0027ve added ths task:\\n\" + \"  \" + taskContent"},{"lineNumber":214,"author":{"gitId":"hjl99"},"content":"                        + \"\\nNow you have \" + taskCollections.size() + \" tasks in the list.\";"},{"lineNumber":215,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":218,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":218}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"     * Constructor of Todo class."},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"     * @param description Content of the Todo object."},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    public Todo(String description) {"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"     * Another Constructor of Todo class."},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"     * @param description Content of the Todo object."},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"     * @param isDone      Completion status of the Todo object."},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"        super(description, isDone);"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"     * Return Type representation of the Todo object."},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"     * @return String \"T\" as Type representation of the Todo object."},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    public String getType() {"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"        return \"T\";"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"     * Return String representation of the Todo object."},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"     * @return String representation."},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":46}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import java.io.FilenameFilter;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"import java.util.*;"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"    /** Directory of local file to store tasks */"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"    protected String filePath;"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    /** Name of local file to store tasks */"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    protected String fileName;"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    /** Parser object to understand requests */"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    protected Parser parser;"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    /** TaskList object to store Task objects and modify the list */"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"    protected TaskList taskList;"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"    /** Storage object to store and read Task objects */"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    protected Storage storage;"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    protected static boolean sleepMode \u003d false;"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"     * Constructor of Ui class."},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"     * Initializes the filepath, filename, and list of tasks already stored in memory."},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"     * @param filePath  Directory of local file to read and write."},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"     * @param fileName  Name of local file to read and write."},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"     * @param memoTask  List of Task objects stored in memory."},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    public Ui(String filePath, String fileName, List\u003cTask\u003e memoTask) {"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":40,"author":{"gitId":"hjl99"},"content":"        parser \u003d new Parser();"},{"lineNumber":41,"author":{"gitId":"hjl99"},"content":"        storage \u003d new Storage(filePath, fileName);"},{"lineNumber":42,"author":{"gitId":"hjl99"},"content":"        taskList \u003d new TaskList(memoTask, filePath, fileName);"},{"lineNumber":43,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":45,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":46,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"hjl99"},"content":"     * Returns processed user input of commands once the system is awake."},{"lineNumber":49,"author":{"gitId":"hjl99"},"content":"     * Returns system response if the chatbot is in sleeping mode."},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"hjl99"},"content":"     * @param input  User input of command."},{"lineNumber":52,"author":{"gitId":"hjl99"},"content":"     * @return processed system response to user commands."},{"lineNumber":53,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"hjl99"},"content":"    public String[] processRequests(String input) {"},{"lineNumber":55,"author":{"gitId":"hjl99"},"content":"        if (sleepMode \u0026\u0026 !input.equals(\"hello\")) {"},{"lineNumber":56,"author":{"gitId":"hjl99"},"content":"            return new String[]{\"You have left the dialog.\\nPlease restart the app or enter \\\"hello\\\" to wake me up!\"};"},{"lineNumber":57,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":59,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response;"},{"lineNumber":60,"author":{"gitId":"hjl99"},"content":"        // Parse the command and obtain the segmented parsed-command information"},{"lineNumber":61,"author":{"gitId":"hjl99"},"content":"        String[] commandTask \u003d parser.commandParser(input);"},{"lineNumber":62,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":63,"author":{"gitId":"hjl99"},"content":"        if (commandTask.length \u003d\u003d 1) {"},{"lineNumber":64,"author":{"gitId":"hjl99"},"content":"            response \u003d processSingleWordRequest(commandTask[0]);"},{"lineNumber":65,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"hjl99"},"content":"            response \u003d processComplexRequest(commandTask);"},{"lineNumber":67,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":69,"author":{"gitId":"hjl99"},"content":"        return response.toArray(new String[response.size()]);"},{"lineNumber":70,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":72,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":73,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"hjl99"},"content":"     * Returns system response to single-word commands."},{"lineNumber":75,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"hjl99"},"content":"     * @param command  user input of command."},{"lineNumber":77,"author":{"gitId":"hjl99"},"content":"     * @return output list in response to simple commands."},{"lineNumber":78,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processSingleWordRequest(String command) {"},{"lineNumber":80,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":82,"author":{"gitId":"hjl99"},"content":"        switch(command){"},{"lineNumber":83,"author":{"gitId":"hjl99"},"content":"        case \"hello\":"},{"lineNumber":84,"author":{"gitId":"hjl99"},"content":"            response.addAll(processHelloCommand());"},{"lineNumber":85,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"hjl99"},"content":"        case \"help\":"},{"lineNumber":87,"author":{"gitId":"hjl99"},"content":"            response.add(DukeException.fullGuide);"},{"lineNumber":88,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":89,"author":{"gitId":"hjl99"},"content":"        case \"bye\":"},{"lineNumber":90,"author":{"gitId":"hjl99"},"content":"            sleepMode \u003d true;"},{"lineNumber":91,"author":{"gitId":"hjl99"},"content":"            response.add(\"Bye. Hope to see you again soon!\");"},{"lineNumber":92,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"hjl99"},"content":"        case \"archive\":"},{"lineNumber":94,"author":{"gitId":"hjl99"},"content":"            response.addAll(processArchiveRequest());"},{"lineNumber":95,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"hjl99"},"content":"        case \"listArchive\":"},{"lineNumber":97,"author":{"gitId":"hjl99"},"content":"            response.addAll(processListArchiveRequest());"},{"lineNumber":98,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"hjl99"},"content":"        case \"list\":"},{"lineNumber":100,"author":{"gitId":"hjl99"},"content":"        default:"},{"lineNumber":101,"author":{"gitId":"hjl99"},"content":"            response.add(processListCommand());"},{"lineNumber":102,"author":{"gitId":"hjl99"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":105,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":106,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":108,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":109,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"hjl99"},"content":"     * Returns list of all tasks in response to \u0027list\u0027 command."},{"lineNumber":111,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"hjl99"},"content":"     * @return system response to \u0027hello\u0027 command."},{"lineNumber":113,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"hjl99"},"content":"    public String processListCommand() {"},{"lineNumber":115,"author":{"gitId":"hjl99"},"content":"        String output \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":116,"author":{"gitId":"hjl99"},"content":"        Iterator task_iter \u003d taskList.showList().iterator();"},{"lineNumber":117,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":118,"author":{"gitId":"hjl99"},"content":"        int temp \u003d 1;"},{"lineNumber":119,"author":{"gitId":"hjl99"},"content":"        while (task_iter.hasNext()) {"},{"lineNumber":120,"author":{"gitId":"hjl99"},"content":"            output +\u003d \"\\n\" + temp + \". \" + task_iter.next();"},{"lineNumber":121,"author":{"gitId":"hjl99"},"content":"            temp++;"},{"lineNumber":122,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"hjl99"},"content":"        return output;"},{"lineNumber":124,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":126,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":127,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"hjl99"},"content":"     * Returns opening address in response to \u0027hello\u0027 command that wakes the system."},{"lineNumber":129,"author":{"gitId":"hjl99"},"content":"     * Modifies the system sleep-status when the system is successfully waken."},{"lineNumber":130,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"hjl99"},"content":"     * @return system response to \u0027hello\u0027 command."},{"lineNumber":132,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processHelloCommand() {"},{"lineNumber":134,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":135,"author":{"gitId":"hjl99"},"content":"        if (sleepMode) {"},{"lineNumber":136,"author":{"gitId":"hjl99"},"content":"            sleepMode \u003d false;"},{"lineNumber":137,"author":{"gitId":"hjl99"},"content":"            output.add(\"Hello! This is J.A.R.V.I.S.\\nHow may I help you?\");"},{"lineNumber":138,"author":{"gitId":"hjl99"},"content":"            output.add(\"Enter \u0027help\u0027 for command guide.\");"},{"lineNumber":139,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":140,"author":{"gitId":"hjl99"},"content":"            output.add(\"You have already started our dialog.\\nPlease enter your command :)\");"},{"lineNumber":141,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"hjl99"},"content":"        return output;"},{"lineNumber":143,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":144,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":146,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":147,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"hjl99"},"content":"     * Returns system response to multiple-word commands."},{"lineNumber":149,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"hjl99"},"content":"     * @param commandTask  processed user input of command."},{"lineNumber":151,"author":{"gitId":"hjl99"},"content":"     * @return output list containing system response to complex commands."},{"lineNumber":152,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processComplexRequest(String[] commandTask) {"},{"lineNumber":154,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":155,"author":{"gitId":"hjl99"},"content":"        String commandType \u003d commandTask[0];"},{"lineNumber":156,"author":{"gitId":"hjl99"},"content":"        switch (commandType) {"},{"lineNumber":157,"author":{"gitId":"hjl99"},"content":"        case \"find\":"},{"lineNumber":158,"author":{"gitId":"hjl99"},"content":"            return processFindKeyword(commandTask[1]);"},{"lineNumber":159,"author":{"gitId":"hjl99"},"content":"        case \"exception\":"},{"lineNumber":160,"author":{"gitId":"hjl99"},"content":"            return processException(commandTask[1]);"},{"lineNumber":161,"author":{"gitId":"hjl99"},"content":"        case \"done\":"},{"lineNumber":162,"author":{"gitId":"hjl99"},"content":"        case \"delete\":"},{"lineNumber":163,"author":{"gitId":"hjl99"},"content":"            return processEditRequest(commandTask);"},{"lineNumber":164,"author":{"gitId":"hjl99"},"content":"        case \"loadArchive\":"},{"lineNumber":165,"author":{"gitId":"hjl99"},"content":"            return processLoadArchiveRequest(commandTask[1]);"},{"lineNumber":166,"author":{"gitId":"hjl99"},"content":"        case \"binArchive\":"},{"lineNumber":167,"author":{"gitId":"hjl99"},"content":"            return processBinArchiveRequest(commandTask[1]);"},{"lineNumber":168,"author":{"gitId":"hjl99"},"content":"        case \"todo\":"},{"lineNumber":169,"author":{"gitId":"hjl99"},"content":"        case \"event\":"},{"lineNumber":170,"author":{"gitId":"hjl99"},"content":"        case \"deadline\":"},{"lineNumber":171,"author":{"gitId":"hjl99"},"content":"        default:"},{"lineNumber":172,"author":{"gitId":"hjl99"},"content":"            return processAddRequest(commandTask);"},{"lineNumber":173,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":176,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":177,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"hjl99"},"content":"     * Returns system response to \u0027editing\u0027 requests, i.e. \u0027done\u0027 and \u0027delete\u0027."},{"lineNumber":179,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":180,"author":{"gitId":"hjl99"},"content":"     * @param commandTask  processed user input of command."},{"lineNumber":181,"author":{"gitId":"hjl99"},"content":"     * @return System response to user input of modification commands."},{"lineNumber":182,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processEditRequest(String[] commandTask) {"},{"lineNumber":184,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d taskList.editTask(commandTask);"},{"lineNumber":185,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":186,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":188,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":189,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"hjl99"},"content":"     * Returns system response to \u0027archive\u0027 request."},{"lineNumber":191,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":192,"author":{"gitId":"hjl99"},"content":"     * @return system response to \u0027archive\u0027 request."},{"lineNumber":193,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processArchiveRequest() {"},{"lineNumber":195,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":196,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":197,"author":{"gitId":"hjl99"},"content":"        // fileTimeCode is unique for every file since it implies its creation time"},{"lineNumber":198,"author":{"gitId":"hjl99"},"content":"        long fileTimeCode \u003d new Date().getTime();"},{"lineNumber":199,"author":{"gitId":"hjl99"},"content":"        String archiveFileName \u003d \"Archive-\" + fileTimeCode + \".txt\";"},{"lineNumber":200,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":201,"author":{"gitId":"hjl99"},"content":"        Storage s \u003d new Storage(filePath, archiveFileName);"},{"lineNumber":202,"author":{"gitId":"hjl99"},"content":"        boolean success \u003d s.write_memory(taskList.showList());"},{"lineNumber":203,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":204,"author":{"gitId":"hjl99"},"content":"        if (success) {"},{"lineNumber":205,"author":{"gitId":"hjl99"},"content":"            response.add(\"Tasks successfully archived! Enter \u0027listArchive\u0027 to observe a new file being added.\");"},{"lineNumber":206,"author":{"gitId":"hjl99"},"content":"        } else {"},{"lineNumber":207,"author":{"gitId":"hjl99"},"content":"            response.addAll(HandleException.handleException("},{"lineNumber":208,"author":{"gitId":"hjl99"},"content":"                    DukeException.ExceptionType.READ_FILE));"},{"lineNumber":209,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":211,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":213,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":214,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"hjl99"},"content":"     * Returns system response to \u0027listArchive\u0027 request."},{"lineNumber":216,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":217,"author":{"gitId":"hjl99"},"content":"     * @return system response to \u0027listArchive\u0027 request."},{"lineNumber":218,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processListArchiveRequest() {"},{"lineNumber":220,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":221,"author":{"gitId":"hjl99"},"content":"        File archiveDirPath \u003d new File(filePath);"},{"lineNumber":222,"author":{"gitId":"hjl99"},"content":"        FilenameFilter archiveFilefilter \u003d (directory, fileName) -\u003e {"},{"lineNumber":223,"author":{"gitId":"hjl99"},"content":"            return fileName.startsWith(\"Archive-\");"},{"lineNumber":224,"author":{"gitId":"hjl99"},"content":"        };"},{"lineNumber":225,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":226,"author":{"gitId":"hjl99"},"content":"        File filesList[] \u003d archiveDirPath.listFiles(archiveFilefilter);"},{"lineNumber":227,"author":{"gitId":"hjl99"},"content":"        Arrays.sort(filesList, Comparator.comparingLong(File::lastModified));"},{"lineNumber":228,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":229,"author":{"gitId":"hjl99"},"content":"        String output \u003d \"\";"},{"lineNumber":230,"author":{"gitId":"hjl99"},"content":"        output +\u003d \"* Please Note:\\n\";"},{"lineNumber":231,"author":{"gitId":"hjl99"},"content":"        output +\u003d \"Your current list will be discarded once you switch to an archive file.\\n\";"},{"lineNumber":232,"author":{"gitId":"hjl99"},"content":"        output +\u003d \"Key in \u0027archive\u0027 to save your work before continuing with \u0027loadArchive FILE_NAME\u0027.\\n\\n\";"},{"lineNumber":233,"author":{"gitId":"hjl99"},"content":"        output +\u003d \"Use \u0027File name\u0027 of the archive file for any further operation.\\n\";"},{"lineNumber":234,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":235,"author":{"gitId":"hjl99"},"content":"        for(File file : filesList) {"},{"lineNumber":236,"author":{"gitId":"hjl99"},"content":"            output +\u003d \"\\n\" + \"File name: \" + file.getName();"},{"lineNumber":237,"author":{"gitId":"hjl99"},"content":"            output +\u003d \"\\n\" + \"Archived at: \" + new Date(file.lastModified()) + \"\\n\";"},{"lineNumber":238,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"hjl99"},"content":"        response.add(output);"},{"lineNumber":240,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":241,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":243,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":244,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"hjl99"},"content":"     * Returns system response to \u0027loadArchiveLoad\u0027 request."},{"lineNumber":246,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":247,"author":{"gitId":"hjl99"},"content":"     * @param arcFileName  Name of the file to load and read from."},{"lineNumber":248,"author":{"gitId":"hjl99"},"content":"     * @return system response to \u0027loadArchiveLoad\u0027 request."},{"lineNumber":249,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processLoadArchiveRequest(String arcFileName) {"},{"lineNumber":251,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":252,"author":{"gitId":"hjl99"},"content":"        File testPath \u003d new File (filePath + arcFileName);"},{"lineNumber":253,"author":{"gitId":"hjl99"},"content":"        if (!testPath.exists()) {"},{"lineNumber":254,"author":{"gitId":"hjl99"},"content":"            response.add(\"☹ OOPS!!! Invalid input of filename. Please copy and paste with care.\");"},{"lineNumber":255,"author":{"gitId":"hjl99"},"content":"            return response;"},{"lineNumber":256,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":258,"author":{"gitId":"hjl99"},"content":"        try {"},{"lineNumber":259,"author":{"gitId":"hjl99"},"content":"            response.addAll(loadArchiveHelper(arcFileName));"},{"lineNumber":260,"author":{"gitId":"hjl99"},"content":"        } catch (Exception e) {"},{"lineNumber":261,"author":{"gitId":"hjl99"},"content":"            response.addAll(HandleException.handleException(DukeException.ExceptionType.READ_FILE));"},{"lineNumber":262,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":264,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":266,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":267,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":268,"author":{"gitId":"hjl99"},"content":"     * Returns system response to a successful \u0027loadArchiveLoad\u0027 operation."},{"lineNumber":269,"author":{"gitId":"hjl99"},"content":"     * Helps with the operation of loading an archived list to the current list."},{"lineNumber":270,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":271,"author":{"gitId":"hjl99"},"content":"     * @param arcFileName  Name of the file to load and read from."},{"lineNumber":272,"author":{"gitId":"hjl99"},"content":"     * @return system response to successful \u0027loadArchiveLoad\u0027 operation."},{"lineNumber":273,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":274,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e loadArchiveHelper(String arcFileName) throws IOException {"},{"lineNumber":275,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":276,"author":{"gitId":"hjl99"},"content":"        Storage s \u003d new Storage(filePath, arcFileName);"},{"lineNumber":277,"author":{"gitId":"hjl99"},"content":"        // Read the tasks from the archive file"},{"lineNumber":278,"author":{"gitId":"hjl99"},"content":"        List\u003cTask\u003e tl \u003d s.readMemoTasks();"},{"lineNumber":279,"author":{"gitId":"hjl99"},"content":"        // Rewrite memory of the current file (to load the archived list)"},{"lineNumber":280,"author":{"gitId":"hjl99"},"content":"        boolean successReplacement \u003d storage.write_memory(tl);"},{"lineNumber":281,"author":{"gitId":"hjl99"},"content":"        if (!successReplacement) {"},{"lineNumber":282,"author":{"gitId":"hjl99"},"content":"            response.addAll(HandleException.handleException(DukeException.ExceptionType.READ_FILE));"},{"lineNumber":283,"author":{"gitId":"hjl99"},"content":"            return response;"},{"lineNumber":284,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"hjl99"},"content":"        // If successfully loaded to the current setting, return response message"},{"lineNumber":286,"author":{"gitId":"hjl99"},"content":"        taskList \u003d new TaskList(tl, filePath, fileName);"},{"lineNumber":287,"author":{"gitId":"hjl99"},"content":"        File arcFile \u003d new File(filePath, arcFileName);"},{"lineNumber":288,"author":{"gitId":"hjl99"},"content":"        Date arcFileCreationDate \u003d new Date(arcFile.lastModified());"},{"lineNumber":289,"author":{"gitId":"hjl99"},"content":"        String output \u003d \"\";"},{"lineNumber":290,"author":{"gitId":"hjl99"},"content":"        output +\u003d \"Task List successfully loaded from Archive file \u0027\" + arcFileName + \"\u0027 created at  \""},{"lineNumber":291,"author":{"gitId":"hjl99"},"content":"                + arcFileCreationDate + \"!\";"},{"lineNumber":292,"author":{"gitId":"hjl99"},"content":"        output +\u003d \"\\nEnter \u0027list\u0027 to see the tasks!\";"},{"lineNumber":293,"author":{"gitId":"hjl99"},"content":"        response.add(output);"},{"lineNumber":294,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":295,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":297,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":298,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":299,"author":{"gitId":"hjl99"},"content":"     * Returns system response to \u0027binArchiveLoad\u0027 request."},{"lineNumber":300,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":301,"author":{"gitId":"hjl99"},"content":"     * @param arcFileName  Name of the archive file to delete."},{"lineNumber":302,"author":{"gitId":"hjl99"},"content":"     * @return system response to \u0027binArchiveLoad\u0027 request."},{"lineNumber":303,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":304,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processBinArchiveRequest(String arcFileName) {"},{"lineNumber":305,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":306,"author":{"gitId":"hjl99"},"content":"        File testPathFile \u003d new File (filePath + arcFileName);"},{"lineNumber":307,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":308,"author":{"gitId":"hjl99"},"content":"        // Check if the file exists (if the user inputs the wrong filename)"},{"lineNumber":309,"author":{"gitId":"hjl99"},"content":"        if (!testPathFile.exists()) {"},{"lineNumber":310,"author":{"gitId":"hjl99"},"content":"            response.add(\"☹ OOPS!!! Invalid input of filename. Please copy and paste with care.\");"},{"lineNumber":311,"author":{"gitId":"hjl99"},"content":"            return response;"},{"lineNumber":312,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":313,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":314,"author":{"gitId":"hjl99"},"content":"        // Delete that archived file and return response message"},{"lineNumber":315,"author":{"gitId":"hjl99"},"content":"        Date binFileCreationDate \u003d new Date(testPathFile.lastModified());"},{"lineNumber":316,"author":{"gitId":"hjl99"},"content":"        testPathFile.delete();"},{"lineNumber":317,"author":{"gitId":"hjl99"},"content":"        response.add(\"Successful deletion of archive file \u0027\" + arcFileName + \"\u0027 created at \""},{"lineNumber":318,"author":{"gitId":"hjl99"},"content":"                + binFileCreationDate + \"!\" + \"\\nEnter \u0027listArchive\u0027 to see the current file list!\");"},{"lineNumber":319,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":320,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":321,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":323,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":324,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":325,"author":{"gitId":"hjl99"},"content":"     * Returns output list containing system response to task-addition commands\u0027."},{"lineNumber":326,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":327,"author":{"gitId":"hjl99"},"content":"     * @param commandTask  processed user input of task-addition command."},{"lineNumber":328,"author":{"gitId":"hjl99"},"content":"     * @return output list containing system response to todo\u0027, \u0027event\u0027, \u0027deadline\u0027 commands."},{"lineNumber":329,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":330,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processAddRequest(String[] commandTask) {"},{"lineNumber":331,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d taskList.addTask(commandTask);"},{"lineNumber":332,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":333,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":335,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":336,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":337,"author":{"gitId":"hjl99"},"content":"     * Returns output list containing system response to \u0027find\u0027 command."},{"lineNumber":338,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":339,"author":{"gitId":"hjl99"},"content":"     * @param keyword  word to be searched in the task list."},{"lineNumber":340,"author":{"gitId":"hjl99"},"content":"     * @return output list containing system response to \u0027find\u0027 command."},{"lineNumber":341,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":342,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processFindKeyword(String keyword) {"},{"lineNumber":343,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":344,"author":{"gitId":"hjl99"},"content":"        List\u003cTask\u003e matchList \u003d taskList.searchTask(keyword);"},{"lineNumber":345,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":346,"author":{"gitId":"hjl99"},"content":"        // If there is no match, return a corresponding message"},{"lineNumber":347,"author":{"gitId":"hjl99"},"content":"        if (matchList.size() \u003d\u003d 0) {"},{"lineNumber":348,"author":{"gitId":"hjl99"},"content":"            response.add(\"Sorry, there is no match for your keyword!\");"},{"lineNumber":349,"author":{"gitId":"hjl99"},"content":"            return response;"},{"lineNumber":350,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":351,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":352,"author":{"gitId":"hjl99"},"content":"        String output \u003d \"Here are the tasks that match your keyword:\\n\";"},{"lineNumber":353,"author":{"gitId":"hjl99"},"content":"        Iterator itr \u003d matchList.iterator();"},{"lineNumber":354,"author":{"gitId":"hjl99"},"content":"        int taskNumber \u003d 1;"},{"lineNumber":355,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":356,"author":{"gitId":"hjl99"},"content":"        while (itr.hasNext()) {"},{"lineNumber":357,"author":{"gitId":"hjl99"},"content":"            output +\u003d \"\\n\" + taskNumber + \".\" + itr.next();"},{"lineNumber":358,"author":{"gitId":"hjl99"},"content":"            taskNumber++;"},{"lineNumber":359,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":361,"author":{"gitId":"hjl99"},"content":"        response.add(output);"},{"lineNumber":362,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":363,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":365,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":366,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":367,"author":{"gitId":"hjl99"},"content":"     * Returns output list after adding the information about the exception."},{"lineNumber":368,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":369,"author":{"gitId":"hjl99"},"content":"     * @param exceptionType  type of exception encountered."},{"lineNumber":370,"author":{"gitId":"hjl99"},"content":"     * @return output list after adding the information about the exception."},{"lineNumber":371,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":372,"author":{"gitId":"hjl99"},"content":"    public List\u003cString\u003e processException(String exceptionType) {"},{"lineNumber":373,"author":{"gitId":"hjl99"},"content":"        List\u003cString\u003e response \u003d new ArrayList\u003c\u003e();"},{"lineNumber":374,"author":{"gitId":"hjl99"},"content":"        response.addAll(HandleException.handleException("},{"lineNumber":375,"author":{"gitId":"hjl99"},"content":"                        returnException(exceptionType)));"},{"lineNumber":376,"author":{"gitId":"hjl99"},"content":"        return response;"},{"lineNumber":377,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":378,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":379,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":380,"author":{"gitId":"hjl99"},"content":"    /**"},{"lineNumber":381,"author":{"gitId":"hjl99"},"content":"     * Returns ExceptionType in response to different exceptions caught."},{"lineNumber":382,"author":{"gitId":"hjl99"},"content":"     *"},{"lineNumber":383,"author":{"gitId":"hjl99"},"content":"     * @param exceptionType  type of exception encountered."},{"lineNumber":384,"author":{"gitId":"hjl99"},"content":"     * @return ExceptionType that corresponds to the exception caught."},{"lineNumber":385,"author":{"gitId":"hjl99"},"content":"     */"},{"lineNumber":386,"author":{"gitId":"hjl99"},"content":"    public DukeException.ExceptionType returnException(String exceptionType) {"},{"lineNumber":387,"author":{"gitId":"hjl99"},"content":"        switch (exceptionType) {"},{"lineNumber":388,"author":{"gitId":"hjl99"},"content":"        case \"todo\":"},{"lineNumber":389,"author":{"gitId":"hjl99"},"content":"            return DukeException.ExceptionType.TODO_INCOMPLETE;"},{"lineNumber":390,"author":{"gitId":"hjl99"},"content":"        case \"event\":"},{"lineNumber":391,"author":{"gitId":"hjl99"},"content":"            return DukeException.ExceptionType.EVENT_INCOMPLETE;"},{"lineNumber":392,"author":{"gitId":"hjl99"},"content":"        case \"deadline\":"},{"lineNumber":393,"author":{"gitId":"hjl99"},"content":"            return DukeException.ExceptionType.DEADLINE_INCOMPLETE;"},{"lineNumber":394,"author":{"gitId":"hjl99"},"content":"        case \"empty_illegal\":"},{"lineNumber":395,"author":{"gitId":"hjl99"},"content":"            return DukeException.ExceptionType.EMPTY_ILLEGAL;"},{"lineNumber":396,"author":{"gitId":"hjl99"},"content":"        case \"improperDateTime\":"},{"lineNumber":397,"author":{"gitId":"hjl99"},"content":"            return DukeException.ExceptionType.IMPROPER_DATETIME;"},{"lineNumber":398,"author":{"gitId":"hjl99"},"content":"        case \"find\":"},{"lineNumber":399,"author":{"gitId":"hjl99"},"content":"            return DukeException.ExceptionType.FIND_INCOMPLETE;"},{"lineNumber":400,"author":{"gitId":"hjl99"},"content":"        case \"no_meaning\":"},{"lineNumber":401,"author":{"gitId":"hjl99"},"content":"        default:"},{"lineNumber":402,"author":{"gitId":"hjl99"},"content":"            return DukeException.ExceptionType.NO_MEANING;"},{"lineNumber":403,"author":{"gitId":"hjl99"},"content":"        }"},{"lineNumber":404,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":405,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":406,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":407,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":407}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"10\" minWidth\u003d\"50\""},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"                style\u003d\"-fx-border-width:1; -fx-background-color:rgb(100, 200, 218); -fx-padding:10, 10, 10, 10; -fx-border-radius: 8; -fx-background-radius: 15; -fx-border-width:8px; -fx-border-color:rgb(244, 244, 244);\"/\u003e"},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50\" fitWidth\u003d\"50\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\""},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"                style\u003d\"-fx-padding:10, 0, 0, 10; -fx-height:10\"/\u003e"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"    \u003c/children\u003e"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    \u003c/padding\u003e"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"\u003c/fx:root\u003e"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":""}],"authorContributionMap":{"hjl99":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\""},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"                /\u003e"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"            \u003ccontent\u003e"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"                \u003c!--\u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e--\u003e"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"382.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"            \u003c/content\u003e"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"    \u003c/children\u003e"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"hjl99":21}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":9,"author":{"gitId":"hjl99"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"hjl99"},"content":"    public void dateTimeConverter_processTime_success() {"},{"lineNumber":11,"author":{"gitId":"hjl99"},"content":"        assertEquals("},{"lineNumber":12,"author":{"gitId":"hjl99"},"content":"                new DateTimeConverter(FormatStyle.MEDIUM,"},{"lineNumber":13,"author":{"gitId":"hjl99"},"content":"                        FormatStyle.SHORT).processTime(\"todo\", \"10/12/2020 1300\"),"},{"lineNumber":14,"author":{"gitId":"hjl99"},"content":"                \"Dec 10, 2020, 1:00 PM\");"},{"lineNumber":15,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    public void parser_processTime_success() {"},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"        String[] orig \u003d new Parser().commandParser(\"deadline finish assignments /by 2020-12-10 1500\");"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"        String[] actual \u003d new String[]{\"deadline\", \"finish assignments\", \"Dec 10, 2020, 3:00 PM\"};"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":"        assertEquals(orig[0], actual[0]);"},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"        assertEquals(orig[1], actual[1]);"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"        assertEquals(orig[2], actual[2]);"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":"    public void deadline_getInfo_success() {"},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"        String[] orig \u003d new Deadline(\"read books\", \"Dec 10, 2020, 3:00 PM\").getInfo();"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"        String[] actual \u003d new String[]{\"D\", \"0\", \"read books\", \"Dec 10, 2020, 3:00 PM\"};"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"        assertEquals(orig[0], actual[0]);"},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"        assertEquals(orig[1], actual[1]);"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"        assertEquals(orig[2], actual[2]);"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":"        assertEquals(orig[3], actual[3]);"},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"}"}],"authorContributionMap":{"hjl99":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"hjl99"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"hjl99"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"hjl99"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"hjl99"},"content":"list"},{"lineNumber":5,"author":{"gitId":"hjl99"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"hjl99"},"content":"list"},{"lineNumber":7,"author":{"gitId":"hjl99"},"content":"bye"}],"authorContributionMap":{"hjl99":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"hjl99"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Task.java"},{"lineNumber":17,"author":{"gitId":"hjl99"},"content":"then"},{"lineNumber":18,"author":{"gitId":"hjl99"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"hjl99"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"hjl99"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":22,"author":{"gitId":"hjl99"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Deadline.java"},{"lineNumber":23,"author":{"gitId":"hjl99"},"content":"then"},{"lineNumber":24,"author":{"gitId":"hjl99"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":25,"author":{"gitId":"hjl99"},"content":"    exit 1"},{"lineNumber":26,"author":{"gitId":"hjl99"},"content":"fi"},{"lineNumber":27,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":28,"author":{"gitId":"hjl99"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Event.java"},{"lineNumber":29,"author":{"gitId":"hjl99"},"content":"then"},{"lineNumber":30,"author":{"gitId":"hjl99"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":31,"author":{"gitId":"hjl99"},"content":"    exit 1"},{"lineNumber":32,"author":{"gitId":"hjl99"},"content":"fi"},{"lineNumber":33,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":34,"author":{"gitId":"hjl99"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Todo.java"},{"lineNumber":35,"author":{"gitId":"hjl99"},"content":"then"},{"lineNumber":36,"author":{"gitId":"hjl99"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":37,"author":{"gitId":"hjl99"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"hjl99"},"content":"fi"},{"lineNumber":39,"author":{"gitId":"hjl99"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":41,"author":{"gitId":"-"},"content":"then"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":47,"author":{"gitId":"hjl99"},"content":"java -classpath ../bin main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":50,"author":{"gitId":"hjl99"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":51,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":52,"author":{"gitId":"-"},"content":"then"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":55,"author":{"gitId":"-"},"content":"else"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":58,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"hjl99":26,"-":32}}]
