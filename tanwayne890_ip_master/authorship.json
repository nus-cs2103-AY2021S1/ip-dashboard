[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[T][笨余 read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[T][笨余 eat fruits"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[D][笨余 return books (by: May 20 2000, 12:12PM)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "[E][笨余 eat dinner with family (at: Aug 18 2000, 06:18PM)"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 4
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    CommandType commandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    String[] commandArr;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Command(CommandType commandType, String[] commandArr) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void printAllTask(TaskList tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        int numTask \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        while (numTask \u003c tasks.size()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(Integer.valueOf(numTask + 1) + \".\" + tasks.getTask(numTask));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            numTask++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void deleteTask(int pos, TaskList tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \\n\" + tasks.getTask(pos) +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                \"\\n\" + \"Now you have \" + Integer.valueOf(tasks.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks.removeTask(pos);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static String[] removeFirst(String[] arr) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] tempArr \u003d new String[arr.length];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.length - 1; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tempArr[i] \u003d arr[i + 1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tempArr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static String[] removeAfterWord(String[] arr, String word) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] temp \u003d new String[arr.length];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            if (arr[i].equals(word)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                temp[i] \u003d arr[i];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static String[] keepAfterWord(String[] arr, String word) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] temp \u003d new String[arr.length];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // find position of the word"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            if (arr[i].equals(word)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                counter \u003d i;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        counter++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (int i \u003d 0; (counter + i) \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            temp[i] \u003d arr[counter + i];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static String joinString(String[] arr) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String text \u003d arr[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (arr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length \u0026\u0026 arr[i] !\u003d null; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                text \u003d text + \" \" + arr[i];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task createTodo() throws InvalidTodoDescripDukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidTodoDescripDukeException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] modifiedCommand \u003d removeFirst(commandArr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task newTask \u003d new Todo(joinString(modifiedCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task createDeadline() throws InvalidDeadlineDescripDukeException, ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidDeadlineDescripDukeException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // /by 2/12/2019 1800"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] modifiedCommand \u003d removeFirst(commandArr);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] upper \u003d removeAfterWord(modifiedCommand, \"/by\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] lower \u003d keepAfterWord(modifiedCommand, \"/by\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDateTime dateAndTime \u003d Parser.changeDateAndTime(lower);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task newTask \u003d new Deadline(joinString(upper), dateAndTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task createEvent() throws InvalidEventDescripDukeException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidEventDescripDukeException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] modifiedCommand \u003d removeFirst(commandArr);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] upper \u003d removeAfterWord(modifiedCommand, \"/at\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] lower \u003d keepAfterWord(modifiedCommand, \"/at\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDateTime dateAndTime \u003d Parser.changeDateAndTime(lower);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task newTask \u003d new Event(joinString(upper), dateAndTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        // deadline eat dinner with family /at 2000-08-1818:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws InvalidTodoDescripDukeException,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            InvalidDeadlineDescripDukeException, InvalidEventDescripDukeException,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            InvalidFirstDukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandType.equals(CommandType.PRINTALLTASKS)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            printAllTask(tasks);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandType.equals(CommandType.EXITDUKE)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            ui.closeDuke();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandType.equals(CommandType.MARKASDONE)){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            int counter \u003d Integer.parseInt(commandArr[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.getTask(counter - 1).markAsDone();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandType.equals(CommandType.DELETETASK)){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            int counter \u003d Integer.parseInt(commandArr[1]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            deleteTask(counter - 1, tasks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandType.equals(CommandType.ADDTODO)){"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.addTask(createTodo());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandType.equals(CommandType.ADDDEADLINE)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.addTask(createDeadline());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandType.equals(CommandType.ADDEVENT)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.addTask(createEvent());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            storage.saveToFile(tasks.tasks);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandType.equals(CommandType.EXITDUKE)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            // close scanner"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 150
    }
  },
  {
    "path": "src/main/java/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    EXITDUKE, PRINTALLTASKS, ADDTODO, ADDDEADLINE, ADDEVENT, MARKASDONE, DELETETASK;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "// a task that need to specify a date to be done before the date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Deadline(boolean isDone, String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\")) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "//            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "//            ui.showLoadingError();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 42,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "// a task that need to specify exact date and time"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Event(Boolean isDone, String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\")) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 24
    }
  },
  {
    "path": "src/main/java/InvalidDeadlineDescripDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidDeadlineDescripDukeException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidDeadlineDescripDukeException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\" 笘ｹ OOPS!!! The description of a deadline is invalid.\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "src/main/java/InvalidEventDescripDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidEventDescripDukeException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidEventDescripDukeException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\" 笘ｹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "src/main/java/InvalidFirstDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidFirstDukeException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidFirstDukeException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\"笘ｹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "src/main/java/InvalidTodoDescripDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class InvalidTodoDescripDukeException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    InvalidTodoDescripDukeException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(\" 笘ｹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static LocalDateTime changeDateAndTime(String[] dateAndTime) throws NumberFormatException, ParseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String date \u003d dateAndTime[0];"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String time \u003d dateAndTime[1];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        LocalDateTime localDateAndTime \u003d LocalDateTime.parse((date + \" \" + time), formatter);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return localDateAndTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidFirstDukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] commandArr \u003d fullCommand.split(\" \"); // split input into string array"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (commandArr[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.EXITDUKE, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandArr[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.PRINTALLTASKS, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandArr[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.MARKASDONE, commandArr);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandArr[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.DELETETASK, commandArr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandArr[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.ADDTODO, commandArr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandArr[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.ADDDEADLINE, commandArr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (commandArr[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            command \u003d new Command(CommandType.ADDEVENT, commandArr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            throw new InvalidFirstDukeException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String[] temp \u003d {\"2019-12-20\", \"18:00\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(Parser.changeDateAndTime(temp));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 48
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static ArrayList\u003cTask\u003e readFromFile(String filepath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            tasks.add(StorageParser.parse(input));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d readFromFile(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void saveToFile(ArrayList\u003cTask\u003e taskArr) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        File oldFile\u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        oldFile.delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        File newFile\u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        FileWriter fw \u003d new FileWriter(newFile, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        for (Task task : taskArr) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fw.write(task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 45
    }
  },
  {
    "path": "src/main/java/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static boolean isDone(String symbol) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (symbol.equals(\"笨貼")) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static Task parse(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] splitTask \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String typeAndIsDone \u003d splitTask[0].replaceFirst(\"\\\\]\", \"|\")."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                replaceAll(\"\\\\[\",\"\").replaceAll(\"\\\\]\",\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String[] typeAndIsDoneArr \u003d typeAndIsDone.split(\"\\\\|\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (typeAndIsDoneArr[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            boolean isDone \u003d isDone(typeAndIsDoneArr[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            task \u003d new Todo(isDone, splitTask[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (typeAndIsDoneArr[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            boolean isDone \u003d isDone(typeAndIsDoneArr[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String organisedDescription \u003d splitTask[1].replaceAll(\" \\\\(by: \",\"|\").replaceAll(\"\\\\)\",\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String[] splitDescription \u003d organisedDescription.split(\"\\\\|\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            LocalDateTime localDateAndTime \u003d LocalDateTime.parse(splitDescription[1], formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            task \u003d new Deadline(isDone, splitDescription[0], localDateAndTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else if (typeAndIsDoneArr[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            boolean isDone \u003d isDone(typeAndIsDoneArr[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String organisedDescription \u003d splitTask[1].replaceAll(\" \\\\(at: \",\"|\").replaceAll(\"\\\\)\",\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            String[] splitDescription \u003d organisedDescription.split(\"\\\\|\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            LocalDateTime localDateAndTime \u003d LocalDateTime.parse(splitDescription[1], formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            task \u003d new Event(isDone, splitDescription[0], localDateAndTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            System.out.println(\"error in reading input\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(StorageParser.parse(\"[T][笨余 read book\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(StorageParser.parse(\"[D][笨余 return book (by: Oct 15 2019, 12:00PM)\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 48
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return (isDone ? \"笨貼" : \"笨予"); //return tick or X symbols"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n [笨転 \" + description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 28
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Task getTask(int pos) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return tasks.get(pos);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void removeTask(int pos) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks.remove(pos);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void printAddedTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                + task + \"\\nNow you have \" + String.valueOf(tasks.size())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        printAddedTask(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 36
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "// Any task which does not need to specify any date and time"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Todo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String temp \u003d null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "            temp \u003d sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String line \u003d \"--------------------------------------\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String error \u003d \"error loading Duke\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String greeting \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    public void closeDuke() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        String bye \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "        System.out.println(bye);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 42
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 2,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Command.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\CommandType.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\DukeException.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\DukeFileReader.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\DukeFileWriter.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Event.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidDeadlineDescripDukeException.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidEventDescripDukeException.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidFirstDukeException.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\InvalidTodoDescripDukeException.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Parser.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Storage.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Task.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\TaskList.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Todo.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanwayne890"
        },
        "content": "E:\\repos\\ip\\src\\main\\java\\Ui.java"
      }
    ],
    "authorContributionMap": {
      "tanwayne890": 18
    }
  }
]
