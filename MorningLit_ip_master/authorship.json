[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"   "},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":18,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"   "},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"1. After the importing is complete, locate the `src/main/java/duke.main.Duke.java` file, right-click it, and choose `Run duke.main.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"   "},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"   ![Welcome image](/src/main/resources/images/hello.png)"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"5. Here are the following commands that Duke understands:"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"   * `help` - Displays the list of commands that Duke understands."},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"   * `list` - Displays the list of the user\u0027s tasks available."},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"   * `save` - Manually saves the current state of the list of the user\u0027s tasks."},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"   * `bye` - Saves the list of the user\u0027s tasks and displays the goodbye message. It is safe to exit the program after this command."},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"   * `todo \u0027TASK\u0027` - Creates a new todo task with the description."},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"   * `deadline \u0027TASK\u0027 /by \u0027dd/MM/yyyy HH:mm\u0027` - Creates a new deadline task with the description and the date due by."},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"   * `event \u0027TASK\u0027 /at \u0027dd/MM/yyyy HH:mm\u0027` - Creates a new event task with the description and the date due at."},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"   * `done \u0027n\u0027` - Marks the task at position \u0027n\u0027 of the list of the user\u0027s tasks as done."},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"   * `delete \u0027n\u0027` - Deletes the task at position \u0027n\u0027 of the list of the user\u0027s tasks."}],"authorContributionMap":{"MorningLit":17,"-":17}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"MorningLit"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MorningLit":16,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"### Task CRUD"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"Able to store and manage your list of tasks locally on your computer!."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"### `help` - Display the help command"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"Displays the list of commands that Duke understands."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"`help`"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"Here are the list of commands you can use:"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"help, list, save, bye, todo \u0027TASK\u0027, deadline \u0027TASK\u0027 /by \u0027dd/MM/yyyy HH:mm\u0027, event \u0027TASK\u0027 /at \u0027dd/MM/yyyy HH:mm\u0027, done \u0027n\u0027, delete \u0027n\u0027 "},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"### `list` - Display the list"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"Displays the list of the user\u0027s tasks available."},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"`list`"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"You have no tasks left! Good job my child!"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":" Here is the task in your list:"},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":" 1.[T][N] dab"},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"### `save` - Manually saves"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"Manually saves the current state of the list of the user\u0027s tasks."},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":52,"author":{"gitId":"MorningLit"},"content":"`save`"},{"lineNumber":53,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":54,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":55,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":56,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":57,"author":{"gitId":"MorningLit"},"content":"Saving..."},{"lineNumber":58,"author":{"gitId":"MorningLit"},"content":"Saved successfully!"},{"lineNumber":59,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":60,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":61,"author":{"gitId":"MorningLit"},"content":"### `bye` - Display the goodbye message"},{"lineNumber":62,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":63,"author":{"gitId":"MorningLit"},"content":"Saves the list of the user\u0027s tasks and displays the goodbye message. It is safe to exit the program after this command."},{"lineNumber":64,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":65,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":66,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":67,"author":{"gitId":"MorningLit"},"content":"`bye`"},{"lineNumber":68,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":69,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":70,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":71,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":72,"author":{"gitId":"MorningLit"},"content":" Bye. Hope to see you again soon!"},{"lineNumber":73,"author":{"gitId":"MorningLit"},"content":" You can now safely close the app!"},{"lineNumber":74,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":75,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":76,"author":{"gitId":"MorningLit"},"content":"### `todo` - Create a new todo task"},{"lineNumber":77,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":78,"author":{"gitId":"MorningLit"},"content":"Creates a new todo task with the description."},{"lineNumber":79,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":80,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":81,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":82,"author":{"gitId":"MorningLit"},"content":"`todo \u0027TASK\u0027`"},{"lineNumber":83,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":84,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":85,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":86,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":87,"author":{"gitId":"MorningLit"},"content":" Got it. I\u0027ve added this task:"},{"lineNumber":88,"author":{"gitId":"MorningLit"},"content":"  [T][N] dab"},{"lineNumber":89,"author":{"gitId":"MorningLit"},"content":" Now you have 1 task in the list."},{"lineNumber":90,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":91,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":92,"author":{"gitId":"MorningLit"},"content":"### `deadline` - Create a new deadline task"},{"lineNumber":93,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":94,"author":{"gitId":"MorningLit"},"content":"Creates a new deadline task with the description and the date due by."},{"lineNumber":95,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":96,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":97,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":98,"author":{"gitId":"MorningLit"},"content":"`deadline \u0027TASK\u0027 /by \u0027dd/MM/yyyy HH:mm\u0027`"},{"lineNumber":99,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":100,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":101,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":102,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":103,"author":{"gitId":"MorningLit"},"content":" Got it. I\u0027ve added this task:"},{"lineNumber":104,"author":{"gitId":"MorningLit"},"content":"  [D][N] dab (by: Nov 11 1111 11:11)"},{"lineNumber":105,"author":{"gitId":"MorningLit"},"content":" Now you have 1 task in the list."},{"lineNumber":106,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":107,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":108,"author":{"gitId":"MorningLit"},"content":"### `event` - Create a new event task"},{"lineNumber":109,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":110,"author":{"gitId":"MorningLit"},"content":"Creates a new event task with the description and the date due at."},{"lineNumber":111,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":112,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":113,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":114,"author":{"gitId":"MorningLit"},"content":"`event \u0027TASK\u0027 /at \u0027dd/MM/yyyy HH:mm\u0027`"},{"lineNumber":115,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":116,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":117,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":118,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":119,"author":{"gitId":"MorningLit"},"content":" Got it. I\u0027ve added this task:"},{"lineNumber":120,"author":{"gitId":"MorningLit"},"content":"  [E][N] dab (at: Nov 11 1111 11:11)"},{"lineNumber":121,"author":{"gitId":"MorningLit"},"content":" Now you have 1 task in the list."},{"lineNumber":122,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":123,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":124,"author":{"gitId":"MorningLit"},"content":"### `done` - Marks a task done"},{"lineNumber":125,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":126,"author":{"gitId":"MorningLit"},"content":"Marks the task at position \u0027n\u0027 of the list of the user\u0027s tasks as done."},{"lineNumber":127,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":128,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":129,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":130,"author":{"gitId":"MorningLit"},"content":"`done \u0027n\u0027`"},{"lineNumber":131,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":132,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":133,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":134,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":135,"author":{"gitId":"MorningLit"},"content":"Great job! I\u0027ll mark \u0027dab\u0027 as done for you. ^^"},{"lineNumber":136,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":137,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":138,"author":{"gitId":"MorningLit"},"content":"### `delete` - Delete a task"},{"lineNumber":139,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":140,"author":{"gitId":"MorningLit"},"content":"Deletes the task at position \u0027n\u0027 of the list of the user\u0027s tasks."},{"lineNumber":141,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":142,"author":{"gitId":"MorningLit"},"content":"Example of usage: "},{"lineNumber":143,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":144,"author":{"gitId":"MorningLit"},"content":"`delete \u0027n\u0027`"},{"lineNumber":145,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":146,"author":{"gitId":"MorningLit"},"content":"Expected outcome:"},{"lineNumber":147,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":148,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":149,"author":{"gitId":"MorningLit"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":150,"author":{"gitId":"MorningLit"},"content":" [T][N] dab"},{"lineNumber":151,"author":{"gitId":"MorningLit"},"content":"Now you have 1 task in the list."},{"lineNumber":152,"author":{"gitId":"MorningLit"},"content":"```"},{"lineNumber":153,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":154,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":155,"author":{"gitId":"MorningLit"},"content":""}],"authorContributionMap":{"MorningLit":141,"-":14}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.fxml.Main;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":11}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.error.IllegalCharacterError;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"public class AddTaskCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"    final Task task;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    public AddTaskCommand(Task task) {"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"        this.task \u003d task;"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) throws DukeError {"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"        if (task.getDescription().contains(\"|\") || task.getDate().contains(\"|\")) {"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"            throw new IllegalCharacterError();"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"        taskList.add(task);"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"        return ui.addTask(task.toString(), taskList.size());"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":31}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"public class ByeCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"        storage.saveData(ui, taskList);"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"        return UI.GOODBYE_MESSAGE;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"        return true;"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"        } else if (obj instanceof ByeCommand) {"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":" * The base command class for other command class to inherit from."},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"public interface Command {"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"     * Executes the command, taking in TaskList, UI and Storage to display the result in"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"     * UI while receiving data from TaskList and Storage and maybe modifying them concurrently."},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"     * @param taskList The class that holds the list of Tasks"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"     * @param ui       The User Interface which interacts with the user"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"     * @param storage  The class that deals with saving and loading data of the user"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"     * @throws DukeError DukeErrors may be thrown in the process if user input is faulty"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    String execute(TaskList taskList, UI ui, Storage storage) throws DukeError;"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"     * Checks whether the command that ran exited the Duke program."},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"     * @return Returns true if the command wants to exit the Duke program and vice versa"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"    boolean isExit();"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":31}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.error.InvalidRangeError;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"public class DeleteTaskCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"    private final int n;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    public DeleteTaskCommand(int n) {"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"        this.n \u003d n;"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) throws DukeError {"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"        if (n \u003c 1 || n \u003e taskList.size()) {"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"            throw new InvalidRangeError();"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"        Task task \u003d taskList.get(n - 1);"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"        taskList.remove(task);"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"        return ui.deleteTask(task.toString(), taskList.size());"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":32}},{"path":"src/main/java/duke/command/DisplayListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"public class DisplayListCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"        return ui.displayList(taskList);"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"        } else if (obj instanceof DisplayListCommand) {"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":30}},{"path":"src/main/java/duke/command/DoneTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.error.InvalidRangeError;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.error.TaskAlreadyCompletedError;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"public class DoneTaskCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    private final int n;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    public DoneTaskCommand(int n) {"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"        this.n \u003d n;"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) throws DukeError {"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"        if (n \u003c 1 || n \u003e taskList.size()) {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"            throw new InvalidRangeError();"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"        Task task \u003d taskList.get(n - 1);"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"        if (task.getIsDone()) {"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"            throw new TaskAlreadyCompletedError(task);"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"        task.markAsDone();"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"        return ui.doneTask(task.getDescription());"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":37}},{"path":"src/main/java/duke/command/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"public class ErrorCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"    private final Exception error;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    public ErrorCommand(Exception error) {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"        this.error \u003d error;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"        return ui.showError(error.getMessage());"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":24}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"public class FindCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"    private final String keyword;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"        return ui.displayMatchingList(taskList.findList(keyword));"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":24}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"public class HelpCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"        return UI.HELP_MESSAGE;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"        } else if (obj instanceof HelpCommand) {"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"            return true;"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":30}},{"path":"src/main/java/duke/command/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"public class SaveCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) {"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"        return storage.saveData(ui, taskList);"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":18}},{"path":"src/main/java/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.Storage;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.TaskList;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"public class SortCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    public String execute(TaskList taskList, UI ui, Storage storage) {"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"        taskList.sort(Comparator.comparing(Task::getActualDate));"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"        return UI.SORT_MESSAGE;"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        return false;"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":24}},{"path":"src/main/java/duke/error/DukeError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":" * The base error class for other Duke-related errors to inherit from."},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"public class DukeError extends Exception {"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"    DukeError(String msg) {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"        super(msg);"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":11}},{"path":"src/main/java/duke/error/EmptyDateError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"public class EmptyDateError extends DukeError {"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"    public EmptyDateError() {"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"        super(\"Please input a date!\");"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":8}},{"path":"src/main/java/duke/error/EmptyTaskError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"public class EmptyTaskError extends DukeError {"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"    public EmptyTaskError() {"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"        super(\"Please insert a task!\");"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":8}},{"path":"src/main/java/duke/error/FindMissingError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"public class FindMissingError extends DukeError {"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"    public FindMissingError() {"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"        super(\"Please insert a keyword!\");"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":8}},{"path":"src/main/java/duke/error/IllegalCharacterError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"public class IllegalCharacterError extends DukeError {"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"    public IllegalCharacterError() {"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"        super(\"You message contains an illegal character!\\nPlease remove it and try again!\");"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":8}},{"path":"src/main/java/duke/error/InvalidDateInputError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"public class InvalidDateInputError extends DukeError {"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"    public InvalidDateInputError() {"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"        super(\"Invalid date entered!\\nPlease enter the following format! dd/MM/yyyy HH:mm\");"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":8}},{"path":"src/main/java/duke/error/InvalidRangeError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"public class InvalidRangeError extends DukeError {"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"    public InvalidRangeError() {"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"        super(\"Uh oh! That number looks like it is out of range.\\nCheck again!\");"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":8}},{"path":"src/main/java/duke/error/TaskAlreadyCompletedError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"public class TaskAlreadyCompletedError extends DukeError {"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    public TaskAlreadyCompletedError(Task task) {"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"        super(String.format(\"Sorry! You have already completed \u0027%s\u0027.\", task.getDescription()));"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":10}},{"path":"src/main/java/duke/error/UnknownCommandError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"public class UnknownCommandError extends DukeError {"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"    public UnknownCommandError() {"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"        super(\"Unknown command!\\nPlease type \u0027help\u0027 for the list of commands!\");"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":8}},{"path":"src/main/java/duke/fxml/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.fxml;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":52,"author":{"gitId":"MorningLit"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"MorningLit"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":56,"author":{"gitId":"MorningLit"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"MorningLit"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"MorningLit"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"MorningLit"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":62,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":62}},{"path":"src/main/java/duke/fxml/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.fxml;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.Duke;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    private final Duke duke \u003d new Duke(\"data/tasks.txt\");"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":33}},{"path":"src/main/java/duke/fxml/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.fxml;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.main.Duke;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.main.UI;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"                DialogBox.getDukeDialog(UI.WELCOME_MESSAGE, dukeImage)"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"        duke \u003d d;"},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":"        String response;"},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"MorningLit"},"content":"            response \u003d duke.getResponse(input);"},{"lineNumber":53,"author":{"gitId":"MorningLit"},"content":"        } catch (DukeError dukeError) {"},{"lineNumber":54,"author":{"gitId":"MorningLit"},"content":"            response \u003d dukeError.getMessage();"},{"lineNumber":55,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"MorningLit"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":57,"author":{"gitId":"MorningLit"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":58,"author":{"gitId":"MorningLit"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":59,"author":{"gitId":"MorningLit"},"content":"        );"},{"lineNumber":60,"author":{"gitId":"MorningLit"},"content":"        userInput.clear();"},{"lineNumber":61,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":63,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":63}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":" * The main class for running Duke, the ChatBot."},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    private final Storage storage;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    private final TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    private final UI ui;"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"     * Initialisation for Duke, the ChatBot."},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"     * @param filepath Requires a filepath which will be relative to where Duke was ran, to save and load files from"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"    public Duke(String filepath) {"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"        ui \u003d new UI();"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"        storage \u003d new Storage(filepath);"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"        tasks \u003d storage.loadData(ui);"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"     * Runs Duke, the ChatBot."},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"    public void run() {"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"        boolean isExit \u003d false;"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"        while (!isExit) {"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"            } catch (DukeError e) {"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":"    public static void main(String[] args) {"},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"    public String getResponse(String input) throws DukeError {"},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":"        Command cmd \u003d Parser.parse(input);"},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":"        return cmd.execute(tasks, ui, storage);"},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MorningLit":52,"-":1}},{"path":"src/main/java/duke/main/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import duke.command.AddTaskCommand;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import duke.command.ByeCommand;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"import duke.command.DeleteTaskCommand;"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"import duke.command.DisplayListCommand;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"import duke.command.DoneTaskCommand;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"import duke.command.ErrorCommand;"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"import duke.command.FindCommand;"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"import duke.command.HelpCommand;"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"import duke.command.SaveCommand;"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"import duke.command.SortCommand;"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"import duke.error.DukeError;"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"import duke.error.EmptyDateError;"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"import duke.error.EmptyTaskError;"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"import duke.error.FindMissingError;"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"import duke.error.InvalidDateInputError;"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"import duke.error.UnknownCommandError;"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"import duke.task.Deadline;"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"import duke.task.Event;"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"import duke.task.ToDo;"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":" * The class that parses the user\u0027s input into commands that Duke can understand."},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"public abstract class Parser {"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"     * Reads the user\u0027s input and returns a command for Duke to execute."},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"     * @param inputLine The user\u0027s input"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"     * @return Returns an executable command based on the user\u0027s input"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"    public static Command parse(String inputLine) {"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":"        String[] arr \u003d inputLine.split(\" \");"},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":"        if (inputLine.equals(\"bye\")) {"},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":"            return new ByeCommand();"},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":"        } else if (inputLine.equals(\"help\")) {"},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":"            return new HelpCommand();"},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":"        } else if (inputLine.equals(\"list\")) {"},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"            return new DisplayListCommand();"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":"        } else if (inputLine.equals(\"save\")) {"},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"            return new SaveCommand();"},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":"        } else if (inputLine.equals(\"sort\")) {"},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":"            // can sort by task desc"},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":"            return new SortCommand();"},{"lineNumber":52,"author":{"gitId":"MorningLit"},"content":"        } else if (arr[0].equals(\"find\")) {"},{"lineNumber":53,"author":{"gitId":"MorningLit"},"content":"            try {"},{"lineNumber":54,"author":{"gitId":"MorningLit"},"content":"                if (arr.length \u003d\u003d 1) {"},{"lineNumber":55,"author":{"gitId":"MorningLit"},"content":"                    throw new FindMissingError();"},{"lineNumber":56,"author":{"gitId":"MorningLit"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"MorningLit"},"content":"            } catch (DukeError e) {"},{"lineNumber":58,"author":{"gitId":"MorningLit"},"content":"                return new ErrorCommand(e);"},{"lineNumber":59,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"MorningLit"},"content":"            return new FindCommand(inputLine.substring(5));"},{"lineNumber":61,"author":{"gitId":"MorningLit"},"content":"        } else if (arr.length \u003d\u003d 2 \u0026\u0026 (arr[0].equals(\"done\") || arr[0].equals(\"delete\")) \u0026\u0026 isInteger(arr[1])) {"},{"lineNumber":62,"author":{"gitId":"MorningLit"},"content":"            int num \u003d Integer.parseInt(arr[1]);"},{"lineNumber":63,"author":{"gitId":"MorningLit"},"content":"            if (arr[0].equals(\"done\")) {"},{"lineNumber":64,"author":{"gitId":"MorningLit"},"content":"                return new DoneTaskCommand(num);"},{"lineNumber":65,"author":{"gitId":"MorningLit"},"content":"            } else if (arr[0].equals(\"delete\")) {"},{"lineNumber":66,"author":{"gitId":"MorningLit"},"content":"                return new DeleteTaskCommand(num);"},{"lineNumber":67,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"MorningLit"},"content":"            try {"},{"lineNumber":70,"author":{"gitId":"MorningLit"},"content":"                switch (arr[0]) {"},{"lineNumber":71,"author":{"gitId":"MorningLit"},"content":"                case \"todo\":"},{"lineNumber":72,"author":{"gitId":"MorningLit"},"content":"                    return addTodo(inputLine);"},{"lineNumber":73,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":74,"author":{"gitId":"MorningLit"},"content":"                case \"deadline\":"},{"lineNumber":75,"author":{"gitId":"MorningLit"},"content":"                    return addDeadline(inputLine);"},{"lineNumber":76,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":77,"author":{"gitId":"MorningLit"},"content":"                case \"event\":"},{"lineNumber":78,"author":{"gitId":"MorningLit"},"content":"                    return addEvent(inputLine);"},{"lineNumber":79,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":80,"author":{"gitId":"MorningLit"},"content":"                default:"},{"lineNumber":81,"author":{"gitId":"MorningLit"},"content":"                    throw new UnknownCommandError();"},{"lineNumber":82,"author":{"gitId":"MorningLit"},"content":"                }"},{"lineNumber":83,"author":{"gitId":"MorningLit"},"content":"            } catch (DukeError e) {"},{"lineNumber":84,"author":{"gitId":"MorningLit"},"content":"                return new ErrorCommand(e);"},{"lineNumber":85,"author":{"gitId":"MorningLit"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":86,"author":{"gitId":"MorningLit"},"content":"                return new ErrorCommand(new InvalidDateInputError());"},{"lineNumber":87,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"MorningLit"},"content":"        return new ErrorCommand(new UnknownCommandError());"},{"lineNumber":90,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":92,"author":{"gitId":"MorningLit"},"content":"    private static Command addTodo(String inputLine) throws EmptyTaskError {"},{"lineNumber":93,"author":{"gitId":"MorningLit"},"content":"        String todo \u003d inputLine.substring(4).trim();"},{"lineNumber":94,"author":{"gitId":"MorningLit"},"content":"        if (todo.equals(\"\")) {"},{"lineNumber":95,"author":{"gitId":"MorningLit"},"content":"            throw new EmptyTaskError();"},{"lineNumber":96,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"MorningLit"},"content":"            return new AddTaskCommand(new ToDo(todo));"},{"lineNumber":98,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":101,"author":{"gitId":"MorningLit"},"content":"    private static Command addDeadline(String inputLine) throws EmptyTaskError, EmptyDateError, InvalidDateInputError {"},{"lineNumber":102,"author":{"gitId":"MorningLit"},"content":"        int by \u003d inputLine.indexOf(\"/by\");"},{"lineNumber":103,"author":{"gitId":"MorningLit"},"content":"        String deadline;"},{"lineNumber":104,"author":{"gitId":"MorningLit"},"content":"        String byDate;"},{"lineNumber":105,"author":{"gitId":"MorningLit"},"content":"        if (by \u003d\u003d -1) {"},{"lineNumber":106,"author":{"gitId":"MorningLit"},"content":"            deadline \u003d inputLine.substring(8).trim();"},{"lineNumber":107,"author":{"gitId":"MorningLit"},"content":"            byDate \u003d \"\";"},{"lineNumber":108,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":109,"author":{"gitId":"MorningLit"},"content":"            deadline \u003d inputLine.substring(8, by).trim();"},{"lineNumber":110,"author":{"gitId":"MorningLit"},"content":"            byDate \u003d inputLine.substring(by + 3).trim();"},{"lineNumber":111,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"MorningLit"},"content":"        if (deadline.equals(\"\")) {"},{"lineNumber":113,"author":{"gitId":"MorningLit"},"content":"            throw new EmptyTaskError();"},{"lineNumber":114,"author":{"gitId":"MorningLit"},"content":"        } else if (byDate.equals(\"\")) {"},{"lineNumber":115,"author":{"gitId":"MorningLit"},"content":"            throw new EmptyDateError();"},{"lineNumber":116,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":117,"author":{"gitId":"MorningLit"},"content":"            return new AddTaskCommand(new Deadline(deadline, formatDateTime(byDate)));"},{"lineNumber":118,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":121,"author":{"gitId":"MorningLit"},"content":"    private static Command addEvent(String inputLine) throws EmptyTaskError, EmptyDateError, InvalidDateInputError {"},{"lineNumber":122,"author":{"gitId":"MorningLit"},"content":"        int at \u003d inputLine.indexOf(\"/at\");"},{"lineNumber":123,"author":{"gitId":"MorningLit"},"content":"        String event;"},{"lineNumber":124,"author":{"gitId":"MorningLit"},"content":"        String atDate;"},{"lineNumber":125,"author":{"gitId":"MorningLit"},"content":"        if (at \u003d\u003d -1) {"},{"lineNumber":126,"author":{"gitId":"MorningLit"},"content":"            event \u003d inputLine.substring(5).trim();"},{"lineNumber":127,"author":{"gitId":"MorningLit"},"content":"            atDate \u003d \"\";"},{"lineNumber":128,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":129,"author":{"gitId":"MorningLit"},"content":"            event \u003d inputLine.substring(5, at).trim();"},{"lineNumber":130,"author":{"gitId":"MorningLit"},"content":"            atDate \u003d inputLine.substring(at + 3).trim();"},{"lineNumber":131,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"MorningLit"},"content":"        if (event.equals(\"\")) {"},{"lineNumber":133,"author":{"gitId":"MorningLit"},"content":"            throw new EmptyTaskError();"},{"lineNumber":134,"author":{"gitId":"MorningLit"},"content":"        } else if (atDate.equals(\"\")) {"},{"lineNumber":135,"author":{"gitId":"MorningLit"},"content":"            throw new EmptyDateError();"},{"lineNumber":136,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":137,"author":{"gitId":"MorningLit"},"content":"            return new AddTaskCommand(new Event(event, formatDateTime(atDate)));"},{"lineNumber":138,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":141,"author":{"gitId":"MorningLit"},"content":"    private static boolean isInteger(String strNum) {"},{"lineNumber":142,"author":{"gitId":"MorningLit"},"content":"        if (strNum \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitId":"MorningLit"},"content":"            return false;"},{"lineNumber":144,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"MorningLit"},"content":"        try {"},{"lineNumber":146,"author":{"gitId":"MorningLit"},"content":"            Integer.parseInt(strNum);"},{"lineNumber":147,"author":{"gitId":"MorningLit"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":148,"author":{"gitId":"MorningLit"},"content":"            return false;"},{"lineNumber":149,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"MorningLit"},"content":"        return true;"},{"lineNumber":151,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":153,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":154,"author":{"gitId":"MorningLit"},"content":"    private static LocalDateTime formatDateTime(String s) throws InvalidDateInputError {"},{"lineNumber":155,"author":{"gitId":"MorningLit"},"content":"        String[] dateAndTime \u003d s.split(\" \");"},{"lineNumber":156,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":157,"author":{"gitId":"MorningLit"},"content":"        if (dateAndTime.length !\u003d 2) {"},{"lineNumber":158,"author":{"gitId":"MorningLit"},"content":"            throw new InvalidDateInputError();"},{"lineNumber":159,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"MorningLit"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":161,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":162,"author":{"gitId":"MorningLit"},"content":"        String beforeDate \u003d dateAndTime[0];"},{"lineNumber":163,"author":{"gitId":"MorningLit"},"content":"        String[] arrDate \u003d beforeDate.split(\"/\");"},{"lineNumber":164,"author":{"gitId":"MorningLit"},"content":"        if (arrDate.length !\u003d 3) {"},{"lineNumber":165,"author":{"gitId":"MorningLit"},"content":"            throw new InvalidDateInputError();"},{"lineNumber":166,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":168,"author":{"gitId":"MorningLit"},"content":"        if (arrDate[0].length() \u003d\u003d 1) {"},{"lineNumber":169,"author":{"gitId":"MorningLit"},"content":"            beforeDate \u003d \"0\".concat(beforeDate);"},{"lineNumber":170,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"MorningLit"},"content":"        if (arrDate[1].length() \u003d\u003d 1) {"},{"lineNumber":172,"author":{"gitId":"MorningLit"},"content":"            beforeDate \u003d String.format(\"%s/0%s/%s\", beforeDate.substring(0, 2),"},{"lineNumber":173,"author":{"gitId":"MorningLit"},"content":"                    arrDate[1], arrDate[2]);"},{"lineNumber":174,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":176,"author":{"gitId":"MorningLit"},"content":"        String beforeTime \u003d dateAndTime[1];"},{"lineNumber":177,"author":{"gitId":"MorningLit"},"content":"        if (beforeTime.length() \u003d\u003d 4) {"},{"lineNumber":178,"author":{"gitId":"MorningLit"},"content":"            beforeTime \u003d beforeTime.substring(0, 2) + \":\" + beforeTime.substring(2);"},{"lineNumber":179,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"MorningLit"},"content":"        String after \u003d beforeDate + \" \" + beforeTime;"},{"lineNumber":181,"author":{"gitId":"MorningLit"},"content":"        return LocalDateTime.parse(after, dateFormatter);"},{"lineNumber":182,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":184,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":184}},{"path":"src/main/java/duke/main/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"import duke.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"import duke.task.Event;"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"import duke.task.ToDo;"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":" * The class that saves and loads data."},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"    private final String filepath;"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"     * Initialises the Storage class which requires a filepath to save and load data from."},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"     * @param filepath The relative filepath from where Duke was ran, to save and load data from"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"    public Storage(String filepath) {"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"    // can improve and abstract out to 2 different functions, one to show load success"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"    // and other to get tasklist"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"     * Loads data using the filepath given."},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":"     * @param ui Needed to display the outcome to the user"},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"     * @return Returns the saved TaskList, if there is any"},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":"    public TaskList loadData(UI ui) {"},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":"        Path path \u003d FileSystems.getDefault().getPath(filepath);"},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":"        if (!Files.exists(path)) {"},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":"            return new TaskList();"},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":"            File data \u003d new File(filepath);"},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":"            Scanner scanner \u003d new Scanner(data);"},{"lineNumber":52,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":53,"author":{"gitId":"MorningLit"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":54,"author":{"gitId":"MorningLit"},"content":"                String s \u003d scanner.nextLine();"},{"lineNumber":55,"author":{"gitId":"MorningLit"},"content":"                String[] str \u003d s.split(\"\\\\|\");"},{"lineNumber":56,"author":{"gitId":"MorningLit"},"content":"                DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":57,"author":{"gitId":"MorningLit"},"content":"                switch (str[0]) {"},{"lineNumber":58,"author":{"gitId":"MorningLit"},"content":"                case \"T\":"},{"lineNumber":59,"author":{"gitId":"MorningLit"},"content":"                    ToDo toDo \u003d new ToDo(str[2]);"},{"lineNumber":60,"author":{"gitId":"MorningLit"},"content":"                    if (str[1].equals(\"true\")) {"},{"lineNumber":61,"author":{"gitId":"MorningLit"},"content":"                        toDo.markAsDone();"},{"lineNumber":62,"author":{"gitId":"MorningLit"},"content":"                    }"},{"lineNumber":63,"author":{"gitId":"MorningLit"},"content":"                    taskList.add(toDo);"},{"lineNumber":64,"author":{"gitId":"MorningLit"},"content":"                    break;"},{"lineNumber":65,"author":{"gitId":"MorningLit"},"content":"                case \"D\":"},{"lineNumber":66,"author":{"gitId":"MorningLit"},"content":"                    Deadline deadline \u003d new Deadline(str[2], LocalDateTime.parse(str[3], dateFormatter));"},{"lineNumber":67,"author":{"gitId":"MorningLit"},"content":"                    if (str[1].equals(\"true\")) {"},{"lineNumber":68,"author":{"gitId":"MorningLit"},"content":"                        deadline.markAsDone();"},{"lineNumber":69,"author":{"gitId":"MorningLit"},"content":"                    }"},{"lineNumber":70,"author":{"gitId":"MorningLit"},"content":"                    taskList.add(deadline);"},{"lineNumber":71,"author":{"gitId":"MorningLit"},"content":"                    break;"},{"lineNumber":72,"author":{"gitId":"MorningLit"},"content":"                case \"E\":"},{"lineNumber":73,"author":{"gitId":"MorningLit"},"content":"                    Event event \u003d new Event(str[2], LocalDateTime.parse(str[3], dateFormatter));"},{"lineNumber":74,"author":{"gitId":"MorningLit"},"content":"                    if (str[1].equals(\"true\")) {"},{"lineNumber":75,"author":{"gitId":"MorningLit"},"content":"                        event.markAsDone();"},{"lineNumber":76,"author":{"gitId":"MorningLit"},"content":"                    }"},{"lineNumber":77,"author":{"gitId":"MorningLit"},"content":"                    taskList.add(event);"},{"lineNumber":78,"author":{"gitId":"MorningLit"},"content":"                    break;"},{"lineNumber":79,"author":{"gitId":"MorningLit"},"content":"                default:"},{"lineNumber":80,"author":{"gitId":"MorningLit"},"content":"                    throw new IOException();"},{"lineNumber":81,"author":{"gitId":"MorningLit"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"MorningLit"},"content":"            scanner.close();"},{"lineNumber":84,"author":{"gitId":"MorningLit"},"content":"            return taskList;"},{"lineNumber":85,"author":{"gitId":"MorningLit"},"content":"        } catch (IOException e) {"},{"lineNumber":86,"author":{"gitId":"MorningLit"},"content":"            System.out.println(\"Uh oh! An error has occurred. T_T\");"},{"lineNumber":87,"author":{"gitId":"MorningLit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":88,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"MorningLit"},"content":"        return new TaskList();"},{"lineNumber":90,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":92,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"MorningLit"},"content":"     * Saves data using the filepath given."},{"lineNumber":94,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"MorningLit"},"content":"     * @param ui       Needed to display the outcome to the user"},{"lineNumber":96,"author":{"gitId":"MorningLit"},"content":"     * @param taskList The TaskList being saved into the filepath"},{"lineNumber":97,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"MorningLit"},"content":"    public String saveData(UI ui, TaskList taskList) {"},{"lineNumber":99,"author":{"gitId":"MorningLit"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"MorningLit"},"content":"            File data \u003d new File(filepath);"},{"lineNumber":101,"author":{"gitId":"MorningLit"},"content":"            data.getParentFile().mkdirs();"},{"lineNumber":102,"author":{"gitId":"MorningLit"},"content":"            data.createNewFile();"},{"lineNumber":103,"author":{"gitId":"MorningLit"},"content":"            FileWriter fileWriter \u003d new FileWriter(data);"},{"lineNumber":104,"author":{"gitId":"MorningLit"},"content":"            PrintWriter writer \u003d new PrintWriter(fileWriter);"},{"lineNumber":105,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":106,"author":{"gitId":"MorningLit"},"content":"            String save \u003d UI.SAVE_START;"},{"lineNumber":107,"author":{"gitId":"MorningLit"},"content":"            for (Task task : taskList) {"},{"lineNumber":108,"author":{"gitId":"MorningLit"},"content":"                String s \u003d String.format(\"%s|%b|%s\", task.getTaskType(),"},{"lineNumber":109,"author":{"gitId":"MorningLit"},"content":"                        task.getIsDone(), task.getDescription());"},{"lineNumber":110,"author":{"gitId":"MorningLit"},"content":"                if (!task.getTaskType().equals(\"T\")) {"},{"lineNumber":111,"author":{"gitId":"MorningLit"},"content":"                    s \u003d s.concat(String.format(\"|%s\", task.getDate()));"},{"lineNumber":112,"author":{"gitId":"MorningLit"},"content":"                }"},{"lineNumber":113,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":114,"author":{"gitId":"MorningLit"},"content":"                writer.println(s);"},{"lineNumber":115,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"MorningLit"},"content":"            writer.close();"},{"lineNumber":117,"author":{"gitId":"MorningLit"},"content":"            return save + \"\\n\" + UI.SAVE_SUCCESS;"},{"lineNumber":118,"author":{"gitId":"MorningLit"},"content":"        } catch (IOException e) {"},{"lineNumber":119,"author":{"gitId":"MorningLit"},"content":"            System.out.println(\"Uh oh! An error has occurred. T_T\");"},{"lineNumber":120,"author":{"gitId":"MorningLit"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":121,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"MorningLit"},"content":"        return \"Uh oh! An error has occurred. T_T\";"},{"lineNumber":123,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":125,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":125}},{"path":"src/main/java/duke/main/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":" * The class that is responsible of taking care of the user\u0027s list of tasks."},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"     * Returns a TaskList that contains all the tasks which has the keyword in its"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"     * description."},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"     * @param keyword The keyword"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"     * @return The TaskList that contains all the tasks with the keyword"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    public TaskList findList(String keyword) {"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"        TaskList keywordList \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"        for (Task task : this) {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"                keywordList.add(task);"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"        return keywordList;"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":28}},{"path":"src/main/java/duke/main/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":" * The class that interacts with the user."},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"public class UI {"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    private static Scanner sc;"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    public final static String WELCOME_MESSAGE \u003d \" Hello! I\u0027m Duke!\";"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    public final static String GOODBYE_MESSAGE \u003d \" Bye. Hope to see you again soon!\\n\""},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"            + \" You can now safely close the app!\";"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    public final static String HELP_MESSAGE \u003d \"Here are the list of commands you can use:\\n\""},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"            + \"help, list, save, bye, todo \u0027TASK\u0027, deadline \u0027TASK\u0027 /by \u0027dd/MM/yyyy HH:mm\u0027, \""},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"            + \"event \u0027TASK\u0027 /at \u0027dd/MM/yyyy HH:mm\u0027, done \u0027n\u0027, delete \u0027n\u0027\";"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"    public final static String SORT_MESSAGE \u003d \"Tasks successfully sorted by date!\";"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    public final static String SAVE_START \u003d \"Saving...\";"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"    public final static String SAVE_SUCCESS \u003d \"Saved successfully!\";"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"     * Initialises the UI class."},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"    public UI() {"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"     * Reads in the user\u0027s input."},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"     * @return Returns the trimmed version of the user\u0027s input"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"    public String readCommand() {"},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":"        return sc.nextLine().trim();"},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":"     * Displays the error message to the user."},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":"     * @param error The error that was thrown"},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":"    public String showError(String error) {"},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":"        return error;"},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":53,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"MorningLit"},"content":"     * Displays the added task message to the user."},{"lineNumber":55,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"MorningLit"},"content":"     * @param task The task that was added"},{"lineNumber":57,"author":{"gitId":"MorningLit"},"content":"     * @param n    The size of the TaskList after the task was added"},{"lineNumber":58,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"MorningLit"},"content":"    public String addTask(String task, int n) {"},{"lineNumber":60,"author":{"gitId":"MorningLit"},"content":"        String s \u003d \" Got it. I\u0027ve added this task:\\n   \" + task + \"\\n\";"},{"lineNumber":61,"author":{"gitId":"MorningLit"},"content":"        return s.concat(displayListSize(n));"},{"lineNumber":62,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":64,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"MorningLit"},"content":"     * Displays the list of tasks to the user."},{"lineNumber":66,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"MorningLit"},"content":"     * @param taskList The TaskList of the user"},{"lineNumber":68,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"MorningLit"},"content":"    public String displayList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":70,"author":{"gitId":"MorningLit"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":71,"author":{"gitId":"MorningLit"},"content":"            return \"You have no tasks left! Good job my child!\";"},{"lineNumber":72,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":73,"author":{"gitId":"MorningLit"},"content":"            String s \u003d \"\";"},{"lineNumber":74,"author":{"gitId":"MorningLit"},"content":"            if (taskList.size() \u003d\u003d 1) {"},{"lineNumber":75,"author":{"gitId":"MorningLit"},"content":"                s \u003d s.concat(\" Here is the task in your list:\\n\");"},{"lineNumber":76,"author":{"gitId":"MorningLit"},"content":"            } else {"},{"lineNumber":77,"author":{"gitId":"MorningLit"},"content":"                s \u003d s.concat(\" Here are the tasks in your list:\\n\");"},{"lineNumber":78,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"MorningLit"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":80,"author":{"gitId":"MorningLit"},"content":"                s \u003d s.concat(\" \" + (i + 1) + \".\" + taskList.get(i) + \"\\n\");"},{"lineNumber":81,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"MorningLit"},"content":"            s \u003d s.substring(0, s.length() - 1);"},{"lineNumber":83,"author":{"gitId":"MorningLit"},"content":"            return s;"},{"lineNumber":84,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":87,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"MorningLit"},"content":"     * Displays the list of tasks that contains the matching keyword to the user."},{"lineNumber":89,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"MorningLit"},"content":"     * @param taskList The TaskList containing tasks with the matching keyword"},{"lineNumber":91,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"MorningLit"},"content":"    public String displayMatchingList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":93,"author":{"gitId":"MorningLit"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":94,"author":{"gitId":"MorningLit"},"content":"            return \"I\u0027ve found no matching tasks with the keyword! T_T\\nTry again!\";"},{"lineNumber":95,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":96,"author":{"gitId":"MorningLit"},"content":"            String s \u003d \"\";"},{"lineNumber":97,"author":{"gitId":"MorningLit"},"content":"            if (taskList.size() \u003d\u003d 1) {"},{"lineNumber":98,"author":{"gitId":"MorningLit"},"content":"                s \u003d s.concat(\" Here is the matching task in your list:\\n\");"},{"lineNumber":99,"author":{"gitId":"MorningLit"},"content":"            } else {"},{"lineNumber":100,"author":{"gitId":"MorningLit"},"content":"                s \u003d s.concat(\" Here are the matching tasks in your list:\\n\");"},{"lineNumber":101,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"MorningLit"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":103,"author":{"gitId":"MorningLit"},"content":"                s \u003d s.concat(\" \" + (i + 1) + \".\" + taskList.get(i) + \"\\n\");"},{"lineNumber":104,"author":{"gitId":"MorningLit"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"MorningLit"},"content":"            s \u003d s.substring(0, s.length() - 1);"},{"lineNumber":106,"author":{"gitId":"MorningLit"},"content":"            return s;"},{"lineNumber":107,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":110,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"MorningLit"},"content":"     * Displays the size of the TaskList to the user."},{"lineNumber":112,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"MorningLit"},"content":"     * @param n The size of the TaskList"},{"lineNumber":114,"author":{"gitId":"MorningLit"},"content":"     * @return Returns the String message to be concatenated with the display message."},{"lineNumber":115,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"MorningLit"},"content":"    public String displayListSize(int n) {"},{"lineNumber":117,"author":{"gitId":"MorningLit"},"content":"        assert n \u003e -1 : \"Error in UI code\";"},{"lineNumber":118,"author":{"gitId":"MorningLit"},"content":"        if (n \u003d\u003d 0) {"},{"lineNumber":119,"author":{"gitId":"MorningLit"},"content":"            return (\"Great job! You\u0027re left with no more tasks!\");"},{"lineNumber":120,"author":{"gitId":"MorningLit"},"content":"        } else if (n \u003d\u003d 1) {"},{"lineNumber":121,"author":{"gitId":"MorningLit"},"content":"            return String.format(\"Now you have %d task in the list.\", n);"},{"lineNumber":122,"author":{"gitId":"MorningLit"},"content":"        } else {"},{"lineNumber":123,"author":{"gitId":"MorningLit"},"content":"            return String.format(\"Now you have %d tasks in the list.\", n);"},{"lineNumber":124,"author":{"gitId":"MorningLit"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":127,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"MorningLit"},"content":"     * Displays the task was successfully done message to the user."},{"lineNumber":129,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"MorningLit"},"content":"     * @param task The task that was successfully completed"},{"lineNumber":131,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"MorningLit"},"content":"    public String doneTask(String task) {"},{"lineNumber":133,"author":{"gitId":"MorningLit"},"content":"        return String.format(\"Great job! I\u0027ll mark \u0027%s\u0027 as done for you. ^^\", task);"},{"lineNumber":134,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":136,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"MorningLit"},"content":"     * Displays the task was successfully deleted message to the user."},{"lineNumber":138,"author":{"gitId":"MorningLit"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"MorningLit"},"content":"     * @param task The task that was successfully deleted"},{"lineNumber":140,"author":{"gitId":"MorningLit"},"content":"     * @param n    The number of remaining tasks"},{"lineNumber":141,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"MorningLit"},"content":"    public String deleteTask(String task, int n) {"},{"lineNumber":143,"author":{"gitId":"MorningLit"},"content":"        String s \u003d \"Noted. I\u0027ve removed this task:\\n  \" + task + \"\\n\";"},{"lineNumber":144,"author":{"gitId":"MorningLit"},"content":"        return s.concat(displayListSize(n));"},{"lineNumber":145,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":147,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":147}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"    protected final LocalDateTime dateEnd;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"     * Initialisation of the deadline class."},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"     * @param description The description about the task"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"     * @param dateEnd The deadline of this task"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    public Deadline(String description, LocalDateTime dateEnd) {"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"        this.dateEnd \u003d dateEnd;"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public String getTaskType() {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        return \"D\";"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    public String getDate() {"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"        return dateEnd.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"    public LocalDateTime getActualDate() {"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"        return dateEnd;"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"        return String.format(\"%s (by: %s)\", super.toString(),"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"                dateEnd.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")));"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":40}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"    protected final LocalDateTime time;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"     * Initialisation of the event class."},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"     * @param description The description about the task"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"     * @param time The date and time when this event is happening"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    public Event(String description, LocalDateTime time) {"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"        this.time \u003d time;"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    public String getTaskType() {"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"        return \"E\";"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"    public String getDate() {"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"        return time.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\"));"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"    public LocalDateTime getActualDate() {"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":"        return time;"},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"        return String.format(\"%s (at: %s)\", super.toString(),"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"                time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")));"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":40}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":" * The base task class for other tasks class to inherit from."},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":" */"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    protected final String description;"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"     * Initial setup for all child classes of Task class."},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"     * @param description The description about the task"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"     * Marks this instance of the task as done."},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    public void markAsDone() {"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"        this.isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":28,"author":{"gitId":"MorningLit"},"content":"    public String getDescription() {"},{"lineNumber":29,"author":{"gitId":"MorningLit"},"content":"        return description;"},{"lineNumber":30,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":32,"author":{"gitId":"MorningLit"},"content":"    public boolean getIsDone() {"},{"lineNumber":33,"author":{"gitId":"MorningLit"},"content":"        return isDone;"},{"lineNumber":34,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":36,"author":{"gitId":"MorningLit"},"content":"    public String getStatusIcon() {"},{"lineNumber":37,"author":{"gitId":"MorningLit"},"content":"        return (isDone ? \"Y\" : \"N\");"},{"lineNumber":38,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":40,"author":{"gitId":"MorningLit"},"content":"    public abstract String getTaskType();"},{"lineNumber":41,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":42,"author":{"gitId":"MorningLit"},"content":"    public abstract String getDate();"},{"lineNumber":43,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":44,"author":{"gitId":"MorningLit"},"content":"    public abstract LocalDateTime getActualDate();"},{"lineNumber":45,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":46,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"MorningLit"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"MorningLit"},"content":"        return String.format(\"[%s][%s] %s\", getTaskType(), getStatusIcon(), description);"},{"lineNumber":49,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":51,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":51}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"public class ToDo extends Task {"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"    public ToDo(String description) {"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    public String getTaskType() {"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"        return \"T\";"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"    public String getDate() {"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"        return \"\";"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"    public LocalDateTime getActualDate() {"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"        return LocalDateTime.MAX;"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":26,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":26}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.image.*?\u003e"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"         minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"    \u003cpadding\u003e"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    \u003c/padding\u003e"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"MorningLit":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.fxml.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"MorningLit":19}},{"path":"src/test/java/duke/command/CommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.main.Parser;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"public class CommandTest {"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"    public void ByeTest() {"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"        Assertions.assertEquals(new ByeCommand(), Parser.parse(\"bye\"));"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    public void DisplayListTest() {"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"        assertEquals(new DisplayListCommand(), Parser.parse(\"list\"));"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"MorningLit"},"content":"    public void HelpTest() {"},{"lineNumber":22,"author":{"gitId":"MorningLit"},"content":"        assertEquals(new HelpCommand(), Parser.parse(\"help\"));"},{"lineNumber":23,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":25,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":25}},{"path":"src/test/java/duke/main/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"public class StorageTest {"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"    public void LoadEmptyTest() {"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"        Storage storage \u003d new Storage(\"non-existent-path\");"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"        TaskList taskList \u003d storage.loadData(new UI());"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"        assertEquals(new ArrayList\u003cTask\u003e(), taskList);"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"}"}],"authorContributionMap":{"MorningLit":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"MorningLit"},"content":"dab"},{"lineNumber":2,"author":{"gitId":"MorningLit"},"content":"list"},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":"todo yeet"},{"lineNumber":5,"author":{"gitId":"MorningLit"},"content":"list"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"deadline"},{"lineNumber":7,"author":{"gitId":"MorningLit"},"content":"deadline hehe"},{"lineNumber":8,"author":{"gitId":"MorningLit"},"content":"deadline haha /by dab"},{"lineNumber":9,"author":{"gitId":"MorningLit"},"content":"event /at"},{"lineNumber":10,"author":{"gitId":"MorningLit"},"content":"event hoho"},{"lineNumber":11,"author":{"gitId":"MorningLit"},"content":"event huhu /at yeet"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"list"},{"lineNumber":13,"author":{"gitId":"MorningLit"},"content":"done -1"},{"lineNumber":14,"author":{"gitId":"MorningLit"},"content":"done 1"},{"lineNumber":15,"author":{"gitId":"MorningLit"},"content":"done 4"},{"lineNumber":16,"author":{"gitId":"MorningLit"},"content":"done 01"},{"lineNumber":17,"author":{"gitId":"MorningLit"},"content":"list"},{"lineNumber":18,"author":{"gitId":"MorningLit"},"content":"delete 1"},{"lineNumber":19,"author":{"gitId":"MorningLit"},"content":"list"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"bye"}],"authorContributionMap":{"MorningLit":20}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"MorningLit"},"content":"SET MY_PATH\u003d\"C:\\Users\\ambro\\Downloads\\nus\\~y2s1\\cs2103\\ip\""},{"lineNumber":4,"author":{"gitId":"MorningLit"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":6,"author":{"gitId":"MorningLit"},"content":"if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"MorningLit"},"content":"javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\duke.main.Duke.java\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":16,"author":{"gitId":"-"},"content":")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"MorningLit"},"content":"java -classpath \"%MY_PATH%\\bin\" duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"MorningLit":5,"-":18}}]
