[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 18,
      "-": 44
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 11
    }
  },
  {
    "path": "data/task.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "todo//hello//true"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "todo//hello//false"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "todo//hello//false"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "todo//test 1//false"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 4
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import dukeclass.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import dukeclass.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import dukeclass.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import dukeclass.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Encapsulates a chat robot that you can chat with to set tasks for yourself."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private File f;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.f \u003d Storage.createFile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            Storage.readFromFile(f, taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * change access modifier to private after packaging it"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            this.endDuke();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return Ui.endMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Parser.parseCommands(taskList, input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Ui.unknownInputErrorMessage(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void endDuke() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            Storage.writeToFile(f, taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Duke to be started, create files for storage, run commands and write to files."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static void startDuke() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        System.out.println(Ui.welcomeMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        System.out.println(\"Loading done\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Main method to start Duke"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        Duke.startDuke();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 76,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        boolean isValidInput \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!input.isBlank()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            isValidInput \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (isValidInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 55
    }
  },
  {
    "path": "src/main/java/dukeclass/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * A type of task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * The task has a String message and a Boolean status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * in addition to that, it has a preposition and a timeline to be completed by"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private static final String ICON \u003d \"D\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private String preposition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Deadline task, status is set to false by default"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param preposition  the preposition for the time frame"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param dateTimeString  the time frame in a specific format of yyyy-MM-dd HH:mm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Deadline(String taskString, String preposition, String dateTimeString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.preposition \u003d preposition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Deadline task but with ability to set status"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param preposition  the preposition for the time frame"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param dateTimeString  the time frame in a specific format of yyyy-MM-dd HH:mm"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param status  status of the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Deadline(String taskString, String preposition, String dateTimeString, boolean status) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.preposition \u003d preposition;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Deadline task but with ability to set status"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * and take in dateTime as LocalDateTime instead of string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param preposition  the preposition for the time frame"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param dateTime  the time frame"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param status  status of the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Deadline(String taskString, String preposition, LocalDateTime dateTime, boolean status) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.preposition \u003d preposition;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task snoozeTask() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        LocalDateTime newDateTime \u003d this.dateTime.minusDays(-1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new Deadline(this.taskString, this.preposition, newDateTime, this.status);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task snoozeTask(int days) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        LocalDateTime newDateTime \u003d this.dateTime.minusDays(-1 * days);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new Event(this.taskString, this.preposition, newDateTime, this.status);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String statusIcon \u003d (status) ? \"\\u2714\" : \"\\u2716\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"[\" + ICON + \"]\" + \"[\" + statusIcon + \"] \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + this.taskString + \" (\" + this.preposition + \": \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"deadline//\" + taskString + \"//\" + preposition + \"//\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \"//\" + status;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 90
    }
  },
  {
    "path": "src/main/java/dukeclass/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * A type of task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * The task has a String message and a Boolean status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * in addition to that, it has a preposition and a timeline to be completed by"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String ICON \u003d \"E\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private String preposition;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Event task, status is set to false by default"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param preposition  the preposition for the time frame"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param dateTimeString  the time frame in a specific format of yyyy-MM-dd HH:mm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Event(String taskString, String preposition, String dateTimeString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.preposition \u003d preposition;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Event task but with ability to set status"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param preposition  the preposition for the time frame"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param dateTimeString  the time frame in a specific format of yyyy-MM-dd HH:mm"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param status  status of the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Event(String taskString, String preposition, String dateTimeString, boolean status) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.preposition \u003d preposition;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Event task but with ability to set status"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * and take in dateTime as LocalDateTime instead of string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param preposition  the preposition for the time frame"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param dateTime  the time frame"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param status  status of the task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Event(String taskString, String preposition, LocalDateTime dateTime, boolean status) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.preposition \u003d preposition;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task snoozeTask() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        LocalDateTime newDateTime \u003d this.dateTime.minusDays(-1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new Event(this.taskString, this.preposition, newDateTime, this.status);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task snoozeTask(int days) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        LocalDateTime newDateTime \u003d this.dateTime.minusDays(-1 * days);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new Event(this.taskString, this.preposition, newDateTime, this.status);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String statusIcon \u003d (status) ? \"\\u2714\" : \"\\u2716\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"[\" + ICON + \"]\" + \"[\" + statusIcon + \"] \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + this.taskString + \" (\" + this.preposition + \": \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"event//\" + taskString + \"//\" + preposition + \"//\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \"//\" + status;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 90
    }
  },
  {
    "path": "src/main/java/dukeclass/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    InvalidInputException(String s) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 8
    }
  },
  {
    "path": "src/main/java/dukeclass/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Parse the input String by the user and returns a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param userInput A single line of entry from the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return Task of a specific type e.g. todo, deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws InvalidInputException  If the user did not enter the entry in the correct format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static Task parseTask(String userInput) throws InvalidInputException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String[] splitString \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        int splitStringLength \u003d splitString.length;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (splitString[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (splitString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new InvalidInputException(\"Description of To Do cannot be empty\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                String[] taskStringArray \u003d Arrays.copyOfRange(splitString, 1, splitStringLength);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return new Todo(String.join(\" \", taskStringArray));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (splitString[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (splitString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new InvalidInputException(\"Description of Deadline cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                String[] taskStringArray \u003d Arrays.copyOfRange(splitString, 1, splitStringLength);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                String toSplit \u003d String.join(\" \", taskStringArray);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                int indexOfSlash \u003d toSplit.indexOf(\"/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                if (indexOfSlash \u003d\u003d -1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    throw new InvalidInputException(\"Date/time for Deadline cannot be empty/not recognised\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    int indexOfNextWord \u003d toSplit.indexOf(\" \", indexOfSlash);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    return new Deadline(toSplit.substring(0, indexOfSlash),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                            toSplit.substring(indexOfSlash + 1, indexOfNextWord),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                            toSplit.substring(indexOfNextWord + 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (splitString[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (splitString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new InvalidInputException(\"Description of Event cannot be empty\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                String[] taskStringArray \u003d Arrays.copyOfRange(splitString, 1, splitStringLength);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                String toSplit \u003d String.join(\" \", taskStringArray);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                int indexOfSlash \u003d toSplit.indexOf(\"/\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                if (indexOfSlash \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    throw new InvalidInputException(\"Date/time for Event cannot be empty/not recognised\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    int indexOfNextWord \u003d toSplit.indexOf(\" \", indexOfSlash);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    return new Event(toSplit.substring(0, indexOfSlash - 1),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                            toSplit.substring(indexOfSlash + 1, indexOfNextWord),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                            toSplit.substring(indexOfNextWord + 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new InvalidInputException(\"Unrecognized command\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Continually parse the input String by the user until an ending command is given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param list of tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return list of a tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws InvalidInputException  If the user did not enter the entry in the correct format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static String parseCommands(TaskList list, String userInput) throws InvalidInputException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            String[] splitString \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (splitString[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Ui.helpMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Ui.printTaskList(list);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                //print OG list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                // can add error handling exception in case out of bounds"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                // can add error handling for exception already done"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                int index \u003d Integer.parseInt(splitString[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                list.get(index - 1).setStatus(true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Ui.printTaskList(list);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                // can add error handling exception in case out of bounds"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                int index \u003d Integer.parseInt(splitString[1]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                list.remove(index - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Ui.printTaskList(list);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                TaskList tempList \u003d new TaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    if (list.get(i).toString().contains(splitString[1])) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        tempList.add(list.get(i));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return tempList.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString[0].equals(\"snooze\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                if (splitString.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    int index \u003d Integer.parseInt(splitString[1]) - 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    Task newTask \u003d list.get(index).snoozeTask();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    list.set(index, newTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                } else if (splitString.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    int index \u003d Integer.parseInt(splitString[1]) - 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    int days \u003d Integer.parseInt(splitString[2]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    Task newTask \u003d list.get(index).snoozeTask(days);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    list.set(index, newTask);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    //invalid input exception"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Ui.printTaskList(list);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                Task currTask \u003d Parser.parseTask(userInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                list.add(currTask);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return Ui.printTask(currTask);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return Ui.unknownInputErrorMessage(e);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 148
    }
  },
  {
    "path": "src/main/java/dukeclass/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Create the file and directory for storage if it does not exist yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return File for storage of TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static File createFile() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        File d \u003d new File(\"data\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        File f \u003d new File(\"data/task.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (!d.exists()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                if (d.mkdir()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    System.out.println(\"New data directory created\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (f.createNewFile()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                System.out.println(\"new task data file created\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return f;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Parse the input String line by line and returns a task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Each segment in an entry must be split by \"//\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param input A single line of entry from the text file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return Task of a specific type e.g. todo, deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws InvalidInputException  If the data is not correctly formatted."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static Task parseDatabase(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String[] splitString \u003d input.split(\"//\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (splitString[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (splitString.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return new Todo(String.join(\" \", splitString[1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return new Todo(splitString[1], Boolean.parseBoolean(splitString[2]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                // potential error msg here?"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new InvalidInputException(\"ERROR IN DB\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (splitString[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (splitString.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return new Deadline(splitString[1],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[2],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[3]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return new Deadline(splitString[1],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[2],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[3],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        Boolean.parseBoolean(splitString[4]));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new InvalidInputException(\"ERROR IN DB\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (splitString[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (splitString.length \u003c 4) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new InvalidInputException(\"Description of event cannot be empty\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return new Event(splitString[1],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[2],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[3]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else if (splitString.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                return new Event(splitString[1],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[2],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        splitString[3],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        Boolean.parseBoolean(splitString[4]));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new InvalidInputException(\"ERROR IN DB\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new InvalidInputException(\"Unrecognized task\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Read the database line by line and pass it to databaseParser"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param f the file containing the data."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param list the list to store the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return TaskList of task after being parsed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws FileNotFoundException  If the directory cannot be found/File could not be created."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static TaskList readFromFile(File f, TaskList list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                list.add(Storage.parseDatabase(s.nextLine()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                System.out.println(\"ERROR IN DATABASE!!!!!!!!!!!!!!!!!!!!!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Writes on to the target file with the current list of Tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param f the file to write the data on."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param list the list containing the tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws IOException  If the file cannot be written on."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static void writeToFile(File f, TaskList list) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        FileWriter fw \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String stringToWrite \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            stringToWrite \u003d stringToWrite + t.toDataString() + System.lineSeparator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        fw.write(stringToWrite);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 138
    }
  },
  {
    "path": "src/main/java/dukeclass/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * The task has a String message and a Boolean status."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    protected String taskString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    protected Boolean status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Status is set to false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task(String taskString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.taskString \u003d taskString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.status \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void setStatus(Boolean b) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.status \u003d b;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this.taskString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public abstract String toDataString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public abstract Task snoozeTask();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public abstract Task snoozeTask(int days);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 40
    }
  },
  {
    "path": "src/main/java/dukeclass/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Represents a list of Tasks using an Arraylist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void remove(int i) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.taskList.remove(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this.taskList.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Replaces the Task at the specified position in this list with the specified Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param index index of the Task to replace."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param newTask Task to be stored at the specified position"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return the Task previously at the specified position."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task set(int index, Task newTask) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this.taskList.set(index, newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Returns a string representation of the TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return String representation of the TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String finalString \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            finalString +\u003d this.taskList.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return finalString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 58
    }
  },
  {
    "path": "src/main/java/dukeclass/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * A type of task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * The task has a String message and a Boolean status."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private static final String ICON \u003d \"T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Todo(String taskString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructor for Todo task but with ability to set status"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param taskString  the task given by the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param status  status of the taskd"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Todo(String taskString, boolean status) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(taskString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task snoozeTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public Task snoozeTask(int days) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String statusIcon \u003d (status) ? \"\\u2714\" : \"\\u2716\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"[\" + ICON + \"]\" + \"[\" + statusIcon + \"] \" + this.taskString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"todo//\" + taskString + \"//\" + status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 46
    }
  },
  {
    "path": "src/main/java/dukeclass/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Deals with interactions with the user"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Prints the welcome message"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return welcome message of String type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static String welcomeMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"     Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"     What can I do for you?\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Prints the ending message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return ending message of String type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static String endMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"     Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Prints the help message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return help message of String type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static String helpMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"Full list of commands:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"bye\\\" to save your current list\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"list\\\" to view your current list\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"done \u003cnumber\u003e\\\" to mark the specific task as done\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"delete \u003cnumber\u003e\\\" to delete the specific task\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"find \u003ckeyword\u003e\\\" to find a task with the specific keyword\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"snooze \u003cnumber\u003e \u003cdays\u003e\\\" to snooze a task by a certain number of days.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        +\" By default snooze one day.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"To add new tasks:\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"todo \u003ctask\u003e\\\" to add a to do\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"event \u003ctask\u003e /\u003cpreposition\u003e \u003cyyyy-MM-dd HH:mm\u003e\\\"\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        + \"to add an event e.g event do chores /by 2020-08-08 12:00\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"type \\\"deadline \u003ctask\u003e /\u003cpreposition\u003e \u003cyyyy-MM-dd HH:mm\u003e\\\"\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        + \"to add a deadline e.g deadline do chores /by 2020-08-08 12:00\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Prints the list of tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param list  list to be printed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return list of String type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static String printTaskList(TaskList list) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + list.toString() + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Prints task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param task  task to be printed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return task of String type."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static String printTask(Task task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Prints error message"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param e  Exception to be printed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @return Exception message"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static String unknownInputErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return \"DUKE DOES NOT UNDERSTAND YOU!!!@#%#$%^!@^%\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + \"\\nTRY AGAIN!!!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 93
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.effect.Blend?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            \u003cBlend opacity\u003d\"0.46\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "         \u003c/effect\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"323.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"77.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\" Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            \u003cInsets left\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "         \u003c/padding\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 23
    }
  },
  {
    "path": "test/dukeclass/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void parser_emptyTodoDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            Parser.parseTask(\"todo\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            assertEquals(\"Description of To Do cannot be empty\", e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void parser_emptyDeadlineDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            Parser.parseTask(\"deadline\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            assertEquals(\"Description of Deadline cannot be empty\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 29
    }
  },
  {
    "path": "test/dukeclass/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package dukeclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import dukeclass.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void testReadFileContents() throws FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        TaskList actualList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        File f \u003d new File(\"test/testData/test.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        Storage.readFromFile(f, actualList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        ArrayList\u003cTask\u003e expectedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        expectedList.add(new Todo(\"test 1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        expectedList.add(new Deadline(\"test 2\", \"by\", \"1986-04-08 12:30\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        expectedList.add(new Event(\"test 3\", \"by\", \"1986-04-08 12:30\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertEquals(expectedList.get(0).toString(), actualList.get(0).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertEquals(expectedList.get(1).toString(), actualList.get(1).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertEquals(expectedList.get(2).toString(), actualList.get(2).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 31
    }
  },
  {
    "path": "test/testData/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "todo//test 1//false"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deadline//test 2//by//1986-04-08 12:30//false"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "event//test 3//by//1986-04-08 12:30//false"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 3
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "todo hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deadline hi /by today"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "event hey /at tmr"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 1,
      "-": 20
    }
  }
]
