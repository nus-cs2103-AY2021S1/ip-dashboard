[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "T | 0 | play"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "D | 0 | eat | 2020-12-12 12:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "D | 0 | eat | 2020-02-01 01:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "E | 1 | eat | 2020-12-12 01:00"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 4
    }
  },
  {
    "path": "src/main/java/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected AddDeadlineCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] deadlineInfo \u003d retrieveDeadlineInfo(this.parsedCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] timeStamp \u003d deadlineInfo[1].split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(timeStamp[0], dateFormatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalTime deadlineTime \u003d LocalTime.parse(timeStamp[1], timeFormatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task toAdd \u003d new Deadline(deadlineInfo[0], deadlineDate, deadlineTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String successReply \u003d \"  Success! This deadline task has been added: \\n\\t\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    toAdd.toString() + \"\\n   You have \" + tasks.getListSize() + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(successReply);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"The task date format is incorrect. \\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"Please input a valid date using the format: \u0027dd/mm/yyyy hh:mm\u0027. For eg, 10/8/2020 18:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveDeadlineInfo(String[] parsedCommand) throws InvalidTaskException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] deadlineInfo \u003d new String[2];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (parsedCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your deadline task has missing arguments and has an incorrect format. \" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"The task cannot be created.\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] taskInputArray \u003d parsedCommand[1].split(\" /by \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (!parsedCommand[1].contains(\" /by \") \u0026\u0026 !parsedCommand[1].endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task has an incorrect format. The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (parsedCommand[1].trim().equals(\"/by\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task is missing a description and time stamp. \" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (parsedCommand[1].trim().endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task is missing a time stamp. The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (taskInputArray.length \u003d\u003d 1 || taskInputArray[0].isBlank()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your deadline task is missing a description. The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                description \u003d taskInputArray[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                time \u003d taskInputArray[1].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        deadlineInfo[0] \u003d description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        deadlineInfo[1] \u003d time;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return deadlineInfo;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 83
    }
  },
  {
    "path": "src/main/java/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected AddEventCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] eventInfo \u003d retrieveEventInfo(this.parsedCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] timeStamp \u003d eventInfo[1].split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate eventDate \u003d LocalDate.parse(timeStamp[0], dateFormatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalTime eventTime \u003d LocalTime.parse(timeStamp[1], timeFormatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task toAdd \u003d new Event(eventInfo[0], eventDate, eventTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String successReply \u003d \"  Success! This event task has been added: \\n\\t\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    toAdd.toString() + \"\\n   You have \" + tasks.getListSize() + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(successReply);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"The task date format is incorrect. \\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"Please input a valid date using the format: \u0027dd/mm/yyyy hh:mm\u0027. For eg, 10/8/2020 18:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveEventInfo(String[] parsedCommand) throws InvalidTaskException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] eventInfo \u003d new String[2];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (parsedCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your event task has missing arguments and has an incorrect format. \" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"The task cannot be created.\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] taskInputArray \u003d parsedCommand[1].split(\" /at \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (!parsedCommand[1].contains(\" /at \") \u0026\u0026 !parsedCommand[1].endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task has an incorrect format. The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (parsedCommand[1].trim().equals(\"/at\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task is missing a description and time stamp. \" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (parsedCommand[1].trim().endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task is missing a time stamp. The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (taskInputArray.length \u003d\u003d 1 || taskInputArray[0].isBlank()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Your event task is missing a description. The task cannot be created. \\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Type \u0027/commands\u0027 to view the correct command for task creation!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                description \u003d taskInputArray[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                time \u003d taskInputArray[1].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        eventInfo[0] \u003d description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        eventInfo[1] \u003d time;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return eventInfo;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 81
    }
  },
  {
    "path": "src/main/java/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddTodoCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] taskInfo \u003d this.retrieveTodoInfo(this.parsedCommand);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task toAdd \u003d new Todo(taskInfo[0]);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(toAdd);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String successReply \u003d \"  Success! This todo task has been added: \\n\\t\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    toAdd.toString() + \"\\n   You have \" + tasks.getListSize() + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(successReply);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveTodoInfo(String[] parsedCommand) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] todoInfo \u003d new String[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (parsedCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your todo task description is empty. The task cannot be created.\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"Type \u0027/commands\u0027 to view the correct command for task creation! \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            todoInfo[0] \u003d parsedCommand[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return todoInfo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 41
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected final String[] parsedCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Command(String[] parsedCommand) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 13
    }
  },
  {
    "path": "src/main/java/CompleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class CompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CompleteTaskCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d Integer.parseInt(this.parsedCommand[1]);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003e tasks.getListSize()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Invalid Task! The task does not exist. \" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"The task ID you provided is not valid. \" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Task task \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (task.isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String message \u003d \"  This task has already been completed:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    ui.printReply(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String message \u003d \"  Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    ui.printReply(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String successReply \u003d \"\\t\" + task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(successReply);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveFile(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No Task ID provided! Please input the ID of the task you wish to mark as completed.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your input is not a recognised command. You have to provide the ID of \" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"the task you wish to mark as done. \\n\" + \"Input \u0027/commands\u0027 to view a list of my commands. \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 47
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected LocalDate deadlineDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected LocalTime deadlineTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Deadline(String description, LocalDate deadlineDate, LocalTime deadlineTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.deadlineDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String taskFileString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"D | \" + (super.isDone ? \"1 |\" : \"0 |\") + super.description + \" | \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                this.deadlineDate.toString() + \" \"+ this.deadlineTime.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String formattedEventTime \u003d this.deadlineDate.format(DateTimeFormatter.ofPattern(\"EE, MMM dd yyyy\")) + \", \" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                this.deadlineTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedEventTime + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 33
    }
  },
  {
    "path": "src/main/java/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DeleteTaskCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d Integer.parseInt(this.parsedCommand[1]);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003e tasks.getListSize()) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"Invalid Task! The task does not exist.\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(err);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String err \u003d \"The task ID you provided is not valid. \" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        \"Input \u0027list\u0027 to view the correct task ID of your desired task.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Task toRemove \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                tasks.removeTask(index - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String successReply \u003d \"  Found it! This task has been successfully deleted: \\n\\t\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        toRemove.toString() + \"\\n  You have \" + tasks.getListSize() + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(successReply);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No Task ID provided! Please input the ID of the task you wish to delete.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Your input is not a recognised command. You have to provide the ID of \" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"the task you wish to delete. \\n\" + \"Input \u0027/commands\u0027 to view a list of my commands. \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 41
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList \u003d this.storage.readFile();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Duke session \u003d new Duke(); // start a new session with JonasBot"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        session.run(); // execute the bot to perform intended functions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 43,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(\"Oh no! \" + message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected LocalDate eventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected LocalTime eventTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Event(String description, LocalDate eventDate, LocalTime eventTime) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.eventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String taskFileString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"E | \" + (super.isDone ? \"1 |\" : \"0 |\") + super.description + \" | \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                this.eventDate.toString() + \" \" + this.eventTime.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String formattedEventTime \u003d this.eventDate.format(DateTimeFormatter.ofPattern(\"EE, MMM dd yyyy\")) + \", \" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                this.eventTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedEventTime + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 33
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ExitCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ui.end();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/FindByDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class FindByDateCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public FindByDateCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String date \u003d parsedCommand[1].trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate dateToSearch \u003d LocalDate.parse(date, dateFormatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ui.printReply(\"Search Results:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (task.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (task.getDate().isEqual(dateToSearch)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        String results \u003d String.format(\"%d. %s\", index, task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        ui.printReply(results);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        index++;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.printReply(\"No tasks found! Please search using a different date!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No task date provided. Please input a valid date using the format: \u0027dd/mm/yyyy\u0027 \\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    \"Type \u0027/commands\u0027 to view the correct command for task search by date! \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"The task date format is incorrect. Please input a valid date using the format: \u0027dd/mm/yyyy\u0027\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 46
    }
  },
  {
    "path": "src/main/java/InvalidFunctionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class InvalidFunctionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public InvalidFunctionException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 6
    }
  },
  {
    "path": "src/main/java/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public InvalidTaskException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 5
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ListCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            System.out.println(\"Your list is empty. Add a new task!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            System.out.println(\"Here is a list of all your tasks:\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                System.out.println(\"\\t\" + String.format(\"%d. %s\", index, tasks.getTask(i)));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 24
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String END_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FIND_BY_DATE_COMMAND \u003d \"find_by_date\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static Command parse(String userInput) throws InvalidFunctionException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d userInput.trim();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] parsedCommand \u003d message.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String function \u003d parsedCommand[0];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (message.equals(\"/commands\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ViewFunctionsCommand(parsedCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No input was entered! Please enter something!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.equals(\"list\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ListCommand(parsedCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(\"done\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new CompleteTaskCommand(parsedCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(\"todo\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"todo\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddTodoCommand(parsedCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"deadline\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddDeadlineCommand(parsedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"event\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddEventCommand(parsedCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(\"delete\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new DeleteTaskCommand(parsedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(\"find_by_date\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new FindByDateCommand(parsedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"Invalid Function! Input \u0027/commands\u0027 for a list of all my commands.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 44
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DIRECTORY \u003d \"data\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FILE_LOCATION \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public TaskList readFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            File dataDirectory \u003d new File(Storage.DIRECTORY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            dataDirectory.mkdir(); // make a data directory if the directory does not exist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            File dataFile \u003d new File(Storage.FILE_LOCATION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            dataFile.createNewFile(); // create an empty file to store the tasks if the file does not exist"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Scanner sc \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String[] taskData \u003d sc.nextLine().split(\" \\\\|\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (taskData[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Task toAdd \u003d new Todo(taskData[2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (taskData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        toAdd.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    taskList.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                } else if (taskData[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String dateTime \u003d taskData[3].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String[] dateTimeArray \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    LocalDate deadlineDate \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    LocalTime deadlineTime \u003d LocalTime.parse(dateTimeArray[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Task toAdd \u003d new Deadline(taskData[2], deadlineDate, deadlineTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (taskData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        toAdd.markAsDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    taskList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                } else if (taskData[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String dateTime \u003d taskData[3].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    String[] dateTimeArray \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    LocalDate eventDate \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    LocalTime eventTime \u003d LocalTime.parse(dateTimeArray[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Task toAdd \u003d new Event(taskData[2], eventDate, eventTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    if (taskData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        toAdd.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    taskList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            System.out.println(\"Oh no! An error was encountered, the file data could not be read.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new TaskList(taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void saveFile(TaskList taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(Storage.FILE_LOCATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getListSize(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                fileWriter.write(taskList.getTask(i).taskFileString() + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            System.out.println(\"Oh no! An error is encountered and the task file could not be updated.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 76
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract String taskFileString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + this.description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 29
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    protected TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList \u003d  taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.taskList.isEmpty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addTask(Task toAdd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList.add(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 35
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String taskFileString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"T | \" + (super.isDone ? \"1 |\" : \"0 |\") + super.description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 23
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DIVIDER \u003d \"----------------------------------------\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String text \u003d \"  ______  _____  __  ____     __     _______      \\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \" |__  __||  __ | | \\\\ |  |    /_ \\\\    |   ___|     \\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"    | |  | | | | |  \\\\|  |   //_\\\\ \\\\   |  |___          \\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \" _  | |  | | | | | |\\\\   |  / ____ \\\\  |____  |   \\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"| |_| |  | |_| | | | \\\\  | / /    \\\\ \\\\ _____| |         \\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"|_____|  |_____| |_|  \\\\_|/_/      \\\\_\\\\|______|       \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"                  _____   ______  ________                            \\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"                  |  _ \\\\ |  _  | |__   __|                  \\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"                  | |_| || | | |    | |                      \\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"                  |    / | | | |    | |         \\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"                  |  _ \\\\ | |_| |    | |       \\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"                  | |_| ||     |    | |         \\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"                  |_____/|_____|    |_|                 \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String greeting \u003d \"  Hello! I am JonasBot! Nice to meet you :) \\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                text +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  I am a task manager bot that will keep track of all your tasks. \\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  To view a list of all my commands, input \u0027/commands\u0027 \\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  Now that you are familiar with the commands, how may I assist you today?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d sc.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // sc.close;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void printReply(String message) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(\"  GoodBye and I hope to see you soon! Have a fantastic day! \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 58
    }
  },
  {
    "path": "src/main/java/ViewFunctionsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ViewFunctionsCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ViewFunctionsCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(parsedCommand);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String commands \u003d \"  Below is a list of all the commands for my functions: \\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"\\n  1. Create a new task: \\n\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"\\t  1.1 Todo: \u0027todo\u0027 {task description}. For eg, todo eat \\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"\\t  1.2 Deadline: \u0027deadline\u0027 {task description} \u0027/by\u0027 {deadline date}.\\n\\t\\t\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  Input the date using the format: \u0027dd/mm/yyyy hh:mm\u0027. \" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"For eg, deadline return book /by 12/2/2020 13:00 \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"\\t  1.3 Event: \u0027event\u0027 {task description} \u0027/at\u0027 {event date}.\\n\\t\\t\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  Input the date using the format: \u0027dd/mm/yyyy hh:mm\u0027. \" + \"\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"For eg, event project meeting /at 1/3/2020 12:00 \\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  2. To display all tasks in your list: \u0027list\u0027 \\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  3. To mark a task as completed: \u0027done\u0027 {task ID}. For eg, \u0027done 2\u0027 \\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  4. To delete a task: \u0027delete\u0027 {task ID}. For eg, \u0027delete 2\u0027 \\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  6. To search for a task by date: \u0027find_by_date\u0027 {date}. \\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"     Input the date using the format: \u0027dd/mm/yyyy\u0027. For eg, \u0027find_by_date 12/2/2020\u0027 \\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \"  \\n  5. To end this chat: \u0027bye\u0027 \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ui.printReply(commands);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 31
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "todo do cs2103T project"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline finish week 2 requirements /by Monday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "event cs2103T lecture /at Fri 4-6pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline finish week 1 post lecture quiz /by Saturday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "todo read up on week 2 topics"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline eat /by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 20
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "jonasngs": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "jonasngs": 2
    }
  }
]
