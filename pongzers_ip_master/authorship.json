[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 16,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "E | 0 | eat  | tmr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "E | 0 | eat  | today"
      }
    ],
    "authorContributionMap": {
      "pongzers": 2
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Task called Deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * A deadline has a attribute \"dueDateAsString\" or \"dueDateAsDate\", which is the time the deadline is due."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * The attribute dueDate can be represented by a String, or a date object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected String dueDateAsString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected LocalDate dueDateAsDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Deadline(String taskDescription, String date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.dueDateAsString \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.dueDateAsDate \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Deadline(String taskDescription, LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.dueDateAsDate \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.dueDateAsString \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the due date of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Due date of deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (dueDateAsString !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return dueDateAsString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return dueDateAsDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the type of Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Type of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (dueDateAsDate !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + dueDateAsDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + dueDateAsString + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 57
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    private Label text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    private ImageView displayPicture;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        text \u003d l;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        text.setWrapText(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    private void flip() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        db.flip();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        return db;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 105
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Duke class, which is an interactive chat bot which allows you to track tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private PopupControl mainLayout;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    public void start(Stage stage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        stage.setScene(scene);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        //..."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        stage.setResizable(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        // more code to be added here later"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////            userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////            userInput.clear();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pongzers"
        },
        "content": "////        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//            handleUserInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//            handleUserInput();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    private void handleUserInput() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//        userInput.clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pongzers"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String currentDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Storage storage \u003d new Storage(currentDirectory + \"/data/duke.txt\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (storage.getExisted()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            taskList \u003d new TaskList(storage.getTaskList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Ui.messagePrint("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                \"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                \"What can I do for you?\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                String msg \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                if (parser.parse(msg) \u003d\u003d Parser.Command.BYE) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    // Exit program"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Ui.messagePrint(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (parser.parse(msg) \u003d\u003d Parser.Command.LIST) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    // Print list to User"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String listMessage \u003d \"\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        listMessage +\u003d (i + 1) + \". \" + taskList.get(i).toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // If is not last object, add a new line at the end of the item"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            listMessage +\u003d \"\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Ui.messagePrint(listMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (parser.parse(msg) \u003d\u003d Parser.Command.DONE) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    /* Update status of Task to completed. */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    int updateTaskIndex \u003d Integer.valueOf(msg.substring(5)) - 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (updateTaskIndex \u003e\u003d taskList.size() || updateTaskIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Task taskToUpdate \u003d taskList.get(updateTaskIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskToUpdate.updateStatus(true);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.set(updateTaskIndex, taskToUpdate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String completedMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + taskList.get(updateTaskIndex).toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Ui.messagePrint(completedMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    storage.write(taskList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (parser.parse(msg) \u003d\u003d Parser.Command.DELETE) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    // Delete task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    int updateTaskIndex \u003d Integer.valueOf(msg.substring(7)) - 1;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (updateTaskIndex \u003e\u003d taskList.size() || updateTaskIndex \u003c 0) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Task taskToUpdate \u003d taskList.get(updateTaskIndex);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.remove(updateTaskIndex);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String deletedMessage \u003d \"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                           \"  \" + taskToUpdate.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                \"Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Ui.messagePrint(deletedMessage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    storage.write(taskList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (parser.parse(msg) \u003d\u003d Parser.Command.FIND) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    //Find task according to query message."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String query \u003d msg.substring(5);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String output \u003d \"Here are the matching tasks in your list: \\n\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    TaskList searchedTaskList \u003d taskList.find(query);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    for (int i \u003d 1; i \u003c\u003d searchedTaskList.size(); i++) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        output \u003d output + i + \".\" + searchedTaskList.get(i - 1).toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        if (i !\u003d searchedTaskList.size()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Ui.messagePrint(output);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    // Creating new tasks."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Task newTask;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (parser.parse(msg) \u003d\u003d Parser.Command.DEADLINE) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // Create deadline."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        int byIndex \u003d msg.indexOf(\"/by\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String task \u003d msg.substring(9, byIndex - 1); //Number 9 \u003d starting index of deadline string."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String dateString \u003d msg.substring(byIndex + 4);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            newTask \u003d new Deadline(task, date);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            newTask \u003d new Deadline(task, dateString);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (parser.parse(msg) \u003d\u003d Parser.Command.EVENT) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // Create event."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        int atIndex \u003d msg.indexOf(\"/at\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String task \u003d msg.substring(6, atIndex - 1); //Number 6 \u003d starting index of event string."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String dateString \u003d msg.substring(atIndex + 4);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            newTask \u003d new Event(task, date);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            newTask \u003d new Event(task, dateString);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (parser.parse(msg) \u003d\u003d Parser.Command.TODO) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // Create ToDo"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        String task \u003d msg.substring(5); //Number 5 \u003d starting index of todo string."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        newTask \u003d new ToDo(task);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (parser.parse(msg) \u003d\u003d Parser.Command.EMPTY_TASK_TODO) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // Checks for empty task in a new ToDo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.EMPTY_TASK_TODO);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (parser.parse(msg) \u003d\u003d Parser.Command.EMPTY_TASK_EVENT_DEADLINE) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // Checks for empty task in a new deadline or event."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.EMPTY_TASK_EVENT_DEADLINE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    } else if (parser.parse(msg) \u003d\u003d Parser.Command.EMPTY_DATE) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // Checks for empty date in a new deadline or event."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.EMPTY_DATE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        // Else if input is unrecognized, return null."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        throw new DukeException(DukeExceptionType.INVALID_INPUT);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList \u003d taskList.add(newTask);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    String newTaskMsg \u003d String.format("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                    \"  %s\\n\" +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                                    \"Now you have %d tasks in the list.\", newTask.toString(), taskList.size());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Ui.messagePrint(newTaskMsg);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    storage.write(taskList);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                Ui.messagePrint(e.toString());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 261,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a DukeException class, which is an Exception class for custom DukeExceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    String error;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    DukeException(DukeExceptionType errorType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        super(errorType.toString());"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        error \u003d errorType.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 15
    }
  },
  {
    "path": "src/main/java/DukeExceptionType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a DukeExceptionType, which is an enum to keep track of different DukeExceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public enum DukeExceptionType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    EMPTY_TASK_TODO(\"☹ OOPS!!! The description of a todo cannot be empty.\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    EMPTY_TASK_EVENT_DEADLINE(\"☹ OOPS!!! The description of a event/deadline cannot be empty.\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    INVALID_INPUT(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    EMPTY_DATE(\"☹ OOPS!!! The date of a event/deadline cannot be empty.\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    TASK_NOT_FOUND(\"☹ OOPS!!! The task you are trying to delete/mark as done is not found.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    DukeExceptionType(String error) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 20
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Task called Event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * An Event has a attribute \"eventDateAsString\" or \"eventDateAsDate\", which is the time the deadline is due."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * The attribute eventDate can be represented by a String, or a date object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected String eventDateAsString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected LocalDate eventDateAsDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Event(String taskDescription, String date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.eventDateAsString \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.eventDateAsDate \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Event(String taskDescription, LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.eventDateAsString \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.eventDateAsDate \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the event date of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Event date of event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (eventDateAsString !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return eventDateAsString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return eventDateAsDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the type of Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Type of task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (eventDateAsDate !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + eventDateAsDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + eventDateAsString + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 57
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Parser to interpret String messages."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    enum Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        LIST, BYE, DONE, DELETE, DEADLINE, EVENT, TODO, EMPTY_TASK_TODO, EMPTY_TASK_EVENT_DEADLINE, EMPTY_DATE, NULL, FIND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the Command associated with the message passed in."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param msg String message to parse and find a Command associated with message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Command associated with the message passed in."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public Command parse(String msg) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (msg.equals(\"bye\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return Command.BYE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else if (msg.equals(\"list\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return Command.LIST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else if (msg.matches(\"^done \\\\d+$\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return Command.DONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else if (msg.matches(\"^delete \\\\d+$\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return Command.DELETE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else if (msg.matches(\"^find \\\\S.*\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return Command.FIND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (msg.matches(\"^deadline \\\\S.* /by \\\\S.*$\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                return Command.DEADLINE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } else if (msg.matches(\"^event \\\\S.* /at \\\\S.*$\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                return Command.EVENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } else if (msg.matches(\"^todo \\\\S.*$\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                return Command.TODO;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } else if (msg.matches(\"^todo\\\\s*$\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                return Command.EMPTY_TASK_TODO;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } else if ("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    msg.matches(\"^event\\\\s/at.*$\") ||"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            msg.matches(\"^deadline\\\\s/by.*$\") ||"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            msg.matches(\"^event\\\\s*$\") ||"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                            msg.matches(\"^deadline\\\\s*$\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                return Command.EMPTY_TASK_EVENT_DEADLINE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } else if (msg.matches(\"^event .* /at\\\\s*$\") ||"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    msg.matches(\"^deadline .* /by\\\\s*\") ||"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    msg.matches(\"^event.*\") ||"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    msg.matches(\"^deadline.*\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                return Command.EMPTY_DATE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            return Command.NULL;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 60
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Able to retrieve and write data to a storage txt file stored locally."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    private boolean isExisted;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Storage(String path) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            this.file \u003d f;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            this.path \u003d path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            this.isExisted \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                this.file \u003d f;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                this.path \u003d path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                this.isExisted \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                System.out.println(\"An error occured\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return boolean if the storage txt file already exists."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Boolean value of if the storage txt file already exists."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public boolean getExisted() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return this.isExisted;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Writes to storage txt file the tasks in taskList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param taskList TaskList of tasks to be written in storage txt file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    void write(TaskList taskList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                String taskString \u003d task.getType() + \" | \" + (task.isCompleted ? 1 : 0) + \" | \" + task.getTask();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                if (task.getDate() !\u003d \"\") {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskString \u003d taskString + \" | \" + task.getDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                fw.write(taskString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                fw.write(System.getProperty( \"line.separator\" ));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            System.out.println(\"An error occured\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Retrieve a list of Tasks from the storage txt file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return An ArrayList of Tasks retrieved from the storage txt file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                String taskString \u003d s.nextLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                String[] taskParts \u003d taskString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                if (taskParts[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    ToDo task \u003d new ToDo(taskParts[2]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (taskParts[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        task.updateStatus(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (taskParts[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Event task \u003d new Event(taskParts[2], taskParts[3]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (taskParts[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        task.updateStatus(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.add(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else if (taskParts[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    Deadline task \u003d new Deadline(taskParts[2], taskParts[3]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    if (taskParts[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                        task.updateStatus(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    taskList.add(task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                    System.out.println(Arrays.toString(taskParts));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return file.getAbsolutePath();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 115
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * A Task has a attribute taskDescription which describes the task."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * A Task also has a boolean isCompleted which states if the task is completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    protected Boolean isCompleted;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Update task status."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param isCompleted Boolean value of is task completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void updateStatus(Boolean isCompleted) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    abstract String getType();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    abstract String getDate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Returns the task description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        String completedMarker \u003d this.isCompleted ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return String.format(\"[%s] %s\", completedMarker, this.taskDescription);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 37
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a TaskList, which stores a list of Tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return a new TaskList, with an added Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param task New task to be added to TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return TaskList with added Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public TaskList add(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return new TaskList(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return a new TaskList, with a removed Task at the given index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param index Index of task to be removed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return TaskList with removed Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public TaskList remove(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return new TaskList(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the Task at a given index in TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param index Index of task to be retrieved."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Task of given index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return a new TaskList containing Tasks that match the search query."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param query Search query."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return TaskList containing Tasks that match the search query."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public TaskList find(String query) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            if (task.getTask().contains(query)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                newTaskList.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return new TaskList(newTaskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the total number of items contained in the TaskList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return The total number of items contained in the TaskList."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Set the index of TaskList to be given Task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param index Index in TaskList of Task to be set."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @param task Task to be set."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return TaskList with Task being set at specific index."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public TaskList set(int index, Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.set(index, task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return new TaskList(taskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 85
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Task called ToDo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    ToDo(String taskDescription) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return an empty String to indicate there is no date line/event date for this ToDo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return An empty string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String getDate() { return \"\"; }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * Return the type of Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     * @return Type of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 30
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": " * Represents a Ui to print messages to interact with User."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public static void messagePrint(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        // Add indentation for new lines"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        msg \u003d msg.replace(\"\\n\", \"\\n    \");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        msg \u003d (\"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                + \"    \" + msg + \"\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                + \"    ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        System.out.printf(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 13
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pongzers": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pongzers": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Task toDo \u003d new ToDo(\"Eat bread\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Task event \u003d new Event(\"Eat bread\", \"tomorrow\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Task deadline \u003d new Deadline(\"Eat bread\", \"tomorrow\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void ToDoTest(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(\"Eat bread\", toDo.getTask());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void EventTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(\"Eat bread\", event.getTask());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void DeadlineTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(\"Eat bread\", deadline.getTask());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void ParserDeadlineTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(Parser.Command.DEADLINE, parser.parse(\"deadline eat food /by tomorrow\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void ParserEventTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(Parser.Command.EVENT, parser.parse(\"event eat food /at tomorrow night\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void ParserTodoTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(Parser.Command.TODO, parser.parse(\"todo eat food\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void ParserEmptyTaskTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(Parser.Command.EMPTY_TASK_EVENT_DEADLINE, parser.parse(\"event /at tomorrow\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(Parser.Command.EMPTY_TASK_EVENT_DEADLINE, parser.parse(\"event /at \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void ParserEmptyDateTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(Parser.Command.EMPTY_DATE, parser.parse(\"event eat food\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(Parser.Command.EMPTY_DATE, parser.parse(\"event eat food /at\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    public void TaskListTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.add(toDo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.add(deadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.set(0, event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        taskList.remove(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(event, taskList.get(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pongzers"
        },
        "content": "        assertEquals(2, taskList.find(\"bread\").size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pongzers"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pongzers"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pongzers": 77
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pongzers"
        },
        "content": "this is an error"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pongzers"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event return books"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event return books /at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "deadline return books /by Sunday Night"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pongzers"
        },
        "content": "event return books /at Monday"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pongzers"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pongzers"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pongzers"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pongzers"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "pongzers": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pongzers"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin -encoding UTF-8 ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "pongzers": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pongzers"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pongzers"
        },
        "content": "if ! (javac -cp ../src -Xlint:none -d ../bin -encoding UTF-8 ../src/main/java/*.java)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "pongzers": 2,
      "-": 37
    }
  }
]
