[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "angrybunny123": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "angrybunny123": 24
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents a Deadline with a specified description, date, and boolean to indicate done or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /** Formatted date to be printed to the user only */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String formattedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Constructor for the Deadline class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Deadline (String description, String by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.formattedDate \u003d LocalDate.parse(by).format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the Deadline description \u0026 formatted date to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Deadline description and date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordStringWithTags() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[D]\" + super.toString() + \" (at: \" + formattedDate + \")\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                (this.tags.size() \u003d\u003d 0 ? \"\" :\"\\ntags: \" + super.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                (this.tags.size() \u003d\u003d 0 ? \"\" :\"\\ntags: \" + super.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 42
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 62
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * The main class for Project Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Constructor for Project Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param filePath The file path where the user\u0027s task list would be stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Duke() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns a response based on user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param input The user\u0027s line of input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns Duke\u0027s response."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                Storage storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    tasks \u003d storage.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    ui.showLoadingError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String response \u003d Parser.parse(input, tasks, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (response.equals(ui.goodbye(true))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        new Timer().schedule(new TimerTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            public void run () {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.exit(0); }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }, 2000);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Initializes the Duke User Interface with the user\u0027s previously saved tasks (if any)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ui.initializeDukeUI(tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * The main method for Project Duke."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "angrybunny123": 81
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents the custom exception class for Duke Project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the error message to the user in a readable fashion."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Error Message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"*************ERROR*************\\n\" + \"OOPS!!! \" + this.message + \"\\n*************ERROR*************\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 22
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents an Event with a specified description, date, and boolean to indicate done or not."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /** Formatted date to be printed to the user only */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String formattedDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Constructor for the Event class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Event(String description, String start) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.formattedDate \u003d LocalDate.parse(start).format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the Event description \u0026 formatted date to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Event description and date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordStringWithTags() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \")\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                (this.tags.size() \u003d\u003d 0 ? \"\" :\"\\ntags: \" + super.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + start + \")\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                (this.tags.size() \u003d\u003d 0 ? \"\" :\"\\ntags: \" + super.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 42
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 13
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            MainWindow mw \u003d new MainWindow();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            fxmlLoader.setRoot(mw);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 33
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Initializes the JavaFX GUI."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String dukeIntro \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                DialogBox.getDukeDialog(dukeIntro, dukeImage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assert(!response.equals(\"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 61
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String EMPTY_COMMAND \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String SHOW_TAGS_COMMAND \u003d \"show tags\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String FIND_TAG_COMMAND \u003d \"findtag\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String REMOVE_TAG_COMMAND \u003d \"removetag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String TAG_COMMAND \u003d \"tag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String NEW_TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String NEW_DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final String NEW_EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final int TODO_DESCRIPTION_START_INDEX \u003d 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final int DEADLINE_DESCRIPTION_START_INDEX \u003d 9;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final int EVENT_DESCRIPTION_START_INDEX \u003d 6;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final int DATE_START_INDEX \u003d 4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Executes a done command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String executeDoneCommand("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String[] userInputWords, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Integer index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            index \u003d Integer.parseInt(userInputWords[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please input a valid task number.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        tasks.get(index - 1).setDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task t \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return ui.done(t, isRunningOnGui);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Executes a delete command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String executeDeleteCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String[] userInputWords, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Integer index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            index \u003d Integer.parseInt(userInputWords[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please input a valid task number.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"That task number does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task deletedTask \u003d tasks.remove(index - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return ui.delete(deletedTask, tasks.size(), isRunningOnGui);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Executes a tag command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect. tag 1 HAPPY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String executeTagCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String[] userInputWords, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Integer index;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            index \u003d Integer.parseInt(userInputWords[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please input a valid task number.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"That task number does not exist.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Tag tag \u003d Tag.StringToTag(userInputWords[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        tasks.get(index - 1).addTag(tag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task t \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return ui.tag(t, tag, isRunningOnGui);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Executes a remove tag command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect. tag 1 HAPPY"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String executeRemoveTagCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String[] userInputWords, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        int index \u003d Integer.parseInt(userInputWords[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String tagToRemove \u003d userInputWords[2];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"That task number does not exist.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task t \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        boolean isTagRemoved \u003d t.removeTag(tagToRemove) \u003d\u003d 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return ui.removeTag(t, isRunningOnGui, isTagRemoved, tagToRemove);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Executes a find command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String executeFindCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String[] userInputWords, TaskList tasks, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String keyWord \u003d userInputWords[1];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d tasks.find(keyWord);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return ui.find(foundTasks, isRunningOnGui);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Executes a find tag command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String executeFindTagCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String[] userInputWords, TaskList tasks, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String keyTag \u003d userInputWords[1];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d tasks.findTag(keyTag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return ui.findTag(foundTasks, isRunningOnGui);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Command to create a ToDo."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param input Line of user input."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String createToDoCommand("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String input, String[] userInputWords, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (userInputWords.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo newToDo \u003d new ToDo(input.substring(TODO_DESCRIPTION_START_INDEX));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        tasks.add(newToDo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return ui.add(newToDo, tasks.size(), isRunningOnGui);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Command to create a deadline."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param input Line of user input."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String createDeadlineCommand("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String input, String[] userInputWords, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (userInputWords.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        int index \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please include the date of the deadline!\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String deadlineDescription \u003d input.substring(DEADLINE_DESCRIPTION_START_INDEX, index - 1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String deadlineDate \u003d input.substring(index + DATE_START_INDEX);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(deadlineDescription, deadlineDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasks.add(newDeadline);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return ui.add(newDeadline, tasks.size(), isRunningOnGui);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please enter a valid YYYY-MM-DD date format!\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Command to create an event."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param input Line of user input."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param userInputWords Array of words from user input."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String createEventCommand("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String input, String[] userInputWords, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (userInputWords.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        int ind \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (ind \u003d\u003d -1) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please include the date of the event!\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String eventDescription \u003d input.substring(EVENT_DESCRIPTION_START_INDEX, ind - 1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String eventDate \u003d input.substring(ind + DATE_START_INDEX);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Event newEvent \u003d new Event(eventDescription, eventDate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasks.add(newEvent);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            ArrayList\u003cTask\u003e tasksCopy \u003d tasks.clone();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Storage.store(tasksCopy);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return ui.add(newEvent, tasks.size(), isRunningOnGui);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please enter a valid YYYY-MM-DD date format!\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Processes each line of user input in accordance to the user\u0027s TaskList."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Triggers the appropriate response to the user via the Ui class methods."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param inputted Line of user input."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current task list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param isRunningOnGui A boolean that returns true if the application is running on GUI."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a response to the user."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If user input is incorrect."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String parse(String inputted, TaskList tasks, boolean isRunningOnGui) throws DukeException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String input \u003d inputted.trim();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (input.equals(EMPTY_COMMAND)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"Please input a proper command!\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String[] userInputWords \u003d input.split(\" \");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (input.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return ui.goodbye(isRunningOnGui);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (input.equals(LIST_COMMAND)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return ui.list(tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (userInputWords.length \u003d\u003d 2 \u0026\u0026 userInputWords[0].equals(DONE_COMMAND)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return executeDoneCommand(userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (userInputWords.length \u003d\u003d 2 \u0026\u0026 userInputWords[0].equals(DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return executeDeleteCommand(userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (userInputWords.length \u003d\u003d 2 \u0026\u0026 userInputWords[0].equals(FIND_COMMAND)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return executeFindCommand(userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }  else if (userInputWords.length \u003d\u003d 2 \u0026\u0026 userInputWords[0].equals(FIND_TAG_COMMAND)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return executeFindTagCommand(userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (userInputWords.length \u003d\u003d 3 \u0026\u0026 userInputWords[0].equals(TAG_COMMAND)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return executeTagCommand(userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (userInputWords.length \u003d\u003d 3 \u0026\u0026 userInputWords[0].equals(REMOVE_TAG_COMMAND)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return executeRemoveTagCommand(userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (userInputWords.length \u003d\u003d 2 \u0026\u0026 input.equals(SHOW_TAGS_COMMAND)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return ui.showTags(tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            switch (userInputWords[0]) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case NEW_TODO_COMMAND:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return createToDoCommand(input, userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case NEW_DEADLINE_COMMAND:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return createDeadlineCommand(input, userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case NEW_EVENT_COMMAND:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return createEventCommand(input, userInputWords, tasks, isRunningOnGui);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 293
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final char TODO \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final char DEADLINE \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final char EVENT \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final char DONE \u003d \u0027O\u0027;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final char TAG \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final char NOT_DONE \u003d \u0027X\u0027;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final int START_OF_TASK_NAME \u003d 7;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final int DONE_OR_NOT \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final int START_OF_DATE \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Creates the text file in the specified directory (this.filepath)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void createDirectory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        final File parentDir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        parentDir.mkdir();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        final String hash \u003d \"tasks\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        final String fileName \u003d hash + \".txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        final File file \u003d new File(parentDir, fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Created path data/tasks.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Could not create file.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Generates a ToDo based on the input line of text."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param task The input line of text from the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a new ToDo."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ToDo generateTodo(String task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo newTodo \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (task.charAt(DONE_OR_NOT) \u003d\u003d DONE) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newTodo \u003d new ToDo(task.substring(START_OF_TASK_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newTodo.setDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (task.charAt(DONE_OR_NOT) \u003d\u003d NOT_DONE) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newTodo \u003d new ToDo(task.substring(START_OF_TASK_NAME));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return newTodo;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Generates a Deadline based on the input line of text."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param task The input line of text from the file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a new Deadline."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Deadline generateDeadline(String task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline newDeadline \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (task.charAt(DONE_OR_NOT) \u003d\u003d DONE) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            int indexOfDeadline \u003d task.indexOf(\"by:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String date \u003d task.substring(indexOfDeadline + START_OF_DATE, task.length() - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String description \u003d task.substring(START_OF_TASK_NAME, indexOfDeadline - 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newDeadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newDeadline.setDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (task.charAt(DONE_OR_NOT) \u003d\u003d NOT_DONE) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            int indexOfDeadline \u003d task.indexOf(\"by:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String date \u003d task.substring(indexOfDeadline + START_OF_DATE, task.length() - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String description \u003d task.substring(START_OF_TASK_NAME, indexOfDeadline - 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newDeadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Generates an Event based on the input line of text."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param task The input line of text from the file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a new Event."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Event generateEvent(String task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event newEvent \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (task.charAt(DONE_OR_NOT) \u003d\u003d DONE) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            int indexOfEvent \u003d task.indexOf(\"at:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String date \u003d task.substring(indexOfEvent + START_OF_DATE, task.length() - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String description \u003d task.substring(START_OF_TASK_NAME, indexOfEvent - 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newEvent \u003d new Event(description, date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newEvent.setDone();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (task.charAt(DONE_OR_NOT) \u003d\u003d NOT_DONE) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            int indexOfEvent \u003d task.indexOf(\"at:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String date \u003d task.substring(indexOfEvent + START_OF_DATE, task.length() - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String description \u003d task.substring(START_OF_TASK_NAME, indexOfEvent - 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            newEvent \u003d new Event(description, date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Checks if the Duke Project text file exists. If it does, reads each line of the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * file and processes it into a TaskList. If not, creates the text file in the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * specified directory."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns a TaskList based on the user\u0027s duke project text file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws DukeException  If the file was not created correctly/ does not exist."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        File f \u003d new File(this.filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            createDirectory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            scanner \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new DukeException(\"File not found.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String task \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            switch (task.charAt(1)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case (TODO):"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ToDo newTodo \u003d generateTodo(task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                loadedTasks.add(newTodo);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case (DEADLINE):"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                Deadline newDeadline \u003d generateDeadline(task);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                loadedTasks.add(newDeadline);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case (EVENT):"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                Event newEvent \u003d generateEvent(task);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                loadedTasks.add(newEvent);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case (TAG):"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String[] tags \u003d task.split(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                TAG_COMMAND(loadedTasks, tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, something went wrong!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new TaskList(loadedTasks);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void TAG_COMMAND(ArrayList\u003cTask\u003e tasks, String[] tags) throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (int i \u003d 1; i \u003c tags.length; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String tag \u003d tags[i].substring(1).toLowerCase();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Tag tagToBeAdded \u003d Tag.StringToTag(tag);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            int indexToAddTags \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasks.get(indexToAddTags).addTag(tagToBeAdded);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Writes the input text onto the specified file path."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param textToAdd Text to be written onto the specified file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws IOException  If the specified file does not exist."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Writes the user\u0027s current TaskList into the project duke text file in a readable manner."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The user\u0027s current TaskList."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static void store(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            StringBuilder textToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                textToAdd.append(task.toString()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            writeToFile(textToAdd.toString());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Something Went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 192
    }
  },
  {
    "path": "src/main/java/duke/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public enum Tag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    HAPPY, ANGRY, SAD, CONFUSED, EXCITED, DOGTAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static Tag StringToTag(String input) throws DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"happy\":"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return HAPPY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"angry\":"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return ANGRY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"sad\":"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return SAD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"confused\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return CONFUSED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case \"excited\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return EXCITED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                throw new DukeException(\"Sorry, Duke does not recognise that tag name :(\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static String TagToString(Tag tag) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        switch (tag) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case HAPPY:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"happy\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case ANGRY:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"angry\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case SAD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"sad\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case CONFUSED:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"confused\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            case EXCITED:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"excited\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"dogtag\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 39
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents a Task with a specified description, and boolean to indicate if completed or not."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    protected ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Constructor for the Task class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns a tick if task is completed, a cross if otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Tick if completed, cross if not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return (isDone ? \"O\" : \"X\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getTags() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response \u003d response + \"#\" + tag + \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.tags.add(tag);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public int removeTag(String tagString) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tags.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (Tag.TagToString(this.tags.get(i)).equals(tagString)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                this.tags.remove(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Sets the task to be completed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordStringWithTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String done \u003d this.isDone ? \"O\" : \"X\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[\" + done + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 75
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents the user\u0027s list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Contains basic operations to manipulate tasks in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Creates a copy of the user\u0027s TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Clone of user\u0027s TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ArrayList\u003cTask\u003e clone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e tasksClone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tasksClone.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tasksClone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Searches the task list for tasks that contain the input string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param word String to match"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Array List containing tasks that contain the input string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String word) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (task.getDescription().contains(word)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Searches the task list for tasks that contain the input tag."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param word String to match"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Array List containing tasks that contain the input tag."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ArrayList\u003cTask\u003e findTag(String word) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (task.getTags().contains(word.toUpperCase())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 80
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents a To Do with a specified description, and boolean to indicate if completed or not."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String recordStringWithTags() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"[T]\" + super.toString() +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                (this.tags.size() \u003d\u003d 0 ? \"\" :\"\\ntags: \" + super.getTags());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 24
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Represents the Duke User Interface which deals with interactions with the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Ui() { }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Processes DukeException errors and displays them to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param e The DukeException thrown"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void showLoadingError(DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Simulates an exit event when the user inputs the bye command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Returns \"Bye\" if the user inputs the bye command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String goodbye(boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"Bye\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Displays the user\u0027s current task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The current TaskList of the User."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String list(TaskList tasks, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"There are no tasks in your list yet.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String response \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String taskString \u003d \"\\n\" + (i + 1) + \". \" + tasks.getTasks().get(i).recordString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    response +\u003d taskString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return response;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"There are no tasks in your list yet.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    System.out.println((i + 1) + \". \" + tasks.getTasks().get(i).recordString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String showTags(TaskList tasks, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"There are no tasks in your list yet.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String response \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String taskString \u003d \"\\n\" + (i + 1) + \". \" + tasks.getTasks().get(i).recordStringWithTags();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    response +\u003d taskString;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return response;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"There are no tasks in your list yet.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    System.out.println((i + 1) + \". \" + tasks.getTasks().get(i).recordStringWithTags());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user that the specified task has been marked done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param t The specified task that was marked done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String done(Task t, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String response \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response +\u003d \"\\n\" + t.recordString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(t.recordString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user that the specified task has been tagged."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param t The specified task that was marked done."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String tag(Task t, Tag tag, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String response \u003d \"Nice! I\u0027ve tagged this task with \" + tag + \":\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response +\u003d \"\\n\" + t.recordString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve tagged this task with \" + tag + \":\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(t.recordString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user that the specified task has been deleted."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user how many tasks are left in the current TaskList."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param t The specified task that was deleted."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param size The number of tasks in the TaskList."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String delete(Task t, int size, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String response \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response +\u003d \"\\n\" + t.recordString();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response +\u003d \"\\n\" + \"Now, you have \" + size + \" tasks in the list\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(t.recordString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Now, you have \" + size + \" tasks in the list\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user that the specified task has been added."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Notifies the user how many tasks are in the updated TaskList."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param t The specified task that was added."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param size The number of tasks in the TaskList."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String add(Task t, int size, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String response \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response +\u003d \"\\n\" + t.recordString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response +\u003d \"\\n\" + \"Now, you have \" + size + \" tasks in the list\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(t.recordString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            System.out.println(\"Now, you have \" + size + \" tasks in the list\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Displays the tasks in the user\u0027s TaskList that match the input string."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The list of Tasks that contains the input string."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String find(ArrayList\u003cTask\u003e tasks, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"Could not find any tasks.\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String response \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String matchingTask \u003d \"\\n\" + (i + 1) + \". \" + tasks.get(i).recordString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    response +\u003d matchingTask;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return response;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Could not find any tasks.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    System.out.println((i + 1) + \". \" + tasks.get(i).recordString());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Displays the tasks in the user\u0027s TaskList that match the input string."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The list of Tasks that contains the input string."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String findTag(ArrayList\u003cTask\u003e tasks, boolean isRunningOnGui) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (isRunningOnGui) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return \"Could not find any tasks.\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String response \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String matchingTask \u003d \"\\n\" + (i + 1) + \". \" + tasks.get(i).recordStringWithTags();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    response +\u003d matchingTask;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                return response;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Could not find any tasks.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    System.out.println((i + 1) + \". \" + tasks.get(i).recordStringWithTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Initializes the Duke UI to receive user inputs."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param tasks The specified task that was marked done."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void initializeDukeUI(TaskList tasks) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        greeting();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            Scanner userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            while (userInput.hasNext()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String input \u003d userInput.nextLine();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String s \u003d Parser.parse(input, tasks, false);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                if (s.equals(\"Bye\")) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            showLoadingError(e);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String removeTag(Task t, boolean isRunningOnGui, boolean isTagRemoved, String tagRemoved) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (!isTagRemoved) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return \"The specified task does not have the specified tag: \" + tagRemoved;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            String response \u003d \"Nice! I\u0027ve removed the tag: \" + tagRemoved;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            response +\u003d \"\\nfrom \" + t.recordString();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 260
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.effect.Blend?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Say something to Duke!\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            \u003cBlend opacity\u003d\"0.16\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "               \u003ctopInput\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                  \u003cInnerShadow /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "               \u003c/topInput\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            \u003c/Blend\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "         \u003c/effect\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 32
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void recordString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline readBook \u003d new Deadline(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline notReadBook \u003d new Deadline(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✓] read book (by: Jan 01 2020)\", readBook.recordString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✘] not read book (by: Jan 01 2020)\", notReadBook.recordString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline readBook \u003d new Deadline(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Deadline notReadBook \u003d new Deadline(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✓] read book (by: 2020-01-01)\", readBook.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[D][✘] not read book (by: 2020-01-01)\", notReadBook.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 27
    }
  },
  {
    "path": "src/test/java/duke/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void recordString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event readBook \u003d new Event(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event notReadBook \u003d new Event(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✓] read book (at: Jan 01 2020)\", readBook.recordString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✘] not read book (at: Jan 01 2020)\", notReadBook.recordString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event readBook \u003d new Event(\"read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Event notReadBook \u003d new Event(\"not read book\", \"2020-01-01\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✓] read book (at: 2020-01-01)\", readBook.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[E][✘] not read book (at: 2020-01-01)\", notReadBook.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 27
    }
  },
  {
    "path": "src/test/java/duke/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task readBook \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Task notReadBook \u003d new Task(\"not read book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[✓] read book\", readBook.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[✘] not read book\", notReadBook.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 18
    }
  },
  {
    "path": "src/test/java/duke/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void recordString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo readBook \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo notReadBook \u003d new ToDo(\"not read book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✓] read book\", readBook.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✘] not read book\", notReadBook.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo readBook \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ToDo notReadBook \u003d new ToDo(\"not read book\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        readBook.setDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✓] read book\", readBook.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(\"[T][✘] not read book\", notReadBook.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 27
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deadline cut my nails /by tomorrow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deadline shave my beard /by tomorrow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "event project meeting /at 2pm later"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "angrybunny123": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "angrybunny123": 2
    }
  }
]
