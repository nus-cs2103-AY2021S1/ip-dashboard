[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    archiveBaseName \u003d \"awesome-o\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "erisjacey": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents the chat bot itself. Main class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String DEFAULT_SAVE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Output output;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param filePath A string representing the destination file path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        output \u003d new Output();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            output.printGeneralChatWindow(e.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor with no specified file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(DEFAULT_SAVE_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Executes a command based on the user input, and returns an appropriate response."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A command result upon the execution of the command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeException If the input is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(String input) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Parser.parse(input).execute(tasks, output, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 54,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 14
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            scene.getStylesheets().add(\"/view/styles.css\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            setWindowUi(stage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void setWindowUi(Stage stage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        stage.getIcons().add(new Image(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        stage.setTitle(\"Awesome-O\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 44
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to add a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tag   A string representing the tag of the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public AddTaskCommand(String tag, String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(tag, input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidTaskTimeException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            DukeInvalidTaskDescriptionException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            DukeLoadingErrorException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Task toAdd \u003d tasks.addTask(tag, input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(output.printAddTaskChatWindow(toAdd, tasks.getTasks().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 37
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to exit the chat bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"bye\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(output.printGoodbye(), true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to clear the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"clear\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage) throws DukeLoadingErrorException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        tasks.clearTasks();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(output.printClearTasksWindow());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 27
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidKeywordException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidScheduleInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeUnknownInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents an action to be taken depending on the \u003ccode\u003etag\u003c/code\u003e and \u003ccode\u003einput\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected String tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tag   A string representing the tag of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected Command(String tag, String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor with no additional inputs necessary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tag A string representing the tag of the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected Command(String tag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(tag, \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Performs the appropriate command depending on its type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tasks   The list of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param output      The platform through which both user and chat bot interact."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param storage The object responsible for saving and loading data."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A command result with the appropriate response for the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidIndexException If an invalid list number is given."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidTaskTimeException        If an invalid task time is given."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidTaskDescriptionException If an invalid task description is given."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeUnknownInputException           If the user input cannot be understood."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeLoadingErrorException           If the file containing the save data cannot be loaded."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidKeywordException         If the user input contains an invalid keyword."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidScheduleInputException   If the user input contains an invalid scheduled date."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public abstract CommandResult execute(TaskList tasks, Output output, Storage storage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidIndexException, DukeInvalidTaskTimeException,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            DukeInvalidTaskDescriptionException, DukeUnknownInputException,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            DukeLoadingErrorException, DukeInvalidKeywordException, DukeInvalidScheduleInputException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 62
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param feedbackToUser A string representing the response for the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param isExit         \u003ccode\u003etrue\u003c/code\u003e if the command signals exiting the chat bot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *                       \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean isExit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor with the exit boolean set to the default value of \u003ccode\u003efalse\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this(feedbackToUser, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns the message to the user wrapped within this object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the response for the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Indicates whether or not to exit the chat bot."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the command signals exiting the chat bot;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *         \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 48
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents the different types of commands the user input can have."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a help command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    HELP {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Help: Provides a list of possible commands\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"help\\\"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a list command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- List: Shows the list of tasks\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"list\\\"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a done command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Done: Marks a task as complete\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"done \u003ctask number\u003e\\\"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a delete command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Delete: Deletes a task from the list\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"delete \u003ctask number\u003e\\\"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a clear command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    CLEAR {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Clear: Deletes ALL tasks from the list\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"clear\\\"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a todo command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Todo: Creates a todo task with specific description\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"todo \u003cdescription\u003e\\\"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents an event command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Event: Creates an event task with specific description and date/time\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"event \u003cdescription\u003e /at \u003ctime\u003e\\\"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        Time formatting: dd-MM-yyyy HH:mm\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a deadline command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Deadline: Creates a deadline task with specific description and date/time\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"deadline \u003cdescription\u003e /by \u003ctime\u003e\\\"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        Time formatting: dd-MM-yyyy HH:mm\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a find command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Find: Searches for task(s) which match the given keyword(s)\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"find \u003ckeyword(s)\u003e\\\"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    SCHEDULE {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Schedule: Shows the tasks due/at a specific date\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"schedule \u003cdate\u003e\\\"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        Date formatting: dd-MM-yyyy\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents a bye command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"- Bye: Ends the conversation with Awesome-O\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    + \"        \\\"bye\\\"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 119
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to delete a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"delete\", input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidIndexException, DukeLoadingErrorException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String response \u003d output.printDeleteTaskChatWindow(tasks.deleteTask(input), tasks.getTasksSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(response);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to complete a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"done\", input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidIndexException, DukeLoadingErrorException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String response \u003d output.printDoneTaskChatWindow(tasks.completeTask(input));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(response);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 31
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidKeywordException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to find tasks that match a given keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"find\", input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage) throws DukeInvalidKeywordException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(output.printFindTaskChatWindow(tasks.findTasks(input)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 27
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to print a help window to aid the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"help\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(output.printHelpWindow(obtainCommands()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private String[] obtainCommands() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String[] result \u003d new String[CommandType.values().length];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        for (CommandType command : CommandType.values()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            result[i++] \u003d command.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 32
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to show the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"list\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(output.printTasksChatWindow(tasks.getTasks()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidScheduleInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command to show the schedule for a specific date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ScheduleCommand(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"schedule\", input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidScheduleInputException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new CommandResult(output.printScheduleChatWindow(tasks.findScheduledTasks(input)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 26
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeUnknownInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a command that cannot be understood by the chat bot."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public UnknownCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(\"unknown\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public CommandResult execute(TaskList tasks, Output output, Storage storage) throws DukeUnknownInputException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        throw new DukeUnknownInputException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a general exception specific to Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Standard \u003ccode\u003etoString\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing this task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 20
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeFileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which a file cannot be loaded."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidDeadlineTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the deadline time input is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidDeadlineTimeException extends DukeInvalidTaskTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(\"%s\\n%s\", Message.ERROR_DEADLINE_TIME, Message.ERROR_TIME_FORMATTING);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidEventTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the event time input is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidEventTimeException extends DukeInvalidTaskTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(\"%s\\n%s\", Message.ERROR_EVENT_TIME, Message.ERROR_TIME_FORMATTING);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the list number input is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR_INVALID_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the keyword is empty (that is to say: invalid)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidKeywordException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR_INVALID_KEYWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidScheduleInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the date input is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidScheduleInputException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(\"%s\\n%s\", Message.ERROR_SCHEDULE_INPUT, Message.ERROR_DATE_FORMATTING);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the input\u0027s task description is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidTaskDescriptionException extends DukeTaskException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR_INVALID_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidTaskTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the task time input is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidTaskTimeException extends DukeTaskException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(\"%s\\n%s\", Message.ERROR_INVALID_TASK_TIME, Message.ERROR_TIME_FORMATTING);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeLoadingErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which a loading error occurs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeLoadingErrorException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR_LOADING_ERROR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception related to the tasks within Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR_TASK_ERROR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a Duke exception in which the user input cannot be recognised by the parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.ERROR_UNKNOWN_INPUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 15
    }
  },
  {
    "path": "src/main/java/duke/messages/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Contains default messages to send to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_GREETING \u003d \"I AM Awesome-O.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_WHAT_CAN_I_DO \u003d \"What can Awesome-O do for you?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_HELP_PROMPT \u003d \"...PSST! Type \\\"help\\\" for more information!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_TASKS_INTRO \u003d \"Awesome-O now shows you your tasks:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_NO_TASKS_CURRENTLY \u003d \"No tasks currently\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_DONE_TASK \u003d \"Awesome-O marked this task as done:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK \u003d \"Awesome-O removed this task:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_CLEAR_TASKS \u003d \"Awesome-O has cleared all tasks.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_ADD_TASK \u003d \"Awesome-O added this task:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_FIND_TASKS_INTRO \u003d \"Awesome-O shows you the tasks that match the keyword:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_NO_MATCHING_TASKS \u003d \"No matching tasks!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_SCHEDULE_INTRO \u003d \"Awesome-O shows you the tasks scheduled on this day:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_NO_SCHEDULED_TASKS \u003d \"Awesome-O sees no scheduled tasks on this day.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_THANK_YOU \u003d \"Awesome-O thanks you for talking to him.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Awesome-O WILL MISS YOU.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String MESSAGE_NUMBER_OF_TASKS \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR \u003d \"ERROR\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_FILE_NOT_FOUND \u003d \"ERROR: File to load cannot be found\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_DEADLINE_TIME \u003d \"ERROR: Usage: \u003cdeadline\u003e \u003cdescription\u003e /by \u003ctime\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_EVENT_TIME \u003d \"ERROR: Usage: \u003cevent\u003e \u003cdescription\u003e /at \u003ctime\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_SCHEDULE_INPUT \u003d \"ERROR: Usage: schedule \u003cdate\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_TIME_FORMATTING \u003d \"Time formatting: dd-MM-yyyy HH:mm\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_INVALID_INDEX \u003d \"ERROR: Invalid list number input!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_INVALID_KEYWORD \u003d \"ERROR: The keyword cannot be empty!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_DATE_FORMATTING \u003d \"Date formatting: dd-MM-yyyy\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_INVALID_TASK_DESCRIPTION \u003d \"ERROR: The description of a task cannot be empty!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_INVALID_TASK_TIME \u003d \"ERROR: Please specify a correct date/time for this task!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_LOADING_ERROR \u003d \"ERROR: Loading error\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_TASK_ERROR \u003d \"ERROR: Task error\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static final String ERROR_UNKNOWN_INPUT \u003d \"ERROR: Unknown input! Try again.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 40
    }
  },
  {
    "path": "src/main/java/duke/messages/Output.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Contains the relevant responses and messages."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Output {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prompts the user for commands. Initial greeting."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the welcome window."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printWelcome() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return printGeneralChatWindow("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                Message.MESSAGE_GREETING,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                Message.MESSAGE_WHAT_CAN_I_DO,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                Message.MESSAGE_HELP_PROMPT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window showing the list of available commands for the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param commands A collection of commands whose description is to be printed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the list of available commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printHelpWindow(String[] commands) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return printGeneralChatWindow(commands);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window showing the list of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tasks The list of tasks to be printed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the list of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printTasksChatWindow(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        result.append(String.format(\"%s\\n\", Message.MESSAGE_TASKS_INTRO));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            result.append(String.format(\"%s\\n\", Message.MESSAGE_NO_TASKS_CURRENTLY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                result.append(String.format(\"%d. %s\\n\", ++index, task));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window that describes the task that is done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param task The task to be displayed as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing a completed task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printDoneTaskChatWindow(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return printGeneralChatWindow(Message.MESSAGE_DONE_TASK,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                String.format(\"%s%s\", INDENT, task.toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window that describes the task that is deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param task            The task to be displayed as deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param numOfTotalTasks The number of tasks in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing a delete task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printDeleteTaskChatWindow(Task task, int numOfTotalTasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return printGeneralChatWindow(Message.MESSAGE_DELETE_TASK,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                String.format(\"%s%s\", INDENT, task.toString()),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                printNumberOfTasks(numOfTotalTasks));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window that informs the user that all tasks have been cleared."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the clearing of all tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printClearTasksWindow() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return Message.MESSAGE_CLEAR_TASKS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window with a customised description that the task has been added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param task            The task to be displayed as added."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param numOfTotalTasks The number of tasks in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing an added task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printAddTaskChatWindow(Task task, int numOfTotalTasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return printGeneralChatWindow(Message.MESSAGE_ADD_TASK,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                String.format(\"%s%s\", INDENT, task.toString()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                printNumberOfTasks(numOfTotalTasks));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window with a list of tasks matching the user input\u0027s keyword."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tasks The list of matching tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the list of matching tasks."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printFindTaskChatWindow(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        result.append(printGeneralChatWindow(Message.MESSAGE_FIND_TASKS_INTRO));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            result.append(Message.MESSAGE_NO_MATCHING_TASKS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                result.append(printGeneralChatWindow("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        String.format(\"%d. %s\", ++index, task)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a chat window with a list of tasks scheduled on a particular date sorted chronologically."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tasks The list of scheduled tasks on that dya."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the list of scheduled tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printScheduleChatWindow(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        result.append(printGeneralChatWindow(Message.MESSAGE_SCHEDULE_INTRO));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            result.append(Message.MESSAGE_NO_SCHEDULED_TASKS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                result.append(printGeneralChatWindow("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        String.format(\"%d. %s\", ++index, task)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints a goodbye chat window."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the goodbye chat window."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printGoodbye() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return printGeneralChatWindow(Message.MESSAGE_THANK_YOU, Message.MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Prints an indented chat window with a customised message."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param messages A series of strings representing the customised message."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing a series of messages for the user to see."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printGeneralChatWindow(String... messages) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Arrays.asList(messages).forEach(m -\u003e result.append(String.format(\"%s\\n\", m)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    // Prints the number of tasks left in the list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private String printNumberOfTasks(int n) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(Message.MESSAGE_NUMBER_OF_TASKS, n);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 162,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.ScheduleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Parses the user input and returns a corresponding command to be executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A command to be executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assert input !\u003d null : \"Input cannot be null!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        // Tag refers to the command to perform"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String tag \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        switch (tag) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new DoneCommand(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new DeleteCommand(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new AddTaskCommand(\"todo\", input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new AddTaskCommand(\"event\", input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new AddTaskCommand(\"deadline\", input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"schedule\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new ScheduleCommand(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 69
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeFileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.TaskType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param filePath A string representing the file path."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeLoadingErrorException If a loading error occurs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Storage(String filePath) throws DukeLoadingErrorException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        initialiseStorage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Saves the task list in a dedicated destination file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tasks The task list to be saved."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeLoadingErrorException If a loading error occurs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) throws DukeLoadingErrorException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(path));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                String toSave \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                int isDone \u003d task.isDone() ? 1 : 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                TaskType type \u003d task.getTaskType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                switch (type) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    toSave +\u003d String.format(\"%s\\t%d\\t%s\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                            type, isDone, description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    toSave +\u003d String.format(\"%s\\t%d\\t%s\\t%s\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                            type, isDone, description, task.getTimeString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                fw.write(String.format(\"%s\\n\", toSave));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeLoadingErrorException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Loads the task list saved in the file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The task list that has been loaded."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeFileNotFoundException If the file does not exist."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeFileNotFoundException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            sc \u003d new Scanner(path.toFile());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeFileNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String time \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            String[] parsed \u003d sc.nextLine().split(\"\\t\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            description \u003d parsed[2];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            isDone \u003d Integer.parseInt(parsed[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            if (parsed.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                time \u003d parsed[3];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            switch (parsed[0]) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                task \u003d new ToDo(description, isDone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                task \u003d new Event(description, isDone, time);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                task \u003d new Deadline(description, isDone, time);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assert task !\u003d null : \"Task cannot be null!\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void initialiseStorage(String filePath) throws DukeLoadingErrorException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            path \u003d Paths.get(home, filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            // If path doesn\u0027t exist, create one"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            if (Files.notExists(path)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                File newDir \u003d new File(String.valueOf(path));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                String[] toCreate \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                // Create folders for each directory specified in the filePath"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                for (int i \u003d 0; i \u003c toCreate.length - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    String dir \u003d toCreate[i];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    Path miniPath \u003d Paths.get(home, dir);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    File miniDir \u003d new File(String.valueOf(miniPath));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    miniDir.mkdir();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                newDir.createNewFile();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeLoadingErrorException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 155
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a task with a set deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param by          A string representing the task deadline date/time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, TaskType.DEADLINE, by);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor specifying whether or not the task has been completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param isDone      \u003ccode\u003etrue\u003c/code\u003e if the task has been completed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *                    \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param by          A string representing the task deadline date/time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, isDone, TaskType.DEADLINE, by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(\"%s (by: %s)\", super.toString(), printTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 27,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a task with a set time-frame."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class Event extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param at          A string representing the task event date/time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, TaskType.EVENT, at);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor specifying whether or not the task has been completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param isDone      \u003ccode\u003etrue\u003c/code\u003e if the task has been completed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *                    \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param at          A string representing the task event date/time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, isDone, TaskType.EVENT, at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(\"%s (at: %s)\", super.toString(), printTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 27,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a task that is to be completed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected TaskType type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param type        The type of this task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Task(String description, TaskType type) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor specifying whether or not the task has been completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param isDone      \u003ccode\u003etrue\u003c/code\u003e if the task has been completed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *                    \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param type        The type of this task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Task(String description, boolean isDone, TaskType type) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Getter method."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing this task\u0027s description."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Getter method."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the task has been completed;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *         \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Gives a tick/cross symbol depending on whether or not this task has been completed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A tick if the task has been completed; a cross otherwise."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // Return tick or X symbol"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Changes this task\u0027s \u003ccode\u003eisDone\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Getter method."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return This task\u0027s type."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Formats the time in the following format: \u003ccode\u003edd-MM-yyyy HH:mm\u003c/code\u003e."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the time in the specified format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public abstract String getTimeString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Formats the time in the following format: \u003ccode\u003ed MMM yyyy, hh:mm a\u003c/code\u003e."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing the time in the specified format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public abstract String printTime();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Obtains the date specified in the task (if applicable)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The date specified in the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Obtains the time specified in the task (if applicable)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The time specified in the task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public abstract LocalTime getTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Standard \u003ccode\u003etoString\u003c/code\u003e."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return A string representing this task object."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return String.format(\"[%s][%s] %s\", type, getStatusIcon(), description);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 105,
      "-": 18
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidDeadlineTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidEventTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidKeywordException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidScheduleInputException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskDescriptionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Contains the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Also handles any operation that deals with this list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * (for example: \u003ccode\u003eaddTask\u003c/code\u003e, \u003ccode\u003edeleteTask\u003c/code\u003e)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor with a pre-loaded list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tasks The task list to be loaded."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor with an empty starting task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * A getter method that returns the list of tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The size of the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public int getTasksSize() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Marks a task as complete according to the string input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string input representing the specific task to complete."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The task that has been completed itself."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidIndexException If the task number provided is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Task completeTask(String input) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            // Obtain index within list of tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(5)) - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Deletes a task according to the string input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string input representing the specific task to delete."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The task that has been deleted itself."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidIndexException If the task number provided is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Task deleteTask(String input) throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            // Obtain index within list of tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(7)) - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Clears all tasks in the task list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void clearTasks() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Adds a task to the pre-existing list of tasks according to the string input."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param tag   A string with a specific tag. (\u003ccode\u003etodo\u003c/code\u003e,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *              \u003ccode\u003eevent\u003c/code\u003e and \u003ccode\u003edeadline\u003c/code\u003e)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string input representing the specific task to add."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The task that has been added itself."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidTaskDescriptionException If the task description is empty."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidTaskTimeException If the task time details are invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public Task addTask(String tag, String input)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidTaskDescriptionException, DukeInvalidTaskTimeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Task toAdd \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            switch (tag) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                toAdd \u003d addToDo(input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                toAdd \u003d addEvent(input);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                toAdd \u003d addDeadline(input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidTaskDescriptionException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidTaskTimeException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Adds a todo to the list of tasks."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the todo to be added."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The todo that has been added itself."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Task addToDo(String input) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String toDoText \u003d input.substring(5);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        ToDo toDo \u003d new ToDo(toDoText);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        tasks.add(toDo);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Finds all the tasks which match the keyword in the user input."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The list of tasks which match the keyword in the user input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidKeywordException If the keyword input is invalid or empty."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public List\u003cTask\u003e findTasks(String input) throws DukeInvalidKeywordException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String keyword;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            keyword \u003d input.substring(5);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidKeywordException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                .filter(t -\u003e t.getDescription().contains(keyword))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Finds all the tasks whose date matches the date in the user input."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the user input."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The list of tasks whose date matches the date in the user input."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidScheduleInputException If the date input is invalid or empty."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public List\u003cTask\u003e findScheduledTasks(String input) throws DukeInvalidScheduleInputException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String dateInput;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            dateInput \u003d input.substring(9);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            date \u003d LocalDate.parse(dateInput, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidScheduleInputException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                .filter(t -\u003e t.getDate().equals(date))"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                .sorted(Comparator.comparing(Task::getTime))"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Adds an event to the list of tasks."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the event to be added."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The event that has been added itself."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidEventTimeException If the event time details are invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Task addEvent(String input) throws DukeInvalidEventTimeException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String[] eventText \u003d input.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String eventDescription \u003d eventText[0];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (eventText.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidEventTimeException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String eventAt \u003d eventText[1];"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Event event \u003d new Event(eventDescription, eventAt);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Adds a deadline to the list of tasks."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param input A string representing the deadline to be added."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @return The deadline that has been added itself."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @throws DukeInvalidDeadlineTimeException If the deadline time details are invalid."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Task addDeadline(String input) throws DukeInvalidDeadlineTimeException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String[] deadlineText \u003d input.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String deadlineDescription \u003d deadlineText[0];"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (deadlineText.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throw new DukeInvalidDeadlineTimeException();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String deadlineBy \u003d deadlineText[1];"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Deadline deadline \u003d new Deadline(deadlineDescription, deadlineBy);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 244
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents the different types a task can have."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents the type of a todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents the type of a timed task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    TIMED,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents the type of an event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"E\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    },"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Represents the type of a deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return \"D\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 40
    }
  },
  {
    "path": "src/main/java/duke/tasks/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a task with a specified date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param type        The type of this task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param dateTime    A string representing the task date/time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public TimedTask(String description, TaskType type, String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor specifying whether or not the task has been completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param isDone      \u003ccode\u003etrue\u003c/code\u003e if the task has been completed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *                    \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param type        The type of this task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param dateTime    A string representing the task date/time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public TimedTask(String description, boolean isDone, TaskType type, String dateTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, isDone, type);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return dateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return dateTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return dateTime.toLocalDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return dateTime.toLocalTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 61
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Represents a task with a simple description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, TaskType.TODO);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Class constructor specifying whether or not the task has been completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param description A string representing the task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * @param isDone      \u003ccode\u003etrue\u003c/code\u003e if the task has been completed;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     *                    \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        super(description, isDone, TaskType.TODO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        throw new IllegalStateException(\"Impossible method call\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public String printTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        throw new IllegalStateException(\"Impossible method call\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return LocalDate.EPOCH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return LocalTime.MIN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 47,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        setMargin(tmp.get(0), new Insets(5, 0, 5, 20));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 65
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Output;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Kenny.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Starts the chat bot app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                DialogBox.getDukeDialog(new Output().printWelcome(), dukeImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            commandResult \u003d duke.execute(userInput.getText());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            response \u003d commandResult.getFeedback();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            response \u003d e.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assert response !\u003d null : \"No response available!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (commandResult \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    //Show the bye message for 1.5seconds before exit."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    Thread.sleep(1500);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                            DialogBox.getUserDialog(e.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 92
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003cVBox fx:id\u003d\"chatBubble\" styleClass\u003d\"chat-bubble\" minHeight\u003d\"-Infinity\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u003cInsets left\u003d\"15.0\" right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u003cDropShadow blurType\u003d\"GAUSSIAN\" color\u003d\"#9c9a9a\" height\u003d\"16.23\" radius\u003d\"9.9625\" width\u003d\"25.62\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"chat-label\" lineSpacing\u003d\"5.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                        \u003cFont name\u003d\"Lucida Console\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 34
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" styleClass\u003d\"root\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"720.0\" prefWidth\u003d\"480.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" styleClass\u003d\"user-input\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"49.2\" prefWidth\u003d\"388.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" styleClass\u003d\"button\" layoutX\u003d\"388.0\" layoutY\u003d\"669.6\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"49.2\" prefWidth\u003d\"91.2\" text\u003d\"SEND\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" styleClass\u003d\"scroll-bar\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"668.0\" prefWidth\u003d\"480.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" styleClass\u003d\"dialog-container\" prefHeight\u003d\"662.0\" prefWidth\u003d\"465.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 19
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR, new DukeException().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeFileNotFoundExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeFileNotFoundExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR_FILE_NOT_FOUND, new DukeFileNotFoundException().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeInvalidDeadlineTimeExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidDeadlineTimeExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(String.format(\"%s\\n%s\", Message.ERROR_DEADLINE_TIME, Message.ERROR_TIME_FORMATTING),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new DukeInvalidDeadlineTimeException().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 17
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeInvalidEventTimeExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidEventTimeExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(String.format(\"%s\\n%s\", Message.ERROR_EVENT_TIME, Message.ERROR_TIME_FORMATTING),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new DukeInvalidEventTimeException().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 17
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeInvalidIndexExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidIndexExceptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR_INVALID_INDEX, new DukeInvalidIndexException().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 17
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeInvalidKeywordExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidKeywordExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR_INVALID_KEYWORD, new DukeInvalidKeywordException().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeInvalidScheduleInputExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidScheduleInputExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(String.format(\"%s\\n%s\", Message.ERROR_SCHEDULE_INPUT, Message.ERROR_DATE_FORMATTING),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new DukeInvalidScheduleInputException().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 17
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeInvalidTaskDescriptionExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidTaskDescriptionExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR_INVALID_TASK_DESCRIPTION, new DukeInvalidTaskDescriptionException().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeInvalidTaskTimeExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeInvalidTaskTimeExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(String.format(\"%s\\n%s\", Message.ERROR_INVALID_TASK_TIME, Message.ERROR_TIME_FORMATTING),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                new DukeInvalidTaskTimeException().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 17
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeLoadingErrorExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeLoadingErrorExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR_LOADING_ERROR, new DukeLoadingErrorException().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeTaskExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeTaskExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR_TASK_ERROR, new DukeTaskException().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/duke/exceptions/DukeUnknownInputExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class DukeUnknownInputExceptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(Message.ERROR_UNKNOWN_INPUT, new DukeUnknownInputException().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16
    }
  },
  {
    "path": "src/test/java/duke/tasks/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidKeywordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidScheduleInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskDescriptionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.exceptions.DukeInvalidTaskTimeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "import duke.messages.Message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Task toDo \u003d new ToDo(\"test 1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Task event \u003d new Event(\"test 2\", \"23-02-2020 23:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Task deadline \u003d new Deadline(\"test 3\", \"01-01-2020 00:00\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private Task event2 \u003d new Event(\"test 4\", \"23-02-2020 23:59\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    private TaskList createTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        List\u003cTask\u003e sample \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sample.add(toDo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sample.add(event);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sample.add(deadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        sample.add(event2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        return new TaskList(sample);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void addToDo_validToDo_success()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidTaskTimeException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            DukeInvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(toDo.toString(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                tasks.addTask(\"todo\", \"todo test 1\").toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void addToDo_erroneousDescription_exceptionThrown() throws DukeInvalidTaskTimeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(toDo.toString(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    tasks.addTask(\"todo\", \"todo\").toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeInvalidTaskDescriptionException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(Message.ERROR_INVALID_TASK_DESCRIPTION, e.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void addEvent_validEvent_success()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidTaskTimeException,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            DukeInvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                tasks.addTask(\"event\", \"event test 2 /at 23-02-2020 23:00\").toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void addEvent_erroneousTime_exceptionThrown() throws DukeInvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(event.toString(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    tasks.addTask(\"event\", \"event /at blah\").toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeInvalidTaskTimeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(String.format(\"%s\\n%s\", Message.ERROR_EVENT_TIME, Message.ERROR_TIME_FORMATTING),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void addDeadline_validDeadline_success()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            throws DukeInvalidTaskTimeException,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            DukeInvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(deadline.toString(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                tasks.addTask(\"deadline\", \"deadline test 3 /by 01-01-2020 00:00\").toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void addDeadline_erroneousTime_exceptionThrown() throws DukeInvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(deadline.toString(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    tasks.addTask(\"deadline\", \"deadline /by blah\").toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeInvalidTaskTimeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(String.format(\"%s\\n%s\", Message.ERROR_DEADLINE_TIME, Message.ERROR_TIME_FORMATTING),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void completeTask_validInput_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        toDo.markAsDone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(toDo.toString(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                createTaskList().completeTask(\"done 1\").toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void completeTask_erroneousInput_exceptionThrown() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            toDo.markAsDone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(toDo.toString(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    createTaskList().completeTask(\"done 1000\").toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(Message.ERROR_INVALID_INDEX, e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void deleteTask_validInput_success() throws DukeInvalidIndexException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(toDo.toString(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                createTaskList().deleteTask(\"delete 1\").toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void deleteTask_erroneousInput_exceptionThrown() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(toDo.toString(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    createTaskList().deleteTask(\"delete 1000\").toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeInvalidIndexException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(Message.ERROR_INVALID_INDEX, e.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void findTask_validInput_success() throws DukeInvalidKeywordException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                createTaskList().findTasks(\"find test\").get(1).toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void findTask_erroneousInput_exceptionThrown() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(event.toString(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    createTaskList().findTasks(\"find\").toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeInvalidKeywordException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(Message.ERROR_INVALID_KEYWORD, e.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void schedule_validInput_success() throws DukeInvalidScheduleInputException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        assertEquals(event2.toString(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                createTaskList().findScheduledTasks(\"schedule 23-02-2020\").get(1).toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    public void schedule_erroneousInput_exceptionThrown() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(event2.toString(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    createTaskList().findScheduledTasks(\"schedule hello\").get(1).toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        } catch (DukeInvalidScheduleInputException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "            assertEquals(String.format(\"%s\\n%s\", Message.ERROR_SCHEDULE_INPUT, Message.ERROR_DATE_FORMATTING),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erisjacey"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 160
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "clear"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "blah"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "deadline return book /by 23-02-2020 00:00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "deadline return book /by 123456789"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "event project meeting /at 01-01-2020 12:30"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "event project meeting /at hello"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "find book"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "find blah"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "find"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "erisjacey": 16,
      "-": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "SET MY_PATH\u003d..\\src\\main\\java\\duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin %MY_PATH%\\*.java %MY_PATH%\\command\\*.java %MY_PATH%\\exception\\*.java %MY_PATH%\\task\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erisjacey"
        },
        "content": "java -classpath ..\\bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "erisjacey": 5
    }
  }
]
