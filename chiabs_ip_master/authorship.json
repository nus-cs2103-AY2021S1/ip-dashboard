[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 18,
      "-": 45
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Duke is a **desktop app for managing tasks, optimised for use via a command line interface** (CLI) "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "If you can type fast, Duke can manage and organise your tasks faster than traditional GUI apps."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- [Quick start](#quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- [Features](#features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    1. [Adding a todo: `todo`](#adding-a-todo--todo)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    2. [Adding a deadline: `deadline`](#adding-a-deadline--deadline)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    3. [Adding an event: `event`](#adding-an-event--event)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    4. [Listing all tasks: `list`](#listing-all-tasks--list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    5. [Searching for a task: `find`](#finding-tasks-by-keyword--find)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    6. [Deleting a task: `delete`](#deleting-a-task--delete)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    7. [Marking a task as done: `done`](#completing-a-task--done)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    8. [Updating a task: `update`](#updating-a-task--update)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    9. [Updating a task\u0027s description: `updateDesc`](#updating-the-description-of-a-task--updatedesc)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    10. [Updating a Deadline/Event\u0027s time/date: `updateTime`](#updating-the-timedate-of-deadlineevent--updatetime) "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    11. [Exiting the program: `bye`](#exiting-the-program)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    12. [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- [Command summary](#command-summary)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "1. Ensure that you have Java `11` or above installed on your computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "2. Download the latest Duke Jar from [here](https://github.com/chiabs/ip/releases/tag/A-Release)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "3. Copy the file to the folder you want to use as the *home folder* for your Duke program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "4. Double click the file to start the app for Windows, or run `java -jar duke.jar` for Mac."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "You should see the below GUI after a few seconds:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "![landing page](/docs/Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "5. Type the command in the command box and press Enter to execute it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "  - `todo study cs2103t`: Adds a todo `study cs2103t` to the list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "  - `list`: Lists all tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "  - `done 8`: Marks the eight task in the list as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "  - `bye`: Exits the app"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "6. Refer to the [Features](#Features) below for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e ℹ️  **Notes about the command format:**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e - Words in `UPPER_CASE` are the parameters to be supplied by the user.  "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e eg. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo study`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e - Items with `...` after them can be used multiple times but at least once, separated by a comma.  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e eg `find KEYWORD...` can be used as `find study` or `find study cs2103t`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e - Parameters must be in the order specified."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e - Command is case-insensitive. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Adding a todo : `todo`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Adds a ToDo. A ToDo is a task with only a description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `todo d/DESCRIPTION`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `toDo d/read a book`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `toDo d/study for CS2103T`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Adding a Deadline : `deadline`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Adds a Deadline. A Deadline is a task with a description and the deadline by "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiabs"
        },
        "content": "which the task must be completed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `deadline d/DESCRIPTION /by t/TIME_DATE`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e ⚠️  For `TIME_DATE` parameters in both deadline and event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e features, Duke is accepts all formats including text, Duke is"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e also able to recognize the date format YYYY-MM-DD and display it as "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e dd-MMM-yyyy. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `deadline d/CS2103T Submission /by t/2021-12-26`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `deadline d/CS2100 homework /by t/tmr`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e 💡  Tip: If you uncertain, you can key the date as unknown, and update it later on!"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Adding an Event : `event`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Adds an Event. An Event is a task with a description and the time/day when the "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiabs"
        },
        "content": "event is occurring."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `event d/DESCRIPTION /at t/TIME_DATE`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e ℹ️  Refer to [Adding a deadline: `deadline`](#adding-a-deadline--deadline)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e to find out about date formats."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `event d/CS2103T Lecture /at t/2021-12-26`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `event d/CS2100 Tutorial /at t/tmr`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Listing all Tasks : `list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Shows a list of all Tasks stored."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Finding Tasks by keyword : `find` "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Finds Tasks whose descriptions contain the all given keywords."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `find k/KEYWORD`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- Keywords are case-sensitive."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- The order of the keywords matters, that is, `read book` or "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`book read` will show different results."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- Only the task description is searched."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- Partial words cannot be matched (eg `boo` will not match `book`);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- Only tasks matching all keywords will be returned."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `find k/CS2100` "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u0026nbsp; `Here are the matching tasks in your list:`  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u0026nbsp;\u0026nbsp; `1. [D][✘] CS2100 Assignment 1 (by 12 Sep 2020 2:00 PM)`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u0026nbsp;\u0026nbsp; `2. [E][✘] Finals for CS2100 (at 15 Oct 2020 2:00 PM)`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Deleting a Task : `delete`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Deletes the specified Task at the index."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `delete i/INDEX`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e ℹ️  `INDEX` refers to the index of the task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e shown in the displayed person list. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `delete i/5` deletes the 5th task in Duke."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `delete i/2` deletes the 2nd task in Duke."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiabs"
        },
        "content": "### Completing a Task : `done`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Marks a task as done."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `done i/INDEX` "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e ℹ️  `INDEX` refers to the index of the task"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e shown in the displayed person list. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiabs"
        },
        "content": "- `done 1` marks the 1st task in Duke as done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Updating a Task : `update`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Updates a Task at the specified index and completely overwrites the Task to be updated."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `update i/INDEX t/TASK`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e ℹ️  `TASK` refers to the updated task, and"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e its format should be one of the Tasks formats."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e Refer to "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e - [Adding a todo: `todo`](#adding-a-todo--todo), "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e - [Adding a deadline: `deadline`](#adding-a-deadline--deadline),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e - [Adding an event: `event`](#adding-an-event--event)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `update i/1 t/event CS2103 Lecture /at t/2021-12-05`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`[E][✘] Finals for CS2100 (at 15 Oct 2020)`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u0026nbsp;`updated to`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`[E][✘] CS2103 Lecture (at 05 Dec 2020)`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Updating the time/date of Deadline/Event : `updateTime`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Updates the date/time of a Deadline/Event at the specified index."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `updateTime i/INDEX t/TIME_DATE`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `updateTime i/1 t/2021-12-05`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`[E][✘] Finals for CS2100 (at 15 Oct 2020)`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u0026nbsp;`updated to`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`[E][✘] Finals for CS2100 (at 05 Dec 2020)`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Updating the description of a Task : `updateDesc`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Updates the description of a Task at the specified index."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `updateDesc i/INDEX d/DESCRIPTION`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiabs"
        },
        "content": "* `updateDesc i/5 d/study`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`[E][✘] Finals for CS2100 (at 15 Oct 2020)`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u0026nbsp;`updated to`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`[E][✘] study (at 15 Oct 2020)`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Exiting the program"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Format: `Bye`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiabs"
        },
        "content": "#### Saving the data"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Duke data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiabs"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e 💡  Data is stored in */duke.txt* relative to the "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003e *home folder*."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiabs"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiabs"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiabs"
        },
        "content": "------ | ------ | --------"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`todo` | `todo DESCRIPTION` | `todo read book`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`deadline` | `deadline DESCRIPTION /by TIME_DATE` | `deadline assignment /by 2021-05-12`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`event` | `event DESCRIPTION /at TIME_DATE` | `event meeting /at tmr`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`list` | `list` "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`find` | `find KEYWORDS` | `find read`, `find read book`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`done` | `done INDEX` | `done 2`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`delete` | `delete INDEX` | `delete 1`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`update` | `update INDEX TASK` | `update 1 todo read book` "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`updateTime` | `updateTime INDEX TIME_DATE` | `updateTime 2 2020-12-01`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`updateDesc` | `updateDesc INDEX DESCRIPTION` | `updateDesc 5 study`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiabs"
        },
        "content": "`bye` | `bye`"
      }
    ],
    "authorContributionMap": {
      "chiabs": 199,
      "-": 19
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialises a deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc Description of Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param by Due date of deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Deadline(String desc, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    + by + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 36
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        db.setMinSize(DialogBox.USE_PREF_SIZE, DialogBox.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        db.setMinSize(DialogBox.USE_PREF_SIZE, DialogBox.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static DialogBox displayWelcome(Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String msg \u003d \"Hello, I\u0027m Duke!\" + \"\\n\" + \"How can I help you?\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        DialogBox welcome \u003d new DialogBox(msg, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        welcome.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return  welcome;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 65
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialise Duke with the filePath."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Storage storage \u003d new Storage(\"./duke.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList tasks \u003d storage.readFile();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.filePath \u003d \"./duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Runs the Duke by initialise the Parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Parser parser \u003d new Parser(tasks, ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        parser.parser(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Generates response from Duke based on user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return Response by Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String getResponse(String input){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Parser parser \u003d new Parser(tasks, this.ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String output \u003d parser.parser(input, this.tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return \"Duke: \" + \"\\n\" + output;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 39,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialises an Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc Description of Event.."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param at Time/Date of event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Event(String desc, String at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            this.date \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            date \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 35
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 11
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.displayWelcome(dukeImage));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 51
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Parser(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Processes inputs from the user from terminal."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Parses and generates output to terminal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param filePath Path of file as string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void parser(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                ui.displayBye();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                ui.displayList(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                String[] words \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (words[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    performDone(line, path);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else if (words[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    performDelete(line, path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else if (words[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    performFind(words, line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    performClassify(line, path);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Processes the \"done\" command and displays msg in terminal."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param line Input from user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param path Path of file as string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void performDone(String line, Path path) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int index \u003d findIndex(line, tasks.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.get(index).setDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            ui.displayDone(tasks, index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Processes the \"delete\" command and displays msg in terminal."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param line Input from user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param path Path of file as string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void performDelete(String line, Path path) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int index \u003d findIndex(line, tasks.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            ui.displayRemove(tasks, index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.delete(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Processes the \"find\" command and displays msg in terminal."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param words Array containing words in input from user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param line Input from user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void performFind(String[] words, String line) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (words.length \u003e 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String keyword \u003d line.substring(5);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            TaskList matches \u003d findMatches(tasks, keyword);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            ui.displayMatches(matches);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Classifies and adds the task based on user input and displays msg in terminal."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param line Input from user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param path Path of file as string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void performClassify(String line, Path path) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task task \u003d classifyTasks(line);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            ui.displayAdd(task, tasks.size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Processes inputs from the user from GUI."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Parses and generates output to GUI."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param line Input from user.."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing pre-existing tasks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String parser(String line, TaskList tasks) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Path path \u003d Paths.get(\"./duke.txt\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"Bye! Hope to see you again ;)\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return giveStringList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String[] words \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            switch (words[0]) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return giveStringDone(line, path);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return giveStringDelete(line, path);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return giveStringFind(words, line, path);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                case \"update\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return giveStringUpdate(words, line, path);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                case \"updateTime\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return giveStringUpdateTime(words, line, path);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                case \"updateDesc\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return giveStringUpdateDesc(words, line, path);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    return giveStringClassify(line, path);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String string \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (count \u003d\u003d tasks.size()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                string +\u003d count + \".\" + task.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                string +\u003d count + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assert count \u003e 0 : \"Something went wrong with the Parser.giveStringList() function\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringDone(String line, Path path) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int index \u003d findIndex(line, tasks.size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            assert index \u003e -1 : \"An exception should have been caught before this\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.get(index).setDone();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String string \u003d \"Nice! I\u0027ve marked this task as done:\" + \"\\n\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            string +\u003d tasks.get(index).toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringDelete(String line, Path path) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int index \u003d findIndex(line, tasks.size());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            assert index \u003e -1 : \"An exception should have been caught before this\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String string \u003d \"Noted. I\u0027ve removed this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            string +\u003d tasks.get(index).toString() + \"\\n\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            string +\u003d \"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.delete(index);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringFind(String[] words, String line, Path path) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String keyword \u003d line.substring(5);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList matches \u003d findMatches(tasks, keyword);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String string \u003d \"Here are the matching tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : matches.getList()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (counter \u003d\u003d tasks.size()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                string +\u003d counter + \".\" + task.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                string +\u003d counter + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (counter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return \"There are no matching tasks in your list :(\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringClassify(String line, Path path) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task task \u003d classifyTasks(line);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String string \u003d \"Got it. I\u0027ve added this task:\" + \"\\n\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            string +\u003d \"  \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            string +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringUpdate(String[] words, String line, Path path) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int index \u003d findIndex(line, tasks.size());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task current \u003d tasks.get(index);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String newline \u003d buildString(words);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task updated \u003d classifyTasks(newline);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.update(index, updated);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return current + \"\\n\" + \" updated to \" + \"\\n\" + updated;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringUpdateTime(String[] words, String line, Path path) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int index \u003d findIndex(line, tasks.size());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task current \u003d tasks.get(index);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String newline \u003d buildString(words);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task updated \u003d updateTime(current, newline);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.update(index, updated);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return current + \"\\n\" + \" updated to \\n\" + updated;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return  e.getMessage();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String giveStringUpdateDesc(String[] words, String line, Path path) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int index \u003d findIndex(line, tasks.size());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task current \u003d tasks.get(index);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String newline \u003d buildString(words);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Task updated \u003d updateDesc(current, newline);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.update(index, updated);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Storage.updateFile(tasks, path);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return current + \"\\n\" + \" updated to \\n\" + updated;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String buildString(String[] words) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String newline \u003d \"\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (int i \u003d 2; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (i \u003d\u003d words.length - 1) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                newline +\u003d words[i];"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                newline +\u003d words[i] + \" \";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return newline;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Task updateTime(Task task, String line) throws DukeException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            throw new DukeException(\"OOPS! Todo has no time parameter to update!\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new Event(task.desc, line);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new Deadline(task.desc, line);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            throw new DukeException(\"OOPS! That\u0027s an invalid task! Something might have went wrong!\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Task updateDesc(Task task, String line) throws DukeException {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new ToDo(line);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new Event(line, ((Event) task).at);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new Deadline(line, ((Deadline) task).by);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            throw new DukeException(\"OOPS! That\u0027s an invalid task! Something might have went wrong!\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Returns the index of task to be deleted/completed if possible."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param str Input line from user."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param numTask Total number of tasks."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return Index of task in TaskList."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws DukeException If input is invalid or out of bounds."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static int findIndex(String str, int numTask) throws DukeException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assert numTask \u003e -1 : \"completeDelete function was passed with negative numTask value\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String[] words \u003d str.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int len \u003d words.length;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (len \u003e 1) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String num \u003d words[1];"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            boolean result \u003d num.matches(\".*\\\\d.*\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (result) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                int index \u003d Integer.parseInt(num) - 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (index \u003e\u003d numTask || index \u003c 0) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Out of bounds of the list of tasks.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                assert index \u003e -1 \u0026\u0026 index \u003c numTask : \"An exception should have been thrown.\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        throw new DukeException(\"OOPS!!! Invalid task provided.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Reads the data in file."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param file File to be read from."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return TaskList containing all the tasks in the file."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static TaskList reader(File file) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                String splitOn \u003d \"\\\\s*@\\\\s*\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                String[] words \u003d line.split(splitOn);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                int done \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                processData(words, done, tasks);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(\"OOPS!! Something went wrong :(\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Processes the data in the file based on its syntax and adds tasks to TaskList."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param words Array containing words in a single line."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param done Int that represents whether the task is done."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList where tasks are to be added to."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static void processData(String[] words, int done, TaskList tasks) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (words.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            ToDo toDo \u003d new ToDo(words[2]);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                toDo.setDone();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            tasks.add(toDo);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (words[0].equals(\"[E]\")) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                Event event \u003d new Event(words[2], words[3]);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    event.setDone();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                Deadline deadline \u003d new Deadline(words[2], words[3]);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    deadline.setDone();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Finds matching tasks in TaskList based on keywords."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing all current tasks."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param keyword Keyword."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return TaskLst containing only matching tasks."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static TaskList findMatches(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList matches \u003d new TaskList();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String desc \u003d task.desc;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (desc.contains(keyword)) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                matches.add(task);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Returns the task of correct type based on input."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param str Input by user."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return Task."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws DukeException For any invalid inputs."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static Task classifyTasks(String str) throws DukeException {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String[] words \u003d str.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int len \u003d words.length;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assert len \u003e -1 : \"Something went wrong with the Parser.classifyTasks() function\";"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                return giveTodo(words, len);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                return giveDeadline(words, len);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                return giveEvent(words, len);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Creates a ToDo based on user input."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param words Array containing words in input of user."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param len Number of current tasks."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return ToDo."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws DukeException For any invalid input."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static ToDo giveTodo(String[] words, int len) throws DukeException {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String desc \u003d \"\";"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (i \u003d\u003d len - 1) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    desc +\u003d words[i];"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                desc +\u003d words[i] + \" \";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new ToDo(desc);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Creates a Deadline based on user input."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param words Array containing words in input of user."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param len Number of current tasks."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return Deadline."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws DukeException For any invalid input."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static Deadline giveDeadline(String[] words, int len) throws DukeException {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String desc \u003d \"\";"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (words[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    count \u003d i + 1;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    desc \u003d desc.substring(0, desc.length() - 1);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                desc +\u003d words[i] + \" \";"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (count \u003d\u003d 0 || count \u003d\u003d len) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                throw new DukeException(\"OOPS!!! The date/time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            for (int j \u003d count; j \u003c len; j++) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (j \u003d\u003d len - 1) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    time +\u003d words[j];"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                time +\u003d words[j] + \" \";"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new Deadline(desc, time);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Creates an Event based on user input."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param words Array containing words in input of user."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param len Number of current tasks."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return Event."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @throws DukeException For any invalid input."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static Event giveEvent(String[] words, int len) throws DukeException {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String desc \u003d \"\";"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (words[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    count \u003d i + 1;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    desc \u003d desc.substring(0, desc.length() - 1);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                desc +\u003d words[i] + \" \";"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            if (count \u003d\u003d 0 || count \u003d\u003d len) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                throw new DukeException(\"OOPS!!! The date/time of a event cannot be empty.\");"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            for (int j \u003d count; j \u003c len; j++) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (j \u003d\u003d len - 1) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    time +\u003d words[j];"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                time +\u003d \" \" + words[j];"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return new Event(desc, time);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 527
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Check if file exists, if it does then read it, else create a file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return TaskList containing any tasks from file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public TaskList readFile() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            return Parser.reader(new File(path.toString()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            new File(path.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Overwrites and updates the file at the path for changes to the tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing all tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param path Path where file is located."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public static void updateFile(TaskList tasks, Path path) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            for (Task t : tasks.getList()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                int done \u003d t.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                if (t instanceof Event) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    fw.write(\"[E]@\" + done + \"@\" + t.desc + \"@\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            ((Event) t).at + System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    fw.write(\"[D]@\" + done + \"@\" + t.desc + \"@\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            ((Deadline) t).by + System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                    fw.write(\"[T]@\" + done + \"@\" + t.desc +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                            System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            assert Files.exists(path) : \"Something went wrong with the fileUpdate function!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(\"OOPS!! Something went wrong :(\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 59
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialises a Task that is by default not done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc Description of Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Produces the check or cross mark depending on isDone."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return String that contains either check or cross mark."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Sets isDone to true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.desc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 36
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialises a TaskList with an empty ArrayList\u003cTask\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Returns task at the given index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index Index of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return Task at given index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Returns number of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @return Int representing size of ArrayList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Adds task to TaskList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param t Task to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list.add(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Removes task at selected index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index Index of task in ArrayList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void update(int index, Task updated) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        boolean isDone \u003d this.list.get(index).isDone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list.remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        updated.isDone \u003d isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        this.list.add(updated);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 61
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Initialises a Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param desc Description of Todo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public ToDo(String desc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 17
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Displays welcome message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Jia Le :)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"How may I be of assistance to you?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"list\" command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing pre-existing tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void displayList(TaskList tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(count + \".\" + task.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"done\" command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing pre-existing tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index Index of task in list that is completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void displayDone(TaskList tasks, int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(tasks.get(index).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"delete\" command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing pre-existing tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param index Index of task in list that is removed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void displayRemove(TaskList tasks, int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(tasks.get(index).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Now you have \" + (tasks.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows system output when user inputs \"add\" command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param size New size of the TaskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void displayAdd(Task task, int size) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Shows the matching tasks for the keyword provided."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * @param tasks TaskList containing the matching tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void displayMatches(TaskList tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            System.out.println(counter + \".\" + task.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     * Displays bye message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chiabs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void displayBye() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        System.out.print(\"Bye! Hope to see you again ;)\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 88
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chiabs": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chiabs": 19
    }
  },
  {
    "path": "src/test/Java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chiabs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chiabs"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void addTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        ToDo item \u003d new ToDo(\"hi\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        tasks.add(item);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void getTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        ToDo item \u003d new ToDo(\"hi\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        tasks.add(item);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assertEquals(item.toString(), tasks.get(0).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    public void taskClassifyTest() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        Event event \u003d new Event(\"stay behind\", \"today\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        String desc \u003d \"event stay behind /at today\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chiabs"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chiabs"
        },
        "content": "                Parser.classifyTasks(desc).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chiabs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chiabs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chiabs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chiabs": 33
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chiabs"
        },
        "content": "javac  -cp \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\" -Xlint:none -d ..\\bin \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Duke.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Task.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\ToDo.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Event.java\" \"C:\\Users\\Jia Le\\Desktop\\CS2103W2\\src\\main\\java\\Deadline.java\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chiabs"
        },
        "content": "\"C:\\Program Files\\Java\\jdk-13.0.1\\bin\\java\" -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chiabs": 2,
      "-": 16
    }
  }
]
