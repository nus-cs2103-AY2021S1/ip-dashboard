[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 2,
      "-": 24
    }
  },
  {
    "path": "data/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 1 | walk the dog"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 1 | go jogging"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 0 | jumping jacks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 1 | dinner party | Nov 12 2020, 15:30:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | individual project | Aug 25 2020, 16:00:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 0 | birthday | Aug 1 2020, 14:00:00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 0 | walk in the park | Nov 15 2020, 15:30:00"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 1 | readings | Aug 25 2020, 18:00:00"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 9
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Personal Assistant that keeps track of a user\u0027s list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static final Path storageFilePath \u003d Paths.get(\".\", \"data\", \"test.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a Duke object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Duke consists of a \u003ccode\u003eUi\u003c/code\u003e, \u003ccode\u003eTaskList\u003c/code\u003e, and \u003ccode\u003eStorage\u003c/code\u003e which"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * is responsible for user interactions, keeping track of user\u0027s tasks, and writing tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * to the user\u0027s local storage respectively."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.storage \u003d new Storage(Duke.storageFilePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.taskList \u003d new TaskList(this.storage.getAllTasks());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Begins running Duke, and waits for user input to interact with Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param args user input from the command line."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.ui.showWelcome();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                String userInput \u003d this.ui.readCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                Command c \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                c.execute(this.taskList, this.ui, this.storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 62
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Exception that Duke throws when there are errors in the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Exception thrown to user when Duke encounters errors."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param errorMessage the details of the error thrown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "       super(\"☹ OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 16
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A Parser to take in user input and determines the Command given to Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Parse user input and returns an enum of the command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param fullCommand is the user input from the terminal."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return an enum representing the command from the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String[] splitString \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Commands c;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            c \u003d Commands.valueOf(splitString[0].toUpperCase());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            c \u003d Commands.UNKNOWN;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        switch (c) { // Determine output from user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new AddCommand(fullCommand, c);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 45
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Storage links the TaskList from Duke to the user\u0027s local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Path pathToStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private List\u003cString\u003e allTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a Storage object, which will be used when Duke creates, updates, or deletes Tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param pathToStorage the path to the user\u0027s storage where the Tasks will be stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Storage(Path pathToStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.pathToStorage \u003d pathToStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            // Create directory if needed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Path parentPath \u003d pathToStorage.getParent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Files.createDirectories(parentPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (!Files.exists(pathToStorage)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                Files.createFile(pathToStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            // Get stored info if any"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.allTasks\u003d Files.readAllLines(pathToStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Can\u0027t read file \" + e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Converts string from task storage file to a task list for Duke to use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a list of Tasks readable by duke.Duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // Convert string to Tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        for (String taskString : this.allTasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            char taskType \u003d taskString.charAt(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskDetails \u003d taskString.substring(taskString.lastIndexOf(\"|\") + 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            boolean isDone \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (taskString.charAt(4) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                taskList.add(new ToDo(taskDetails, isDone));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                String eventDescription \u003d taskString.substring(8, taskString.lastIndexOf(\"|\") - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                taskList.add(new Event(eventDescription, isDone, formatTaskDateTime(taskDetails)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                String deadlineDescription \u003d taskString.substring(8, taskString.lastIndexOf(\"|\") - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                taskList.add(new Deadline(deadlineDescription, isDone, formatTaskDateTime(taskDetails)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                System.out.println(\"Unable to determine type of task\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private String formatTaskDateTime(String dateTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String[] date_times \u003d dateTime.split(\",\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String date \u003d date_times[0]; // MMM DD YYYY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String time \u003d date_times[1]; // HH:MM:SS"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalDate newDate \u003d LocalDate.parse(date, format);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int monthInt \u003d newDate.getMonthValue();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String year \u003d String.valueOf(newDate.getYear());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int dayInt \u003d newDate.getDayOfMonth();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String month \u003d monthInt \u003e\u003d 10"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ? String.valueOf(monthInt)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                : \"0\".concat(String.valueOf(monthInt));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String day \u003d dayInt \u003e\u003d 10"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                ? String.valueOf(dayInt)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                : \"0\".concat(String.valueOf(dayInt));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String hourAndMinutes \u003d time.substring(0, time.lastIndexOf(\":\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        // Return YYYY/MM/DD HH:MM"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String ans \u003d year + \"/\" + month + \"/\" + day + hourAndMinutes;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return ans;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Saves all the Tasks from the TaskList into the user\u0027s local storage."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void writeToStorage() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            File storageFile \u003d new File(String.valueOf(pathToStorage));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            FileWriter fw \u003d new FileWriter(storageFile);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            for (String task : this.allTasks) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                fw.write(task + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a new Task to the local storage."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param task the Task to be added."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTask(Task task) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.allTasks.add(task.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Updates an existing task in the local storage."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param task the task to be updated."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskIndex the index of the Task in the List of all the Tasks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void updateTask(Task task, int taskIndex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.allTasks.set(taskIndex, task.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Removes an existing from the local storage."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskIndex the index of the task in the List of all the Tasks to be deleted."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.allTasks.remove(taskIndex);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        writeToStorage();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 160
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * User interaction class that is responsible for taking in user input as well as returning an output from Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a new Ui object, which will be used by Duke to interact with the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Awaits user input from the command line."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a method to get user input from the command line."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints a welcome message that is shown to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        System.out.println(\"Hello from duke.Duke\\nHow may I be of service \" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \"to you this fine day sire?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints a line divider for better formatting of Duke\u0027s responses."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        System.out.println(\"_____________________________________\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints a error message to the user when Duke is unable to load Tasks from the user\u0027s local storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param errorMessage the message describing the details of the error."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void showLoadingError(String errorMessage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        System.out.println(\"I am unable to load the saved tasks \" + errorMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints an error message to the user when Duke encounters an error."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param errorMessage the message describing the details of the error."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints a message to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param message the message that Duke is sending to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 69
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user adds a new task, which can be a \u003ccode\u003eToDo\u003c/code\u003e, \u003ccode\u003eEvent\u003c/code\u003e, or \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** The specific type of task to be added */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final Commands c;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create an add command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param userInput command give from user via command line."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param c type of command which is an \u003ccode\u003eENUM\u003c/code\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public AddCommand(String userInput, Commands c) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.c \u003d c;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Determines whether a \u003cCode\u003eToDo\u003c/Code\u003e, \u003cCode\u003eEvent\u003c/Code\u003e, or \u003cCode\u003eDeadline\u003c/Code\u003e task will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * This method parses the user input taken in, and determins which type of task will be added to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The database depending on the command type given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui a Ui object for interaction with users."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when the type of task being added is unknown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        switch (c) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            addToDoTask(this.userInput, taskList, ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            addEventTask(this.userInput, taskList, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            addDeadlineTask(this.userInput, taskList, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"I don\u0027t recognize the type of task you are trying to add\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private static boolean checkForEmptyDescription(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return userInput.length() \u003c\u003d 4;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private void addToDoTask(String userInput ,TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (checkForEmptyDescription(userInput)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String taskDescription \u003d userInput.substring(5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ToDo newToDoItem \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        addItem(newToDoItem, taskList, ui, storage); // Add to taskList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private void addEventTask(String userInput ,TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String taskDescription \u003d userInput.substring(6, userInput.indexOf(\"/at\") - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String eventDateTime \u003d userInput.substring(userInput.indexOf(\"/at\") + 4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Event newEventItem  \u003d new Event(taskDescription, eventDateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        addItem(newEventItem, taskList, ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private void addDeadlineTask(String userInput ,TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String taskDescription \u003d userInput.substring(9, userInput.indexOf(\"/by\") - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String deadlineBy \u003d userInput.substring(userInput.indexOf(\"/by\") + 4);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Deadline newDeadlineItem \u003d new Deadline(taskDescription, deadlineBy);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        addItem(newDeadlineItem, taskList, ui, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a newly added task to Duke\u0027s \u003ccode\u003eTaskList\u003c/code\u003e, then stores the newly added task to Duke\u0027s"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * \u003ccode\u003eStorage\u003c/code\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param newTask the new task that will be added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui a Ui object for interaction with users."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void addItem(Task newTask, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        storage.createTask(newTask); // Add to storage database"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        int listSize \u003d taskList.size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ui.print(\"Got it. I\u0027ve added this task:\\n   \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + newTask.toString() + \"\\nNow you have \" + (listSize)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + (listSize \u003e 1 ? \" tasks\" : \" task\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                + \" in the list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 108
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user exits Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints out goodbye message to console before shutting down Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui a Ui object for interaction with users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "       ui.print(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Determine whether or not Duke should shut down after running this command, only true for ByeCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a boolean specifying whether or not Duke will shut down after the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * A command based on the user input that will be sent to Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Abstract method to be implemented by Command subclasses, execution will vary depending on the type of Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui a Ui object for interaction with users."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when the type of task being added is unknown."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Whether or not Duke program should terminate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return true only when the command is bye."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 31
    }
  },
  {
    "path": "src/main/java/duke/command/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Constants describing all the possible types of Commands that a user can give to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     BYE, LIST, TODO, EVENT, DEADLINE, DONE, DELETE, FIND, UNKNOWN"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 8
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user deletes a task from the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param userInput command give from user via command line."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Delete a task from Duke\u0027s TaskList and update Duke\u0027s storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui a Ui object for interaction with users."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when the task to be deleted does not exist in Duke\u0027s TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskIndex \u003d userInput.substring(7);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            int index \u003d Integer.valueOf(taskIndex) - 1; // taskIndex started from 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Task deletedTask \u003d taskList.delete(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            int listSize \u003d taskList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            storage.deleteTask(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            ui.print(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    + deletedTask.toString() + \"\\nNow you have \" + (listSize)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    + (listSize \u003e 1 ? \" tasks\" : \" task\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    + \" in the list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number for me delete.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 50
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command when user marks a task as completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param userInput command given from user via command line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Mark a task as completed, updates Duke\u0027s TaskList as well as Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui a Ui object for interaction with users."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            String taskIndex \u003d userInput.substring(5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            int index \u003d Integer.valueOf(taskIndex) - 1; // taskIndex started from 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Task completedTask \u003d taskList.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            completedTask.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            storage.updateTask(completedTask,index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            ui.print(\"Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                    completedTask.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number for me to mark as done.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command given to Duke to search for Tasks within Duke\u0027s TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Creates a Find Command to search the TaskList for the Task with the specified key word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param fullCommand \u003ccode\u003eString\u003c/code\u003e of the entire command from the user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.userInput \u003d fullCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Searches for Tasks that has the keyword inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List of all the Tasks that Duke has."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui the object responsible for user interactions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database of Tasks that is saved to the user\u0027s local storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        if (userInput.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please enter a keyword to find your task\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String keyword \u003d this.userInput.substring(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        taskList.showSpecifiedItems(keyword);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Command for Duke to enumerate the entire list of tasks and show it to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Shows all the tasks currently in Duke\u0027s TaskList by printing it out to the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param taskList the List containing all the tasks that Duke has stored."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param ui a Ui object for interaction with users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param storage the database for Duke to save all tasks to the user\u0027s local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ui.print(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        taskList.showAllItems();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 23
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Type of Task which includes a end date and end time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Deadline date object of task */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalDate byDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Deadline time object of task */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalTime byTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a Deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description describes the details of the Deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param by the end date and time of the Deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when date and time inputs are invalid, or when no date and time is inputted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byDate \u003d formatDate(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byTime \u003d formatTime(by);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor used when Tasks are being read from the local Storage of the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description describes the details of the Deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone determines whether task has been completed or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param by the end date and time of the Deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when date and time inputs are invalid, or when no date and time is inputted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byDate \u003d formatDate(by);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.byTime \u003d formatTime(by);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalTime formatTime(String by) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String timePortion \u003d by.substring(by.indexOf(\" \") + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(timePortion);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalDate formatDate(String by) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String datePortion \u003d by.substring(0, by.indexOf(\" \")).replaceAll(\"/\", \"-\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(datePortion);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints to user the description, and formatted date and time of the Deadline Task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e representing the formatted Deadline Task details."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"D | \" + super.toString() + \" | \" + this.byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \", \" + this.byTime.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 78
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Type of Task which involves a starting date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Starting date object of the Event */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalDate atDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Starting time object of the Event */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected LocalTime atTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a new Event object with the description and starting date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description details of the Event Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param at starting Date and Time of the Event Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when there is no date and time inputted for the Event,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *  or if the date and time are in the wrong format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Event (String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atDate \u003d formatDate(at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atTime \u003d formatTime(at);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor used when Tasks are being added from the user\u0027s local storage to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description details of the Event Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone determines if the Event has been completed or not."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param at starting Date and Time of the Event Task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @throws DukeException when there is no date and time inputted for the Event,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *  or if the date and time are in the wrong format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Event(String description, boolean isDone, String at) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atDate \u003d formatDate(at);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            this.atTime \u003d formatTime(at);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: YYYY/MM/DD HH:MM\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalTime formatTime(String at) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String timePortion \u003d at.substring(at.indexOf(\" \") + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(timePortion);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private LocalDate formatDate(String at) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        String datePortion \u003d at.substring(0, at.indexOf(\" \")).replaceAll(\"/\", \"-\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(datePortion);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints to user the description, and formatted date and time of the Event Task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e representing the formatted Event Task details."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"E | \" + super.toString() + \" | \" + this.atDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                \", \" + this.atTime.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 79
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Parent Task class with multiple sub-classes determining the specific type of Task that the user is adding"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * to Duke\u0027s TaskList."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Details of the Task */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /** Whether or not the Task is completed */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a new Task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description the details of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to use when reading data from the hard disk upon Duke start up."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description is the details of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone determines whether the task is marked as completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Mark task as completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The description of the Task, as well as whether or not the Task is completed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e representation of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "       return this.getStatusIcon() + \" | \" + this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 55
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * The \u003ccode\u003eArrayList\u003c/code\u003e containing all the Tasks that Duke is storing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a new TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor, used when there are existing tasks being loaded from the user\u0027s local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param tasks is the List of Tasks that is created from loading the Storage\u0027s tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Adds a new task to the TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param newTask the task to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Removes the specified task from the TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param index the index of the Task to be deleted from the TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return the Task that has been deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.taskList.remove(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Enumerates all the Tasks currently in the TaskList and prints it out to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void showAllItems() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e currList \u003d this.taskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        currList.forEach(item -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                System.out.println((currList.indexOf(item) + 1) + \".\" + item));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * The number of Tasks in the TaskList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return an \u003ccode\u003eInteger\u003c/code\u003e representing the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Retrieves a Task from the TaskList at a specified index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param index the Task in the TaskList to be retrieved."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return the Task that is retrieved."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints out all the Tasks in the TaskList that contains the keyword specified by the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param keyword the key to filter the Tasks in the TaskList by."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void showSpecifiedItems(String keyword) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        TaskList filteredTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ArrayList\u003cTask\u003e currList \u003d this.taskList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        currList.forEach(item -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            if (item.description.contains(keyword)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "                filteredTasks.add(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        filteredTasks.showAllItems();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 92
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " * Type of Task that is to be completed by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Constructor to create a \u003ccode\u003eToDo\u003c/code\u003e Task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description the details of the ToDo Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Overloaded constructor used when Tasks are being loaded from the user\u0027s local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param description the details of the ToDo Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @param isDone whether the Task is completed or not."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * Prints out the details of the ToDo Task, as well as whether or not it is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e representation of the ToDo Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        return \"T | \" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 36
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_unkownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"asd\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"I\u0027m sorry, but I don\u0027t know what that means :-(\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_byeCommand_byeCommandObjectCreated() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_listCommand_listCommandObjectCreated() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"list\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void parseCommand_unspecifiedDoneCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Command c \u003d Parser.parse(\"done\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please enter a valid task number for me to mark as done.\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 50
    }
  },
  {
    "path": "src/test/java/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void isExitTrue_byeCommandCreated_true() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        Command test \u003d new ByeCommand();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertTrue(test.isExit());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 13
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createDeadline_withoutDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Deadline d \u003d new Deadline(\"submission\", \"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please input date and time in correct format\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createDeadline_withoutInvalidDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Deadline d \u003d new Deadline(\"submission\", \"2020/14/54 2810\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(e.getMessage().contains(\"Please input date and time in correct format\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createDeadline_withDateTime_deadlineCreated() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            Deadline d \u003d new Deadline(\"submission\", \"2020/11/14 15:30\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            assertTrue(d instanceof Deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "            System.out.println(\"Test failed\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 38
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTodo_withDescription_stringReturned() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ToDo test \u003d new ToDo(\"Walk Dog\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(\"T | 0 | Walk Dog\",test.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    public void createTodo_withOutDescription_stringReturned() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        ToDo test \u003d new ToDo(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "        assertEquals(\"T | 0 | \",test.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 18
    }
  },
  {
    "path": "text-ui-test/data/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | return book | May 4 2020, 15:30:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "T | 0 | borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "D | 0 | individual project | Sep 20 2020, 12:00:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "E | 0 | project meeting | Oct 11 2020, 14:15:00"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "deadline return book /by 2020/05/04 15:30"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "event talkshow /at 2020/08/15 18:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "deadline individual project /by 2020/09/20 12:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "event project meeting /at 2020/10/11 14:15"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "event project task /at 1042/20/14 00:124"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "done 929"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "delete"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hansebastian"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hansebastian": 2,
      "-": 19
    }
  }
]
