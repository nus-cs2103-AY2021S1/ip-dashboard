[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "# duke.duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "GilbertTan19": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "GilbertTan19": 2
    }
  },
  {
    "path": "src/main/java/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DeadlineException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.WrongFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents a command to add deadline to the tasklist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public AddDeadlineCommand(String[] command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds Duke.Duke.Deadline to the Duke.TaskList and save it to storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException if they use the wrong format or no description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            String[] str \u003d commands[1].split(\"/by \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            LocalDateTime date \u003d LocalDateTime.parse(str[1], dateFormatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Task temp \u003d new Deadline(str[0], date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks.addTask(temp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DeadlineException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new WrongFormatException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates not to exit the loop."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof AddDeadlineCommand) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            AddDeadlineCommand cur \u003d (AddDeadlineCommand) o;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 80
    }
  },
  {
    "path": "src/main/java/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.EventException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.WrongFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents a command to add event to Duke.TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public AddEventCommand(String[] command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds Duke.Duke.Event to the Duke.TaskList and save it to storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException if they use the wrong format or no description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            String[] str \u003d commands[1].split(\"/at \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            LocalDateTime date \u003d LocalDateTime.parse(str[1], dateFormatter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Task temp \u003d new Event(str[0], date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks.addTask(temp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new EventException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new WrongFormatException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates not to exit the loop."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof AddEventCommand) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            AddEventCommand cur \u003d (AddEventCommand) o;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 80
    }
  },
  {
    "path": "src/main/java/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.TaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents a command to add a todo to the tasklist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public AddTodoCommand(String[] command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Adds Todo to the Duke.TaskList and save it to storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException if there are no description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Task temp \u003d new Task(commands[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks.addTask(temp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new TaskException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates to not exit the loop."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof AddTodoCommand) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            AddTodoCommand cur \u003d (AddTodoCommand) o;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 69
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents an abstract command which is inherited and is used in the Main class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    protected String[] commands;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Command(String[] command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.commands \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Executes the command based on the polymorphism of each Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException the parents of all exception to be thrown."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates to exit the loop or not."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return boolean true or false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 33
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DeleteOutOfBoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DeleteUnknownException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents a command to delete a task from the tasklist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public DeleteCommand(String[] command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Delete a Duke.Task from the Duke.TaskList and save it to storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException if there are no value or it is not a number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Integer toBeDeleted \u003d Integer.valueOf(commands[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks.delete(toBeDeleted);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DeleteOutOfBoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DeleteUnknownException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DeleteUnknownException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates to not exit the loop."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            DeleteCommand cur \u003d (DeleteCommand) o;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 74
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DoneOutOfBoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DoneUnknownException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represent a command to mark a task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public DoneCommand(String[] command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Marks the task as done and save it to the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException if there are no value or it is not integer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Integer toBeChanged \u003d Integer.valueOf(commands[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks.changeIsDone(toBeChanged);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                storage.saveFile(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DoneOutOfBoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DoneUnknownException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DoneUnknownException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates to not exit the loop."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof DoneCommand) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            DoneCommand cur \u003d (DoneCommand) o;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 74
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents a command to exit the loop."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public ExitCommand(String[] command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Exit the program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ui.goodbyeMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates to exit the loop."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof ExitCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            ExitCommand cur \u003d (ExitCommand) o;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 55
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.FindException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public FindCommand(String[] command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            String toBeSearched \u003d commands[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks.find(toBeSearched);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new FindException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof DoneCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            FindCommand cur \u003d (FindCommand) o;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 48
    }
  },
  {
    "path": "src/main/java/command/PrintListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents a command to print the list of all task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class PrintListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public PrintListCommand(String[] command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Print the list of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        tasks.printList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Indicates not to exit the loop."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof PrintListCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            PrintListCommand cur \u003d (PrintListCommand) o;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 55
    }
  },
  {
    "path": "src/main/java/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents all command that is not known in the Command list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public UnknownCommand(String[] command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * Print that the command is not known."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param tasks the list of task saved."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param ui deals with interaction with the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DukeException will always happen as the command is not known."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        throw new CommandException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof UnknownCommand) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            UnknownCommand cur \u003d (UnknownCommand) o;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (Arrays.equals(this.commands, cur.commands)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 52
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents a deadline which extends from the task class which consist of description and the date and time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create a deadline object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param description description of the deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param deadline the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create a deadline object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param description description of the deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param isDone done or not yet."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param deadline the deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String datePattern \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(datePattern);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String date \u003d this.deadline.format(dateFormatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return \"[D]\" + \"[\" + this.getStatusIcon() + \"] \" + this.description + \"(by:\" + date + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to help in saving it to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return String which is the template to be saved in the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String result \u003d \"D # \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            result +\u003d \"1 # \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            result +\u003d \"0 # \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        result +\u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String datePattern \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(datePattern);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        result +\u003d \" # \" + deadline.format(dateFormatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (o instanceof Deadline) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Deadline cur \u003d (Deadline) o;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (cur.isDone \u003d\u003d this.isDone \u0026\u0026 cur.description.equals(this.description)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 76
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * A chat bot to save the todo, deadline and event task in a list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create Duke object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param filePath the saved location of the database."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Duke (String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * The main function to be run."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param args the argument given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function which takes user input and never stops unless bye is called."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.ui.hello();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                ui.showSpace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "GilbertTan19": 61
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * An event which extends from the task and consist of description and the date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param description the description of event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param time the time of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Event(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create event object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param description the description of event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param isDone mark if it is done or not."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param time the time of event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Event(String description, boolean isDone, LocalDateTime time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String datePattern \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(datePattern);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String date \u003d this.time.format(dateFormatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return \"[E]\" + \"[\" + this.getStatusIcon() + \"] \" + this.description + \"(at:\" + date + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to help in saving it to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return String which is the template for all event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String result \u003d \"D # \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            result +\u003d \"1 # \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            result +\u003d \"0 # \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        result +\u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String datePattern \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(datePattern);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        result +\u003d \" # \" + time.format(dateFormatter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 60
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.AddEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.AddTodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.PrintListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.UnknownCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * A class to deals with making sense of the input command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to parse the input from the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param fullCommand The input of the user which is saved in String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return Command which is grouped into different command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public static Command parse (String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] parsed \u003d fullCommand.split(\" \" , 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (parsed[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new PrintListCommand(parsed);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (parsed[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new DoneCommand(parsed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (parsed[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new DeleteCommand(parsed);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (parsed[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new AddEventCommand(parsed);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (parsed[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new AddDeadlineCommand(parsed);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (parsed[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new AddTodoCommand(parsed);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (parsed[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new ExitCommand(parsed);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else if (parsed[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new FindCommand(parsed);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return new UnknownCommand(parsed);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 51
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * An object to save all the task in the file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Storage (String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to load all the task saved in the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return a list of the task which is saved in the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public List\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String directory \u003d this.filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] splitDirectory \u003d directory.split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        File file \u003d new File(splitDirectory[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        file.mkdir(); // create the directory if it not existed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        LinkedList\u003cTask\u003e result \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                String temp \u003d sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                String[] res \u003d temp.split(\" # \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                if (res[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    boolean isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    if (res[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                        isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    Task cur \u003d new Task(res[2], isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    result.add(cur);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                } else if (res[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    boolean isDone \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    if (res[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                        isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    String datePattern \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(datePattern);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    LocalDateTime date \u003d LocalDateTime.parse(res[3], dateFormatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    Task cur \u003d new Deadline(res[2], isDone, date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    result.add(cur);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    boolean isDone \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    if (res[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                        isDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    String datePattern \u003d \"dd/MM/yyyy HH:mm\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(datePattern);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    LocalDateTime date \u003d LocalDateTime.parse(res[3], dateFormatter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    Task cur \u003d new Event(res[2], isDone, date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                    result.add(cur);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to save all the list of task to the filepath."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param task the list of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void saveFile(TaskList task) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        List\u003cTask\u003e currentList \u003d task.getTaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        int len \u003d currentList.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Task current \u003d currentList.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            fw.write(current.writeToFile());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 93
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the task to be saved in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param description the description of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A constructor to create task object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param description the description of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param isDone mark if it is done or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return \"[T]\" + \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to help saving to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return String Which is the template to be saved in the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String writeToFile() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String result \u003d \"T # \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            result +\u003d \"1 # \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            result +\u003d \"0 # \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        result +\u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void changeIsDone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.isDone \u003d !this.isDone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 56
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DeleteOutOfBoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DoneOutOfBoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * An object which consist of list to save all the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.taskList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to print out all the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            System.out.println((i + 1) + \". \" + this.taskList.get(i));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to mark a task as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param index which is the task to be marked as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DoneOutOfBoundException if there are no such task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void changeIsDone(int index) throws DoneOutOfBoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            this.taskList.get(index - 1).changeIsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            System.out.println(\"This task has been mark as done.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            System.out.println(this.taskList.get(index - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DoneOutOfBoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to delete a task from the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param index the index of the task to be deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @throws DeleteOutOfBoundException if there are no such task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void delete(int index) throws DeleteOutOfBoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Task cur \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            System.out.println(\"This task has been deleted.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            System.out.println(cur);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            throw new DeleteOutOfBoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to add a task to the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param task task to be added to the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        System.out.println(\"Added new task \" + task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to find word in the task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @param search the key to search."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void find(String search) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        int len \u003d this.taskList.size();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        for (int i \u003d 0; i \u003c len; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            if (this.taskList.get(i).toString().contains(search)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                System.out.println(index + \". \" + this.taskList.get(i).toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to return the number of all task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return int which is the size of the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        this.taskList.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 103
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * A class to deal with all the interaction with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to print welcome message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to print goodbye message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void goodbyeMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        System.out.println(\"GoodBye, Hope to see you back soon.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * A function to read command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     * @return String which is the command read."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        System.out.println(\"*****************************************************************\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void showSpace() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        System.out.print(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 49
    }
  },
  {
    "path": "src/main/java/exception/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents an exception which is thrown if the command is not known."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class CommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! I don\u0027t know what that commands mean.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception that the description of a deadline is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DeadlineException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! The description of a deadline cannot be empty.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/DeleteOutOfBoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception if there are no such task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DeleteOutOfBoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! There are no such task.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/DeleteUnknownException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception that the value given is not integer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DeleteUnknownException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"Please provide the number of the task to be deleted\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Acts as a parent to exception thrown by DoneCommand."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DoneException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return \"Done Exception\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/DoneOutOfBoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception thrown if there are no such task in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DoneOutOfBoundException extends DoneException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! There are no such task.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/DoneUnknownException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception that the value given is not integer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DoneUnknownException extends DoneException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"Please provide the number of the task to be marked\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Acts as a parent to all exception in the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return \"Duke.Duke Exception\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 11
    }
  },
  {
    "path": "src/main/java/exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception thrown if there are no description in the event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! The description of a event cannot be empty.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class FindException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! The keyword of a find cannot be empty.\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 9
    }
  },
  {
    "path": "src/main/java/exception/TaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception thrown if there are no description of a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class TaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! The description of a todo cannot be empty.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/main/java/exception/WrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " * Represents the exception thrown if they use the wrong format in the time and date od deadline and event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class WrongFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String s \u003d \"OOPS!!! Please use the dd/MM/yyyy HHmm format.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 12
    }
  },
  {
    "path": "src/test/java/command/AddDeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"deadline\", \"\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddDeadlineCommand test \u003d new AddDeadlineCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a deadline cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"deadline\", \"return book /by invalide\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddDeadlineCommand test \u003d new AddDeadlineCommand(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! Please use the dd/MM/yyyy HHmm format.\\n\", e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 41
    }
  },
  {
    "path": "src/test/java/command/AddEventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddEventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"event\", \"\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddEventCommand test \u003d new AddEventCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a event cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"event\", \"return book /at invalide\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddEventCommand test \u003d new AddEventCommand(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! Please use the dd/MM/yyyy HHmm format.\\n\", e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 41
    }
  },
  {
    "path": "src/test/java/command/AddTodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class AddTodoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"todo\", \"100\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        AddTodoCommand test \u003d new AddTodoCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a todo cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 29
    }
  },
  {
    "path": "src/test/java/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_deleteOutOfBoundExceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"delete\", \"100\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DeleteCommand test \u003d new DeleteCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! There are no such task.\\n\", e.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_deleteUnknownExceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"delete\", \"asdf\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DeleteCommand test \u003d new DeleteCommand(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"Please provide the number of the task to be deleted\\n\", e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 43
    }
  },
  {
    "path": "src/test/java/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_doneOutOfBoundExceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"done\", \"100\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DoneCommand test \u003d new DoneCommand(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! There are no such task.\\n\", e.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_doneUnknownExceptionThrown() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"done\", \"asdf\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DoneCommand test \u003d new DoneCommand(command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"Please provide the number of the task to be marked\\n\", e.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 41
    }
  },
  {
    "path": "src/test/java/command/UnknownCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class UnknownCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testExecute_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"Unknown command\", \"100\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        UnknownCommand test \u003d new UnknownCommand(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            test.execute(list, ui, storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! I don\u0027t know what that commands mean.\\n\", e.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 26
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.AddEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.AddTodoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.PrintListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import command.UnknownCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserPrintListCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"list\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"list\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "                new PrintListCommand(command));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserDeadlineCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"deadline\", \"homework /by 29/08/2020 1800\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"deadline homework /by 29/08/2020 1800\"), new AddDeadlineCommand(command));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserEventCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"event\", \"homework /by 29/08/2020 1800\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"event homework /by 29/08/2020 1800\"), new AddEventCommand(command));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserTodoCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"todo\", \"homework /by 29/08/2020 1800\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"todo homework /by 29/08/2020 1800\"), new AddTodoCommand(command));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserDeleteCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"delete\", \"1\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"delete 1\"), new DeleteCommand(command));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserDoneCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"done\", \"1\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"done 1\"), new DoneCommand(command));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserExitCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"bye\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"bye\"), new ExitCommand(command));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void parserUnknownCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        String[] command \u003d {\"unknown\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(Parser.parse(\"unknown\"), new UnknownCommand(command));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 68
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testSize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        TaskList forTest \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"29/08/2020 1800\", dateFormatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Task(\"Test Junit\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Deadline(\"return book\", date));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Event(\"Study\", date));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(3, forTest.size());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testAdd() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        TaskList forTest \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"29/08/2020 1800\", dateFormatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Task(\"Test Junit\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Deadline(\"return book\", date));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Event(\"Study\", date));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Task(\"Random task\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        assertEquals(4, forTest.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testRemove() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        TaskList forTest \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"29/08/2020 1800\", dateFormatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Task(\"Test Junit\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Deadline(\"return book\", date));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Event(\"Study\", date));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            forTest.delete(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(2, forTest.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! There are no such task.\\n\", e.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    public void testRemoveOutOfBound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        TaskList forTest \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"29/08/2020 1800\", dateFormatter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Task(\"Test Junit\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Deadline(\"return book\", date));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        forTest.addTask(new Event(\"Study\", date));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            forTest.delete(100);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(2, forTest.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "            assertEquals(\"OOPS!!! There are no such task.\\n\", e.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 68
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "deadline return book /by 29/08/2020 1800"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "event study /at 29/08/2020 1800"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "GilbertTan19": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilbertTan19"
        },
        "content": "java -classpath ../bin duke.duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "GilbertTan19": 2
    }
  }
]
