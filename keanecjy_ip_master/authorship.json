[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003ch1 align\u003d\"center\"\u003eIncrediBot\u003c/h1\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003ca href\u003d\"https://github.com/keanecjy/ip/actions\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cimg src\u003d\"https://github.com/keanecjy/ip/workflows/Java%20CI/badge.svg\" alt\u003d\"CI status\"/\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/a\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"docs/Ui.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Welcome to IncrediBot, a task manager app which manages your todos, events and deadlines!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## About IncrediBot"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "This application was written for CS2103T Software Engineering as part of its Individual Project. In this project, we"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "are expected to learn more about SE principles and practices and apply them on a medium-sized Team Project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "In IncrediBot, three kinds of tasks can be created:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### 1. Todo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "The simplest task in the whole app! Simply input a description and this task will be added to the bot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### 2. Event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Events are used for scheduling purposes, allowing you to tag a specific time frame to a task. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Time frames used can be flexible as you want it too! e.g. event eat /at Tampines"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### 3. Deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Last but not least, we have deadlines, tasks with fixed due dates. Use it to track your all your assignment and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "work deadlines!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## To assist you with managing your tasks are:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Other Commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `list` - Displays the list of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `sort` - Sorts the tasks according to completion status and type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `done` - Completes a task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `delete` - Deletes a task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `find` - Finds all tasks which matches the query word"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Side features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Fully responsive UI which supports full-screen usage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Prompts displayed whenever you input a wrong command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Prevents addition of duplicate tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Accepts case-insensitive commands *e.g.* DeadLine"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Compatible with Windows, MacOS and Linux"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " ## Download"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " Download the JAR file [here!](https://github.com/keanecjy/ip/releases) Launch the app by simply clicking on it!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " ## Acknowledgements"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " ### External packages Used"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - [JUnit by JUnit Team](https://github.com/junit-team/junit5/) - For testing classes and methods in IncrediBot"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - [JavaFX by OpenJDK](https://github.com/openjdk/jfx) - For creating Graphical User Interface."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " ### Images Used"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - [User image](https://www.pngitem.com/middle/hbxJbTo_the-incredibles-2-mrs-incredible-png-by-metropolis/)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - [Incredibot image](https://www.pngitem.com/middle/xwTbRJ_incredibles-2-mr-incredible-png-clipart-png-download/)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - [Greeting image](https://www.pngitem.com/middle/hJJboRT_jackjack-incredibles-freetoedit-jack-jack-parr-the-incredibles/)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - [App icon](https://www.pngitem.com/middle/xwThJR_elastigirl-calls-danger-incredibles-incredibles-dash-hd-png/)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 66
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18,
      "-": 42
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "# User Guide for IncrediBot"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "*Keane Chan Jun Yu | A0205678W*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"Ui.png\" width\u003d\"100%\"/\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Welcome to IncrediBot, a task manager app which manages your todos, events and deadlines!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Features](#Features)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Todo](#1.-Todo)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Event](#2.-Event)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Deadline](#3.-Deadline)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Additional Features](#to-assist-you-with-managing-your-tasks-are)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Usage](#Usage)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Todo](#todo---adds-a-todo)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Event](#event---adds-an-event)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Deadline](#deadline---adds-a-deadline)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [List](#list---shows-all-tasks)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Sort](#sort---sorts-the-list-of-tasks)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Done](#done---marks-a-task-as-done)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Delete](#delete---deletes-a-task)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Find](#find---finds-matching-tasks-in-the-list)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Help](#help---displays-the-list-of-commands-available)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - [Bye](#bye---quits-the-program)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Acknowledgements](#acknowledgements)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "In IncrediBot, three kinds of tasks can be created:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### 1. Todo"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "The simplest task in the whole app! Simply input a description and this task will be added to the bot."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### 2. Event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Events are used for scheduling purposes, allowing you to tag a specific time frame to a task. "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Time frames used can be flexible as you want it too! e.g. event eat /at Tampines"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### 3. Deadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Last but not least, we have deadlines, tasks with fixed due dates. Use it to track your all your assignment and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "work deadlines!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### To assist you with managing your tasks are:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Other Commands"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `list` - Displays the list of tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `sort` - Sorts the tasks according to completion status and type"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `done` - Completes a task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `delete` - Deletes a task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - `find` - Finds all tasks which matches the query word"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### Side features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Fully responsive UI which supports full-screen usage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Prompts displayed whenever you input a wrong command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Prevents addition of duplicate tasks - Duplicate tasks are tasks created on the same day with the same description"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Accepts case-insensitive commands *e.g.* DeadLine"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " - Compatible with Windows, MacOS and Linux"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Notes about the format of commands:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Words in `lower_case` are fixed inputs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Words in `UPPER_CASE` are input supplied by the user. e.g. `todo DESCRIPTION`, DESCRIPTION refers to the input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "supplied by the user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `todo` - adds a todo"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "A todo task will be added to your list of tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`todo Watch Lecture`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    [T][✘] Watch Lecture"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `event` - adds an event"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "An event task will be added to your list of tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `event DESCRIPTION /at TIMEFRAME`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`event Team meeting /at 2-4pm`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    [E][✘] Team meeting (at: 2-4pm)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `deadline` - adds a deadline"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "A deadline task will be added to your list of tasks."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `deadline DESCRIPTION /by TIMEFORMAT`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`deadline Submit homework /by 13-9-20 1420`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    [D][✘] Submit homework (by: 13 Sep 2020 @ 2.20 PM)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "#### More about deadlines"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "A deadline task has a unique feature unlike the other two tasks. You can input in dates/times and order deadlines"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "accordingly!"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Accepted time formats:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- d-M-yy HHmm"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - 23-12-19 2230"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- d-M-yy"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - e.g. 23-12-19"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Time will be taken as the current time"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- HHmm "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - e.g. 2230"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Date will be taken as today\u0027s date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `list` - shows all tasks"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Displays all tasks in the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Here are the tasks in your list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1. [T][✘] Watch Lecture"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2. [E][✘] Team meeting (at: 2-4pm)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "3. [D][✘] Submit homework (by: 13 Sep 2020 @ 2.20 PM)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `sort` - sorts the list of tasks"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Sorts the list of tasks with the following standards:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Incomplete tasks have higher priority (higher up in the list)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- Tasks are sorted by type in order of:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Deadlines with the earliest due dates"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Events in the order they were created"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    - Todos in the order they were created"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`sort`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Your list has been sorted!"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Type in \u0027list\u0027 to see the new ordering."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "If you type in `list`,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Here are the tasks in your list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1. [D][✘] Submit homework (by: 13 Sep 2020 @ 2.20 PM)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2. [E][✘] Team meeting (at: 2-4pm)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "3. [T][✘] Watch Lecture"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `done` - marks a task as done"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "A task will be marked as done."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `done NUM`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Incredible! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    [T][✓] Watch Lecture"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `delete` - deletes a task"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "A task will be deleted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `delete NUM`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    [T][✓] Watch Lecture"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `find` - finds matching tasks in the list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Finds the list of matching tasks to the query word after find."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Format: `find DESCRIPTION`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`find meeting`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1. [E][✘] Team meeting (at: 2-4pm)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `help` - Displays the list of commands available"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "IncrediBot will display the list of commands that he knows."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Here are the available commands that I know:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "1. todo _ (e.g. todo 3)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "2. deadline \u0027task name\u0027 /by \u0027due date\u0027 (e.g. deadline Exercise /by 23-8-20)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "3. event \u0027task name\u0027 /at \u0027start time - end time\u0027 (e.g. meeting /at Sunday 2pm - 4pm)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "4. list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "5. done _ (e.g. done 4)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "6. delete _ (e.g. delete 4)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "7. find \u0027   \u0027 (e.g. find book)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "8. sort"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "9. bye"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### `bye` - Quits the program"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Closes the GUI window."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "Bye! Hope to see you again soon! "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### External packages Used"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [JUnit by JUnit Team](https://github.com/junit-team/junit5/) - For testing classes and methods in IncrediBot"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [JavaFX by OpenJDK](https://github.com/openjdk/jfx) - For creating Graphical User Interface."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "### Images Used"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [User image](https://www.pngitem.com/middle/hbxJbTo_the-incredibles-2-mrs-incredible-png-by-metropolis/)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Incredibot image](https://www.pngitem.com/middle/xwTbRJ_incredibles-2-mr-incredible-png-clipart-png-download/)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [Greeting image](https://www.pngitem.com/middle/hJJboRT_jackjack-incredibles-freetoedit-jack-jack-parr-the-incredibles/)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "- [App icon](https://www.pngitem.com/middle/xwThJR_elastigirl-calls-danger-incredibles-incredibles-dash-hd-png/)"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 265,
      "-": 20
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TIMEOUT_DURATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Main class to run Duke program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the duke backend."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskList \u003d new TaskList(storage.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains input from user and outputs accordingly."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Duke response message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            checkForExit(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Method to run a method after a 1 second delay."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param runnable Method to run."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void setTimeout(Runnable runnable) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Runnable program \u003d () -\u003e runAfterDelay(runnable);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        new Thread(program).start();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Runs the {@code Runnable} object after a delay of 600ms."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param runnable Method to run."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void runAfterDelay(Runnable runnable) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Thread.sleep(TIMEOUT_DURATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            runnable.run();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the command is an {@code ExitCommand}, quitting the program if so."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param command Input Command from user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void checkForExit(Command command) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (command.isExit()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            setTimeout(Platform::exit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 79,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Launches the Duke application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Empty argument."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the addition of tasks into the TaskList and updating of storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds the new {@code Task} into the {@code TaskList} and updates the storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param newTask New task to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DuplicateTaskException If the new task to be added already exists in the current {@code TaskList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If storage file fails to get updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected String addTask(Task newTask, TaskList taskList, Ui ui, Storage storage) throws DuplicateTaskException,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FileUpdateFailException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskList.contains(newTask)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.addTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 35
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.TaskParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * AddDeadlineCommand class abstracts the execution of adding {@code Deadline} a task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code AddDeadlineCommand} object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of deadline task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddDeadlineCommand(String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a {@code Deadline} task into the {@code TaskList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyTimeException If deadline portion of task is empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidEventException Not thrown in this method."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidDeadlineException If input does not follow the format of a {@code Deadline} task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidDateException If date of task does not follow the format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If file in storage fails to get updated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DuplicateTaskException If the new task to be added already exists in the current {@code TaskList}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws EmptyTimeException, InvalidEventException,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidDeadlineException, InvalidDateException, FileUpdateFailException, DuplicateTaskException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] parsedArr \u003d TaskParser.parseTaskDescription(description, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String taskDetails \u003d TaskParser.getTaskDetails(parsedArr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String deadline \u003d TaskParser.getTime(parsedArr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDateTime dateTime \u003d DateTimeParser.getDateTime(deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return addTask(new Deadline(taskDetails, dateTime), taskList, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 58
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.TaskParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Abstracts the adding of Event task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code AddEventCommand} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of the Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddEventCommand(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a {@code Event} task into the {@code TaskList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyTimeException If deadline portion of task is empty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidEventException If input does not follow the format of an {@code Event} task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidDeadlineException Not thrown here in this method."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If file in storage fails to get updated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DuplicateTaskException If the new task to be added already exists in the current {@code TaskList}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws EmptyTimeException, InvalidEventException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidDeadlineException, FileUpdateFailException, DuplicateTaskException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] resultArr \u003d TaskParser.parseTaskDescription(description, TaskType.EVENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String taskDetails \u003d TaskParser.getTaskDetails(resultArr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String timeFrame \u003d TaskParser.getTime(resultArr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return addTask(new Event(taskDetails, timeFrame), taskList, ui, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 51
    }
  },
  {
    "path": "src/main/java/duke/command/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyToDoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Adds a todo task into the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String taskDetails;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the AddToDoCommand with the taskDetails;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskDetails Task details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddToDoCommand(String taskDetails) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskDetails \u003d taskDetails;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a todo task into the TaskList object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyToDoException If the task detail is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If storage file fails to get updated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DuplicateTaskException If the new task to be added already exists in the current {@code TaskList}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws EmptyToDoException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FileUpdateFailException, DuplicateTaskException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskDetails.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyToDoException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return addTask(new ToDo(taskDetails), taskList, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 46
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles all possible actions of the program, as given by the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes a specific command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If an error is found in the execution of command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides a boolean to which whether the program can stop."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return False as the default value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidSimpleCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Abstracts the execution of the deletion of task command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteCommand extends SimpleCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code DeleteCommand} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes the deletion of task command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidSimpleCommandException If Delete command is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidTaskNumberException If task number does not lie within the size of TaskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If file in storage fails to get updated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws InvalidSimpleCommandException,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidTaskNumberException, FileUpdateFailException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkValidity(input, SimpleCommandType.DELETE, taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int digit \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task current \u003d taskList.get(digit - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.delete(digit - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.deleteTask(current, taskList.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 47
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidSimpleCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.TaskAlreadyDoneException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Abstracts the marking of task as done command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DoneCommand extends SimpleCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code DoneCommand} object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes marking of task as done command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidSimpleCommandException If Done command is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidTaskNumberException If task number does not lie within the size of TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws TaskAlreadyDoneException If task has already been marked done before."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If file in storage fails to get updated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws InvalidSimpleCommandException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidTaskNumberException, TaskAlreadyDoneException, FileUpdateFailException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkValidity(input, SimpleCommandType.DONE, taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int digit \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task current \u003d taskList.get(digit - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (current.isDone()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new TaskAlreadyDoneException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        current.markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.markTaskAsDone(current);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 53
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Exits the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Terminates the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.goodbye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true to terminate the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 34
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_MATCHING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyFindException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Executes the finding of matching word in the task descriptions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the FindCommand class to look for the matching word."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Finds all matching tasks based on the given user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyFindException If no task matches the user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws EmptyFindException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyFindException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList outputList \u003d taskList.matchAll(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (outputList.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.emptyFind(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.showTaskList(outputList, KEYWORD_MATCHING);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 46
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.COMMAND_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.HEADER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Prints out all commands to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the list of commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.printNumberedArray(COMMAND_LIST, HEADER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EMPTY_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Shows all tasks in the TaskList object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Shows all tasks in the TaskList object if and only if task list is not empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Response message to user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.emptyTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return ui.showTaskList(taskList, EMPTY_STRING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 30
    }
  },
  {
    "path": "src/main/java/duke/command/SimpleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidSimpleCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Abstracts the logic of deleting and completing a task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class SimpleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input string from the user is valid by first checking if it is a number, and then checking"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * if the number is within the size of {@code TaskList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param simpleCommandType Simple command type"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidSimpleCommandException When the user input is not a number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidTaskNumberException When the number is not within the size of the TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected void checkValidity(String input, SimpleCommandType simpleCommandType, TaskList taskList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throws InvalidSimpleCommandException, InvalidTaskNumberException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!isNumber(input)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidSimpleCommandException(simpleCommandType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int digit \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!taskList.checkIfValid(digit)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidTaskNumberException(taskList.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the string is a number, returning true if so, false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param str String to check."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if string is a number, false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean isNumber(String str) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 48
    }
  },
  {
    "path": "src/main/java/duke/command/SimpleCommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents the 2 simple commands, delete and done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum SimpleCommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns a string representation of the {@code SimpleCommandType}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the {@code SimpleCommandType}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the simple command type to title case."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return {@code SimpleCommand} type in title case."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toTitleCase() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String current \u003d toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        char firstLetter \u003d current.charAt(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String remaining \u003d toString().substring(1, current.length());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Character.toUpperCase(firstLetter) + remaining;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 31
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Abstracts the sorting of tasks in the {@code TaskList}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes the sorting of tasks in the {@code TaskList}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Message to notify that the list has been sorted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If file in storage fails to get updated."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws FileUpdateFailException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.sort();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return ui.sortMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 28
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.OOPS_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parent exception class for this program, which is thrown when there is an error in the user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the DukeException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param message Message to be displayed when exception is thrown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected DukeException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(OOPS_MESSAGE, message));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DUPLICATE_TASK_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when a new {@code Task} to be added already exists in the current {@code TaskList}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the DuplicateTaskException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(DUPLICATE_TASK_MESSAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EMPTY_FIND_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when there is not succeeding word after find."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the EmptyFindException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyFindException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(EMPTY_FIND_MESSAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EMPTY_TIME_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when either a {@code Deadline} or {@code Event} Task does not have its time specified."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyTimeException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code EmptyTimeException} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of {@code Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyTimeException(TaskType taskType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(getEmptyTimeMessage(taskType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the empty time message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType TaskType of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String response to user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getEmptyTimeMessage(TaskType taskType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String message \u003d String.format(EMPTY_TIME_MESSAGE, taskType.toLowerCase());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Ui.stringFormatter(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 32
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EMPTY_TASK_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task detail of a Task object is empty."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyToDoException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the EmptyToDoException object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyToDoException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(EMPTY_TASK_DESCRIPTION_MESSAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/FileUpdateFailException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.FILE_UPDATE_FAIL_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the csv file fails to update properly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class FileUpdateFailException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the FileUpdateFailException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public FileUpdateFailException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(FILE_UPDATE_FAIL_MESSAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DATE_INPUT_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DATE_TIME_INPUT_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_DATE_ERR_ONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_DATE_ERR_TWO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TIME_INPUT_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the {@code Deadline} task has the wrong date format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code InvalidTimeException} object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDateException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(INVALID_DATE_ERR_ONE, INVALID_DATE_ERR_TWO, DATE_TIME_INPUT_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                DATE_INPUT_FORMAT, TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 23
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_DEADLINE_ERR_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_DEADLINE_ERR_THREE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_DEADLINE_ERR_TWO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the input to create a Deadline task is not formatted correctly."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidDeadlineException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDeadlineException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(INVALID_DEADLINE_ERR_ONE, INVALID_DEADLINE_ERR_TWO, INVALID_DEADLINE_ERR_THREE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_EVENT_ERR_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_EVENT_ERR_THREE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_EVENT_ERR_TWO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the input to create an Event task is not formatted correctly."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidEventException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidEventException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(INVALID_EVENT_ERR_ONE, INVALID_EVENT_ERR_TWO, INVALID_EVENT_ERR_THREE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.FILE_FORMAT_ERR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the file format of the CSV is not properly formatted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidFileFormatException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidFileFormatException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidFileFormatException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(FILE_FORMAT_ERR));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidSimpleCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_SIMPLE_COMMAND_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_SIMPLE_COMMAND_TWO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SimpleCommandType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a wrong delete or done format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidSimpleCommandException extends DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidSimpleCommandException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param simpleCommandType Type of simple command, either delete or done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidSimpleCommandException(SimpleCommandType simpleCommandType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(getMessage(simpleCommandType));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the error message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param simpleCommandType Either Delete or Done command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getMessage(SimpleCommandType simpleCommandType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String errorMessage \u003d String.format(INVALID_SIMPLE_COMMAND_ONE, simpleCommandType.toTitleCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String suggestionMessage \u003d String.format(INVALID_SIMPLE_COMMAND_TWO, simpleCommandType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return Ui.stringFormatter(errorMessage, suggestionMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 34
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_TASK_NUM_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_TASK_NUM_TWO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task number provided by the user is not valid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidTaskNumberException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidTaskNumberException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size provided by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidTaskNumberException(int size) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(INVALID_TASK_NUM_ONE, String.format(INVALID_TASK_NUM_TWO, size)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskAlreadyDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TASK_ALREADY_DONE_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task is already done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskAlreadyDoneException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the TaskAlreadyDoneException object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskAlreadyDoneException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(TASK_ALREADY_DONE_MESSAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.UNKNOWN_COMMAND_ONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.UNKNOWN_COMMAND_TWO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a command which is not part of the known commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the UnknownCommandException object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(Ui.stringFormatter(UNKNOWN_COMMAND_ONE, UNKNOWN_COMMAND_TWO));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DATE_INPUT_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DATE_TIME_INPUT_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TIME_INPUT_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses the user date or time format into a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class DateTimeParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the input string into a {@code LocalDateTime} object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param deadline Deadline of task before parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return A LocalDateTime object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidDateException If the deadline of task does not follow the proper format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static LocalDateTime getDateTime(String deadline) throws InvalidDateException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (isDateTimeFormat(deadline)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return formatDateTime(deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isDateFormat(deadline)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return formatDate(deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isTimeFormat(deadline)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return formatTime(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given matches the d-M-yy HHmm format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the right format, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean isDateTimeFormat(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDateTime.parse(input, formatterDateTime(DATE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a LocalDateTime object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param dateAndTime Input date and time from user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Formatted date and time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime formatDateTime(String dateAndTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.parse(dateAndTime, formatterDateTime(DATE_TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given matches the d-M-yy format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the right format, false otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean isDateFormat(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDate.parse(input, formatterDateTime(DATE_INPUT_FORMAT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a LocalDateTime object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param date Input date from user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return A LocalDate object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime formatDate(String date) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date, formatterDateTime(DATE_INPUT_FORMAT));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalTime currentTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.of(localDate, currentTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the input given is in a HHmm format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if input has the right format, false otherwise."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean isTimeFormat(String input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalTime.parse(input, formatterDateTime(TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a LocalDateTime object with d MMM yyyy @ h.mm a format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param time Input time from user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return LocalDateTime consisting of today\u0027s date input time."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime formatTime(String time) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalTime localTime \u003d LocalTime.parse(time, formatterDateTime(TIME_INPUT_FORMAT));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime.of(currentDate, localTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a DateTimeFormatter using the input pattern."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param pattern String pattern."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return The DateTimeFormatter based the pattern."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static DateTimeFormatter formatterDateTime(String pattern) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return DateTimeFormatter.ofPattern(pattern);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 127
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.ARRAY_SIZE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EMPTY_STRING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_ARR_ERROR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_BYE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_FIND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_LIST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_SORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TODO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.MULTI_SPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.SINGLE_SPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SortCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the parsing of user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the user input and returns the corresponding command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text User text input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Corresponding command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If user input does not belong to the list of known commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static Command parse(String text) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] inputArr \u003d deconstructInput(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String keyWord \u003d getKeyWord(inputArr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String details \u003d getRestOfWord(inputArr);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        switch (keyWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_DONE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new DoneCommand(details);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_DELETE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new DeleteCommand(details);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_TODO:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddToDoCommand(details);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddDeadlineCommand(details);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_EVENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddEventCommand(details);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_FIND:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new FindCommand(details);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_LIST:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ShowCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_HELP:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_BYE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_SORT:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deconstructs the string into a string array."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input String."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String array of the input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String[] deconstructInput(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String formattedString \u003d input.trim().replaceAll(MULTI_SPACE, SINGLE_SPACE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return formattedString.split(SINGLE_SPACE, ARRAY_SIZE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the keyword of the user input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param arr User input in a String array."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Keyword."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getKeyWord(String[] arr) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (arr.length \u003e 0) : INVALID_ARR_ERROR;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr[0].toUpperCase();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the rest of the user input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param arr User input in a String array."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Rest of the user input."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getRestOfWord(String[] arr) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (arr.length \u003e 0) : INVALID_ARR_ERROR;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr.length \u003d\u003d 1 ? EMPTY_STRING : arr[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 108
    }
  },
  {
    "path": "src/main/java/duke/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.ARRAY_SIZE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DEADLINE_DELIMITER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EVENT_DELIMITER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.INVALID_TASK_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the parsing of the {@code Event} and {@code Deadline} task descriptions (String after keyword)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the unique identifier tied to this {@code Task}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Task type of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String identifier of the Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getIdentifier(TaskType taskType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (taskType \u003d\u003d TaskType.DEADLINE || taskType \u003d\u003d TaskType.EVENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return taskType \u003d\u003d TaskType.EVENT ? EVENT_DELIMITER : DEADLINE_DELIMITER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Throws an {@code Exception} specific to the {@code TaskType}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Task type of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidDeadlineException If deadline is not formatted correctly."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidEventException If Event is not formatted correctly."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static void throwException(TaskType taskType) throws InvalidDeadlineException, InvalidEventException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidEventException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assert false : INVALID_TASK_TYPE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deconstructs the user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Remaining string after keyword."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType TaskType of task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String array of the input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String[] deconstructInput(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String identifier \u003d getIdentifier(taskType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description.split(identifier, ARRAY_SIZE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the description for the {@code Deadline} and {@code Event} tasks and returns an array representation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * of the input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Task type of task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String array consisting of task details and time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidDeadlineException If deadline is not formatted correctly."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidEventException If Event is not formatted correctly."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyTimeException If time of event is not specified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String[] parseTaskDescription(String description, TaskType taskType)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throws InvalidDeadlineException, InvalidEventException, EmptyTimeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] inputArr \u003d deconstructInput(description, taskType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (inputArr.length \u003c ARRAY_SIZE) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throwException(taskType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String time \u003d inputArr[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (time.isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyTimeException(taskType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        inputArr[1] \u003d inputArr[1].trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return inputArr;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the task details of a task from a parsed String array."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param arr Parsed String array."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task details of task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String getTaskDetails(String[] arr) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr[0];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the time of the task from a parsed String array, time frame for event and due date for deadline."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param arr Parsed String array."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String getTime(String[] arr) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 104
    }
  },
  {
    "path": "src/main/java/duke/storage/CsvConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.CSV_SEPARATOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DATE_TIME_OUTPUT_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_NOT_DONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.KEYWORD_TODO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Converts the task in CSV format to a Task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CsvConverter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a task from the CSV format of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input CSV format of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task corresponding to the csv string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidFileFormatException If file in storage is formatted incorrectly."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected static Task parseToTask(String input) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] resultArr \u003d parseString(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String taskType \u003d resultArr[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description \u003d resultArr[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String timeFrame \u003d resultArr[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        LocalDateTime dateTime \u003d stringToDateTime(resultArr[3]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean isDone \u003d stringToBoolean(resultArr[4]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_TODO:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ToDo(description, isDone, timeFrame, dateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_EVENT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new Event(description, isDone, timeFrame, dateTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        case KEYWORD_DEADLINE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new Deadline(description, isDone, timeFrame, dateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the input csv string to an array."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String array format of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidFileFormatException If there are errors in the csv format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String[] parseString(String input) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int expectedLength \u003d 5;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] resultArr \u003d input.split(CSV_SEPARATOR, expectedLength);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (resultArr.length \u003c expectedLength) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        resultArr[0] \u003d resultArr[0].toUpperCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        resultArr[4] \u003d resultArr[4].toUpperCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String doneStatus \u003d resultArr[4];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean validStatus \u003d doneStatus.equals(KEYWORD_DONE) || doneStatus.equals(KEYWORD_NOT_DONE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (!validStatus) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return resultArr;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the string time in the .csv file to a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return LocalDateTime object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidFileFormatException If the input is not in format that can be converted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static LocalDateTime stringToDateTime(String input) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return LocalDateTime.parse(input, DateTimeFormatter.ofPattern(DATE_TIME_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the done status to a boolean."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Done status."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if done, false if not done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean stringToBoolean(String input) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return input.equals(KEYWORD_DONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 102
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.BASE_DIRECTORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.CSV_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.CSV_HEADER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.FILE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.FOLDER_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the interactions with the user\u0027s CSV file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Includes creating, updating file and retrieving list of tasks from CSV file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String dataDirectory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the storage object and create a new file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dataDirectory \u003d System.getProperty(BASE_DIRECTORY) + FOLDER_NAME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        filePath \u003d dataDirectory + FILE_NAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates the tasklist.csv file in the storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creation works by creating the folder first (if not found), then afterwards creating the file (if it does not"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * already exist)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        makeFolder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        makeFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates the folder in storage (if it does not already exists)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void makeFolder() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        File newDirectory \u003d new File(dataDirectory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newDirectory.mkdir();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates the file in storage (if it does not already exists)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void makeFile() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            newFile.createNewFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.fileCreationError();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the list of tasks from the tasklist CSV file, if any."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assert !filePath.isBlank();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            loadTasks(taskList, bufferedReader);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException | InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Loads the tasks from the taskList if header is not empty."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList TaskList."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param bufferedReader BufferedReader."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws IOException If there is an error when reading the file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidFileFormatException File is formatted wrongly."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void loadTasks(ArrayList\u003cTask\u003e taskList, BufferedReader bufferedReader) throws IOException,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidFileFormatException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String header \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (header !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            readFile(taskList, bufferedReader);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Reads the storage file and stores each task into the task list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList Task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param bufferedReader BufferedReader."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws IOException If there is an error when reading the file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws InvalidFileFormatException File is formatted wrongly."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void readFile(ArrayList\u003cTask\u003e taskList, BufferedReader bufferedReader) throws IOException,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidFileFormatException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task newTask \u003d CsvConverter.parseToTask(line);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(newTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Updates the task list in the storage."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList Task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws FileUpdateFailException If file in storage fails to update."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void updateFile(TaskList taskList) throws FileUpdateFailException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assert !filePath.isBlank();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ArrayList\u003cTask\u003e taskArrayList \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            writeToFile(taskArrayList, bufferedWriter);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new FileUpdateFailException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Saves the tasks to the storage file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskArrayList List of Tasks."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param bufferedWriter BufferedWriter which writes into storage file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws IOException If an error occurs while writing to the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void writeToFile(ArrayList\u003cTask\u003e taskArrayList, BufferedWriter bufferedWriter) throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        bufferedWriter.write(CSV_HEADER);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (Task task : taskArrayList) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String taskInCsvFormat \u003d convertToCsvFormat(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            bufferedWriter.append(taskInCsvFormat);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Converts the task to a csv format to be stored in a .csv file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the task in .csv format."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String convertToCsvFormat(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return String.format(CSV_FORMAT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                task.getTaskName(), task.getDescription(), task.getTimeFrame(), task.getTime(), task.getStatus());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 172
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.CLOSE_BRACKET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DEADLINE_BY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DEADLINE_SYMBOL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.NIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Deadline class which has a unique deadline property."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code Deadline} task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param deadline Deadline of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, TaskType.DEADLINE, NIL, deadline, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code Deadline} task with all parameters."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This is used when the Csv converter parses the task from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Boolean representing whether task has been completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param timeFrame Time frame of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param deadline Deadline of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Deadline(String description, boolean isDone, String timeFrame, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, TaskType.DEADLINE, timeFrame, deadline, isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the {@code String} representation of this {@code Deadline} task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the {@code Deadline} task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return DEADLINE_SYMBOL + super.toString() + DEADLINE_BY + getTime() + CLOSE_BRACKET;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 47
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.CLOSE_BRACKET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EVENT_AT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EVENT_SYMBOL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Event class which consists of a time frame. dateTime refers to the creation time of the object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String timeFrame;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes an {@code Event} task with the given description and time frame."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param timeFrame Time frame of event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Event(String description, String timeFrame) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, TaskType.EVENT, timeFrame, LocalDateTime.now(), false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code Event} task with all parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This is used when the Csv converter parses the task from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Boolean status of event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param timeFrame Time frame of event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param dateTime DateTime representing when the Event was created."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Event(String description, boolean isDone, String timeFrame, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, TaskType.EVENT, timeFrame, dateTime, isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns a {@code String} representation of this {@code Event} task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the Event task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return EVENT_SYMBOL + super.toString() + EVENT_AT + timeFrame + CLOSE_BRACKET;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.CROSS_SYMBOL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DATE_TIME_OUTPUT_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.NOT_DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.SINGLE_SPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TICK_SYMBOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Stores all methods and properties of a Task class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Variables include description, task type, time frame, and dateTime and done status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String timeFrame;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initialises the Task object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Task details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param timeFrame Time frame of Task (Only valid for Event)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param dateTime Date and time of the task (Deadline for Deadline objects, creation time for other tasks)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Status of task - true if done, false otherwise."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected Task(String description, TaskType taskType, String timeFrame, LocalDateTime dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains the Done and Not done symbols."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of symbols."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return (isDone ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the status of the Task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if task is done, false otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the Task description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the name of task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task name in CAPS."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return taskType.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the String representation of the status of Task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of Task status."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the time of the Task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Time of Task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return dateTime.format(DateTimeFormatter.ofPattern(DATE_TIME_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the time frame of the task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Time frame of task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getTimeFrame() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return timeFrame;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if and only if the task description contains the query word, false otherwise."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param query Query word."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if task description contains the query."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean match(String query) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description.contains(query);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the String representation of the Task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the Task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getStatusIcon() + SINGLE_SPACE + description;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Compares each task according to the sorting standard."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Incomplete tasks have the higher priority."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Priority in increasing order: Deadline, Event, Todo."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tasks created earlier / have earlier deadline have higher priority."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherTask Other task to compare to."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return The comparator value, negative if less, positive if greater."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int compareTo(Task otherTask) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Incomplete tasks have higher priority."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (isDone \u0026\u0026 !otherTask.isDone) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (!isDone \u0026\u0026 otherTask.isDone) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Proceeds to compare tasks by task type, then time."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskType \u003d\u003d otherTask.taskType) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return dateTime.compareTo(otherTask.dateTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return taskType.compareTo(otherTask.taskType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if this task has the same description and time as the other task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param object Other task to check."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if this task is equal to the other task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert object instanceof Task;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task otherTask \u003d (Task) object;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean hasSameDescription \u003d sameDescription(otherTask.description);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean hasSameTime \u003d sameTime(otherTask.dateTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return hasSameDescription \u0026\u0026 hasSameTime;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the two dateTime of the other task is the same as this task."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherDateTime DateTime of the other task."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other task has the same DateTime."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean sameTime(LocalDateTime otherDateTime) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean sameYear \u003d dateTime.getYear() \u003d\u003d otherDateTime.getYear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean sameDayOfYear \u003d dateTime.getDayOfYear() \u003d\u003d otherDateTime.getDayOfYear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return sameYear \u0026\u0026 sameDayOfYear;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the description of the other task is the same as this task."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param otherDescription The other task\u0027s description."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if the other task has the same description."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean sameDescription(String otherDescription) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description.equals(otherDescription);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 194
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains the three types of task, namely DEADLINE, EVENT and TODO."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    TODO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Obtains a lower-cased representation of the {@code TaskType}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return TaskType in lower-cased."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toLowerCase() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return toString().toLowerCase();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 19
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.NIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TODO_SYMBOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * ToDo task, which is one of the three Task objects. DateTime variable here refers to the time of creation of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Timeframe is also empty by default."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the ToDo task with the description only. boolean isDone is false by default."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, TaskType.TODO, NIL, LocalDateTime.now(), false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the {@code ToDo} task with all parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * This is used when the Csv converter parses the task from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Boolean representing whether task has been done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param timeFrame Time frame of ToDo task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param dateTime Date and time when task was created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ToDo(String description, boolean isDone, String timeFrame, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, TaskType.TODO, timeFrame, dateTime, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides a string representation of the {@code ToDo} task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the ToDo task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return TODO_SYMBOL + super.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 45
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Keeps and handles all operations regarding the user tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the task list with an {@code ArrayList} of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the task list with an empty {@code ArrayList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the task at the index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param index Position of task in list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deletes the tasks at the index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param index Position of task in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a new task to the task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param task Task being added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the list object of the tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return List object containing all tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Size of task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if digit lies within (0, number of tasks)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param digit Input digit."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if digit lies within the range, false otherwise."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean checkIfValid(int digit) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return digit \u003c\u003d tasks.size() \u0026\u0026 digit \u003e 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the task list is empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if and only if task list is empty, false otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true if this task list contains the specified task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param task Task whose presence in this list is to be tested."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return {@code True} if this list contains the specified task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean contains(Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Finds all tasks with descriptions that are matching the String input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input word for querying."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return New TaskList with tasks matching the input word"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskList matchAll(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .filter(task -\u003e task.match(input))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .forEach(taskList::add);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Sorts the tasks in the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Collections.sort(tasks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 126
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_TO_FXML \u003d \"/view/DialogBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_TO_CSS \u003d \"/view/DialogBox.css\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private VBox container;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Opens the dialog box in the GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text Text to output."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param image Image of DialogBox (either Duke or User)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(PATH_TO_FXML));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        createDialogBox(text, image);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates the dialog box."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text Text to display."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param image Image to display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void createDialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        container.getStylesheets().add(PATH_TO_CSS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialog.getStylesheets().add(PATH_TO_CSS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the user\u0027s dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text Input text from user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param img User\u0027s icon."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Display of user dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays Duke\u0027s response."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text Output text from Duke."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param img Duke image."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Display of Duke\u0027s response."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        var dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 98
    }
  },
  {
    "path": "src/main/java/duke/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_TO_MAIN_WINDOW \u003d \"/view/MainWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_TO_MAIN_WINDOW_STYLES \u003d \"/view/MainWindow.css\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_TO_IMG \u003d \"/images/dash.png\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String NAME \u003d \"IncrediBot\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Starts the GUI application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param stage Stage parameter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(PATH_TO_MAIN_WINDOW));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            scene.getStylesheets().add(PATH_TO_MAIN_WINDOW_STYLES);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            stage.setTitle(NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            stage.getIcons().add(new Image(Main.class.getResourceAsStream(PATH_TO_IMG)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 46
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.WELCOME_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_USER_IMG \u003d \"/images/user.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_USER_DUKE \u003d \"/images/duke.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String PATH_USER_JACK \u003d \"/images/jack.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(PATH_USER_IMG));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(PATH_USER_DUKE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Image centreImage \u003d new Image(this.getClass().getResourceAsStream(PATH_USER_JACK));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private ImageView centrePic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Label openingMessage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the main GUI screen."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param duke Duke application."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        greetUser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Greets the user when the GUI opens."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void greetUser() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        centrePic.setImage(centreImage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        openingMessage.setText(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 84
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DISPLAY_TASKS_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EMPTY_STRING_ERROR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.EMPTY_TASK_LIST_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.FILE_CREATION_ERR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.FOUR_SPACES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.GOODBYE_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.LINE_SEPARATOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.NO_MATCHING_TASKS_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.NUM_FORMATTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.NUM_OF_TASKS_MESSAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.SORT_PROMPT_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.SORT_SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TASK_ADDED_MESSAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TASK_DELETED_MESSAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.TASK_MARKED_MESSAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the program interactions with user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Concatenates the strings, separating each string with a line separator."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args Strings to concatenate."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Concatenated strings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static String stringFormatter(String... args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int numOfStrings \u003d args.length;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        IntStream.range(0, numOfStrings)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .forEach(i -\u003e appendWithNewLine(stringBuilder, args[i]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert (stringBuilder.length() \u003e 0) : EMPTY_STRING_ERROR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the list of commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param array Input array."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param header Header title."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Numbered list of objects."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String printNumberedArray(Object[] array, String header) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int numOfCommands \u003d array.length;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assert numOfCommands \u003e 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        stringBuilder.append(header).append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        IntStream.range(0, numOfCommands)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .forEach(i -\u003e appendWithNewLine(stringBuilder, labelString(array[i], i)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Labels the string with the corresponding index."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param string Input string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param i Index of item."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Labelled string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String labelString(Object string, int i) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return String.format(NUM_FORMATTER, i + 1, string);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Appends the string to the {@code StringBuilder} along with a line separator."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param stringBuilder StringBuilder to store strings."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param string Input string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static void appendWithNewLine(StringBuilder stringBuilder, String string) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        stringBuilder.append(string).append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the goodbye message."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Goodbye message to the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String goodbye() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the successful task done message."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param current Input task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Successful task marked as done message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String markTaskAsDone(Task current) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(TASK_MARKED_MESSAGE, FOUR_SPACES + current);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the deletion success message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param current Current task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size of task list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Successful deletion of task message."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String deleteTask(Task current, int size) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(TASK_DELETED_MESSAGE, FOUR_SPACES + current, String.format(NUM_OF_TASKS_MESSAGE, size));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the add task message."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param newTask New task added."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size of task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Successful addition of task message."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String addTask(Task newTask, int size) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(TASK_ADDED_MESSAGE, FOUR_SPACES + newTask, String.format(NUM_OF_TASKS_MESSAGE, size));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the empty task list message."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Empty task list message."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String emptyTaskList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(EMPTY_TASK_LIST_MESSAGE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the task list to the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskList Task list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param extra Extra word to add in, if any."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Show task list message."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String showTaskList(TaskList taskList, String extra) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String header \u003d String.format(DISPLAY_TASKS_MESSAGE, extra);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return printNumberedArray(taskList.getTasks().toArray(), header);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the no matching tasks found message."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param queryWord Word use to query task list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return No matching tasks found message."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String emptyFind(String queryWord) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String message \u003d String.format(NO_MATCHING_TASKS_MESSAGE, queryWord);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(message);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the sort success message to the user."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Sort success message."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String sortMessage() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return stringFormatter(SORT_SUCCESS_MESSAGE, SORT_PROMPT_MESSAGE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Displays the file creation error to the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void fileCreationError() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.println(FILE_CREATION_ERR);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 170
    }
  },
  {
    "path": "src/main/java/duke/util/Keyword.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains all keywords being used in the entire app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Keyword {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Task class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"[\\u2718]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DONE \u003d \"Done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String NOT_DONE \u003d \"Not done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Deadline class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEADLINE_SYMBOL \u003d \"[D]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEADLINE_BY \u003d \" (by: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Event class"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EVENT_SYMBOL \u003d \"[E]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EVENT_AT \u003d \" (at: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // ToDo class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String TODO_SYMBOL \u003d \"[T]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_TODO \u003d \"TODO\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String CSV_HEADER \u003d \"Task type,Description,\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Time frame (for Event),Time created or Deadline,Status\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String BASE_DIRECTORY \u003d \"user.dir\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String FOLDER_NAME \u003d \"/data\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String FILE_NAME \u003d \"/tasklist.csv\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // MISC"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String CLOSE_BRACKET \u003d \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String NIL \u003d \"-\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String SINGLE_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String LINE_SEPARATOR \u003d \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final int TIMEOUT_DURATION \u003d 600;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_LIST \u003d \"LIST\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_DONE \u003d \"DONE\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_DELETE \u003d \"DELETE\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_FIND \u003d \"FIND\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_BYE \u003d \"BYE\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_HELP \u003d \"HELP\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_SORT \u003d \"SORT\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EVENT_DELIMITER \u003d \" /at\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DEADLINE_DELIMITER \u003d \" /by\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_TASK_TYPE \u003d \"Invalid task type!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_ARR_ERROR \u003d \"Array is not empty\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String MULTI_SPACE \u003d \"\\\\s{2,}\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final int ARRAY_SIZE \u003d 2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Ui"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EMPTY_STRING_ERROR \u003d \"String builder is empty!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d \"Welcome back\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String TASK_MARKED_MESSAGE \u003d \"Incredible! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String TASK_DELETED_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String FOUR_SPACES \u003d \"    \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String NUM_OF_TASKS_MESSAGE \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String TASK_ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EMPTY_TASK_LIST_MESSAGE \u003d \"You currently have no tasks in the list.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DISPLAY_TASKS_MESSAGE \u003d \"Here are the %stasks in your list:\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String NO_MATCHING_TASKS_MESSAGE \u003d \"There are no matching tasks with the keyword %s.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String NUM_FORMATTER \u003d \"%d. %s\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String FILE_CREATION_ERR \u003d \"Error in creating file!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String SORT_SUCCESS_MESSAGE \u003d \"Your list has been sorted!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String SORT_PROMPT_MESSAGE \u003d \"Type in \u0027list\u0027 to see the new ordering.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Commands"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_MATCHING \u003d \"matching \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Help command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String HEADER \u003d \"Here are the available commands that I know:\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String[] COMMAND_LIST \u003d new String[]{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"todo _ (e.g. todo 3)\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"deadline \u0027task name\u0027 /by \u0027end time\u0027 (e.g. deadline Exercise /by 23-8-20)\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"event \u0027task name\u0027 /at \u0027start time - end time\u0027 (e.g. meeting /at Sunday 2pm - 4pm)\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"list\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"done _ (e.g. done 4)\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"delete _ (e.g. delete 4)\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"find \u0027   \u0027 (e.g. find book)\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"sort\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"bye\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // DateTimeParser"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_TIME_OUTPUT_FORMAT \u003d \"d MMM yyyy @ h.mm a\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_TIME_INPUT_FORMAT \u003d \"d-M-yy HHmm\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DATE_INPUT_FORMAT \u003d \"d-M-yy\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String TIME_INPUT_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // CsvConverter"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String CSV_SEPARATOR \u003d \"  ,\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String CSV_FORMAT \u003d \"%s  ,%s  ,%s  ,%s  ,%s\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String KEYWORD_NOT_DONE \u003d \"NOT DONE\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    // Exception"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_DATE_ERR_ONE \u003d \"Date is poorly formatted!\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_DATE_ERR_TWO \u003d \"Time should be in either of these 3 formats:\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String OOPS_MESSAGE \u003d \"OOPS!!! %s\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String DUPLICATE_TASK_MESSAGE \u003d \"This task already exists in the list!\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EMPTY_FIND_MESSAGE \u003d \"The query word cannot be empty!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EMPTY_TIME_MESSAGE \u003d \"Time of %s task is not specified!\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String EMPTY_TASK_DESCRIPTION_MESSAGE \u003d \"The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String FILE_UPDATE_FAIL_MESSAGE \u003d \"Error in updating .csv file in storage.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_DEADLINE_ERR_ONE \u003d \"Deadline task is poorly formatted.\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_DEADLINE_ERR_TWO \u003d \"Here is a proper format: deadline \u0027task name\u0027 /by d-M-yy\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_DEADLINE_ERR_THREE \u003d \"e.g. deadline Exercise /by 23-8-20\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_EVENT_ERR_ONE \u003d \"Event task is poorly formatted.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_EVENT_ERR_TWO \u003d \"Here is a proper format: event \u0027event name\u0027\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \" /at \u0027start time to end time\u0027\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_EVENT_ERR_THREE \u003d \"e.g. meeting /at Sunday 2 - 4pm\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String FILE_FORMAT_ERR \u003d \"CSV file is poorly formatted!\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_TASK_NUM_ONE \u003d \"Task number does not exist in the list.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_TASK_NUM_TWO \u003d \"Your current list only has %d tasks!\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_SIMPLE_COMMAND_ONE \u003d \"%s format is invalid.\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String INVALID_SIMPLE_COMMAND_TWO \u003d \"Please try again with a proper format like \u0027%s 3\u0027\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String TASK_ALREADY_DONE_MESSAGE \u003d \"Task has already been mark as done!\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String UNKNOWN_COMMAND_ONE \u003d \"I\u0027m sorry, but I don\u0027t know what that means.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static final String UNKNOWN_COMMAND_TWO \u003d \"Type \u0027help\u0027 to display the list of commands available.\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 128
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         fillHeight\u003d\"false\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         spacing\u003d\"8.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cVBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            styleClass\u003d\"speechBubble\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fx:id\u003d\"container\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            alignment\u003d\"TOP_RIGHT\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cLabel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                styleClass\u003d\"textStyle\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                fx:id\u003d\"dialog\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                minWidth\u003d\"20\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                maxWidth\u003d\"400\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                textFill\u003d\"#333333\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                lineSpacing\u003d\"2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "               fitHeight\u003d\"200.0\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "               fitWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "               pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "               preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cInsets top\u003d\"7.5\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                bottom\u003d\"7.5\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                left\u003d\"10.0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 46
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003cAnchorPane"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        minHeight\u003d\"680.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        minWidth\u003d\"830.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003cGridPane AnchorPane.bottomAnchor\u003d\"0\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "              AnchorPane.leftAnchor\u003d\"0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "              AnchorPane.rightAnchor\u003d\"0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "              AnchorPane.topAnchor\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cTextField styleClass\u003d\"textFieldStyle\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                   fx:id\u003d\"userInput\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                   minHeight\u003d\"58.0\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                   promptText\u003d\"Enter a command...\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                   onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                   GridPane.columnIndex\u003d\"0\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                   GridPane.rowIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cButton styleClass\u003d\"buttonStyle\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                fx:id\u003d\"sendButton\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                minHeight\u003d\"58.0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                text\u003d\"\u003e\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                textFill\u003d\"#707070\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u003cDropShadow color\u003d\"#969696\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    pannable\u003d\"true\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    GridPane.columnIndex\u003d\"0\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    GridPane.columnSpan\u003d\"2\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003cVBox styleClass\u003d\"screenStyle\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                  fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                  maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                  alignment\u003d\"TOP_CENTER\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u003cImageView fx:id\u003d\"centrePic\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                           fitHeight\u003d\"130.0\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                           fitWidth\u003d\"130.0\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                           pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                           preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                \u003cLabel styleClass\u003d\"openingMessageStyle\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                       alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                       fx:id\u003d\"openingMessage\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                       wrapText\u003d\"true\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                       textFill\u003d\"#F1F1F1\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 86
    }
  },
  {
    "path": "src/test/java/duke/command/AddDeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the AddDeadlineCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddDeadlineCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for various time / date formats. Correct formats are yyyy-MM-dd, yyyy-MM-dd hh:mm, and hh:mm."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testCorrectFormats() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Deadline ct1 \u003d new Deadline(\"Test\", DateTimeParser.getDateTime(\"23-8-20\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Deadline ct2 \u003d new Deadline(\"test2\", DateTimeParser.getDateTime(\"25-8-20 1015\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Deadline ct3 \u003d new Deadline(\"test3\", DateTimeParser.getDateTime(\"2215\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddDeadlineCommand cmd1 \u003d new AddDeadlineCommand(\"Test /by 23-8-20\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddDeadlineCommand cmd2 \u003d new AddDeadlineCommand(\"test2 /by 25-8-20 1015\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddDeadlineCommand cmd5 \u003d new AddDeadlineCommand(\"test3 /by2215\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // DateTimeFormat"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct1, 1), cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(1, storage.getTasks().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct2, 2), cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(ct3, 3), cmd5.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(3, storage.getTasks().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(Arrays.toString(e.getStackTrace()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for invalid deadline commands."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidDeadlineFormats() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddDeadlineCommand cmd1 \u003d new AddDeadlineCommand(\"read /by 2-4pm\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddDeadlineCommand cmd2 \u003d new AddDeadlineCommand(\"read /at 2020-08-23\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddDeadlineCommand cmd3 \u003d new AddDeadlineCommand(\"read -/by 2020-08-23\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddDeadlineCommand cmd4 \u003d new AddDeadlineCommand(\"read/by2020-08-23\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e cmd3.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e cmd4.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for blank descriptions."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testBlankDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddDeadlineCommand cmd1 \u003d new AddDeadlineCommand(\"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddDeadlineCommand cmd2 \u003d new AddDeadlineCommand(\"/by 2020-08-23\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidDeadlineException.class, () -\u003e cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for empty time description."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTimeFrame() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddDeadlineCommand cmd1 \u003d new AddDeadlineCommand(\"meeting /by\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String deadlineMessage \u003d \"OOPS!!! Time of deadline task is not specified!\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyTimeException e \u003d assertThrows(EmptyTimeException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(deadlineMessage, e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 90
    }
  },
  {
    "path": "src/test/java/duke/command/AddEventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests for adding of events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddEventCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for adding of simple event tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testAddingStandard() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Event event1 \u003d new Event(\"test\", \"2-4pm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Event event2 \u003d new Event(\"shop\", \"2-3pm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddEventCommand cmd1 \u003d new AddEventCommand(\"test /at 2-4pm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddEventCommand cmd2 \u003d new AddEventCommand(\"shop /at2-3pm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(event1, 1), cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(1, storage.getTasks().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(event2, 2), cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(2, storage.getTasks().size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for invalid complex task formats."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidFormat() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddEventCommand cmd1 \u003d new AddEventCommand(\"read /by 2-4pm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddEventCommand cmd2 \u003d new AddEventCommand(\"read/at 2-4pm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddEventCommand cmd3 \u003d new AddEventCommand(\"read -/at 2-4pm\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddEventCommand cmd4 \u003d new AddEventCommand(\"read/at2-4pm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd3.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd4.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for blank descriptions."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testBlankDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddEventCommand cmd1 \u003d new AddEventCommand(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddEventCommand cmd2 \u003d new AddEventCommand(\"/at 2-4pm\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidEventException.class, () -\u003e cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests for empty time frame in description."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTimeFrame() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddEventCommand cmd1 \u003d new AddEventCommand(\"meeting /at\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String eventMessage \u003d \"OOPS!!! Time of event task is not specified!\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyTimeException e \u003d assertThrows(EmptyTimeException.class, () -\u003e cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(eventMessage, e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 82
    }
  },
  {
    "path": "src/test/java/duke/command/AddToDoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyToDoException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests for the adding of todo tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddToDoCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests adding of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testAddingOfTasks() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String taskDetails1 \u003d \"test\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String taskDetails2 \u003d \"test2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo1 \u003d new ToDo(taskDetails1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo2 \u003d new ToDo(taskDetails2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddToDoCommand cmd1 \u003d new AddToDoCommand(taskDetails1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            AddToDoCommand cmd2 \u003d new AddToDoCommand(taskDetails2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(toDo1, 1), cmd1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(1, storage.getTasks().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.addTask(toDo2, 2), cmd2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(2, storage.getTasks().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests empty task details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTaskDetails() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String emptyTaskDetails \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String expectedMessage \u003d \"OOPS!!! The description of a todo cannot be empty.\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        AddToDoCommand cmd \u003d new AddToDoCommand(emptyTaskDetails);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        EmptyToDoException e \u003d assertThrows(EmptyToDoException.class, () -\u003e cmd.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 54
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTests.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Initializes the storage, tasklist and ui for the children test classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CommandTests {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected final TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 16
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests for the deletion of commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DeleteCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests deletion of tasks command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testDeleteCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo1 \u003d new ToDo(\"test1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo2 \u003d new ToDo(\"test2\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo3 \u003d new ToDo(\"test3\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            SimpleCommand sc1 \u003d new DeleteCommand(\"2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.deleteTask(toDo2, 2), sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(2, storage.getTasks().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 37
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.TaskAlreadyDoneException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests for the marking of task as done command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DoneCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests the marking of task done command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testDoneCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo1 \u003d new ToDo(\"test1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo2 \u003d new ToDo(\"test2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo3 \u003d new ToDo(\"test3\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            DoneCommand sc1 \u003d new DoneCommand(\"2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"Incredible! I\u0027ve marked this task as done:\\n    [T][\\u2713] test2\\n\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(storage.getTasks().get(1).isDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertThrows(TaskAlreadyDoneException.class, () -\u003e sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 43
    }
  },
  {
    "path": "src/test/java/duke/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests for exit command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ExitCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Basic tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ExitCommand cmd \u003d new ExitCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(cmd.isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ui.goodbye(), cmd.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 23
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyFindException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the find command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class FindCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests the find command with 2 different query words."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testFindMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FindCommand fc \u003d new FindCommand(\"test\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ToDo toDo \u003d new ToDo(\"te\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Event event \u003d new Event(\"test\", \"2pm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"123test12312\", LocalDateTime.now());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(toDo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(event);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(deadline);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Test 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            TaskList newTaskList \u003d taskList.matchAll(\"test\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.showTaskList(newTaskList, \"matching \"), fc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Test 2"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fc \u003d new FindCommand(\"TEST\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(ui.emptyFind(\"TEST\"), fc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (EmptyFindException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests find command with empty query word."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyFind() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        FindCommand fc \u003d new FindCommand(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(EmptyFindException.class, () -\u003e fc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 54
    }
  },
  {
    "path": "src/test/java/duke/command/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Test to ensure that help command is correct."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "class HelpCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Execution of help command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String expected \u003d \"Here are the available commands that I know:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"1. todo _ (e.g. todo 3)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"2. deadline \u0027task name\u0027 /by \u0027end time\u0027 (e.g. deadline Exercise /by 23-8-20)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"3. event \u0027task name\u0027 /at \u0027start time - end time\u0027 (e.g. meeting /at Sunday 2pm - 4pm)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"4. list\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"5. done _ (e.g. done 4)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"6. delete _ (e.g. delete 4)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"7. find \u0027   \u0027 (e.g. find book)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"8. sort\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"9. bye\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expected, helpCommand.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 30
    }
  },
  {
    "path": "src/test/java/duke/command/ShowCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the show list command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ShowCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ShowCommand sc \u003d new ShowCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests of empty list display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ui.emptyTaskList(), sc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests of tasklist displays."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testActualDisplay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"te\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(toDo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(ui.showTaskList(taskList, \"\"), sc.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 33
    }
  },
  {
    "path": "src/test/java/duke/command/SimpleCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidSimpleCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests for the successive word after a simple command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class SimpleCommandTest extends CommandTests {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests simple command when the succeeding word is not a number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testNotNumber() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc1 \u003d new DoneCommand(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc2 \u003d new DeleteCommand(\"awsdsa\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidSimpleCommandException.class, () -\u003e sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidSimpleCommandException.class, () -\u003e sc2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests simple command when the succeeding word is not valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidTaskNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String expectedMessage \u003d String.format(\"OOPS!!! Task number does not exist in the list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Your current list only has %d tasks!\\n\", 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc1 \u003d new DoneCommand(\"5\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        SimpleCommand sc2 \u003d new DeleteCommand(\"-2\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InvalidTaskNumberException e \u003d assertThrows("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidTaskNumberException.class, () -\u003e sc1.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        InvalidTaskNumberException e2 \u003d assertThrows("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            InvalidTaskNumberException.class, () -\u003e sc2.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedMessage, e2.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 45
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the parser with different inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests the basic commands given to the parser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputBasic() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"todo work\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"deadline return book /by 2020-08-23 10:15\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"event test /at 2-4pm\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s4 \u003d \"list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s5 \u003d \"done 5\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s6 \u003d \"delete 2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s7 \u003d \"find book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s8 \u003d \"bye\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s1) instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s2) instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s3) instanceof AddEventCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s4) instanceof ShowCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s5) instanceof DoneCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s6) instanceof DeleteCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s7) instanceof FindCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s8) instanceof ExitCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(Arrays.toString(e.getStackTrace()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests parser with inputs with random number of spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputAdvanced() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"\\t todo\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"deadline\\t\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"event \\t\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s4 \u003d \"\\nlist\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s5 \u003d \"done done\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s6 \u003d \"delete random\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s7 \u003d \"   find   \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s8 \u003d \"bye 444\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s1) instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s2) instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s3) instanceof AddEventCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s4) instanceof ShowCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s5) instanceof DoneCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s6) instanceof DeleteCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s7) instanceof FindCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s8) instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(Arrays.toString(e.getStackTrace()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests parsing with invalid words."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidInput() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s1 \u003d \"random\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s2 \u003d \"bye1\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s3 \u003d \"findd\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s4 \u003d \"    \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s5 \u003d \" do find\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s3));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s4));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(UnknownCommandException.class, () -\u003e Parser.parse(s5));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 102
    }
  },
  {
    "path": "src/test/java/duke/storage/CsvConverterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the CsvConverter on various inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CsvConverterTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests Csv converter with correctly formatted basic text."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputBasic() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"TODO  ,cs2103 tutorial  ,-  ,23 Aug 2020 @ 9.45 PM  ,Not done\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"EVENT  ,eat  ,1200-1400  ,23 Aug 2020 @ 9.45 PM  ,Not done\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"DEADLINE  ,read  ,-  ,23 Aug 2020 @ 9.45 PM  ,Done\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task todo \u003d CsvConverter.parseToTask(s1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task event \u003d CsvConverter.parseToTask(s2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task deadline \u003d CsvConverter.parseToTask(s3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check ToDo"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(todo instanceof ToDo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"cs2103 tutorial\", todo.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"23 Aug 2020 @ 9.45 PM\", todo.getTime());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(todo.isDone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check event"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(event instanceof Event);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"eat\", event.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"23 Aug 2020 @ 9.45 PM\", event.getTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(event.isDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline instanceof Deadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"read\", deadline.getDescription());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"23 Aug 2020 @ 9.45 PM\", deadline.getTime());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline.isDone());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(Arrays.toString(e.getStackTrace()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests Csv converter with correctly formatted text with multiple complicated variants."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testValidInputAdvanced() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"TODO  ,cs2103 tutorial  ,-  ,23 Aug 2020 @ 9.45 PM  ,Not Done\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"EVENT  ,eat  ,1200-1400  ,23 Aug 2020 @ 9.45 PM  ,NOt done\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"deadLinE  ,read  ,-  ,23 Aug 2020 @ 9.45 PM  ,done\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task todo \u003d CsvConverter.parseToTask(s1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task event \u003d CsvConverter.parseToTask(s2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task deadline \u003d CsvConverter.parseToTask(s3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check ToDo"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(todo instanceof ToDo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"cs2103 tutorial\", todo.getDescription());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"23 Aug 2020 @ 9.45 PM\", todo.getTime());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(todo.isDone());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check event"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(event instanceof Event);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"eat\", event.getDescription());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"23 Aug 2020 @ 9.45 PM\", event.getTime());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertFalse(event.isDone());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Check deadline"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline instanceof Deadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"read\", deadline.getDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(\"23 Aug 2020 @ 9.45 PM\", deadline.getTime());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(deadline.isDone());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(Arrays.toString(e.getStackTrace()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests CsvConverter with invalid string formats."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testInvalidFormat() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s1 \u003d \"TODO  ,cs2103 tutorial ,-  ,23 Aug 2020 @ 9.45 PM  ,Not done\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s2 \u003d \"EVENT  ,eat  ,1200-1400  ,23 Aug 2020 @ 9.45 PM  ,\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s3 \u003d \"DEADLINE  ,read  , ,23 Aug 2020 @ 9.45 PM  ,Done\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s4 \u003d \"EVENT  ,eat  ,1200-1400  ,23 Aug 2020 @ 9.45 PM  ,Not done!!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s5 \u003d \"NOTEVENT  ,eat   ,2-4pm  ,23 Aug 2020 @ 9.45 PM  ,done\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String s6 \u003d \"NOTEVENT  ,eat   ,2-4pm  ,23 Aug 2020@9.45 PM  ,done\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Tests"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s2));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s3));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s4));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s5));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertThrows(InvalidFileFormatException.class, () -\u003e CsvConverter.parseToTask(s6));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 110
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static duke.util.Keyword.DATE_TIME_OUTPUT_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.FileUpdateFailException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests interaction with user storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests updating of tasks in storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testTaskUpdate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task task1 \u003d new ToDo(\"cs2103t\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task task2 \u003d new ToDo(\"tutorial\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Task task3 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(task1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(task2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            taskList.add(task3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Update"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            storage.updateFile(taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // After updating"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            // Tests"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(3, tasks.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(task1.getDescription(), tasks.get(0).getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(task2.getDescription(), tasks.get(1).getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertEquals(task3.getDescription(), tasks.get(2).getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                assertEquals(\"TODO\", task.getTaskName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                String taskCreationTime \u003d task.getTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                LocalDateTime.parse(taskCreationTime, DateTimeFormatter.ofPattern(DATE_TIME_OUTPUT_FORMAT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (FileUpdateFailException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests updating of empty tasks in storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTasks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList emptyTaskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            storage.updateFile(emptyTaskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ArrayList\u003cTask\u003e emptyTasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(emptyTasks.isEmpty());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (FileUpdateFailException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 74
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the ToDo class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description \u003d \"workout\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests basic methods in todo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testWithDefault() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo newToDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check default"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newToDo.isDone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Not done\", newToDo.getStatus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"TODO\", newToDo.getTaskName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(description, newToDo.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[T][\\u2718] %s\", description), newToDo.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newToDo.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newToDo.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Done\", newToDo.getStatus());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[T][\\u2713] %s\", description), newToDo.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests both constructors."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testConstructor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo newTodo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newTodo.isDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newTodo \u003d new ToDo(description, true, \"-\", LocalDateTime.now());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newTodo.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests match method."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testMatch() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description1 \u003d \"man\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description2 \u003d \"Man\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description3 \u003d \"woman\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description4 \u003d \"mane\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String toMatch \u003d \"man\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(new ToDo(description1).match(toMatch));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(new ToDo(description2).match(toMatch));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(new ToDo(description3).match(toMatch));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(new ToDo(description4).match(toMatch));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 65
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the {@code TaskList} class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests all methods in task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Additions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask \u003d new ToDo(\"apple\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask2 \u003d new ToDo(\"apple and orange\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask3 \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask4 \u003d new ToDo(\"zest\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask5 \u003d new ToDo(\"war\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Basic methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.isEmpty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(5, taskList.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask, taskList.get(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.checkIfValid(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.checkIfValid(10));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.checkIfValid(-2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // On match"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList newList \u003d taskList.matchAll(\"ple\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask, newList.get(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask2, newList.get(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Deletions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.delete(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotSame(newTask, taskList.get(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertSame(newTask2, taskList.get(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertNotEquals(5, taskList.size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(4, taskList.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 62
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Tests the {@code Ui} class to ensure output to user matches."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ToDo toDo \u003d new ToDo(\"test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests goodbye method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testGoodbye() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Bye! Hope to see you again soon!\\n\", ui.goodbye());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests markTaskAsDone method."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testMarkTaskAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        toDo.markAsDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Incredible! I\u0027ve marked this task as done:\\n    [T][\\u2713] test\\n\", ui.markTaskAsDone(toDo));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests deleteTask method."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testDeleteTask() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed this task:\\n    [T][\\u2718] test\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Now you have 5 tasks in the list.\\n\", ui.deleteTask(toDo, 5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests addTask method."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\n    [T][\\u2718] test\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"Now you have 4 tasks in the list.\\n\", ui.addTask(toDo, 4));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests emptyTaskList method."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"You currently have no tasks in the list.\\n\", ui.emptyTaskList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests showTaskList method."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testShowTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo1 \u003d new ToDo(\"todo1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo2 \u003d new ToDo(\"todo2\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo toDo3 \u003d new ToDo(\"todo3\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(toDo1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(toDo2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(toDo3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Test 1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String expectedString \u003d \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"1. [T][\\u2718] todo1\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"2. [T][\\u2718] todo2\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"3. [T][\\u2718] todo3\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedString, ui.showTaskList(taskList, \"matching \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Test 2"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        expectedString \u003d \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"1. [T][\\u2718] todo1\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"2. [T][\\u2718] todo2\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            + \"3. [T][\\u2718] todo3\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(expectedString, ui.showTaskList(taskList, \"\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Tests emptyFind method."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void testEmptyFind() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"There are no matching tasks with the keyword size.\\n\", ui.emptyFind(\"size\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"There are no matching tasks with the keyword .\\n\", ui.emptyFind(\"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 99
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "todo test case"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "null"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "DEadline return book /by 2020-08-23"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 2020-08-23 10:15"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline Return Book /by 2020-08-23 19:00:35"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 00:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event /at 2 - 4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event meeting /at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline meeting /at"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline meeting /by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event project meeting /at 2019-12-01"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done sdvgfdsg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "delete asbf"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "FiND book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "find legend"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "bye 5"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "-": 20
    }
  }
]
