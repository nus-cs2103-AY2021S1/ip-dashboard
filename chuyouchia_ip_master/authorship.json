[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "# com.jacob.duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 1,
      "-": 16
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \"6.0.0\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "group \u0027org.example\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "version \u00271.0-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            srcDirs \u003d [\u0027src\u0027]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    compile \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "test {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter-api:5.5.1\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "mainClassName \u003d \u0027main.java.com.jacob.duke.Launcher\u0027"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 55
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~1~return book~2019-11-13 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~funny"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~nani what is happening to me"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "E~0~omomomo~2019-11-15 1900"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~add a random task to see if there is a separation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~funkydeadline~2019-10-15 1800"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~What is the meaning of life?~Well, its 42."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~note?~omom?"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 8
    }
  },
  {
    "path": "data/postAppend.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~1~return book~2019-11-13 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~funny"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~nani what is happening to me"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "E~0~omomomo~2019-11-15 1900"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~add a random task to see if there is a separation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~funkydeadline~2019-10-15 1800"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~added deadline for testing~2020-12-19 1800"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "E~0~added event for testing~2020-12-19 1800"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~added task for testing~2020-12-19 1800"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~What is the meaning of life?~Well, its 42."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~note?~omom?"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~Added Note for testing?~Yaz."
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 12
    }
  },
  {
    "path": "data/postRemove.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~1~return book~2019-11-13 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~funny"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~nani what is happening to me"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "E~0~omomomo~2019-11-15 1900"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~add a random task to see if there is a separation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~funkydeadline~2019-10-15 1800"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~What is the meaning of life?~Well, its 42."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~note?~omom?"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 8
    }
  },
  {
    "path": "data/preAppend.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~1~return book~2019-11-13 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~funny"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~nani what is happening to me"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "E~0~omomomo~2019-11-15 1900"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~add a random task to see if there is a separation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~funkydeadline~2019-10-15 1800"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~What is the meaning of life?~Well, its 42."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~note?~omom?"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 8
    }
  },
  {
    "path": "data/preRemove.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~1~return book~2019-11-13 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~funny"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~nani what is happening to me"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "E~0~omomomo~2019-11-15 1900"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~add a random task to see if there is a separation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~funkydeadline~2019-10-15 1800"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~added deadline for testing~2020-12-19 1800"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "E~0~added event for testing~2020-12-19 1800"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~added task for testing~2020-12-19 1800"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~What is the meaning of life?~Well, its 42."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~note?~omom?"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "N~Added Note for testing?~Yaz."
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 12
    }
  },
  {
    "path": "data/readTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~return book~2019-11-13 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~funny"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2
    }
  },
  {
    "path": "data/writeTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "D~0~omo~2019-10-15 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "T~0~omo"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 2
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 104
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private DukeList dukeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param filePath contains file where task list is saved."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dukeList \u003d storage.readFile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getResponse (String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command c \u003d parser.parse(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            String response \u003d c.execute(ui, dukeList, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            storage.writeToFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assert(response !\u003d null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 34
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor which contains the message to be printed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param message Exception message passed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DukeException (String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 12
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/DukeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.note.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DukeList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private List\u003cNote\u003e noteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Duke List, composite holder of dual storage note list and task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List of tasks stored."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param noteList List of notes stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DukeList(List\u003cTask\u003e taskList, List\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.noteList \u003d noteList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Create a taskList object to encapsulate the task list and note list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DukeList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * List containing the list of to do items."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return List containing the list of to do items."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * List containing the list of notes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return List containing the notes made"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public List\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return noteList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 49
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * UI of the Done command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskDescription The currently operated task\u0027s status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showDone(String taskDescription) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (taskDescription !\u003d null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\" Nice! I\u0027ve marked this task as done: \\n\" + taskDescription);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show UI for the newly added tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskDescription The currently operated task\u0027s status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List representation of the current task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showNewTaskAdded(String taskDescription, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (taskDescription !\u003d null \u0026\u0026 taskList !\u003d null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \" Got it. I\u0027ve added this task: \\n   %s\\n Now you have %d tasks in the list.\\n\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                taskDescription, taskList.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show UI for the delete task command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskDescription The currently operated task\u0027s status."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List representation of the current task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showTaskDeleted(String taskDescription, List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (taskDescription !\u003d null \u0026\u0026 taskList !\u003d null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\" Noted. I\u0027ve removed this task:\\n \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"   %s\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \" Now you have %d tasks in the list.\\n\", taskDescription, taskList.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show UI of the print list command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List representation of the current task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showFullList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (taskList !\u003d null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        StringBuffer currentTaskList \u003d new StringBuffer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        currentTaskList.append(\" Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (Task t: taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            currentTaskList.append(\"  \" + count + \". \" + t.getCurrentStatus() + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return currentTaskList.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show UI of the print filtered list command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Command includes the date time it is filtering for."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List representation of the current task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException Duke Exception thrown if the command is incorrect."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showFilteredDateTimeList(String inputCommand, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (inputCommand !\u003d null \u0026\u0026 taskList !\u003d null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (inputCommand.length() \u003c\u003d \"list-due \".length()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\" list-due command cannot be empty!!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //get the date time string from the initial string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String dateTime \u003d inputCommand.substring(\"list-due \".length());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        LocalDateTime dateTimeFilter \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Predicate\u003cLocalDateTime\u003e dateTimePredicate \u003d x -\u003e x.equals(dateTimeFilter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        StringBuffer dueDateList \u003d new StringBuffer();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dueDateList.append(\" Here are the tasks in your filtered list:\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (t.getDueDateTime() !\u003d null \u0026\u0026 dateTimePredicate.test(t.getDueDateTime())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                dueDateList.append(\"  \" + count + \". \" + t.getCurrentStatus() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return dueDateList.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show List of tasks with keyword."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param inputCommand Command includes keyword."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param taskList List representation of the current task list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException Throws Exception if the search string is empty."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showKeywordList(String inputCommand, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (inputCommand !\u003d null \u0026\u0026 taskList !\u003d null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (inputCommand.length() \u003c\u003d \"find \".length()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\" find command cannot be empty!!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String keyword \u003d inputCommand.substring(\"find \".length());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (keyword.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\" Search String cannot be empty!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Predicate\u003cString\u003e searchStringPredicate \u003d x -\u003e x.contains(keyword);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        StringBuffer keywordList \u003d new StringBuffer();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        keywordList.append(\" Here are the tasks in your filtered list:\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (t.getDescription() !\u003d null \u0026\u0026 searchStringPredicate.test(t.getDescription())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                keywordList.append(\"  \" + count + \". \" + t.getCurrentStatus() + \"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return keywordList.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * UI of the bye command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String sayBye() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return \" Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show UI for the newly added note."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param noteStatus The currently operated task\u0027s status."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param noteList List representation of the current task list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showNewNoteAdded(String noteStatus, List\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (noteStatus !\u003d null \u0026\u0026 noteList !\u003d null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \" Got it. I\u0027ve added this note: \\n   %s\\n Now you have %d notes in the list.\\n\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                noteStatus, noteList.size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show UI for the delete note command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param noteDescription The currently operated task\u0027s status."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param noteList List representation of the current task list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showNoteDeleted(String noteDescription, List\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (noteDescription !\u003d null \u0026\u0026 noteList !\u003d null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\" Noted. I\u0027ve removed this note:\\n \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"   %s\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \" Now you have %d notes in the list.\\n\", noteDescription, noteList.size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Show UI of the print all notes command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param noteList List representation of the current task list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String showAllNotes(List\u003cNote\u003e noteList) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (noteList !\u003d null);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        StringBuffer currentNoteList \u003d new StringBuffer();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        currentNoteList.append(\" Here are the notes you stored:\\n\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        for (Note t: noteList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            currentNoteList.append(\"  \" + count + \". \" + t.getCurrentStatus() + \"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return currentNoteList.toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 175
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes command for pre-determined ByeCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.sayBye();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return true since it is."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 29
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 12
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String inputCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Deadline Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param fullCommand with from console input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DeadlineCommand(String fullCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.inputCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes command for pre-determined Deadline Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int breakpoint \u003d inputCommand.indexOf(\"/\") - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String description \u003d inputCommand.substring(\"deadline\".length() + 1, breakpoint);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String dateTime \u003d inputCommand.substring(breakpoint + 5);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theDeadline \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(theDeadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage.appendTextToTasks(theDeadline.convertToFile());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showNewTaskAdded(theDeadline.getCurrentStatus(), taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return false since it is not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 53
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String inputCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Delete Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param fullCommand with from console input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.inputCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes command for pre-determined delete Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException In case there are internal errors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theRemovedTask \u003d taskList.remove(Integer.parseInt(inputCommand.substring(7)) - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (theRemovedTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"No such task exists! \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage.removeTextFromTasks(theRemovedTask.convertToFile());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showTaskDeleted(theRemovedTask.getCurrentStatus(), taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return false since it is not."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 51
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/DeleteNoteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DeleteNoteCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DeleteNoteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cNote\u003e noteList \u003d dukeList.getNoteList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Note theRemovedNote \u003d noteList.remove(Integer.parseInt(fullCommand.substring(\"note-delete \".length())) - 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (theRemovedNote \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"No such note exists!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage.removeTextFromNotes(theRemovedNote.convertToFileFormat());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showNoteDeleted(theRemovedNote.getCurrentStatus(), noteList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 30
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Done Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param fullCommand with from console input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes command for pre-determined Done Command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException throws exception if the note does not exist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(fullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theTask \u003d taskList.get(taskNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (theTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"No such task exists! \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String lineToEdit \u003d theTask.convertToFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        theTask.setDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String replacementText \u003d theTask.convertToFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            storage.replacementInTasks(lineToEdit, replacementText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\"Line to replace does not match any string in text: \" + e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showDone(theTask.getCurrentStatus());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return false since it is not"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 62
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String inputCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Event Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param fullCommand with from console input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public EventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.inputCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes command for pre-determined Event Command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int breakpoint \u003d inputCommand.indexOf(\"/\") - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String description \u003d inputCommand.substring(\"event\".length() + 1, breakpoint);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String dateTime \u003d inputCommand.substring(breakpoint + 5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theEvent \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(theEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage.appendTextToTasks(theEvent.convertToFile());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showNewTaskAdded(theEvent.getCurrentStatus(), taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return false since it is not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 52
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String inputCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public FindCommand(String fullCommand) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.inputCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showKeywordList(inputCommand, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 27
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/NoteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.note.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class NoteCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public NoteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int breakpoint \u003d fullCommand.indexOf(\"?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //before break is question"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String question \u003d fullCommand.substring(\"note\".length() + 1, breakpoint + 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //after break is answer till the end"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String answer \u003d fullCommand.substring(breakpoint + 1).trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Note theNote \u003d new Note(question, answer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cNote\u003e noteList \u003d dukeList.getNoteList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        noteList.add(theNote);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage.appendTextToNotes(theNote.convertToFileFormat());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showNewNoteAdded(theNote.getCurrentStatus(), noteList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 35
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/PrintFilteredListDateTimeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class PrintFilteredListDateTimeCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String inputCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Print filtered List Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param fullCommand with from console input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public PrintFilteredListDateTimeCommand(String fullCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.inputCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Execution command for pre-determined printFilteredList Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException In case there are internal errors"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showFilteredDateTimeList(inputCommand, taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return false since it is not"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 44
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/PrintListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class PrintListCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Executes command for pre-determined PrintList Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException In case there are internal errors."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showFullList(taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return false since it is not"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 34
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/PrintNoteListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class PrintNoteListCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cNote\u003e noteList \u003d dukeList.getNoteList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showAllNotes(noteList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 22
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String inputCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for To do Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param fullCommand with from console input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public TodoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.inputCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Execution command for pre-determined To-do Command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param ui UI object to deal with program output."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dukeList Task List Representation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param storage Storage object to deal with interfacing with file system."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String execute(Ui ui, DukeList dukeList, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String description \u003d inputCommand.substring(4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task theTodo \u003d new Todo(description.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(theTodo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storage.appendTextToTasks(theTodo.convertToFile());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return ui.showNewTaskAdded(theTodo.getCurrentStatus(), taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Check if it is the bye Command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return false since it is not"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public boolean isBye() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 52
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/io/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.DeleteNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.EventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.NoteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.PrintFilteredListDateTimeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.PrintListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.PrintNoteListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.TodoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Parses the full command and decides which command object to create and return for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param fullCommand the full user console input command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return Command for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws DukeException thrown when invalid message is given."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String[] splitStrings \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert(splitStrings.length \u003e\u003d 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String firstInput \u003d splitStrings[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        checkDescriptionNotEmpty(firstInput, fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        switch (firstInput) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new TodoCommand(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCorrectDateTime(splitStrings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkBreakpointExists(\"/by\", fullCommand, \"deadline\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new DeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCorrectDateTime(splitStrings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkBreakpointExists(\"/at\", fullCommand, \"event\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new EventCommand(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCommandLength(2, splitStrings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCommandLength(1, splitStrings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new PrintListCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"list-due\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCommandLength(3, splitStrings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCorrectDateTime(splitStrings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new PrintFilteredListDateTimeCommand(fullCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCommandLength(2, splitStrings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCommandLength(1, splitStrings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new ByeCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkBreakpointExists(\"?\", fullCommand, \"note\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new NoteCommand(fullCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"note-list\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCommandLength(1, splitStrings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new PrintNoteListCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"note-delete\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            checkCommandLength(2, splitStrings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            c \u003d new DeleteNoteCommand(fullCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\" :( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void checkDescriptionNotEmpty(String commandType, String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (commandType.length() + 1 \u003e\u003d fullCommand.length() \u0026\u0026 !fullCommand.equals(\"bye\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u0026\u0026 !fullCommand.equals(\"list\") \u0026\u0026 !fullCommand.equals(\"note-list\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"A \" + commandType + \" request cannot be empty!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void checkBreakpointExists(String breakpoint, String fullCommand, String commandType) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (!fullCommand.contains(breakpoint)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"Your \" + commandType + \" command is incomplete!!! It does not contain: \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    + breakpoint);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void checkCommandLength(int commandLength, String[] fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (commandLength !\u003d fullCommand.length) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"I dont recognise this command, you might have added too much stuff!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //parse date time exceptions - catches java.time.format.DateTimeParseException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void checkCorrectDateTime(String[] splitCommand) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //checks the last string parsed in full command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String dateTime \u003d splitCommand[splitCommand.length - 2] + \" \" + splitCommand[splitCommand.length - 1];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            throw new DukeException(\"Invalid Date time format: use YYYY-MM-DD kkmm(2400 format)\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 124
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/io/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.DataInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.note.Note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private StringBuffer stringBufferOfTasks \u003d new StringBuffer();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private StringBuffer stringBufferOfNotes \u003d new StringBuffer();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for the Storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param filename path of the file to be accessed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Storage(String filename) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        accessTaskListInFileSystem(getCurrentDirectory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //get current directory"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String getCurrentDirectory() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //Access the current list, creates the folder and files if they do not exist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void accessTaskListInFileSystem(String current) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String[] fileParents \u003d filename.split(\"/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String parent \u003d fileParents[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        java.nio.file.Path directoryPath \u003d java.nio.file.Paths.get(current, parent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        boolean directoryExists \u003d java.nio.file.Files.exists(directoryPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        java.nio.file.Path filePath \u003d java.nio.file.Paths.get(current, filename);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        boolean fileExists \u003d java.nio.file.Files.exists(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (!directoryExists) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Files.createDirectories(directoryPath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (!fileExists) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                Files.createFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //handleTaskCommandsFromFile"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void convertFileToTask(String[] inputs, DukeList dukeList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d dukeList.getTaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String type \u003d inputs[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int isDone \u003d Integer.parseInt(inputs[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String description \u003d inputs[2];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d dukeList.getTaskList().size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Task theTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                theTodo.setDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            taskList.add(count, theTodo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            String dateTime \u003d inputs[3];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Task theEvent \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                theEvent.setDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            taskList.add(count, theEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            dateTime \u003d inputs[3];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Task theDeadline \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                theDeadline.setDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            taskList.add(count, theDeadline);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    // convert note commands from file and turn into note objects"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void convertFileToNote(String[] inputs, DukeList dukeList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String question \u003d inputs[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String answer \u003d inputs[2];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Note note \u003d new Note(question, answer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int count \u003d dukeList.getNoteList().size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dukeList.getNoteList().add(count, note);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //handle the file lines at initialization"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void handleFileCommands(String fileLine, DukeList dukeList) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String[] inputs \u003d fileLine.split(\"~\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String type \u003d inputs[0];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //parse whether it is a note or task item"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (type.equals(\"N\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            convertFileToNote(inputs, dukeList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            stringBufferOfNotes.append(fileLine).append(\"\\r\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            convertFileToTask(inputs, dukeList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            stringBufferOfTasks.append(fileLine).append(\"\\r\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Handles the file and creates the required note and task objects based on file information."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return List which containing the task objects in a list representation."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public DukeList readFile() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        stringBufferOfTasks \u003d new StringBuffer();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        stringBufferOfNotes \u003d new StringBuffer();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        DukeList dukeList \u003d new DukeList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new InputStreamReader("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    new DataInputStream(new FileInputStream(this.filename))));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                //parse the line here and add to dukelist"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                this.handleFileCommands(line, dukeList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            //handle resource leakage"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\"The file \" + filename + \" could not be found or opened! \" + e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return dukeList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Writes the stored string buffer to the file"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void writeToFile() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            BufferedWriter bfWriter \u003d new BufferedWriter(new FileWriter(filename));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            bfWriter.write(stringBufferOfTasks.toString()); //writes the edited string buffer to the new file"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            bfWriter.write(stringBufferOfNotes.toString()); //adds the edited note buffer to the file"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            bfWriter.close(); //closes the file"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (Exception e) { //if an exception occurs"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(\"Error occurred while attempting to write to file: \" + e.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces a specific line in task buffer."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param lineToEdit text to be replaced."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param replacementText text to be replace with."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws StringIndexOutOfBoundsException in case the string cannot be found."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void replacementInTasks(String lineToEdit, String replacementText) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        replacement(lineToEdit, replacementText, stringBufferOfTasks);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Replaces a specific line in notes buffer."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param lineToEdit text to be replaced."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param replacementText text to be replace with."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @throws StringIndexOutOfBoundsException in case the string cannot be found."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void replacementInNotes(String lineToEdit, String replacementText) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        replacement(lineToEdit, replacementText, stringBufferOfNotes);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void replacement(String lineToEdit, String replacementText, StringBuffer sb) throws StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //Find the original text"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int startIndex \u003d sb.indexOf(lineToEdit);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        int endIndex \u003d startIndex + lineToEdit.length();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //replace text"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        sb.replace(startIndex, endIndex, replacementText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Add a string of text to the end of task buffer representing a task."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param addedText text to be added."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void appendTextToTasks(String addedText) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        appendText(addedText, stringBufferOfTasks);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Add a string of text to the end of notes buffer representing a note."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param addedText text to be added."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void appendTextToNotes(String addedText) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        appendText(addedText, stringBufferOfNotes);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void appendText(String addedText, StringBuffer sb) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //add a separator for the newline before appending"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String newLine \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        addedText \u003d addedText + newLine;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        sb.append(addedText);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Remove a specific line of note from string buffer."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param lineToEdit line to be removed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void removeTextFromTasks(String lineToEdit) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        removeText(lineToEdit, stringBufferOfTasks);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Remove a specific line of task from string buffer."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param lineToEdit line to be removed."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void removeTextFromNotes(String lineToEdit) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        removeText(lineToEdit, stringBufferOfNotes);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void removeText(String lineToEdit, StringBuffer sb) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String newLine \u003d System.getProperty(\"line.separator\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        lineToEdit \u003d lineToEdit + newLine;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        replacement(lineToEdit, \"\", sb);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 239
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/javafx/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 61
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/javafx/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Launches the JavaFx application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param args Passed arguments to initialize main method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //require a no argument constructor -\u003e how to pass arguments?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 18
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/javafx/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 33
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/javafx/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userChatBotIcon.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeChatBotIcon.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public MainWindow() { }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Initializes the main window with a welcome message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String startUpString \u003d \"Hi there, I am Duke! Here are some commands that you can use to talk to me :)\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"\\n\\n\\nBasic Commands:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"list: gets you list of currently stored tasks\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"bye: terminates duke\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"\\n\\n\\nAdd Commands:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"todo \u003ctask description\u003e: adds todo\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"event \u003ctask description\u003e /at \u003cYYYY-MM-DD\u003e: adds an event\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"deadline \u003ctask description\u003e /by \u003cYYYY-MM-DD\u003e: adds deadline\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"\\n\\n\\nAdditional Commands:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"delete \u003cnumber\u003e: deletes selected task\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"done \u003cnumber\u003e: marks selected task done \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"list-due \u003cYYYY-MM-DD HHMM\u003e: gets list of tasks due on that date\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                + \"find: finds any task that has a description matching the given string\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(startUpString, dukeImage));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assert (userInput.getText().equals(\"\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 76
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/note/Note.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //fields"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Note with questions and answers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param question Description of the question being asked."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param answer Description of the answer to the question."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Note(String question, String answer) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"N\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String convertToFileFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\"%s~%s~%s\", this.type, this.question, this.answer);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return \"Question is: \" + this.question + \"\\n    Answer is: \" + this.answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 44
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for basic Description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param description Task Description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Deadline(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor to parse date time format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param description Task Description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dateTime Date Time format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Deadline(String description, String dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 23
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for basic Description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param description Task Description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor to parse date time format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param description Task Description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dateTime Date Time format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Event(String description, String dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 26
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    protected LocalDateTime dueDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param description Description for Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for parsing date time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param dateTime date time of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Task(String description, String dateTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.dueDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        // example command: deadline return book /by 2019-10-15 1800"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Get status of task completion."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return Done status."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return (isDone ? \"Done\" : \"X\"); //return ✓ or X symbols"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Set task as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Get description."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return task description."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Get current status of task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return current status of task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (dueDateTime !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return \"  [\" + type + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    + \" \" + dueDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy ha\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return \"  [\" + type + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Convert the description to the format suitable for file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return String containing suitable format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public String convertToFile() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        if (dueDateTime !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            return String.format(\"%s~%s~%s~%s\", type, isDone ? 1 : 0 , getDescription(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    dueDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd kkmm\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return String.format(\"%s~%s~%s\", type, isDone ? 1 : 0, getDescription());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Get Due Date and Time parsed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @return LocalDateTime object with the date time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public LocalDateTime getDueDateTime() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        return dueDateTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 94
    }
  },
  {
    "path": "src/main/java/com/jacob/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "package main.java.com.jacob.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * Constructor for To-do."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     * @param description description of task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 15
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            fx:controller\u003d\"main.java.com.jacob.duke.javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 24
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.DeleteNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.NoteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.PrintFilteredListDateTimeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.PrintListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.PrintNoteListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.command.TodoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private static final Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //whatIsBeingTested_descriptionOfTestInputs_expectedOutcome"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnBye_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Command byeC \u003d new ByeCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command bCParsed \u003d p.parse(\"bye\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(byeC.getClass(), bCParsed.getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnDeadline_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command dLCommandParsed \u003d p.parse(\"deadline return book /by 2019-10-15 1800\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(DeadlineCommand.class, dLCommandParsed.getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnEvent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command eCommandParsed \u003d p.parse(\"event return book /at 2019-10-15 1800\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(EventCommand.class, eCommandParsed.getClass());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnTodo_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command tDCommandParsed \u003d p.parse(\"todo 2312\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(TodoCommand.class, tDCommandParsed.getClass());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command pCommandParsed \u003d p.parse(\"list\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(PrintListCommand.class, pCommandParsed.getClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnListDue_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command pFCommandParsed \u003d p.parse(\"list-due 2019-10-15 1800\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(PrintFilteredListDateTimeCommand.class, pFCommandParsed.getClass());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnFind_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command fCommandParsed \u003d p.parse(\"find book\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(FindCommand.class, fCommandParsed.getClass());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnDone_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command donCommandParsed \u003d p.parse(\"done 3\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(DoneCommand.class, donCommandParsed.getClass());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnNote_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command noteCommandParsed \u003d p.parse(\"note What is the meaning of life? 42.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(NoteCommand.class, noteCommandParsed.getClass());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnNoteDelete_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command delNoteCommandParsed \u003d p.parse(\"note-delete 3\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(DeleteNoteCommand.class, delNoteCommandParsed.getClass());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void parse_returnNoteList_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            Command noteListCommandParsed \u003d p.parse(\"note-list\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(PrintNoteListCommand.class, noteListCommandParsed.getClass());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 128
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.io.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //whatIsBeingTested_descriptionOfTestInputs_expectedOutcome"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    private final Storage storageReadObject \u003d new Storage(\"data/readTest.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void readFile_foundFile_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d storageReadObject.readFile().getTaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e dummyTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dummyTaskList.add(new Deadline(\"omo\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dummyTaskList.add(new Todo(\"omo\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(dummyTaskList.get(0).getClass(), taskList.get(0).getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(dummyTaskList.get(1).getClass(), taskList.get(1).getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void writeToFile_updateFile_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Storage storageWriteObject \u003d new Storage(\"data/writeTest.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String s1 \u003d new Deadline(\"omo\", \"2019-10-15 1800\").convertToFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String s2 \u003d new Todo(\"omo\").convertToFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageWriteObject.appendTextToTasks(s1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageWriteObject.appendTextToTasks(s2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageWriteObject.writeToFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e dummyTaskList \u003d storageWriteObject.readFile().getTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(Deadline.class, dummyTaskList.get(dummyTaskList.size() - 2).getClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(Todo.class, dummyTaskList.get(dummyTaskList.size() - 1).getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void replace_updateTextFileFromDeadlineToEventAndBack_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Storage storageWriteObject \u003d new Storage(\"data/writeTest.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //change deadline to event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e dummyTaskList \u003d storageWriteObject.readFile().getTaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String original \u003d dummyTaskList.get(0).convertToFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String replacement \u003d new Event(\"omo\", \"2019-10-15 1800\").convertToFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageWriteObject.replacementInTasks(original, replacement);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageWriteObject.writeToFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dummyTaskList \u003d storageWriteObject.readFile().getTaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(Event.class, dummyTaskList.get(dummyTaskList.size() - 2).getClass());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        //re-read the updated"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String original1 \u003d dummyTaskList.get(0).convertToFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String replacement1 \u003d new Deadline(\"omo\", \"2019-10-15 1800\").convertToFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageWriteObject.replacementInTasks(original1, replacement1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        storageWriteObject.writeToFile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        dummyTaskList \u003d storageWriteObject.readFile().getTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        System.out.println(dummyTaskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(Deadline.class, dummyTaskList.get(dummyTaskList.size() - 2).getClass());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 67
    }
  },
  {
    "path": "src/test/java/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "import main.java.com.jacob.duke.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    //whatIsBeingTested_descriptionOfTestInputs_expectedOutcome"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void showDone_omo_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String result \u003d new Ui().showDone(\"Omo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\" Nice! I\u0027ve marked this task as done: \\nOmo\", result);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void showDone_kek_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String result \u003d new Ui().showDone(\"Kek\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\" Nice! I\u0027ve marked this task as done: \\nKek\", result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void sayBye_null_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String result \u003d new Ui().sayBye();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\" Bye. Hope to see you again soon!\", result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void showNewTaskAddedToEmptyList_dummyTask_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Task task \u003d new Task(\"Dummy Task\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String result \u003d new Ui().showNewTaskAdded(\"Dummy Task\", taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\" Got it. I\u0027ve added this task: \\n   Dummy Task\\n Now you have 1 tasks in the list.\\n\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void showTaskDeleted_dummyTask_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String result \u003d new Ui().showTaskDeleted(\"Dummy Task\", taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\" Noted. I\u0027ve removed this task:\\n    Dummy Task\\n Now you have 0 tasks in the list.\\n\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                result);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void showFullList_noTasks_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String result \u003d new Ui().showFullList(taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        assertEquals(\" Here are the tasks in your list:\\n\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void showFilteredDateTimeList_checkDeadline_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Dummy Deadline\", \"2019-10-15 1800\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(new Todo(\"funny\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            String s \u003d \"Here are the tasks in your filtered list:  1.   [D][X] Dummy Deadline Oct 15 2019 6PM\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            s \u003d s.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            result \u003d new Ui().showFilteredDateTimeList(\"list-due 2019-10-15 1800\", taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            String cleanOutput \u003d result.replaceAll(\"\\n\", \"\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    .replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(s, cleanOutput.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    public void showFilteredDateTimeList_checkEvent_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        Event event \u003d new Event(\"Dummy Event\", \"2019-10-15 1800\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        taskList.add(new Todo(\"funny\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            String result \u003d new Ui().showFilteredDateTimeList(\"list-due 2019-10-15 1800\", taskList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            String s \u003d \"Here are the tasks in your filtered list:  1.   [E][X] Dummy Event Oct 15 2019 6PM\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            s \u003d s.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            final String cleanOutput \u003d result.replaceAll(\"\\n\", \"\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "                    .replaceAll(\"\\r\", \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            assertEquals(s, cleanOutput.trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "            System.out.println(d.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 98
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "deadline return book /by 2019-11-13 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "event project meeting with book /at 2019-11-15 1930"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "SET MY_PATH\u003dD:\\CY stuff\\NUS\\5. AY2020 Sem 1 Actual\\CS2103T\\ip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chuyouchia"
        },
        "content": "cmd"
      }
    ],
    "authorContributionMap": {
      "chuyouchia": 5,
      "-": 18
    }
  }
]
